eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define */\r\n\r\n/**\r\n * Defines hooks to assist with module initialization.\r\n *\r\n * This module defines 2 methods for client modules to attach callbacks:\r\n *    - htmlReady - When the main application template is rendered\r\n *    - appReady - When Brackets completes loading all modules and extensions\r\n *\r\n * These are *not* jQuery events. Each method is similar to $(document).ready\r\n * in that it will call the handler immediately if brackets is already done\r\n * loading.\r\n */\r\ndefine(\'utils/AppInit\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    // Fires when the index.html is loaded\r\n    var HTML_READY  = "htmlReady";\r\n\r\n    // Fires when all DOM (document object model) is called\r\n    var DOM_READY = "domReady";\r\n\r\n    // Fires when all extensions are loaded\r\n    var APP_READY   = "appReady";\r\n\r\n    var status      = { HTML_READY : false, DOM_READY : false, APP_READY : false },\r\n        callbacks   = {};\r\n\r\n    callbacks[HTML_READY]       = [];\r\n    callbacks[DOM_READY] = [];\r\n    callbacks[APP_READY]        = [];\r\n\r\n    function _callHandler(handler) {\r\n        try {\r\n            // TODO (issue 1034): We *could* use a $.Deferred for this, except deferred objects enter a broken\r\n            // state if any resolution callback throws an exception. Since third parties (e.g. extensions) may\r\n            // add callbacks to this, we need to be robust to exceptions\r\n            handler();\r\n        } catch (e) {\r\n            console.error("Exception when calling a \'brackets done loading\' handler:");\r\n            console.log(e.stack);\r\n        }\r\n    }\r\n\r\n    function _dispatchReady(type) {\r\n        var i,\r\n            myHandlers = callbacks[type];\r\n\r\n        // mark this status complete\r\n        status[type] = true;\r\n\r\n        for (i = 0; i < myHandlers.length; i++) {\r\n            _callHandler(myHandlers[i]);\r\n        }\r\n\r\n        // clear all callbacks after being called\r\n        callbacks[type] = [];\r\n    }\r\n\r\n    function _addListener(type, callback) {\r\n        if (status[type]) {\r\n            _callHandler(callback);\r\n        } else {\r\n            callbacks[type].push(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a callback for the htmlReady hook. Handlers are called after the\r\n     * index.html is load.\r\n     * @param {function} handler\r\n     */\r\n    function htmlReady(callback) {\r\n        _addListener(HTML_READY, callback);\r\n    }\r\n\r\n    /**\r\n     * Adds a callback for the domReady hook. Handlers are called after\r\n     * all the dynamic DOM construction is completed.\r\n     * @param {function} handler\r\n     */\r\n    function domReady(callback) {\r\n        _addListener(DOM_READY, callback);        \r\n    }    \r\n\r\n    /**\r\n     * Adds a callback for the ready hook. Handlers are called after\r\n     * htmlReady is done, the initial project is loaded, and all extensions are\r\n     * loaded.\r\n     * @param {function} handler\r\n     */\r\n    function appReady(callback) {\r\n        _addListener(APP_READY, callback);\r\n    }\r\n\r\n    exports.htmlReady = htmlReady;\r\n    exports.domReady  = domReady;\r\n    exports.appReady  = appReady;\r\n    \r\n    exports.HTML_READY = HTML_READY;\r\n    exports.DOM_READY  = DOM_READY;\r\n    exports.APP_READY  = APP_READY;\r\n\r\n    // internal use only\r\n    exports._dispatchReady = _dispatchReady;\r\n});\r\n\n//# sourceURL=/utils/AppInit.js'),eval("/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define*/\r\n\r\n/**\r\n * Global object.\r\n *\r\n * To get a global object, see the following code.\r\n *\r\n * ```\r\n * var global = app.getModule('core/Global').global;\r\n * ```\r\n */\r\ndefine('core/Global',['require','exports','module'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    /*\r\n     * Define core app namespace if it isn't already defined\r\n     *\r\n     * We can't simply do 'app = {}' to define it in the global namespace because\r\n     * we're in \"use strict\" mode. Most likely, 'window' will always point to the global\r\n     * object when this code is running. However, in case it isn't (e.g. if we're running\r\n     * inside Node for CI testing) we use this trick to get the global object.\r\n     *\r\n     * Taken from:\r\n     *   http://stackoverflow.com/questions/3277182/how-to-get-the-global-object-in-javascript\r\n     *\r\n     * @private\r\n     */\r\n    var Fn = Function, _global = (new Fn(\"return this\"))();\r\n\r\n    // for meta object\r\n    _global.meta = {};\r\n\r\n    // for types\r\n    _global.type = {};\r\n\r\n    // for rules\r\n    _global.rules = {};\r\n\r\n    /**\r\n     * Array Extension\r\n     */\r\n\r\n    Array.prototype.indexOf = function (item) {\r\n        for (var i = 0, l = this.length; i < l; i++) {\r\n            if (i in this && this[i] === item) return i;\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    Array.prototype.clear = function () {\r\n        this.length = 0;\r\n    };\r\n\r\n    Array.prototype.add = function (item) {\r\n        return this.push(item);\r\n    };\r\n\r\n    Array.prototype.remove = function (item) {\r\n        var index = this.indexOf(item);\r\n        if (index > -1) {\r\n            this.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    Array.prototype.removeAt = function (index) {\r\n        return this.splice(index, 1);\r\n    };\r\n\r\n    Array.prototype.insert = function (index, item) {\r\n        return this.splice(index, 0, item);\r\n    };\r\n\r\n    Array.prototype.contains = function (item) {\r\n        return this.indexOf(item) > -1;\r\n    };\r\n\r\n    /**\r\n     * Math Extension\r\n     */\r\n\r\n    Math.square = function (x) {\r\n        return x * x;\r\n    };\r\n\r\n    Math.trunc = function (n) {\r\n        return ~~n;\r\n    };\r\n\r\n    exports.global = _global;\r\n\r\n});\r\n\r\n\n//# sourceURL=/core/Global.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n// TODO: KendoUI를 써서도 동적인 UI 개발이 가능하도록 할 수 있을듯. (아래 참고)\r\n/*\r\n * (플러그인 개발자는 KendoUI를 몰라도 가능해야 한다. HTML/CSS 수준으로 UI 확장 가능하도록 해야 함.)\r\n *\r\n * 1. 플러그인은 직접 HTML 코드를 삽입한다. CSS class를 지정한다.\r\n * 2. htmlReady 시에, jQuery selector를 사용해서 특정 CSS class를 모두 선택하여 kendoUI 위젯화 시킨다.\r\n *      e.g.) $(".ui-dropdown").kendoDropdown(..)\r\n * 3. 코드에서 이벤트를 받거나 하고 싶으면 id 값을 이용하도록 한다.\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global require, define, $, _, document, window, navigator, appshell, localStorage, Mustache */\r\n\r\ndefine(\'utils/Initializer\',[\'require\',\'exports\',\'module\',\'core/Global\',\'text!config.json\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var _global    = require("core/Global").global,\r\n        configJSON = require("text!config.json");\r\n\r\n    // Initialize global namespace\r\n    if (!_global.app) {\r\n        _global.app = {};\r\n        _global.staruml = _global.app; // Delete this in the future\r\n    }\r\n\r\n    // Determine OS/platform\r\n    if (_global.navigator.platform === "MacIntel" || _global.navigator.platform === "MacPPC") {\r\n        _global.app.platform = "mac";\r\n    } else if (_global.navigator.platform.indexOf("Linux") >= 0) {\r\n        _global.app.platform = "linux";\r\n    } else {\r\n        _global.app.platform = "win";\r\n    }\r\n\r\n    // Load config.json - Parse src/config.json\r\n    try {\r\n        _global.app.metadata = JSON.parse(configJSON);\r\n        _global.app.config = _global.app.metadata.config;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n\r\n    // Are we in a desktop shell with a native menu bar?\r\n    _global.app.inBrowser = (!appshell);\r\n    _global.app.nativeMenus = (!_global.app.inBrowser && (_global.app.platform !== "linux"));\r\n\r\n    // Locale-related APIs\r\n    _global.app.isLocaleDefault = function () {\r\n        return !_global.localStorage.getItem("locale");\r\n    };\r\n\r\n    _global.app.getLocale = function () {\r\n        // By default use the locale that was determined in brackets.js\r\n        return _global.localStorage.getItem("locale") || _global.require.s.contexts._.config.locale;\r\n    };\r\n\r\n    _global.app.setLocale = function (locale) {\r\n        if (locale) {\r\n            _global.localStorage.setItem("locale", locale);\r\n        } else {\r\n            _global.localStorage.removeItem("locale");\r\n        }\r\n    };\r\n\r\n    // Require module for using in extension\r\n    _global.app.libRequire = _global.require;\r\n\r\n    // Require for loading modules in extensions\r\n    _global.app.getModule = require;\r\n\r\n    // App name\r\n    _global.app.name = \'staruml\';\r\n\r\n});\r\n\n//# sourceURL=/utils/Initializer.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, loopfunc: true */\r\n/*global define */\r\n\r\ndefine(\'core/IdGenerator\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    /**\r\n     * Counter for IdGenerator\r\n     * @private\r\n     */\r\n    var idGeneratorCounter = Math.floor(Math.random() * 65536);\r\n\r\n    /**\r\n     * IdGenerator\r\n     * @private\r\n     */\r\n    var _idGenerator = null;\r\n\r\n    /**\r\n     * Table for base64\r\n     * @onst\r\n     */\r\n    var tableStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";\r\n    var table = tableStr.split("");\r\n\r\n    /**\r\n     * atob\r\n     * @private\r\n     */\r\n    function atob(base64) {\r\n        if (/(=[^=]+|={3,})$/.test(base64)) throw new Error("String contains an invalid character");\r\n        base64 = base64.replace(/=/g, "");\r\n        var n = base64.length & 3;\r\n        if (n === 1) throw new Error("String contains an invalid character");\r\n        for (var i = 0, j = 0, len = base64.length / 4, bin = []; i < len; ++i) {\r\n            var a = tableStr.indexOf(base64[j++] || "A"),\r\n                b = tableStr.indexOf(base64[j++] || "A");\r\n            var c = tableStr.indexOf(base64[j++] || "A"),\r\n                d = tableStr.indexOf(base64[j++] || "A");\r\n            if ((a | b | c | d) < 0) throw new Error("String contains an invalid character");\r\n            bin[bin.length] = ((a << 2) | (b >> 4)) & 255;\r\n            bin[bin.length] = ((b << 4) | (c >> 2)) & 255;\r\n            bin[bin.length] = ((c << 6) | d) & 255;\r\n        }\r\n        return String.fromCharCode.apply(null, bin).substr(0, bin.length + n - 4);\r\n    }\r\n\r\n    /**\r\n     * btoa\r\n     * @private\r\n     */\r\n    function btoa(bin) {\r\n        for (var i = 0, j = 0, len = bin.length / 3, base64 = []; i < len; ++i) {\r\n            var a = bin.charCodeAt(j++),\r\n                b = bin.charCodeAt(j++),\r\n                c = bin.charCodeAt(j++);\r\n            if ((a | b | c) > 255) throw new Error("String contains an invalid character");\r\n            base64[base64.length] = table[a >> 2] + table[((a << 4) & 63) | (b >> 4)] +\r\n                (isNaN(b) ? "=" : table[((b << 2) & 63) | (c >> 6)]) +\r\n                (isNaN(b + c) ? "=" : table[c & 63]);\r\n        }\r\n        return base64.join("");\r\n    }\r\n\r\n    /**\r\n     * hexToBase64\r\n     * @private\r\n     */\r\n    function hexToBase64(str) {\r\n        return btoa(String.fromCharCode.apply(null,\r\n            str.replace(/\\r|\\n/g, "").replace(/([\\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")));\r\n    }\r\n\r\n    /**\r\n     * base64ToHex\r\n     * @private\r\n     */\r\n    function base64ToHex(str) {\r\n        for (var i = 0, bin = atob(str.replace(/[ \\r\\n]+$/, "")), hex = []; i < bin.length; ++i) {\r\n            var tmp = bin.charCodeAt(i).toString(16);\r\n            if (tmp.length === 1) tmp = "0" + tmp;\r\n            hex[hex.length] = tmp;\r\n        }\r\n        return hex.join(" ");\r\n    }\r\n\r\n    /**\r\n     * IdGenerator\r\n     *\r\n     * @constructor\r\n     */\r\n    function IdGenerator() {\r\n    }\r\n\r\n    IdGenerator.prototype.setBaseHex = function (val) {\r\n        this.baseHex = val;\r\n    };\r\n\r\n    IdGenerator.prototype.toHex = function (digit, num) {\r\n        var fill, hex, r;\r\n        hex = num.toString(16);\r\n        if (hex.length < digit) {\r\n            r = digit - hex.length;\r\n            fill = new Array(r + 1).join("0");\r\n            hex = fill + hex;\r\n        }\r\n        return hex;\r\n    };\r\n\r\n    IdGenerator.prototype.generate = function () {\r\n        var base64, counter, counterHex, hex, random, randomHex, timestamp, timestampHex;\r\n        timestamp = (new Date()).getTime();\r\n        counter = idGeneratorCounter;\r\n        idGeneratorCounter++;\r\n        if (idGeneratorCounter > 65535) {\r\n            idGeneratorCounter = 0;\r\n        }\r\n        random = Math.floor(Math.random() * 65536);\r\n        timestampHex = this.toHex(16, timestamp);\r\n        counterHex = this.toHex(4, counter);\r\n        randomHex = this.toHex(4, random);\r\n        hex = this.baseHex + timestampHex + counterHex + randomHex;\r\n        base64 = hexToBase64(hex);\r\n        return base64;\r\n    };\r\n\r\n    /**\r\n     * Set GUID Base\r\n     */\r\n    function setGuidBase(baseHex) {\r\n        _idGenerator = new IdGenerator();\r\n        _idGenerator.setBaseHex(baseHex);\r\n    }\r\n\r\n    /**\r\n     * Set GUID Base as Number\r\n     */\r\n    function setGuidBaseNum(baseNum) {\r\n        _idGenerator = new IdGenerator();\r\n        _idGenerator.setBaseHex(_idGenerator.toHex(24, baseNum));\r\n    }\r\n\r\n    /**\r\n     * Generate GUID\r\n     */\r\n    function generateGuid() {\r\n        if (_idGenerator === null) {\r\n            _idGenerator = new IdGenerator("");\r\n        }\r\n        return _idGenerator.generate();\r\n    }\r\n\r\n    // Public API\r\n    exports.setGuidBase    = setGuidBase;\r\n    exports.setGuidBaseNum = setGuidBaseNum;\r\n    exports.generateGuid   = generateGuid;\r\n\r\n});\r\n\r\n\n//# sourceURL=/core/IdGenerator.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, _*/\r\n\r\ndefine(\'core/Graphics\',[\'require\',\'exports\',\'module\',\'core/Global\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var _global = require("core/Global").global;\r\n\r\n    /**\r\n     * Default Color Palette\r\n     */\r\n    var DEFAULT_COLOR_PALETTE = [\r\n        "#d8f2ff", "#d8e5ff", "#d8d8ff", "#ebd8ff", "#ffd8ff", "#ffd8eb", "#ffd8d8", "#ffe2d8", "#ffebd8", "#fff5d8", "#ffffd8", "#ebffd8", "#d8ffd8", "#d8ffeb", "#d8fff8", "#ffffff",\r\n        "#a3e0ff", "#adc8ff", "#adadff", "#d6adff", "#ffa3ff", "#ffadd6", "#ffadad", "#ffc1ad", "#ffd6ad", "#ffeaad", "#ffff91", "#d1ffa3", "#a3ffa3", "#a3ffd1", "#91ffec", "#e2e2e2",\r\n        "#6dceff", "#82abff", "#8282ff", "#c082ff", "#ff6dff", "#ff82c0", "#ff8282", "#ffa182", "#ffc082", "#ffdf82", "#ffff49", "#b6ff6d", "#6dff6d", "#6dffb6", "#49ffe0", "#c6c6c6",\r\n        "#38bcff", "#568eff", "#5656ff", "#aa56ff", "#ff38ff", "#ff56aa", "#ff5656", "#ff8056", "#ffaa56", "#ffd456", "#ffff00", "#9bff38", "#38ff38", "#38ff9b", "#00ffd4", "#aaaaaa",\r\n        "#00a9ff", "#2b71ff", "#2b2bff", "#952bff", "#ff00ff", "#ff2b95", "#ff2b2b", "#ff602b", "#ff952b", "#ffca2b", "#d8d800", "#7fff00", "#00ff00", "#00ff7f", "#00d8b4", "#8e8e8e",\r\n        "#008ed6", "#0055ff", "#0000ff", "#7f00ff", "#d600d6", "#ff007f", "#ff0000", "#ff3f00", "#ff7f00", "#ffbf00", "#b7b700", "#6cd800", "#00d600", "#00d369", "#00b799", "#707070",\r\n        "#0073ad", "#0044cc", "#0000d1", "#6600cc", "#ad00ad", "#cc0066", "#d10000", "#d63500", "#d16800", "#cc9900", "#969600", "#59b200", "#00ad00", "#00a854", "#00967d", "#545454",\r\n        "#005884", "#003399", "#0000a0", "#4c0099", "#840084", "#99004c", "#a00000", "#a82a00", "#a05000", "#997200", "#757500", "#468c00", "#008400", "#007c3e", "#007561", "#383838",\r\n        "#003d5b", "#002266", "#000070", "#330066", "#5b005b", "#660033", "#700000", "#7a1e00", "#703800", "#664c00", "#545400", "#336600", "#005b00", "#005128", "#005446", "#1c1c1c",\r\n        "#002133", "#001133", "#00003f", "#190033", "#330033", "#330019", "#3f0000", "#4c1300", "#3f1f00", "#332600", "#333300", "#1f3f00", "#003300", "#002613", "#00332a", "#000000"\r\n    ];\r\n\r\n    /**\r\n     * Alignment Kind\r\n     * @enum {number}\r\n     */\r\n    var AL_LEFT   = 0,\r\n        AL_RIGHT  = 1,\r\n        AL_CENTER = 2,\r\n        AL_TOP    = 3,\r\n        AL_BOTTOM = 4,\r\n        AL_MIDDLE = 5;\r\n\r\n    /**\r\n     * Font Styles\r\n     * @const {number}\r\n     */\r\n    var FS_NORMAL      = 0,\r\n        FS_BOLD        = 1,\r\n        FS_ITALIC      = 2,\r\n        FS_BOLD_ITALIC = 3;\r\n\r\n    /**\r\n     * Degree 값을 Radian 값으로 변환\r\n     * @param {number} degree\r\n     * @return {number} - radian\r\n     */\r\n    function toRadian(degree) {\r\n        return degree * Math.PI / 180;\r\n    }\r\n\r\n    /**\r\n     * Radian 값을 Degree 값으로 변환\r\n     * @param {number} radin\r\n     * @return {number} - degree\r\n     */\r\n    function toDegree(radian) {\r\n        return radian * (180 / Math.PI);\r\n    }\r\n\r\n\r\n    /**\r\n     * Point\r\n     * @constructor\r\n     */\r\n    function Point(x, y) {\r\n\r\n        /** @member {number} */\r\n        this.x = x;\r\n\r\n        /** @member {number} */\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * Copy Point\r\n     * @return {Point} self-copied object\r\n     */\r\n    Point.prototype.copy = function () {\r\n        return new Point(this.x, this.y);\r\n    };\r\n\r\n    /**\r\n     * Add point\r\n     * @param {Point} p - add p.x to x and p.y to y\r\n     */\r\n    Point.prototype.add = function (p) {\r\n        this.x += p.x;\r\n        this.y += p.y;\r\n    };\r\n\r\n    /**\r\n     * Set point\'s coordinate x, y\r\n     * @param {number} x\r\n     * @param {number} y\r\n     */\r\n    Point.prototype.setPoint = function (x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    };\r\n\r\n    /**\r\n     * Set point\'s coordinate x, y of p\r\n     * @param {Point} p\r\n     */\r\n    Point.prototype.setPoint2 = function (p) {\r\n        this.x = p.x;\r\n        this.y = p.y;\r\n    };\r\n\r\n    /**\r\n     * Quantize point\'s coordinate x, y\r\n     * @param {Point} p\r\n     */\r\n    Point.prototype.quantize = function () {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n    };\r\n\r\n\r\n    /**\r\n     * Rect Class\r\n     * @constructor\r\n     */\r\n    function Rect(x1, y1, x2, y2) {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n    }\r\n\r\n    /**\r\n     * Copy Rect\r\n     * @return {Rect} self-copied rect object\r\n     */\r\n    Rect.prototype.copy = function () {\r\n        return new Rect(this.x1, this.y1, this.x2, this.y2);\r\n    };\r\n\r\n    /**\r\n     * Add a point to Rect (same as move Rect as p.x and p.y)\r\n     * @param {Point} p\r\n     */\r\n    Rect.prototype.add = function (p) {\r\n        this.x1 += p.x;\r\n        this.y1 += p.y;\r\n        this.x2 += p.x;\r\n        this.y2 += p.y;\r\n    };\r\n\r\n    /**\r\n     * Set Rect\'s coordinates\r\n     * @param {number} x1\r\n     * @param {number} y1\r\n     * @param {number} x2\r\n     * @param {number} y2\r\n     */\r\n    Rect.prototype.setRect = function (x1, y1, x2, y2) {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n    };\r\n\r\n    /**\r\n     * Set Rect\'s coordinates from r\r\n     * @param {Rect} r\r\n     */\r\n    Rect.prototype.setRect2 = function (r) {\r\n        this.x1 = r.x1;\r\n        this.y1 = r.y1;\r\n        this.x2 = r.x2;\r\n        this.y2 = r.y2;\r\n    };\r\n\r\n    /**\r\n     * Set Rect\'s coordinates\r\n     * @param {Point} p1\r\n     * @param {Point} p2\r\n     */\r\n    Rect.prototype.setRect3 = function (p1, p2) {\r\n        this.x1 = p1.x;\r\n        this.y1 = p1.y;\r\n        this.x2 = p2.x;\r\n        this.y2 = p2.y;\r\n    };\r\n\r\n    /**\r\n     * Expand Rect as delta\r\n     * @param {number} delta\r\n     */\r\n    Rect.prototype.expand = function (delta) {\r\n        this.x1 = this.x1 - delta;\r\n        this.y1 = this.y1 - delta;\r\n        this.x2 = this.x2 + delta;\r\n        this.y2 = this.y2 + delta;\r\n    };\r\n\r\n    /**\r\n     * Union r into this rect. (this rect and r should be normalized)\r\n     * @param {Rect} r\r\n     */\r\n    Rect.prototype.union = function (r) {\r\n        if (r.x1 < this.x1) { this.x1 = r.x1; }\r\n        if (r.y1 < this.y1) { this.y1 = r.y1; }\r\n        if (r.x2 > this.x2) { this.x2 = r.x2; }\r\n        if (r.y2 > this.y2) { this.y2 = r.y2; }\r\n    };\r\n\r\n    /**\r\n     * Get Center point of Rect\r\n     * @return {Point}\r\n     */\r\n    Rect.prototype.getCenter = function () {\r\n        return new Point(Math.floor((this.x1 + this.x2) / 2), Math.floor((this.y1 + this.y2) / 2));\r\n    };\r\n\r\n    /**\r\n     * Get width of Rect\r\n     * @return {number}\r\n     */\r\n    Rect.prototype.getWidth = function () {\r\n        return Math.abs(this.x2 - this.x1);\r\n    };\r\n\r\n    /**\r\n     * Get height of Rect\r\n     * @return {number}\r\n     */\r\n    Rect.prototype.getHeight = function () {\r\n        return Math.abs(this.y2 - this.y1);\r\n    };\r\n\r\n    /**\r\n     * Get ratio percent : (width / height) * 100\r\n     * @return {number}\r\n     */\r\n    Rect.prototype.getRatioPercent = function () {\r\n        return (this.getWidth() * 100) / this.getHeight();\r\n    };\r\n\r\n    /**\r\n     * Quantize coordinates of rect\r\n     */\r\n    Rect.prototype.quantize = function () {\r\n        this.x1 = Math.round(this.x1);\r\n        this.y1 = Math.round(this.y1);\r\n        this.x2 = Math.round(this.x2);\r\n        this.y2 = Math.round(this.y2);\r\n    };\r\n\r\n    /**\r\n     * Color Object\r\n     */\r\n    var Color = {\r\n        BLACK:      "#000000",\r\n        WHITE:      "#FFFFFF",\r\n        DARK_GRAY:  "#404040",\r\n        LIGHT_GRAY: "#C0C0C0",\r\n        RED:        "#FF0000",\r\n        GREEN:      "#00FF00",\r\n        BLUE:       "#0000FF",\r\n        CYAN:       "#00FFFF",\r\n        MAGENTA:    "#FF00FF",\r\n        ORANGE:     "#FFC800",\r\n        PINK:       "#FFAFAF",\r\n        YELLOW:     "#FFFF00"\r\n    };\r\n\r\n\r\n    _global.meta.Font = {\r\n        kind: \'datatype\'\r\n    };\r\n\r\n    /**\r\n     * Font\r\n     * @constructor\r\n     */\r\n    function Font(face, size, style) {\r\n        this.face = (face ? face : "Arial");\r\n        this.size = (size ? size : 12);\r\n        this.style = (style ? style : FS_NORMAL);\r\n    }\r\n\r\n    /**\r\n     * Set Font\r\n     * @param {string} face\r\n     * @param {number} size\r\n     * @param {number} style\r\n     */\r\n    Font.prototype.set = function (face, size, style) {\r\n        this.face = face;\r\n        this.size = size;\r\n        this.style = style;\r\n    };\r\n\r\n    /**\r\n     * Assign Font\r\n     * @param {font}\r\n     */\r\n    Font.prototype.assign = function (font) {\r\n        this.set(font.face, font.size, font.style);\r\n    };\r\n\r\n    /**\r\n     * Copy Font\r\n     * @return {font} self-copied Font object\r\n     */\r\n    Font.prototype.copy = function () {\r\n        var font = new Font(this.face, this.size, this.style);\r\n        return font;\r\n    };\r\n\r\n    /**\r\n     * Define custom write method\r\n     * - Refer to Core.Writer.prototype.writeCustom\r\n     */\r\n    Font.prototype.__write = function () {\r\n        return this.face + ";" + this.size + ";" + this.style;\r\n    };\r\n\r\n    /**\r\n     * Define custom read method\r\n     * - Refer to Core.Reader.prototype.readCustom\r\n     */\r\n    Font.prototype.__read = function (value) {\r\n        var terms;\r\n        terms = value.split(";");\r\n        if (terms[0] !== "?") {\r\n            this.face = terms[0];\r\n        }\r\n        if (terms[1] !== "?") {\r\n            this.size = terms[1] * 1;\r\n        }\r\n        if (terms[2] !== "?") {\r\n            this.style = terms[2] * 1;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * ZoomFactor\r\n     * @constructor\r\n     */\r\n    function ZoomFactor(numer, denom) {\r\n        this.numer = numer;\r\n        this.denom = denom;\r\n    }\r\n\r\n    /**\r\n     * Set Scale\r\n     * @param {number} value - scale value between 0..1\r\n     */\r\n    ZoomFactor.prototype.setScale = function (value) {\r\n        this.numer = value;\r\n        this.denom = 1;\r\n    };\r\n\r\n    /**\r\n     * Get Scale\r\n     * @return {number} scale value between 0..1\r\n     */\r\n    ZoomFactor.prototype.getScale = function () {\r\n        return this.numer / this.denom;\r\n    };\r\n\r\n\r\n    /**\r\n     * GridFactor\r\n     * @constructor\r\n     */\r\n    function GridFactor(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    GridFactor.NO_GRID = new GridFactor(1, 1);\r\n\r\n\r\n    _global.meta.Points = {\r\n        kind: \'datatype\'\r\n    };\r\n\r\n    /**\r\n     * Points\r\n     * @constructor\r\n     */\r\n    function Points() {\r\n        this.points = [];\r\n    }\r\n\r\n    /**\r\n     * Clear points\r\n     */\r\n    Points.prototype.clear = function () {\r\n        this.points.length = 0;\r\n    };\r\n\r\n    /**\r\n     * Copy points\r\n     * @return {Points}\r\n     */\r\n    Points.prototype.copy = function () {\r\n        var pts;\r\n        pts = new Points();\r\n        pts.assign(this);\r\n        return pts;\r\n    };\r\n\r\n    /**\r\n     * Assign given Points object to this points\r\n     * @param {Points} pts\r\n     */\r\n    Points.prototype.assign = function (pts) {\r\n        this.points.length = 0;\r\n        for (var i = 0, len = pts.points.length; i < len; i++) {\r\n            var p = pts.points[i];\r\n            this.points.add(p.copy());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add a point\r\n     * @param {Point} p\r\n     */\r\n    Points.prototype.add = function (p) {\r\n        this.points.add(p);\r\n    };\r\n\r\n    /**\r\n     * Insert a point at a specific index\r\n     * @param {number} index\r\n     * @param {Point} p\r\n     */\r\n    Points.prototype.insert = function (index, p) {\r\n        this.points.insert(index, p);\r\n    };\r\n\r\n    /**\r\n     * Remove a point at index\r\n     * @param {number} index\r\n     */\r\n    Points.prototype.remove = function (index) {\r\n        this.points.removeAt(index);\r\n    };\r\n\r\n    /**\r\n     * Replace a point p at index\r\n     * @param {number} index\r\n     * @param {Point} p\r\n     */\r\n    Points.prototype.setPoint = function (index, p) {\r\n        this.points[index] = p;\r\n    };\r\n\r\n    /**\r\n     * Replace x, y of the point at index\r\n     * @param {number} index\r\n     * @param {number} x\r\n     * @param {number} y\r\n     */\r\n    Points.prototype.setPoint2 = function (index, x, y) {\r\n        this.points[index].x = x;\r\n        this.points[index].y = y;\r\n    };\r\n\r\n    /**\r\n     * Get Point at index\r\n     * @param {number} index\r\n     * @return {Point}\r\n     */\r\n    Points.prototype.getPoint = function (index) {\r\n        return this.points[index];\r\n    };\r\n\r\n    /**\r\n     * Return all x values of all points\r\n     * @return {Array.<number>}\r\n     */\r\n    Points.prototype.getXPoints = function () {\r\n        var p, xs, _i, _len, _ref;\r\n        xs = [];\r\n        _ref = this.points;\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n            p = _ref[_i];\r\n            xs.push(p.x);\r\n        }\r\n        return xs;\r\n    };\r\n\r\n    /**\r\n     * Return all y values of all points\r\n     * @return {Array.<number>}\r\n     */\r\n    Points.prototype.getYPoints = function () {\r\n        var p, ys, _i, _len, _ref;\r\n        ys = [];\r\n        _ref = this.points;\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n            p = _ref[_i];\r\n            ys.push(p.y);\r\n        }\r\n        return ys;\r\n    };\r\n\r\n    /**\r\n     * Return number of points\r\n     * @return {number}\r\n     */\r\n    Points.prototype.count = function () {\r\n        return this.points.length;\r\n    };\r\n\r\n    /**\r\n     * Reduce points for orthogonal line\r\n     */\r\n    Points.prototype.reduceOrthoLine = function () {\r\n        var i = 0;\r\n        while (i < this.points.length - 2) {\r\n            var p1 = this.getPoint(i).copy(),\r\n                p2 = this.getPoint(i + 1).copy(),\r\n                p3 = this.getPoint(i + 2).copy();\r\n            if ((p1.x === p2.x) && (p1.y === p2.y)) {\r\n                this.remove(i);\r\n            } else if (((p1.x === p2.x) && (p2.x === p3.x)) || ((p1.y === p2.y) && (p2.y === p3.y))) {\r\n                this.remove(i + 1);\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reduce points for line\r\n     */\r\n    Points.prototype.reduceLine = function () {\r\n        var i = 0;\r\n        while (i < this.points.length - 2) {\r\n            var p1 = this.getPoint(i).copy(),\r\n                p2 = this.getPoint(i + 1).copy(),\r\n                p3 = this.getPoint(i + 2).copy();\r\n            if (Coord.equalPt(p1, p2)) {\r\n                this.remove(i);\r\n            } else if (Coord.ptsInLine(p1, p2, p3)) {\r\n                this.remove(i + 1);\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Return wether is this rectilinear line or not\r\n     */\r\n    Points.prototype.isRectilinear = function () {\r\n        for (var i = 1, len = this.points.length; i < len; i++) {\r\n            var p0 = this.points[i-1];\r\n            var p1 = this.points[i];\r\n            if ((p0.x !== p1.x) && (p0.y !== p1.y)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Convert oblique line to rectilinear line\r\n     */\r\n    Points.prototype.convObliqueToRectilinear = function () {\r\n        var i = 0;\r\n        while (i < this.count() - 1) {\r\n            this.insert(i + 1, Coord.makeOrthoPt(this.getPoint(i), this.getPoint(i + 1)));\r\n            i = i + 2;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get bounding box\r\n     * @return {Rect}\r\n     */\r\n    Points.prototype.getBoundingRect = function () {\r\n        var p, r, _i, _len, _ref;\r\n        r = new Rect(this.getPoint(0).x, this.getPoint(0).y, this.getPoint(0).x, this.getPoint(0).y);\r\n        _ref = this.points;\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n            p = _ref[_i];\r\n            r.setRect2(Coord.unionRect(r, new Rect(p.x, p.y, p.x + 1, p.y + 1)));\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * Quantize\r\n     * @return {Rect}\r\n     */\r\n    Points.prototype.quantize = function () {\r\n        for (var i = 0, len = this.points.length; i < len; i++) {\r\n            var p = this.points[i];\r\n            p.x = Math.round(p.x);\r\n            p.y = Math.round(p.y);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Define custom write method\r\n     * - Refer to Core.Writer.prototype.writeCustom\r\n     */\r\n    Points.prototype.__write = function () {\r\n        var p, result, _i, _len, _ref;\r\n        result = [];\r\n        _ref = this.points;\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n            p = _ref[_i];\r\n            result.push(p.x + ":" + p.y);\r\n        }\r\n        return result.join(";");\r\n    };\r\n\r\n    /**\r\n     * Define custom read method\r\n     * - Refer to Core.Reader.prototype.readCustom\r\n     */\r\n    Points.prototype.__read = function (value) {\r\n        var p, t, terms, x, y, _i, _len;\r\n        this.points = [];\r\n        terms = value.split(";");\r\n        for (_i = 0, _len = terms.length; _i < _len; _i++) {\r\n            t = terms[_i];\r\n            p = t.split(":");\r\n            x = p[0] * 1;\r\n            y = p[1] * 1;\r\n            this.points.push(new Point(x, y));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Coordination utility object\r\n     * @namespace\r\n     */\r\n    var Coord = {};\r\n\r\n\r\n    /**\r\n     * transform value as a given zoonFactor\r\n     * @function\r\n     */\r\n    Coord.valueTransform = function (zf, value) {\r\n        var f;\r\n        f = zf.numer / zf.denom;\r\n        return f * value;\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.coordTransform = function (zf, gf, p) {\r\n        var f, x, y;\r\n        x = p.x;\r\n        y = p.y;\r\n        x = x - (x % gf.width);\r\n        y = y - (y % gf.height);\r\n        f = zf.numer / zf.denom;\r\n        x = f * x;\r\n        y = f * y;\r\n        return p.setPoint(x, y);\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.coordTransform2 = function (zf, gf, r) {\r\n        var p1, p2;\r\n        p1 = new Point(r.x1, r.y1);\r\n        p2 = new Point(r.x2, r.y2);\r\n        Coord.coordTransform(zf, gf, p1);\r\n        Coord.coordTransform(zf, gf, p2);\r\n        return r.setRect(p1.x, p1.y, p2.x, p2.y);\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.coordRevTransform = function (zf, gf, p) {\r\n        var f, x, y;\r\n        x = p.x;\r\n        y = p.y;\r\n        f = zf.numer / zf.denom;\r\n        x = x / f;\r\n        y = y / f;\r\n        x = x - (x % gf.width);\r\n        y = y - (y % gf.height);\r\n        return p.setPoint(x, y);\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.ptInRect = function (x, y, rect) {\r\n        Coord.normalizeRect(rect);\r\n        return ((rect.x1 <= x && x <= rect.x2)) && ((rect.y1 <= y && y <= rect.y2));\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.ptInRect2 = function (p, rect) {\r\n        return Coord.ptInRect(p.x, p.y, rect);\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.ptInLine = function (line, p) {\r\n        var a, b, bottom, c, left, ox, oy, r, result, right, s, top, tx, ty, x1, x2, y1, y2;\r\n        result = false;\r\n        left = Math.min(line.x1, line.x2) - 5;\r\n        right = Math.max(line.x1, line.x2) + 5;\r\n        top = Math.min(line.y1, line.y2) - 5;\r\n        bottom = Math.max(line.y1, line.y2) + 5;\r\n        if ((left <= p.x) && (right >= p.x) && (top <= p.y) && (bottom >= p.y)) {\r\n            a = line.x2 - line.x1;\r\n            b = line.y2 - line.y1;\r\n            r = Math.sqrt(a * a + b * b + 0.000001);\r\n            c = b / r;\r\n            s = a / r;\r\n            ox = p.x - line.x1;\r\n            oy = p.y - line.y1;\r\n            tx = c * ox - s * oy;\r\n            ty = s * ox + c * oy;\r\n            x1 = -5.0;\r\n            x2 = 5.0;\r\n            y1 = -5.0;\r\n            y2 = r + 5;\r\n            if ((x1 <= tx) && (x2 >= tx) && (y1 <= ty) && (y2 >= ty)) {\r\n                result = true;\r\n            } else {\r\n                result = false;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.ptsInLine = function (p1, p2, p3) {\r\n        return Coord.ptInLine(new Rect(p1.x, p1.y, p3.x, p3.y), p2) || Coord.ptInLine(new Rect(p1.x, p1.y, p2.x, p2.y), p3) || Coord.ptInLine(new Rect(p2.x, p2.y, p3.x, p3.y), p1);\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.rectInRect = function (rect1, rect2) {\r\n        return !((rect1.x1 > rect2.x2) || (rect2.x1 > rect1.x2) || (rect1.y1 > rect2.y2) || (rect2.y1 > rect1.y2));\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.getCenter = function (rect) {\r\n        return new Point(Math.floor((rect.x1 + rect.x2) / 2), Math.floor((rect.y1 + rect.y2) / 2));\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.equalRect = function (r1, r2) {\r\n        return (r1.x1 === r2.x1) && (r1.y1 === r2.y1) && (r1.x2 === r2.x2) && (r1.y2 === r2.y2);\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.equalPt = function (p1, p2) {\r\n        return Coord.equalPt2(p1, p2, 5.0);\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.equalPt2 = function (p1, p2, d) {\r\n        return Coord.ptInRect(p2.x, p2.y, new Rect(p1.x - d, p1.y - d, p1.x + d, p1.y + d));\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.normalizeRect = function (rect) {\r\n        var x1, x2, y1, y2;\r\n        if (rect.x1 < rect.x2) {\r\n            x1 = rect.x1;\r\n            x2 = rect.x2;\r\n        } else {\r\n            x1 = rect.x2;\r\n            x2 = rect.x1;\r\n        }\r\n        if (rect.y1 < rect.y2) {\r\n            y1 = rect.y1;\r\n            y2 = rect.y2;\r\n        } else {\r\n            y1 = rect.y2;\r\n            y2 = rect.y1;\r\n        }\r\n        return rect.setRect(x1, y1, x2, y2);\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.normalizeRect2 = function (p1, p2) {\r\n        var r;\r\n        r = new Rect(p1.x, p1.y, p2.x, p2.y);\r\n        Coord.normalizeRect(r);\r\n        p1.setPoint(r.x1, r.y1);\r\n        return p2.setPoint(r.x2, r.y2);\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.unionRect = function (r1, r2) {\r\n        var r;\r\n        r = new Rect(r1.x1, r1.y1, r1.x2, r1.y2);\r\n        if (r2.x1 < r.x1) {\r\n            r.x1 = r2.x1;\r\n        }\r\n        if (r2.y1 < r.y1) {\r\n            r.y1 = r2.y1;\r\n        }\r\n        if (r2.x2 > r.x2) {\r\n            r.x2 = r2.x2;\r\n        }\r\n        if (r2.y2 > r.y2) {\r\n            r.y2 = r2.y2;\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.junction = function (r, pt) {\r\n        var c, i, lean, p, ps, _ref, _ref1, _ref2, _ref3;\r\n        p = new Point(pt.x, pt.y);\r\n        c = new Point(Math.floor((r.x1 + r.x2) / 2), Math.floor((r.y1 + r.y2) / 2));\r\n        if (c.x === p.x || c.y === p.y) {\r\n            return Coord.orthoJunction(r, p);\r\n        }\r\n        lean = (p.y - c.y) / (p.x - c.x);\r\n        ps = [0, 1, 2, 3, 4];\r\n        ps[0] = null;\r\n        ps[1] = new Point(r.x1, lean * (r.x1 - c.x) + c.y);\r\n        ps[2] = new Point(r.x2, lean * (r.x2 - c.x) + c.y);\r\n        ps[3] = new Point((r.y1 - c.y) / lean + c.x, r.y1);\r\n        ps[4] = new Point((r.y2 - c.y) / lean + c.x, r.y2);\r\n        Coord.normalizeRect2(c, p);\r\n        i = 0;\r\n        while (true) {\r\n            i++;\r\n            if (i > 4) {\r\n                break;\r\n            }\r\n            if ((((r.x1 <= (_ref = ps[i].x) && _ref <= r.x2)) && ((r.y1 <= (_ref1 = ps[i].y) && _ref1 <= r.y2)) && ((c.x <= (_ref2 = ps[i].x) && _ref2 <= p.x)) && ((c.y <= (_ref3 = ps[i].y) && _ref3 <= p.y))) || (i > 4)) {\r\n                break;\r\n            }\r\n        }\r\n        if (i > 4) {\r\n            return new Point(Math.floor((r.x1 + r.x2) / 2), Math.floor((r.y1 + r.y2) / 2));\r\n        } else {\r\n            return ps[i];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.orthoJunction = function (r, p) {\r\n        if ((r.x1 < p.x) && (p.x < r.x2)) {\r\n            if (r.y1 >= p.y) {\r\n                return new Point(p.x, r.y1);\r\n            } else {\r\n                return new Point(p.x, r.y2);\r\n            }\r\n        } else if ((r.y1 < p.y) && (p.y < r.y2)) {\r\n            if (r.x1 >= p.x) {\r\n                return new Point(r.x1, p.y);\r\n            } else {\r\n                return new Point(r.x2, p.y);\r\n            }\r\n        } else if ((r.x1 === p.x) || (r.x2 === p.x)) {\r\n            if (r.y1 >= p.y) {\r\n                return new Point(p.x, r.y1);\r\n            } else {\r\n                return new Point(p.x, r.y2);\r\n            }\r\n        } else if ((r.y1 === p.y) || (r.y2 === p.y)) {\r\n            if (r.x1 >= p.x) {\r\n                return new Point(r.x1, p.y);\r\n            } else {\r\n                return new Point(r.x2, p.y);\r\n            }\r\n        } else {\r\n            return new Point(-100, -100);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.makeOrthoPt = function (p1, p2) {\r\n        var result;\r\n        result = new Point(p1.x, Math.max(p1.y, p2.y));\r\n        if (result.y === p1.y) {\r\n            result.x = p2.x;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.getPointAwayLine = function (tailPoint, headPoint, alpha, distance) {\r\n        var a, b, th, x, y;\r\n        a = tailPoint.x - headPoint.x;\r\n        b = tailPoint.y - headPoint.y;\r\n        th = Math.atan(Math.abs(b) / (Math.abs(a) + 0.000001));\r\n        if (a > 0) {\r\n            if (b > 0) {\r\n                th = Math.PI - th;\r\n            } else {\r\n                th = th + Math.PI;\r\n            }\r\n        } else {\r\n            if (b < 0) {\r\n                th = 2 * Math.PI - th;\r\n            }\r\n        }\r\n        x = distance * Math.cos(th + alpha);\r\n        y = distance * Math.sin(th + alpha);\r\n        return new Point(Math.floor(x), Math.floor(-y));\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.getPolar = function (line, p) {\r\n        var a, b, p1, p2, th1, th2;\r\n        p1 = new Point(line.x1, line.y1);\r\n        p2 = new Point(line.x2, line.y2);\r\n        a = p2.y - p1.y;\r\n        b = p2.x - p1.x + 0.00001;\r\n        th1 = Math.atan(a / b);\r\n        if (((a < 0) && (b < 0)) || ((a > 0) && (b < 0)) || ((a === 0) && (b < 0))) {\r\n            th1 = th1 + Math.PI;\r\n        }\r\n        a = p.y - p1.y;\r\n        b = p.x - p1.x + 0.00001;\r\n        th2 = Math.atan(a / b);\r\n        if (((a < 0) && (b < 0)) || ((a > 0) && (b < 0)) || ((a === 0) && (b < 0))) {\r\n            th2 = th2 + Math.PI;\r\n        }\r\n        return {\r\n            alpha: th1 - th2,\r\n            distance: Math.sqrt(Math.square(p1.x - p.x) + Math.square(p1.y - p.y))\r\n        };\r\n    };\r\n\r\n    /**\r\n     * @function\r\n     */\r\n    Coord.getAngle = function (x1, y1, x2, y2) {\r\n        var dx = x2 - x1,\r\n            dy = y2 - y1;\r\n        return Math.atan2(dy, dx);\r\n    };\r\n\r\n    /**\r\n     * Canvas\r\n     * @constructor\r\n     */\r\n    function Canvas(context) {\r\n        this.context = context;\r\n        this.stateStack = [];\r\n        this.color = Color.BLACK;\r\n        this.fillColor = Color.WHITE;\r\n        this.fontColor = Color.BLACK;\r\n        this.font = new Font("Arial", 12, FS_NORMAL);\r\n        this.lineWidth = 1;\r\n        this.alpha = 1.0;\r\n        this.origin = new Point(0.0, 0.0);\r\n        this.zoomFactor = new ZoomFactor(1, 1);\r\n        this.gridFactor = new GridFactor(1, 1);\r\n        this.coordTransformApplied = true;\r\n        this.ratio = 1;\r\n    }\r\n\r\n    Canvas.toHTML5Font = function (f) {\r\n        var style = "",\r\n            size = f.size;\r\n        switch (f.style) {\r\n        case FS_ITALIC:\r\n            style = "italic";\r\n            break;\r\n        case FS_BOLD:\r\n            style = "bold";\r\n            break;\r\n        case FS_BOLD_ITALIC:\r\n            style = "bold italic";\r\n        }\r\n        return "" + style + " " + size + "px " + f.face;\r\n    };\r\n\r\n    /**\r\n     * Canvas의 상태를 스택에 저장\r\n     */\r\n    Canvas.prototype.storeState = function () {\r\n        var state = {\r\n            color: this.color,\r\n            fillColor: this.fillColor,\r\n            fontColor: this.fontColor,\r\n            font: this.font.copy(),\r\n            lineWidth: this.lineWidth,\r\n            alpha: this.alpha\r\n        };\r\n        this.stateStack.push(state);\r\n    };\r\n\r\n    /**\r\n     * Canvas의 상태를 스택으로부터 복구\r\n     */\r\n    Canvas.prototype.restoreState = function () {\r\n        var state = this.stateStack.pop();\r\n        if (state !== null) {\r\n            this.color = state.color;\r\n            this.fillColor = state.fillColor;\r\n            this.fontColor = state.fontColor;\r\n            this.font = state.font;\r\n            this.lineWidth = state.lineWidth;\r\n            this.alpha = state.alpha;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Transform (Scale)\r\n     */\r\n    Canvas.prototype.transform = function () {\r\n        this.context.save();\r\n        if (this.coordTransformApplied === true) {\r\n            this.context.translate(this.origin.x, this.origin.y);\r\n            var scale = this.zoomFactor.getScale();\r\n            this.context.scale(scale * this.ratio, scale * this.ratio);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Restore Transform\r\n     */\r\n    Canvas.prototype.restoreTransform = function () {\r\n        this.context.restore();\r\n    };\r\n\r\n    /**\r\n     * Put a pixel\r\n     *\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} c - Color\r\n     */\r\n    Canvas.prototype.putPixel = function (x, y, c) {\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = c;\r\n        this.context.globalAlpha = this.alpha;\r\n        this.context.moveTo(x, y);\r\n        this.context.lineTo(x + 1, y + 1);\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Draw a line\r\n     *\r\n     * @param {number} x1\r\n     * @param {number} y1\r\n     * @param {number} x2\r\n     * @param {number} y2\r\n     * @param {?Array.<number>} dashPattern\r\n     */\r\n    Canvas.prototype.line = function (x1, y1, x2, y2, dashPattern) {\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        if (dashPattern) {\r\n            this.context.setLineDash(dashPattern);\r\n        }\r\n        this.context.moveTo(x1, y1);\r\n        this.context.lineTo(x2, y2);\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * rect\r\n     *\r\n     * @param {number} x1\r\n     * @param {number} y1\r\n     * @param {number} x2\r\n     * @param {number} y2\r\n     * @param {Array.<number>} dashPattern - e.g.) [3]\r\n     */\r\n    Canvas.prototype.rect = function (x1, y1, x2, y2, dashPattern) {\r\n        this.transform();\r\n        var x = (x1 < x2 ? x1 : x2),\r\n            y = (y1 < y2 ? y1 : y2),\r\n            w = Math.abs(x2 - x1),\r\n            h = Math.abs(y2 - y1);\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        if (dashPattern) {\r\n            this.context.setLineDash(dashPattern);\r\n        }\r\n        this.context.rect(x, y, w, h);\r\n        this.context.closePath();\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * fillRect\r\n     *\r\n     * @param {number} x1\r\n     * @param {number} y1\r\n     * @param {number} x2\r\n     * @param {number} y2\r\n     */\r\n    Canvas.prototype.fillRect = function (x1, y1, x2, y2) {\r\n        this.transform();\r\n        var x = (x1 < x2 ? x1 : x2),\r\n            y = (y1 < y2 ? y1 : y2),\r\n            w = Math.abs(x2 - x1),\r\n            h = Math.abs(y2 - y1);\r\n        this.context.fillStyle = this.fillColor;\r\n        this.context.globalAlpha = this.alpha;\r\n        this.context.fillRect(x, y, w, h);\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * roundRect\r\n     *\r\n     * @param {number} x1\r\n     * @param {number} y1\r\n     * @param {number} x2\r\n     * @param {number} y2\r\n     * @param {number} radius\r\n     */\r\n    Canvas.prototype.roundRect = function (x1, y1, x2, y2, radius, dashPattern) {\r\n        this.transform();\r\n        var x = (x1 < x2 ? x1 : x2),\r\n            y = (y1 < y2 ? y1 : y2),\r\n            w = Math.abs(x2 - x1),\r\n            h = Math.abs(y2 - y1);\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        if (dashPattern) {\r\n            this.context.setLineDash(dashPattern);\r\n        }\r\n        this.context.moveTo(x + radius, y);\r\n        this.context.lineTo(x + w - radius, y);\r\n        this.context.quadraticCurveTo(x + w, y, x + w, y + radius);\r\n        this.context.lineTo(x + w, y + h - radius);\r\n        this.context.quadraticCurveTo(x + w, y + h, x + w - radius, y + h);\r\n        this.context.lineTo(x + radius, y + h);\r\n        this.context.quadraticCurveTo(x, y + h, x, y + h - radius);\r\n        this.context.lineTo(x, y + radius);\r\n        this.context.quadraticCurveTo(x, y, x + radius, y);\r\n        this.context.closePath();\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * fillRoundRect\r\n     *\r\n     * @param {number} x1\r\n     * @param {number} y1\r\n     * @param {number} x2\r\n     * @param {number} y2\r\n     * @param {number} radius\r\n     */\r\n    Canvas.prototype.fillRoundRect = function (x1, y1, x2, y2, radius) {\r\n        this.transform();\r\n        var x = (x1 < x2 ? x1 : x2),\r\n            y = (y1 < y2 ? y1 : y2),\r\n            w = Math.abs(x2 - x1),\r\n            h = Math.abs(y2 - y1);\r\n        this.context.beginPath();\r\n        this.context.fillStyle = this.fillColor;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        this.context.moveTo(x + radius, y);\r\n        this.context.lineTo(x + w - radius, y);\r\n        this.context.quadraticCurveTo(x + w, y, x + w, y + radius);\r\n        this.context.lineTo(x + w, y + h - radius);\r\n        this.context.quadraticCurveTo(x + w, y + h, x + w - radius, y + h);\r\n        this.context.lineTo(x + radius, y + h);\r\n        this.context.quadraticCurveTo(x, y + h, x, y + h - radius);\r\n        this.context.lineTo(x, y + radius);\r\n        this.context.quadraticCurveTo(x, y, x + radius, y);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n        this.restoreTransform();\r\n    };\r\n\r\n\r\n    /**\r\n     * ellipse\r\n     *\r\n     * @param {number} x1\r\n     * @param {number} y1\r\n     * @param {number} x2\r\n     * @param {number} y2\r\n     * @param {Array.<number>} dashPattern\r\n     */\r\n    Canvas.prototype.ellipse = function (x1, y1, x2, y2, dashPattern) {\r\n        this.transform();\r\n        var x = (x1 < x2 ? x1 : x2),\r\n            y = (y1 < y2 ? y1 : y2),\r\n            w = Math.abs(x2 - x1),\r\n            h = Math.abs(y2 - y1),\r\n            kappa = 0.5522848,\r\n            ox = (w / 2.0) * kappa,\r\n            oy = (h / 2.0) * kappa,\r\n            xe = x + w,\r\n            ye = y + h,\r\n            xm = x + w / 2.0,\r\n            ym = y + h / 2.0;\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        if (dashPattern) {\r\n            this.context.setLineDash(dashPattern);\r\n        }\r\n        this.context.moveTo(x, ym);\r\n        this.context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\r\n        this.context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\r\n        this.context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\r\n        this.context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\r\n        this.context.closePath();\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * fillEllipse\r\n     *\r\n     * @param {number} x1\r\n     * @param {number} y1\r\n     * @param {number} x2\r\n     * @param {number} y2\r\n     */\r\n    Canvas.prototype.fillEllipse = function (x1, y1, x2, y2) {\r\n        this.transform();\r\n        var x = (x1 < x2 ? x1 : x2),\r\n            y = (y1 < y2 ? y1 : y2),\r\n            w = Math.abs(x2 - x1),\r\n            h = Math.abs(y2 - y1),\r\n            kappa = 0.5522848,\r\n            ox = (w / 2.0) * kappa,\r\n            oy = (h / 2.0) * kappa,\r\n            xe = x + w,\r\n            ye = y + h,\r\n            xm = x + w / 2.0,\r\n            ym = y + h / 2.0;\r\n        this.context.beginPath();\r\n        this.context.fillStyle = this.fillColor;\r\n        this.context.globalAlpha = this.alpha;\r\n        this.context.moveTo(x, ym);\r\n        this.context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\r\n        this.context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\r\n        this.context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\r\n        this.context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\r\n        this.context.closePath();\r\n        this.context.fill();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Draw polyline\r\n     * @param {Array.<Point>} points\r\n     * @param {Array.<number>} dashPattern\r\n     */\r\n    Canvas.prototype.polyline = function (points, dashPattern) {\r\n        var i, len, p;\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        if (dashPattern) {\r\n            this.context.setLineDash(dashPattern);\r\n        }\r\n        for (i = 0, len = points.length; i < len; i++) {\r\n            p = points[i];\r\n            if (i === 0) {\r\n                this.context.moveTo(p.x, p.y);\r\n            } else {\r\n                this.context.lineTo(p.x, p.y);\r\n            }\r\n        }\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Draw roundRectLine\r\n     * @param {Array.<Point>} points\r\n     * @param {Array.<number>} dashPattern\r\n     */\r\n    Canvas.prototype.roundRectLine = function (points, dashPattern) {\r\n        var ROUND_RADIUS = 8;\r\n        var i, len;\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        if (dashPattern) {\r\n            this.context.setLineDash(dashPattern);\r\n        }\r\n        if (points.length > 0) {\r\n            var p, prev, next, pdir, ndir;\r\n            this.context.moveTo(points[0].x, points[0].y);\r\n            for (i = 1, len = points.length - 1; i < len; i++) {\r\n                p = points[i];\r\n                prev = points[i - 1];\r\n                next = points[i + 1];\r\n                // direction of previous line\r\n                if (prev.x === p.x) { // vertical\r\n                    pdir = (prev.y < p.y) ? \'VD\' : \'VU\'; // down or up\r\n                } else { // horizontal\r\n                    pdir = (prev.x < p.x) ? \'HR\' : \'HL\'; // right or left\r\n                }\r\n                // direction of next line\r\n                if (next.x === p.x) {\r\n                    ndir = (next.y < p.y) ? \'VU\' : \'VD\'; // vertical down or up\r\n                } else {\r\n                    ndir = (next.x < p.x) ? \'HL\' : \'HR\'; // horizontal right or left\r\n                }\r\n                // draw line\r\n                switch (pdir) {\r\n                case \'VD\':\r\n                    // this.context.moveTo(prev.x, prev.y + ROUND_RADIUS);\r\n                    this.context.lineTo(p.x, p.y - ROUND_RADIUS);\r\n                    break;\r\n                case \'VU\':\r\n                    // this.context.moveTo(prev.x, prev.y - ROUND_RADIUS);\r\n                    this.context.lineTo(p.x, p.y + ROUND_RADIUS);\r\n                    break;\r\n                case \'HR\':\r\n                    // this.context.moveTo(prev.x + ROUND_RADIUS, prev.y);\r\n                    this.context.lineTo(p.x - ROUND_RADIUS, p.y);\r\n                    break;\r\n                case \'HL\':\r\n                    // this.context.moveTo(prev.x - ROUND_RADIUS, prev.y);\r\n                    this.context.lineTo(p.x + ROUND_RADIUS, p.y);\r\n                    break;\r\n                }\r\n                // draw corner\r\n                switch (pdir) {\r\n                case \'VD\':\r\n                    if (ndir === \'HL\') {\r\n                        this.context.arc(p.x - ROUND_RADIUS, p.y - ROUND_RADIUS, ROUND_RADIUS, 0, 0.5 * Math.PI, false);\r\n                    } else { // HR\r\n                        this.context.arc(p.x + ROUND_RADIUS, p.y - ROUND_RADIUS, ROUND_RADIUS, Math.PI, 0.5 * Math.PI, true);\r\n                    }\r\n                    break;\r\n                case \'VU\':\r\n                    if (ndir === \'HL\') {\r\n                        this.context.arc(p.x - ROUND_RADIUS, p.y + ROUND_RADIUS, ROUND_RADIUS, 0, 1.5 * Math.PI, true);\r\n                    } else { // HR\r\n                        this.context.arc(p.x + ROUND_RADIUS, p.y + ROUND_RADIUS, ROUND_RADIUS, Math.PI, 1.5 * Math.PI, false);\r\n                    }\r\n                    break;\r\n                case \'HR\':\r\n                    if (ndir === \'VD\') {\r\n                        this.context.arc(p.x - ROUND_RADIUS, p.y + ROUND_RADIUS, ROUND_RADIUS, 1.5 * Math.PI, 0, false);\r\n                    } else { // VU\r\n                        this.context.arc(p.x - ROUND_RADIUS, p.y - ROUND_RADIUS, ROUND_RADIUS, 0.5 * Math.PI, 0, true);\r\n                    }\r\n                    break;\r\n                case \'HL\':\r\n                    if (ndir === \'VD\') {\r\n                        this.context.arc(p.x + ROUND_RADIUS, p.y + ROUND_RADIUS, ROUND_RADIUS, 1.5 * Math.PI, Math.PI, true);\r\n                    } else { // VU\r\n                        this.context.arc(p.x + ROUND_RADIUS, p.y - ROUND_RADIUS, ROUND_RADIUS, 0.5 * Math.PI, Math.PI, false);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            this.context.lineTo(points[points.length-1].x, points[points.length-1].y);\r\n        }\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Draw curveLine\r\n     * @param {Array.<Point>} points\r\n     * @param {Array.<number>} dashPattern\r\n     */\r\n    Canvas.prototype.curveLine = function (points, dashPattern) {\r\n        var i, len;\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        if (dashPattern) {\r\n            this.context.setLineDash(dashPattern);\r\n        }\r\n        this.context.moveTo(points[0].x, points[0].y);\r\n        if (points.length > 2) {\r\n            for (i = 1, len = points.length - 2; i < len; i++) {\r\n                var xc = (points[i].x + points[i + 1].x) / 2;\r\n                var yc = (points[i].y + points[i + 1].y) / 2;\r\n                this.context.quadraticCurveTo(points[i].x, points[i].y, xc, yc);\r\n            }\r\n            this.context.quadraticCurveTo(points[i].x, points[i].y, points[i+1].x,points[i+1].y);\r\n        } else {\r\n            this.context.lineTo(points[points.length-1].x, points[points.length-1].y);\r\n        }\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Draw polygon\r\n     * @param {Array.<Point>} points\r\n     */\r\n    Canvas.prototype.polygon = function (points) {\r\n        var i, len, p, start;\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        start = null;\r\n        for (i = 0, len = points.length; i < len; i++) {\r\n            p = points[i];\r\n            if (i === 0) {\r\n                start = p;\r\n                this.context.moveTo(p.x, p.y);\r\n            } else {\r\n                this.context.lineTo(p.x, p.y);\r\n            }\r\n        }\r\n        this.context.lineTo(start.x, start.y);\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Draw filled polygon\r\n     * @param {Points} points\r\n     */\r\n    Canvas.prototype.fillPolygon = function (points) {\r\n        var i, len, p;\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.fillStyle = this.fillColor;\r\n        this.context.globalAlpha = this.alpha;\r\n        for (i = 0, len = points.length; i < len; i++) {\r\n            p = points[i];\r\n            if (i === 0) {\r\n                this.context.moveTo(p.x, p.y);\r\n            } else {\r\n                this.context.lineTo(p.x, p.y);\r\n            }\r\n        }\r\n        this.context.fill();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Draw arc\r\n     *\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} r\r\n     * @param {number} startAngle\r\n     * @param {number} endAngle\r\n     * @param {boolean} counterClockwise\r\n     */\r\n    Canvas.prototype.arc = function (x, y, r, startAngle, endAngle, counterClockwise) {\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        this.context.arc(x, y, r, startAngle, endAngle, counterClockwise);\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Draw filled arc\r\n     *\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} r\r\n     * @param {number} startAngle\r\n     * @param {number} endAngle\r\n     * @param {boolean} counterClockwise\r\n     */\r\n    Canvas.prototype.fillArc = function (x, y, r, startAngle, endAngle, counterClockwise) {\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.fillStyle = this.fillColor;\r\n        this.context.globalAlpha = this.alpha;\r\n        this.context.arc(x, y, r, startAngle, endAngle, counterClockwise);\r\n        this.context.fill();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Draw a path.\r\n     * A path command is one of the followings:\r\n     *   [\'M\', x, y] - moveTo\r\n     *   [\'L\', x, y] - lineTo\r\n     *   [\'C\', x1, y1, x2, y2, x, y] - bezierCurveTo\r\n     *   [\'Q\', x1, y1, x, 2] - quadraticCurveTo\r\n     *   [\'Z\'] - closePath\r\n     *\r\n     * @param {Array.<Array>}\r\n     */\r\n    Canvas.prototype.path = function (commands) {\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        for (var i = 0, len = commands.length; i < len; i++) {\r\n            var comm = commands[i];\r\n            switch (comm[0]) {\r\n            case \'M\':\r\n                this.context.moveTo(comm[1], comm[2]);\r\n                break;\r\n            case \'L\':\r\n                this.context.lineTo(comm[1], comm[2]);\r\n                break;\r\n            case \'C\':\r\n                this.context.bezierCurveTo(comm[1], comm[2], comm[3], comm[4], comm[5], comm[6]);\r\n                break;\r\n            case \'Q\':\r\n                this.context.quadraticCurveTo(comm[1], comm[2], comm[3], comm[4]);\r\n                break;\r\n            case \'Z\':\r\n                this.context.closePath();\r\n                break;\r\n            }\r\n        }\r\n        this.context.stroke();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Draw a filled path\r\n     * A path command is one of the followings:\r\n     *   [\'M\', x, y] - moveTo\r\n     *   [\'L\', x, y] - lineTo\r\n     *   [\'C\', x1, y1, x2, y2, x, y] - bezierCurveTo\r\n     *   [\'Q\', x1, y1, x, 2] - quadraticCurveTo\r\n     *   [\'Z\'] - closePath\r\n     *\r\n     * @param {Array.<Array>}\r\n     * @param {boolean} doStroke\r\n     */\r\n    Canvas.prototype.fillPath = function (commands, doStroke) {\r\n        this.transform();\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.color;\r\n        this.context.fillStyle = this.fillColor;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.globalAlpha = this.alpha;\r\n        for (var i = 0, len = commands.length; i < len; i++) {\r\n            var comm = commands[i];\r\n            switch (comm[0]) {\r\n            case \'M\':\r\n                this.context.moveTo(comm[1], comm[2]);\r\n                break;\r\n            case \'L\':\r\n                this.context.lineTo(comm[1], comm[2]);\r\n                break;\r\n            case \'C\':\r\n                this.context.bezierCurveTo(comm[1], comm[2], comm[3], comm[4], comm[5], comm[6]);\r\n                break;\r\n            case \'Q\':\r\n                this.context.quadraticCurveTo(comm[1], comm[2], comm[3], comm[4]);\r\n                break;\r\n            case \'Z\':\r\n                this.context.closePath();\r\n                break;\r\n            }\r\n        }\r\n        this.context.fill();\r\n        if (doStroke) {\r\n            this.context.stroke();\r\n        }\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Word Wrap\r\n     * @param {string} text\r\n     * @param {number} width\r\n     * @return {Array.<string>}\r\n     */\r\n    Canvas.prototype.wordWrap = function (text, width) {\r\n        var lines  = text.split(" ");\r\n        if (lines.length > 0) {\r\n            var result = [],\r\n                term   = lines[0];\r\n            for (var i = 1, len = lines.length; i < len; i++) {\r\n                var t = term + " " + lines[i];\r\n                if (this.context.measureText(t).width <= width) {\r\n                    term = t;\r\n                } else {\r\n                    result.push(term);\r\n                    term = lines[i];\r\n                }\r\n            }\r\n            if (term.length > 0) {\r\n                result.push(term);\r\n            }\r\n            return result;\r\n        }\r\n        return [];\r\n    };\r\n\r\n    /**\r\n     * Draw text\r\n     *\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {text} text\r\n     * @param {boolean} rotate\r\n     * @param {boolean} wordWrap\r\n     * @param {boolean} underline\r\n     */\r\n    Canvas.prototype.textOut = function (x, y, text, rotation, wordWrap, underline) {\r\n        var r = new Rect(x, y, x, y);\r\n        rotation  = rotation ? rotation : 0;\r\n        wordWrap  = wordWrap ? wordWrap : false;\r\n        underline = underline ? underline : false;\r\n        this.textOut2(r, text, AL_LEFT, AL_TOP, rotation, wordWrap, underline);\r\n    };\r\n\r\n    /**\r\n     * Draw text underline\r\n     * @private\r\n     */\r\n    Canvas.prototype._textUnderline = function (baseX, baseY, text, horizontalAlignment, verticalAlignment) {\r\n        var x1, x2, y,\r\n            extent = this.textExtent(text);\r\n        switch (verticalAlignment) {\r\n        case AL_TOP:\r\n            y = baseY + extent.y;\r\n            break;\r\n        case AL_BOTTOM:\r\n            y = baseY;\r\n            break;\r\n        case AL_MIDDLE:\r\n            y = baseY + (extent.y / 2.0);\r\n            break;\r\n        }\r\n        switch (horizontalAlignment) {\r\n        case AL_LEFT:\r\n            x1 = baseX; x2 = x1 + extent.x;\r\n            break;\r\n        case AL_RIGHT:\r\n            x2 = baseX; x1 = x2 - extent.x;\r\n            break;\r\n        case AL_CENTER:\r\n            x1 = baseX + (extent.x / 2.0); x2 = baseX - (extent.x / 2.0);\r\n            break;\r\n        }\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.fontColor;\r\n        this.context.moveTo(x1, y);\r\n        this.context.lineTo(x2, y);\r\n        this.context.stroke();\r\n    };\r\n\r\n    /**\r\n     * Draw text\r\n     *\r\n     * @param {Rect} rect\r\n     * @param {string} text\r\n     * @param {number} horizontalAlignment\r\n     * @param {number} verticalAlignment\r\n     * @param {boolean} rotate\r\n     * @param {boolean} wordWrap\r\n     * @param {boolean} underline\r\n     */\r\n    Canvas.prototype.textOut2 = function (rect, text, horizontalAlignment, verticalAlignment, rotate, wordWrap, underline) {\r\n        this.transform();\r\n        this.context.save();\r\n        this.context.beginPath();\r\n        this.context.fillStyle = this.fontColor;\r\n        this.context.globalAlpha = this.alpha;\r\n        this.context.font = Canvas.toHTML5Font(this.font);\r\n        var baseX = rect.x1,\r\n            baseY = rect.y1;\r\n        if (rotate === true) {\r\n            switch (verticalAlignment) {\r\n            case AL_TOP:\r\n                baseX = rect.x1;\r\n                this.context.textBaseline = "top";\r\n                break;\r\n            case AL_BOTTOM:\r\n                baseX = rect.x2;\r\n                this.context.textBaseline = "bottom";\r\n                break;\r\n            case AL_MIDDLE:\r\n                baseX = (rect.x1 + rect.x2) / 2.0;\r\n                this.context.textBaseline = "middle";\r\n            }\r\n            switch (horizontalAlignment) {\r\n            case AL_LEFT:\r\n                baseY = rect.y2;\r\n                this.context.textAlign = "left";\r\n                break;\r\n            case AL_RIGHT:\r\n                baseY = rect.y1;\r\n                this.context.textAlign = "right";\r\n                break;\r\n            case AL_CENTER:\r\n                baseY = (rect.y1 + rect.y2) / 2.0;\r\n                this.context.textAlign = "center";\r\n            }\r\n            this.context.translate(baseX, baseY);\r\n            this.context.rotate(toRadian(-90));\r\n            this.context.fillText(text, 0, 0);\r\n        } else {\r\n            switch (verticalAlignment) {\r\n            case AL_TOP:\r\n                baseY = rect.y1;\r\n                this.context.textBaseline = "top";\r\n                break;\r\n            case AL_BOTTOM:\r\n                baseY = rect.y2;\r\n                this.context.textBaseline = "bottom";\r\n                break;\r\n            case AL_MIDDLE:\r\n                baseY = (rect.y1 + rect.y2) / 2.0;\r\n                this.context.textBaseline = "middle";\r\n            }\r\n            switch (horizontalAlignment) {\r\n            case AL_LEFT:\r\n                baseX = rect.x1;\r\n                this.context.textAlign = "left";\r\n                break;\r\n            case AL_RIGHT:\r\n                baseX = rect.x2;\r\n                this.context.textAlign = "right";\r\n                break;\r\n            case AL_CENTER:\r\n                baseX = (rect.x1 + rect.x2) / 2.0;\r\n                this.context.textAlign = "center";\r\n            }\r\n\r\n            if (wordWrap) {\r\n                var lines = this.wordWrap(text, rect.getWidth()),\r\n                    _height = (lines.length * this.font.size);\r\n                switch (verticalAlignment) {\r\n                case AL_BOTTOM: baseY = rect.y2 - ((lines.length - 1) * this.font.size) ; break;\r\n                case AL_MIDDLE: baseY = rect.y1 + ((rect.getHeight() - _height) / 2) + (this.font.size / 2); break;\r\n                }\r\n                for (var i = 0, len = lines.length; i < len; i++) {\r\n                    this.context.fillText(lines[i], baseX, baseY);\r\n                    if (underline) {\r\n                        this._textUnderline(baseX, baseY, lines[i], horizontalAlignment, verticalAlignment);\r\n                    }\r\n                    baseY = baseY + this.font.size;\r\n                }\r\n            } else {\r\n                this.context.fillText(text, baseX, baseY);\r\n                if (underline) {\r\n                    this._textUnderline(baseX, baseY, text, horizontalAlignment, verticalAlignment);\r\n                }\r\n            }\r\n\r\n        }\r\n        this.context.restore();\r\n        this.restoreTransform();\r\n    };\r\n\r\n    /**\r\n     * Get Text Extent\r\n     * @param {string} text\r\n     * @param {number} wordWrapWidth\r\n     * @return {Point}\r\n     */\r\n    Canvas.prototype.textExtent = function (text, wordWrapWidth) {\r\n        var self = this;\r\n        this.context.font = Canvas.toHTML5Font(this.font);\r\n        var sz = new Point(0, 0);\r\n        if (wordWrapWidth) {\r\n            var lines = this.wordWrap(text, wordWrapWidth),\r\n                widths = _.map(lines, function (line) { return self.context.measureText(line).width; });\r\n            sz.x = _.max(widths);\r\n            sz.y = this.font.size * lines.length;\r\n        } else {\r\n            sz.x = this.context.measureText(text).width;\r\n            sz.y = this.font.size;\r\n        }\r\n        return sz;\r\n    };\r\n\r\n    /**\r\n     * Draw Image\r\n     *\r\n     * @param {Image} image\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    Canvas.prototype.drawImage = function (image, x, y, width, height) {\r\n        this.transform();\r\n        this.context.drawImage(image, x, y, width, height);\r\n        this.restoreTransform();\r\n    };\r\n\r\n    // Type Definitions\r\n    _global.type.Font   = Font;\r\n    _global.type.Points = Points;\r\n\r\n    exports.DEFAULT_COLOR_PALETTE = DEFAULT_COLOR_PALETTE;\r\n\r\n    exports.AL_LEFT   = AL_LEFT;\r\n    exports.AL_RIGHT  = AL_RIGHT;\r\n    exports.AL_CENTER = AL_CENTER;\r\n    exports.AL_TOP    = AL_TOP;\r\n    exports.AL_BOTTOM = AL_BOTTOM;\r\n    exports.AL_MIDDLE = AL_MIDDLE;\r\n\r\n    exports.FS_NORMAL      = FS_NORMAL;\r\n    exports.FS_BOLD        = FS_BOLD;\r\n    exports.FS_ITALIC      = FS_ITALIC;\r\n    exports.FS_BOLD_ITALIC = FS_BOLD_ITALIC;\r\n\r\n    // Public API\r\n    exports.toRadian   = toRadian;\r\n    exports.toDegree   = toDegree;\r\n\r\n    exports.Point      = Point;\r\n    exports.Rect       = Rect;\r\n    exports.Color      = Color;\r\n    exports.Font       = Font;\r\n    exports.ZoomFactor = ZoomFactor;\r\n    exports.GridFactor = GridFactor;\r\n    exports.Points     = Points;\r\n    exports.Coord      = Coord;\r\n    exports.Canvas     = Canvas;\r\n\r\n});\r\n\r\n\n//# sourceURL=/core/Graphics.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define*/\r\n\r\ndefine(\'core/Toolkit\',[\'require\',\'exports\',\'module\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Point      = require("core/Graphics").Point,\r\n        Rect       = require("core/Graphics").Rect,\r\n        Color      = require("core/Graphics").Color,\r\n        Font       = require("core/Graphics").Font,\r\n        ZoomFactor = require("core/Graphics").ZoomFactor,\r\n        GridFactor = require("core/Graphics").GridFactor,\r\n        Points     = require("core/Graphics").Points,\r\n        Coord      = require("core/Graphics").Coord,\r\n        Canvas     = require("core/Graphics").Canvas;\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                       CONSTANTS AND ENUMERATIONS                       *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * Selection Orientation (North/West/South/East)\r\n     * @const {number}\r\n     */\r\n    var NWSE_N = 0,\r\n        NWSE_S = 1,\r\n        NWSE_W = 2,\r\n        NWSE_E = 3;\r\n\r\n    /**\r\n     * Highlighter Position\r\n     * @const {number}\r\n     */\r\n    var CT_LT   = 0,\r\n        CT_LM   = 1,\r\n        CT_LB   = 2,\r\n        CT_MT   = 3,\r\n        CT_MB   = 4,\r\n        CT_RT   = 5,\r\n        CT_RM   = 6,\r\n        CT_RB   = 7,\r\n        CT_AREA = 8,\r\n        CT_ELSE = 9;\r\n\r\n    /**\r\n     * Constants\r\n     * @const\r\n     */\r\n    var HIGHLIGHTER_COLOR             = Color.BLACK,\r\n        SELECTION_COLOR               = "#4f99ff", //Color.GREEN,\r\n        SELECTION_BORDER_COLOR        = "#4f99ff", // Color.GREEN,\r\n        DEFAULT_HIGHLIGHTER_SIZE      = 8.0,\r\n        DEFAULT_HALF_HIGHLIGHTER_SIZE = 4.0,\r\n        DEFAULT_SELECTIONLINE_WIDTH   = DEFAULT_HIGHLIGHTER_SIZE - 1.0;\r\n\r\n\r\n    function drawEndPoint(canvas, x, y) {\r\n        var r = 5;\r\n        canvas.ellipse(x - r, y - r, x + r, y + r);\r\n    }\r\n\r\n    function drawRange(canvas, x1, y1, x2, y2, kind, showEnds) {\r\n        if (!kind) {\r\n            kind = "rect";\r\n        }\r\n        if (!showEnds) {\r\n            showEnds = false;\r\n        }\r\n\r\n        x1 = Math.round(x1);\r\n        y1 = Math.round(y1);\r\n        x2 = Math.round(x2);\r\n        y2 = Math.round(y2);\r\n\r\n        canvas.storeState();\r\n        if (canvas.ratio === 1) { // Non-retina\r\n            canvas.context.translate(0.5, 0.5);\r\n        }\r\n        canvas.color = SELECTION_COLOR;\r\n        switch (kind) {\r\n        case "rect":\r\n            canvas.rect(x1, y1, x2, y2);\r\n            if (showEnds) {\r\n                drawEndPoint(canvas, x1, y1);\r\n                drawEndPoint(canvas, x2, y2);\r\n            }\r\n            break;\r\n        case "line":\r\n            canvas.line(x1, y1, x2, y2);\r\n            if (showEnds) {\r\n                drawEndPoint(canvas, x1, y1);\r\n                drawEndPoint(canvas, x2, y2);\r\n            }\r\n            break;\r\n        case "point":\r\n            drawEndPoint(canvas, x2, y2);\r\n            break;\r\n        }\r\n        if (canvas.ratio === 1) { // Non-retina\r\n            canvas.context.translate(-0.5, -0.5);\r\n        }\r\n        canvas.restoreState();\r\n    }\r\n\r\n    function drawRangeBox(canvas, x1, y1, x2, y2) {\r\n        canvas.storeState();\r\n        canvas.color = SELECTION_COLOR;\r\n        canvas.rect(x1 - 2, y1 - 2, x2 + 3, y2 + 3);\r\n        canvas.restoreState();\r\n    }\r\n\r\n    function drawDottedLine(canvas, points) {\r\n        canvas.storeState();\r\n        if (canvas.ratio === 1) { // Non-retina\r\n            canvas.context.translate(0.5, 0.5);\r\n        }\r\n        canvas.color = SELECTION_COLOR;\r\n        canvas.polyline(points.points, [3]);\r\n        if (canvas.ratio === 1) { // Non-retina\r\n            canvas.context.translate(-0.5, -0.5);\r\n        }\r\n        canvas.restoreState();\r\n    }\r\n\r\n    function drawSelection(canvas, x1, y1, x2, y2) {\r\n        canvas.storeState();\r\n        if (canvas.ratio === 1) {\r\n            canvas.context.translate(0.5, 0.5);\r\n        }\r\n        canvas.fillColor = SELECTION_COLOR;\r\n        // canvas.lineWidth = 1.0 * canvas.ratio;\r\n        canvas.alpha = 0.1;\r\n        canvas.fillRoundRect(x1, y1, x2, y2, 2);\r\n        canvas.color = SELECTION_BORDER_COLOR;\r\n        canvas.alpha = 1;\r\n        canvas.roundRect(x1, y1, x2, y2, 2);\r\n        if (canvas.ratio === 1) {\r\n            canvas.context.translate(-0.5, -0.5);\r\n        }\r\n        canvas.restoreState();\r\n    }\r\n\r\n    function drawSelectionBox(canvas, x1, y1, x2, y2) {\r\n        canvas.storeState();\r\n        if (canvas.ratio === 1) {\r\n            canvas.context.translate(0.5, 0.5);\r\n        }\r\n        canvas.color = SELECTION_BORDER_COLOR;\r\n        canvas.alpha = 1;\r\n        // canvas.lineWidth = 1.0 * canvas.ratio;\r\n        canvas.rect(x1, y1, x2, y2);\r\n        if (canvas.ratio === 1) {\r\n            canvas.context.translate(-0.5, -0.5);\r\n        }\r\n        canvas.restoreState();\r\n    }\r\n\r\n    function drawSelectionLine(canvas, x1, y1, x2, y2, width, nwse, retouch) {\r\n        var ox, oy, r, r1, r2, rx1, rx2, ry1, ry2;\r\n        canvas.storeState();\r\n        ox = canvas.origin.x;\r\n        oy = canvas.origin.y;\r\n        r1 = new Point(x1, y1);\r\n        r2 = new Point(x2, y2);\r\n        Coord.coordTransform(canvas.zoomFactor, GridFactor.NO_GRID, r1);\r\n        Coord.coordTransform(canvas.zoomFactor, GridFactor.NO_GRID, r2);\r\n\r\n        // for Retina\r\n        canvas.lineWidth = 1.0 * canvas.ratio;\r\n        rx1 = r1.x * canvas.ratio;\r\n        ry1 = r1.y * canvas.ratio;\r\n        rx2 = r2.x * canvas.ratio;\r\n        ry2 = r2.y * canvas.ratio;\r\n        width = width * canvas.ratio;\r\n\r\n        if (retouch && (((rx1 + ox - width) % 2) === 1)) {\r\n            rx1 = rx1 + 1;\r\n        }\r\n        if (retouch && (((rx2 + ox) % 2) === 1)) {\r\n            rx2 = rx2 - 1;\r\n        }\r\n        r = new Rect(0, 0, 0, 0);\r\n        switch (nwse) {\r\n        case NWSE_N:\r\n            r.setRect(rx1 + ox, ry1 + oy - width, rx2 + ox, ry1 + oy);\r\n            break;\r\n        case NWSE_W:\r\n            r.setRect(rx1 + ox - width, ry1 + oy - width, rx1 + ox, ry2 + oy + width);\r\n            break;\r\n        case NWSE_S:\r\n            r.setRect(rx1 + ox, ry2 + oy, rx2 + ox, ry2 + oy + width);\r\n            break;\r\n        case NWSE_E:\r\n            r.setRect(rx2 + ox, ry1 + oy - width, rx2 + ox + width, ry2 + oy + width);\r\n        }\r\n        r.quantize();\r\n\r\n        canvas.fillColor = SELECTION_COLOR;\r\n        canvas.alpha = 0.1;\r\n        canvas.coordTransformApplied = false;\r\n\r\n        if (canvas.ratio === 1) {\r\n            canvas.context.translate(0.5, 0.5);\r\n        }\r\n\r\n        canvas.fillRect(r.x1, r.y1, r.x2, r.y2);\r\n\r\n        if (canvas.ratio === 1) {\r\n            canvas.context.translate(-0.5, -0.5);\r\n        }\r\n\r\n        canvas.coordTransformApplied = true;\r\n        canvas.restoreState();\r\n    }\r\n\r\n    function drawHighlighter(canvas, x, y, size, enabled, color) {\r\n        var o, p;\r\n        canvas.storeState();\r\n        canvas.color = SELECTION_BORDER_COLOR;\r\n        canvas.fillColor = Color.WHITE;\r\n        canvas.lineWidth = 1.0 * canvas.ratio;\r\n        p = new Point(x, y);\r\n\r\n        // for Retina\r\n        p.x = p.x * canvas.ratio;\r\n        p.y = p.y * canvas.ratio;\r\n        size = size * canvas.ratio;\r\n        p.quantize();\r\n\r\n        o = canvas.origin.copy();\r\n        Coord.coordTransform(canvas.zoomFactor, GridFactor.NO_GRID, p);\r\n        canvas.coordTransformApplied = false;\r\n\r\n        if (canvas.ratio === 1) {\r\n            canvas.context.translate(0.5, 0.5);\r\n        }\r\n        canvas.fillRect(p.x + o.x - size, p.y + o.y - size, p.x + o.x + size, p.y + o.y + size);\r\n        canvas.rect(p.x + o.x - size, p.y + o.y - size, p.x + o.x + size, p.y + o.y + size);\r\n\r\n        if (canvas.ratio === 1) {\r\n            canvas.context.translate(-0.5, -0.5);\r\n        }\r\n        canvas.coordTransformApplied = true;\r\n        canvas.restoreState();\r\n    }\r\n\r\n    function drawHighlighter2(canvas, x1, y1, x2, y2, width, cornerType, enabled, color) {\r\n        var cx, cy, halfW, ox, oy, p, p1, p2;\r\n        canvas.storeState();\r\n        canvas.color = color;\r\n        ox = canvas.origin.x;\r\n        oy = canvas.origin.y;\r\n        p1 = new Point(x1, y1);\r\n        p2 = new Point(x2, y2);\r\n        Coord.coordTransform(canvas.zoomFactor, GridFactor.NO_GRID, p1);\r\n        Coord.coordTransform(canvas.zoomFactor, GridFactor.NO_GRID, p2);\r\n\r\n        // for Retina\r\n        x1 = p1.x * canvas.ratio;\r\n        y1 = p1.y * canvas.ratio;\r\n        x2 = p2.x * canvas.ratio;\r\n        y2 = p2.y * canvas.ratio;\r\n        width = width * canvas.ratio;\r\n\r\n        p = new Point(-100, -100);\r\n        cx = (x1 + x2) / 2;\r\n        cy = (y1 + y2) / 2;\r\n        halfW = width / 2;\r\n        switch (cornerType) {\r\n        case CT_LT:\r\n            p.setPoint(x1 - width, y1 - width);\r\n            break;\r\n        case CT_LM:\r\n            p.setPoint(x1 - width, cy - halfW);\r\n            break;\r\n        case CT_LB:\r\n            p.setPoint(x1 - width, y2);\r\n            break;\r\n        case CT_MT:\r\n            p.setPoint(cx - halfW, y1 - width);\r\n            break;\r\n        case CT_MB:\r\n            p.setPoint(cx - halfW, y2);\r\n            break;\r\n        case CT_RT:\r\n            p.setPoint(x2, y1 - width);\r\n            break;\r\n        case CT_RM:\r\n            p.setPoint(x2, cy - halfW);\r\n            break;\r\n        case CT_RB:\r\n            p.setPoint(x2, y2);\r\n        }\r\n        if (enabled) {\r\n            canvas.fillColor = Color.WHITE;\r\n        } else {\r\n            canvas.fillColor = "#D0D0D0";\r\n        }\r\n        canvas.lineWidth = 1.0 * canvas.ratio;\r\n\r\n        p.quantize();\r\n\r\n        canvas.color = "#4f99ff"; // Color.BLACK;\r\n        canvas.coordTransformApplied = false;\r\n\r\n        if (canvas.ratio === 1) {\r\n            canvas.context.translate(0.5, 0.5);\r\n        }\r\n\r\n        canvas.fillRect(p.x + ox, p.y + oy, p.x + ox + width, p.y + oy + width);\r\n        canvas.rect(p.x + ox, p.y + oy, p.x + ox + width, p.y + oy + width);\r\n\r\n        if (canvas.ratio === 1) {\r\n            canvas.context.translate(-0.5, -0.5);\r\n        }\r\n\r\n        canvas.coordTransformApplied = true;\r\n        canvas.restoreState();\r\n    }\r\n\r\n    function drawLineGuide(canvas, points) {\r\n        var o, p;\r\n        canvas.storeState();\r\n        canvas.color = SELECTION_BORDER_COLOR;\r\n        canvas.fillColor = Color.WHITE;\r\n        canvas.lineWidth = 1.0;\r\n\r\n        o = canvas.origin.copy();\r\n        canvas.coordTransformApplied = false;\r\n        canvas.context.translate(0.5, 0.5);\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            p = new Point(points[i].x, points[i].y);\r\n            Coord.coordTransform(canvas.zoomFactor, GridFactor.NO_GRID, p);\r\n            if (i === 0) {\r\n\r\n            } else {\r\n\r\n            }\r\n        }\r\n        canvas.context.translate(-0.5, -0.5);\r\n        canvas.coordTransformApplied = true;\r\n        canvas.restoreState();\r\n    }\r\n\r\n\r\n    // Constants\r\n    exports.NWSE_N = NWSE_N;\r\n    exports.NWSE_S = NWSE_S;\r\n    exports.NWSE_W = NWSE_W;\r\n    exports.NWSE_E = NWSE_E;\r\n\r\n    exports.CT_LT   = CT_LT;\r\n    exports.CT_LM   = CT_LM;\r\n    exports.CT_LB   = CT_LB;\r\n    exports.CT_MT   = CT_MT;\r\n    exports.CT_MB   = CT_MB;\r\n    exports.CT_RT   = CT_RT;\r\n    exports.CT_RM   = CT_RM;\r\n    exports.CT_RB   = CT_RB;\r\n    exports.CT_AREA = CT_AREA;\r\n    exports.CT_ELSE = CT_ELSE;\r\n\r\n    exports.HIGHLIGHTER_COLOR             = HIGHLIGHTER_COLOR;\r\n    exports.SELECTION_COLOR               = SELECTION_COLOR;\r\n    exports.DEFAULT_HIGHLIGHTER_SIZE      = DEFAULT_HIGHLIGHTER_SIZE;\r\n    exports.DEFAULT_HALF_HIGHLIGHTER_SIZE = DEFAULT_HALF_HIGHLIGHTER_SIZE;\r\n    exports.DEFAULT_SELECTIONLINE_WIDTH   = DEFAULT_SELECTIONLINE_WIDTH;\r\n\r\n    // Public API\r\n    exports.drawEndPoint      = drawEndPoint;\r\n    exports.drawRange         = drawRange;\r\n    exports.drawRangeBox      = drawRangeBox;\r\n    exports.drawDottedLine    = drawDottedLine;\r\n    exports.drawSelection     = drawSelection;\r\n    exports.drawSelectionBox  = drawSelectionBox;\r\n    exports.drawSelectionLine = drawSelectionLine;\r\n    exports.drawHighlighter   = drawHighlighter;\r\n    exports.drawHighlighter2  = drawHighlighter2;\r\n    exports.drawLineGuide     = drawLineGuide;\r\n\r\n});\r\n\r\n\n//# sourceURL=/core/Toolkit.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, _*/\r\n\r\ndefine(\'core/MetaModelManager\',[\'require\',\'exports\',\'module\',\'core/Global\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var _global    = require("core/Global").global;\r\n\r\n    /**\r\n     * Error Messages\r\n     */\r\n    var ERR_METATYPE_OBJECT      = \'"<%=name%>" should be an object\',\r\n        ERR_FIELD_TYPE           = \'"<%=metaType.name%>.<%=field%>" should be "<%=type%>" type\',\r\n        ERR_REQUIRE_FIELD        = \'"<%=metaType.name%>" requires field "<%=field%>"\',\r\n        ERR_METATYPE_KIND        = \'"<%=metaType.name%>.kind" should be "enum" or "class"\',\r\n        ERR_DUPLICATED_LITERAL   = \'"<%=metaType.name%>" has duplicated literal "<%=literal%>"\',\r\n        ERR_ENUM_HAS_LITERALS    = \'"<%=metaType.name%>" should have at least one or more literals\',\r\n        ERR_TYPE_NOT_FOUND       = \'"<%=type%>" is not found specified in "<%=metaType.name%>.<%=field%>"\',\r\n        ERR_UNNAMED_ATTRIBUTE    = \'"<%=metaType.name%>" has unnamed attribute\',\r\n        ERR_DUPLICATED_ATTRIBUTE = \'"<%=metaType.name%>" has duplicated attribute "<%=attribute.name%>"\',\r\n        ERR_ATTRIBUTE_KIND       = \'"<%=metaType.name%>.<%=attribute.name%>.kind" should be "prim", "enum", "var", "ref", "refs", "obj", "objs", or "custom"\',\r\n        ERR_ATTRIBUTE_PRIM_TYPE  = \'"<%=metaType.name%>.<%=attribute.name%>.type" should be "Integer", "String", "Boolean", or "Real"\';\r\n\r\n    /**\r\n     * Assertion\r\n     * @param {boolean} condition\r\n     * @param {string} message\r\n     */\r\n    function assert(condition, message, strings) {\r\n        if (!condition) {\r\n            var err = _.template(message);\r\n            throw "[MetaModelManager] " + err(strings);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate MetaType Definition\r\n     * @param {Object} metaType\r\n     */\r\n    function validateMetaType(name, metaType) {\r\n        assert(_.isObject(metaType), ERR_METATYPE_OBJECT, { name: name });\r\n        assert(metaType.name, ERR_REQUIRE_FIELD, { metaType: metaType, field: "name" });\r\n        assert(metaType.kind === "enum" || metaType.kind === "class", ERR_METATYPE_KIND, { metaType: metaType });\r\n\r\n        // Enum MetaType\r\n        if (metaType.kind === "enum") {\r\n            var lits = metaType.literals;\r\n            assert(Array.isArray(lits) && lits.length > 0, ERR_ENUM_HAS_LITERALS, { metaType: metaType });\r\n\r\n            // Check duplicated literal\r\n            _.each(lits, function (lit1) {\r\n                var len = _.filter(lits, function (lit2) { return lit2 === lit1; }).length;\r\n                assert(len === 1, ERR_DUPLICATED_LITERAL, { metaType: metaType, literal: lit1 });\r\n            });\r\n        }\r\n\r\n        // Class MetaType\r\n        if (metaType.kind === "class") {\r\n\r\n            // Check .super\r\n            if (metaType.super) {\r\n                assert(metaType.super && _global.meta[metaType.super], ERR_TYPE_NOT_FOUND, { metaType: metaType, type: metaType.super, field: "super" });\r\n            }\r\n\r\n            // Check Attributes\r\n            if (metaType.attributes) {\r\n                assert(Array.isArray(metaType.attributes), ERR_FIELD_TYPE, { metaType: metaType, field: "attributes", type: "Array" });\r\n                _.each(metaType.attributes, function (attribute) {\r\n\r\n                    // check \'name\'\r\n                    assert(attribute.name, ERR_UNNAMED_ATTRIBUTE, { metaType: metaType });\r\n\r\n                    // Check \'kind\'\r\n                    assert(_.contains(["prim", "enum", "var", "ref", "refs", "obj", "objs", "custom"], attribute.kind), ERR_ATTRIBUTE_KIND, { metaType: metaType, attribute: attribute });\r\n\r\n                    // Check \'type\'\r\n                    if (attribute.kind === "prim") {\r\n                        assert(_.contains(["Integer", "String", "Boolean", "Real"], attribute.type), ERR_ATTRIBUTE_PRIM_TYPE, { metaType: metaType, attribute: attribute });\r\n                    } else if (attribute.kind !== "custom") {\r\n                        assert(_global.meta[attribute.type], ERR_TYPE_NOT_FOUND, { metaType: metaType, type: attribute.type, field: attribute.name + ".type" });\r\n                    }\r\n\r\n                    // Check duplicated attribute in all inherited attributes\r\n                    var len = _.filter(getMetaAttributes(metaType.name), function (attr) { return attr.name === attribute.name; }).length;\r\n                    assert(len === 1, ERR_DUPLICATED_ATTRIBUTE, { metaType: metaType, attribute: attribute });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register Metamodel by Object\r\n     * @param {Object} metamodel\r\n     */\r\n    function register(metamodel) {\r\n        var name, metaType;\r\n\r\n        // Registering MetaTypes to global.meta\r\n        for (name in metamodel) {\r\n            if (metamodel.hasOwnProperty(name)) {\r\n                metaType = metamodel[name];\r\n                metaType.name = name;\r\n\r\n                // Check duplicated MetaType\r\n                if (_global.meta[name]) {\r\n                    delete metamodel[name];\r\n                    console.error("[MetaModelManager] MetaType \'" + name + "\' is already exists.");\r\n                } else {\r\n                    _global.meta[name] = metaType;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Validate MetaTypes\r\n        for (name in metamodel) {\r\n            if (metamodel.hasOwnProperty(name)) {\r\n                metaType = metamodel[name];\r\n                try {\r\n                    validateMetaType(name, metaType);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return all meta-attributes\r\n     * @param {string} typeName\r\n     * @return {Array.<{name:string, kind:string, type:string}>}\r\n     */\r\n    function getMetaAttributes(typeName) {\r\n        var metaClass = _global.meta[typeName],\r\n            attrs     = [];\r\n        if (metaClass.super) {\r\n            attrs = getMetaAttributes(metaClass.super);\r\n        }\r\n        if (metaClass.attributes) {\r\n            var i, len, item;\r\n            for (i = 0, len = metaClass.attributes.length; i < len; i++) {\r\n                item = metaClass.attributes[i];\r\n                attrs.push(item);\r\n            }\r\n        }\r\n        return attrs;\r\n    }\r\n\r\n    /**\r\n     * Type test: is-kind-of\r\n     * @param {string} child\r\n     * @param {string} parent\r\n     * @return {boolean}\r\n     */\r\n    function isKindOf(child, parent) {\r\n        if (!_global.meta[child]) {\r\n            return false;\r\n        } else if (_global.meta[child] === _global.meta[parent]) {\r\n            return true;\r\n        } else {\r\n            return isKindOf(_global.meta[child].super, parent);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Return a corresponding view type of a given model type.\r\n     * @param {string} typeName\r\n     * @return {string}\r\n     */\r\n    function getViewTypeOf(typeName) {\r\n        var metaClass = _global.meta[typeName];\r\n        if (metaClass) {\r\n            return metaClass.view || null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Return all available view types of a diagram type.\r\n     * @param {string} diagramTypeName\r\n     * @return {Array.<string}>}\r\n     */\r\n    function getAvailableViewTypes(diagramTypeName) {\r\n        var metaClass = _global.meta[diagramTypeName],\r\n            views     = [];\r\n        if (metaClass.super) {\r\n            views = getAvailableViewTypes(metaClass.super);\r\n        }\r\n        if (metaClass.views) {\r\n            var i, len, item;\r\n            for (i = 0, len = metaClass.views.length; i < len; i++) {\r\n                item = metaClass.views[i];\r\n                views.push(item);\r\n            }\r\n        }\r\n        return views;\r\n    }\r\n\r\n    exports.register              = register;\r\n    exports.getMetaAttributes     = getMetaAttributes;\r\n    exports.isKindOf              = isKindOf;\r\n    exports.getViewTypeOf         = getViewTypeOf;\r\n    exports.getAvailableViewTypes = getAvailableViewTypes;\r\n\r\n});\r\n\r\n\n//# sourceURL=/core/MetaModelManager.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, localStorage */\r\n\r\n/**\r\n * PreferenceManager only works in browser (it uses global localStorage object).\r\n */\r\ndefine(\'core/PreferenceManager\',[\'require\',\'exports\',\'module\',\'core/Global\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global = require("core/Global").global;\r\n\r\n    /**\r\n     * Preference Schema Map\r\n     * @type {Object.<string,{name:string, schema:Object}>}\r\n     */\r\n    var _schemaMap = {};\r\n\r\n    /**\r\n     * Preference Item Map\r\n     * @type {Object.<string,Object>}\r\n     */\r\n    var _itemMap = {};\r\n\r\n    function getSchema(id) {\r\n        return _schemaMap[id].schema;\r\n    }\r\n\r\n    function getSchemaName(id) {\r\n        return _schemaMap[id].name;\r\n    }\r\n\r\n    function getSchemaIds() {\r\n        return _.keys(_schemaMap);\r\n    }\r\n\r\n    function getItem(key) {\r\n        return _itemMap[key];\r\n    }\r\n\r\n    /**\r\n     * Validate preference schema\r\n     * @param {Object} schema\r\n     * @return {boolean}\r\n     */\r\n    function validate(schema) {\r\n        var key, item;\r\n        for (key in schema) {\r\n            if (schema.hasOwnProperty(key)) {\r\n                item = schema[key];\r\n                if (!item.text) {\r\n                    console.error("[PreferenceManager] missing required field: \'text\' of \'" + key + "\'");\r\n                }\r\n                if (!item.type) {\r\n                    console.error("[PreferenceManager] missing required field: \'type\' of \'" + key + "\'");\r\n                }\r\n                if (item.type !== "Section" && typeof item[\'default\'] === "undefined") {\r\n                    console.error("[PreferenceManager] missing required field: \'default\' of \'" + key + "\'");\r\n                }\r\n                if (item.type === "Combo" || item.type === "Dropdown") {\r\n                    if (item.options && item.options.length > 0) {\r\n                        var i, len;\r\n                        for (i = 0, len = item.options.length; i < len; i++) {\r\n                            if (typeof item.options[i].value === "undefined") {\r\n                                console.error("[PreferenceManager] missing required field of option item: \'value\' of \'" + key + "\'");\r\n                            }\r\n                            if (typeof item.options[i].text === "undefined") {\r\n                                console.error("[PreferenceManager] missing required field of option item: \'text\' of \'" + key + "\'");\r\n                            }\r\n                        }\r\n                    } else {\r\n                        console.error("[PreferenceManager] missing required field or no items: \'options\' of \'" + key + "\'");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Register preference schema\r\n     * @param {string} id\r\n     * @param {string} name\r\n     * @param {Object} schema\r\n     */\r\n    function register(id, name, schema) {\r\n        if (!id || !name || !schema) {\r\n            console.error("register(): missing required parameters: id, name, or schema");\r\n            return;\r\n        }\r\n\r\n        if (validate(schema)) {\r\n            _schemaMap[id] = {\r\n                id: id,\r\n                name: name,\r\n                schema: schema\r\n            };\r\n\r\n            // Build Preference Item Map\r\n            _.each(schema, function (item, key) {\r\n                if (item) {\r\n                    _itemMap[key] = item;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return value of key\r\n     *\r\n     * @param {string} key\r\n     * @param {?} defaultValue\r\n     * @return {?}\r\n     */\r\n    function get(key, defaultValue) {\r\n        defaultValue = typeof defaultValue === "undefined" ? null : defaultValue;\r\n        if (global.localStorage) {\r\n            var _value = global.localStorage.getItem(key),\r\n                value = null;\r\n            if (_value) {\r\n                try {\r\n                    value = JSON.parse(_value);\r\n                } catch (e) {\r\n                    console.error("[PreferenceManager] Failed to read preference value of key: " + key);\r\n                }\r\n            } else {\r\n                // if not stored in localStorage, return default value from schema\r\n                if (_itemMap[key] && typeof _itemMap[key][\'default\'] !== "undefined") {\r\n                    value = _itemMap[key][\'default\'];\r\n                } else {\r\n                    value = defaultValue;\r\n                }\r\n            }\r\n            return value;\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change value of key\r\n     * @param {string} key\r\n     * @param {?} value\r\n     */\r\n    function set(key, value) {\r\n        if (global.localStorage) {\r\n            var _value;\r\n            try {\r\n                _value = JSON.stringify(value);\r\n                global.localStorage.setItem(key, _value);\r\n                $(exports).triggerHandler("change", [key, value]);\r\n            } catch (e) {\r\n                console.error("[PreferenceManager] Failed to write preference value of key: " + key);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convenience function that gets a view state\r\n     *\r\n     * @param {string} id preference to get\r\n     * @param {?Object} context Optional additional information about the request\r\n     */\r\n    function getViewState(id, context) {\r\n        var state = get("_viewState." + id);\r\n        if (!state) {\r\n            state = {};\r\n        }\r\n        return state;\r\n    }\r\n\r\n    /**\r\n     * Convenience function that sets a view state and then saves the file\r\n     *\r\n     * @param {string} id preference to set\r\n     * @param {*} value new value for the preference\r\n     * @param {?Object} context Optional additional information about the request\r\n     * @param {boolean=} doNotSave If it is undefined or false, then save the\r\n     *      view state immediately.\r\n     */\r\n    function setViewState(id, value, context, doNotSave) {\r\n        set("_viewState." + id, value);\r\n    }\r\n\r\n    // Public API\r\n    exports.getSchema     = getSchema;\r\n    exports.getSchemaName = getSchemaName;\r\n    exports.getSchemaIds  = getSchemaIds;\r\n    exports.getItem       = getItem;\r\n    exports.register      = register;\r\n    exports.get           = get;\r\n    exports.set           = set;\r\n    exports.getViewState  = getViewState;\r\n    exports.setViewState  = setViewState;\r\n\r\n});\r\n\n//# sourceURL=/core/PreferenceManager.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*\r\n * Meta Class Definition\r\n * - kind: \'class\', \'enum\', or \'datatype\'\r\n * - super? : super meta class\r\n * - attributes : []\r\n * - constraints : {\r\n *     allowedParents: [ {type: \'UMLClassifier\', field: \'ownedElements\' }, ... ]\r\n *     correspondViews: [ {diagram: \'UMLClassDiagram\', viewType: \'UMLClass\' }, ... ]\r\n *   }\r\n *\r\n * Meta Attribute Definition\r\n * - name: 속성의 이름\r\n * - kind: 속성의 종류 (ATTR_KIND_*)\r\n * - type: 속성의 타입 (String등의 기본 타입에서 다른 클래스명) Allowed Primitive Types = String | Boolean | Integer | Real\r\n * - default: 속성의 기본 값 (optional)\r\n * - visible: 속성의 가시성 (PropertyEditor에 보일것인가를 결정) (optional)\r\n * - readOnly: 읽기전용 속성 (PropertyEditor에서 사용자에 의해 편집 불가) (optional)\r\n * - transient: 속성이 저장될것인가 (e.g. View\'s selected 속성은 저장되면 안됨) (optional)\r\n */\r\n\r\n/**\r\n * Core module\r\n * Meta Class Definition\r\n * - super? : super meta class\r\n * - attributes : []\r\n * - constraints : {\r\n *     allowedParents: [ {type: \'UMLClassifier\', field: \'ownedElements\' }, ... ]\r\n *     correspondViews: [ {diagram: \'UMLClassDiagram\', viewType: \'UMLClass\' }, ... ]\r\n *   }\r\n *\r\n * 메타 속성의 정의\r\n * - name: 속성의 이름\r\n * - kind: 속성의 종류 (ATTR_KIND_*)\r\n * - type: 속성의 타입 (String등의 기본 타입에서 다른 클래스명)\r\n * - default: 속성의 기본 값 (optional)\r\n * - visible: 속성의 가시성 (PropertyEditor에 보일것인가를 결정) (optional)\r\n * - readOnly: 읽기전용 속성 (PropertyEditor에서 사용자에 의해 편집 불가) (optional)\r\n * - transient: 속성이 저장될것인가 (e.g. View\'s selected 속성은 저장되면 안됨) (optional)\r\n * @exports core/Core\r\n */\r\n\r\n/**\r\n * NOTE:\r\n * Requires graphlib and dagre as global variables, which are used only in Diagram.layout().\r\n * If not exists, Diagram.layout() will not work with no errors.\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, loopfunc: true */\r\n/*global define, _, type, graphlib, dagre */\r\n\r\n/**\r\n * Core classes is defined in this module. We don\'t recommend to instantiate\r\n *   instance of classes defined in this module in your extension.\r\n *\r\n * (This module is not well documented)\r\n */\r\ndefine(\'core/Core\',[\'require\',\'exports\',\'module\',\'core/Global\',\'core/IdGenerator\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Toolkit\',\'core/MetaModelManager\',\'core/PreferenceManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var _global           = require("core/Global").global,\r\n        IdGenerator       = require("core/IdGenerator"),\r\n        Graphics          = require("core/Graphics"),\r\n        Point             = require("core/Graphics").Point,\r\n        Rect              = require("core/Graphics").Rect,\r\n        Color             = require("core/Graphics").Color,\r\n        Font              = require("core/Graphics").Font,\r\n        ZoomFactor        = require("core/Graphics").ZoomFactor,\r\n        GridFactor        = require("core/Graphics").GridFactor,\r\n        Points            = require("core/Graphics").Points,\r\n        Coord             = require("core/Graphics").Coord,\r\n        Canvas            = require("core/Graphics").Canvas,\r\n        Toolkit           = require("core/Toolkit"),\r\n        MetaModelManager  = require("core/MetaModelManager"),\r\n        PreferenceManager = require("core/PreferenceManager");\r\n\r\n    /**\r\n     * Attribute Kind\r\n     * @const {string}\r\n     */\r\n    var ATTR_KIND_PRIM   = \'prim\',\r\n        ATTR_KIND_ENUM   = \'enum\',\r\n        ATTR_KIND_REF    = \'ref\',\r\n        ATTR_KIND_REFS   = \'refs\',\r\n        ATTR_KIND_OBJ    = \'obj\',\r\n        ATTR_KIND_OBJS   = \'objs\',\r\n        ATTR_KIND_VAR    = \'var\',\r\n        ATTR_KIND_CUSTOM = \'custom\';\r\n\r\n    /**\r\n     * Selectable Kind\r\n     * @enum {number}\r\n     */\r\n    var SK_NO        = 0,\r\n        SK_YES       = 1,\r\n        SK_PROPAGATE = 2;\r\n\r\n    /**\r\n     * Sizing Mode\r\n     * @enum {number}\r\n     */\r\n    var SZ_NONE  = 0,\r\n        SZ_HORZ  = 1,\r\n        SZ_VERT  = 2,\r\n        SZ_RATIO = 3,\r\n        SZ_FREE  = 4;\r\n\r\n    /**\r\n     * Move Mode\r\n     * @enum {number}\r\n     */\r\n    var MM_NONE = 0,\r\n        MM_HORZ = 1,\r\n        MM_VERT = 2,\r\n        MM_FREE = 3;\r\n\r\n    /**\r\n     * Line Mode\r\n     * @enum {number}\r\n     */\r\n    var LM_SOLID = 0,\r\n        LM_DOT   = 1;\r\n\r\n    /**\r\n     * Line Style\r\n     * @enum {number}\r\n     */\r\n    var LS_RECTILINEAR = 0,\r\n        LS_OBLIQUE     = 1,\r\n        LS_ROUNDRECT   = 2,\r\n        LS_CURVE       = 3;\r\n\r\n    /**\r\n     * Line End Style\r\n     * @enum {number}\r\n     */\r\n    var ES_FLAT                 = 0,\r\n        ES_STICK_ARROW          = 1,\r\n        ES_SOLID_ARROW          = 2,\r\n        ES_TRIANGLE             = 3,\r\n        ES_FILLED_TRIANGLE      = 4,\r\n        ES_DIAMOND              = 5,\r\n        ES_FILLED_DIAMOND       = 6,\r\n        ES_ARROW_DIAMOND        = 7,\r\n        ES_ARROW_FILLED_DIAMOND = 8,\r\n        ES_PLUS                 = 9,\r\n        ES_CIRCLE               = 10,\r\n        ES_CIRCLE_PLUS          = 11,\r\n        ES_CROWFOOT_ONE         = 12,\r\n        ES_CROWFOOT_MANY        = 13,\r\n        ES_CROWFOOT_ZERO_ONE    = 14,\r\n        ES_CROWFOOT_ZERO_MANY   = 15;\r\n\r\n    /**\r\n     * Edge Position\r\n     * @enum {number}\r\n     */\r\n    var EP_HEAD   = 0,\r\n        EP_MIDDLE = 1,\r\n        EP_TAIL   = 2;\r\n\r\n    /**\r\n     * Direction Kind\r\n     * @enum {number}\r\n     */\r\n    var DK_HORZ = 0,\r\n        DK_VERT = 1;\r\n\r\n\r\n    /**\r\n     * Diagram Layout Direction\r\n     */\r\n    var DIRECTION_TB = "TB",\r\n        DIRECTION_BT = "BT",\r\n        DIRECTION_LR = "LR",\r\n        DIRECTION_RL = "RL";\r\n\r\n\r\n    /**\r\n     * Constants for Layout\r\n     */\r\n    var LAYOUT_MARGIN_LEFT = 20,\r\n        LAYOUT_MARGIN_TOP  = 20,\r\n        NODE_SEPARATION    = 30,\r\n        EDGE_SEPARATION    = 30,\r\n        RANK_SEPARATION    = 30;\r\n\r\n    /**\r\n     * TagKind\r\n     * @enum\r\n     */\r\n    var TK_STRING    = \'string\',\r\n        TK_REFERENCE = \'reference\',\r\n        TK_BOOLEAN   = \'boolean\',\r\n        TK_NUMBER    = \'number\',\r\n        TK_HIDDEN    = \'hidden\';\r\n\r\n    /**\r\n     * Element\r\n     * @constructor\r\n     */\r\n    function Element() {\r\n\r\n        /**\r\n         * gloly unique identifier\r\n         * @member {string}\r\n         */\r\n        this._id = IdGenerator.generateGuid();\r\n\r\n        /**\r\n         * reference to its parent\r\n         * @member {object}\r\n         */\r\n        this._parent = null;\r\n    }\r\n\r\n    /**\r\n     * Return class name for display (e.g. "Class" rather than "UMLClass").\r\n     * @return {string}\r\n     */\r\n    Element.prototype.getDisplayClassName = function () {\r\n        return this.getClassName();\r\n    };\r\n\r\n    /**\r\n     * Return Class. (equivalent to `type[element.getClassName()])`\r\n     *\r\n     * @return {constructor}\r\n     */\r\n    Element.prototype.getClass = function () {\r\n        return _global.type[this.constructor.name];\r\n    };\r\n\r\n    /**\r\n     * Return Class name.\r\n     *\r\n     * @return {string}\r\n     */\r\n    Element.prototype.getClassName = function () {\r\n        return this.constructor.name;\r\n    };\r\n\r\n    /**\r\n     * Return Meta Class.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    Element.prototype.getMetaClass = function () {\r\n        return _global.meta[this.constructor.name];\r\n    };\r\n\r\n    /**\r\n     * Return Meta Attributes.\r\n     *\r\n     * @return {Array.<{name:string, kind:string, type:string}>}\r\n     */\r\n    Element.prototype.getMetaAttributes = function () {\r\n        return MetaModelManager.getMetaAttributes(this.getClassName());\r\n    };\r\n\r\n    /**\r\n     * Return name of parent\'s field containing this object.\r\n     *\r\n     * @return {string} Field name (e.g. \'ownedElements\')\r\n     */\r\n    Element.prototype.getParentField = function () {\r\n        if (this._parent) {\r\n            for (var field in this._parent) {\r\n                var value = this._parent[field];\r\n                if (_.isArray(value)) {\r\n                    if (_.contains(value, this)) { return field; }\r\n                } else if (_.isObject(value)) {\r\n                    if (value === this) { return field; }\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Return CSS class name of icon for this object. (Shown in Explorer)\r\n     *\r\n     * @return {string} - iconClass명 (e.g. \'icon-UMLClass\')\r\n     */\r\n    Element.prototype.getNodeIcon = function () {\r\n        return "icon-" + this.getClassName();\r\n    };\r\n\r\n    /**\r\n     * Return textual string for this object. (Shown in Explorer)\r\n     * @param {object} options\r\n     * @return {string} Text (e.g. \'<<stereotype>>Class1\')\r\n     */\r\n    Element.prototype.getNodeText = function (options) {\r\n        if (this.name && this.name.length > 0) {\r\n            return this.name;\r\n        } else {\r\n            return "(" + this.getDisplayClassName() + ")";\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Return ordering priority number. (Lower value comes first in Explorer)\r\n     *\r\n     * @param {number} index\r\n     * @return {Number}\r\n     */\r\n    Element.prototype.getOrdering = function (index) {\r\n        var base      = 100000,\r\n            ordering  = 0,\r\n            metaClass = this.getMetaClass();\r\n        if (metaClass && metaClass.ordering) {\r\n            ordering = metaClass.ordering * base;\r\n        }\r\n        if (_.isNumber(index)) {\r\n            ordering = ordering + index;\r\n        }\r\n        return ordering;\r\n    };\r\n\r\n    /**\r\n     * Return all child nodes to be shown in Explorer.\r\n     *\r\n     * @param {boolean} sort\r\n     * @return {Array.<Element>}\r\n     */\r\n    Element.prototype.getChildNodes = function (sort) {\r\n        var children = [];\r\n        var self = this;\r\n\r\n        function push(elem) {\r\n            if (elem instanceof Model) {\r\n                children.push(elem);\r\n            }\r\n        }\r\n\r\n        _.forEach(this.getMetaAttributes(), function (attr) {\r\n            switch (attr.kind) {\r\n            case ATTR_KIND_OBJ:\r\n                if (self[attr.name]) {\r\n                    push(self[attr.name]);\r\n                }\r\n                break;\r\n            case ATTR_KIND_OBJS:\r\n                var items = self[attr.name];\r\n                if (items && items.length > 0) {\r\n                    _.forEach(items, function (item) {\r\n                        push(item);\r\n                    });\r\n                }\r\n                break;\r\n            }\r\n        });\r\n\r\n        if (sort) {\r\n            children = _.sortBy(children, function (child, idx) {\r\n                return child.getOrdering(idx);\r\n            });\r\n        }\r\n\r\n        return children;\r\n    };\r\n\r\n\r\n    /**\r\n     * Return all children.\r\n     *\r\n     * @return {Array.<Element>}\r\n     */\r\n    Element.prototype.getChildren = function () {\r\n        var children = [];\r\n        var self = this;\r\n        _.forEach(this.getMetaAttributes(), function (attr) {\r\n            switch (attr.kind) {\r\n            case ATTR_KIND_OBJ:\r\n                if (self[attr.name]) {\r\n                    children.push(self[attr.name]);\r\n                }\r\n                break;\r\n            case ATTR_KIND_OBJS:\r\n                var items = self[attr.name];\r\n                if (items && items.length > 0) {\r\n                    _.forEach(items, function (item) {\r\n                        children.push(item);\r\n                    });\r\n                }\r\n                break;\r\n            }\r\n        });\r\n        return children;\r\n    };\r\n\r\n    /**\r\n     * Traverse all nodes in the tree structure. (Breadth-First Traversal)\r\n     *\r\n     * @param {function(elem:Element)} fun\r\n     */\r\n    Element.prototype.traverse = function (fun) {\r\n        fun(this);\r\n        var attrs = this.getMetaAttributes();\r\n        for (var i = 0, len = attrs.length; i < len; i++) {\r\n            var attr = attrs[i];\r\n            if (this[attr.name] !== null) {\r\n                switch (attr.kind) {\r\n                case ATTR_KIND_OBJ:\r\n                    this[attr.name].traverse(fun);\r\n                    break;\r\n                case ATTR_KIND_OBJS:\r\n                    for (var j = 0, len1 = this[attr.name].length; j < len1; j++) {\r\n                        var obj = this[attr.name][j];\r\n                        obj.traverse(fun);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Traverse all nodes in the tree structure. (Depth-First Traversal)\r\n     *\r\n     * @param {function(elem:Element)} fun\r\n     */\r\n    Element.prototype.traverseDepthFirst = function (fun) {\r\n        var attrs = this.getMetaAttributes();\r\n        for (var i = 0, len = attrs.length; i < len; i++) {\r\n            var attr = attrs[i];\r\n            if (this[attr.name] !== null) {\r\n                switch (attr.kind) {\r\n                case ATTR_KIND_OBJ:\r\n                    this[attr.name].traverseDepthFirst(fun);\r\n                    break;\r\n                case ATTR_KIND_OBJS:\r\n                    for (var j = 0, len1 = this[attr.name].length; j < len1; j++) {\r\n                        var obj = this[attr.name][j];\r\n                        obj.traverseDepthFirst(fun);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        fun(this);\r\n    };\r\n\r\n    /**\r\n     * Traverse a specific field chains. (Breadth-First Traversal)\r\n     *\r\n     * @param {string} field Field name to traverse (e.g. \'ownedElements\')\r\n     * @param {function} fun\r\n     */\r\n    Element.prototype.traverseField = function (field, fun) {\r\n        fun(this);\r\n        var ref = this[field];\r\n        for (var i = 0, len = ref.length; i < len; i++) {\r\n            var v = ref[i];\r\n            v.traverseField(field, fun);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Traverse a specific field chains. (Depth-First Traversal)\r\n     *\r\n     * @param {string} field Field name to traverse (e.g. \'ownedElements\')\r\n     * @param {function} fun\r\n     */\r\n    Element.prototype.traverseFieldDepthFirst = function (field, fun) {\r\n        var ref = this[field];\r\n        for (var i = 0, len = ref.length; i < len; i++) {\r\n            var v = ref[i];\r\n            v.traverseFieldDepthFirst(field, fun);\r\n        }\r\n        fun(this);\r\n    };\r\n\r\n    /**\r\n     * Traverse up along with the `_parent` chain.\r\n     * @param {function} fun\r\n     */\r\n    Element.prototype.traverseUp = function (fun) {\r\n        fun(this);\r\n        if (this._parent) {\r\n            this._parent.traverseUp(fun);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Read it\'s state data from Reader.\r\n     *\r\n     * @param {Reader} reader\r\n     */\r\n    Element.prototype.load = function (reader) {\r\n        var attrs = this.getMetaAttributes();\r\n        for (var i = 0, len = attrs.length; i < len; i++) {\r\n            var attr = attrs[i], val;\r\n            switch (attr.kind) {\r\n            case ATTR_KIND_PRIM:\r\n                val = reader.read(attr.name);\r\n                if (typeof val !== "undefined") {\r\n                    this[attr.name] = val;\r\n                }\r\n                break;\r\n            case ATTR_KIND_ENUM:\r\n                val = reader.read(attr.name);\r\n                if (typeof val !== "undefined") {\r\n                    this[attr.name] = val;\r\n                }\r\n                break;\r\n            case ATTR_KIND_REF:\r\n                val = reader.readRef(attr.name);\r\n                var prevRef = this[attr.name];\r\n                if (typeof val !== "undefined") {\r\n                    // Remove previous embedded reference\r\n                    if (prevRef && attr.embedded) {\r\n                        if (Array.isArray(this[attr.embedded])) {\r\n                            this[attr.embedded].remove(prevRef);\r\n                        }\r\n                    }\r\n                    // Assign new reference\r\n                    this[attr.name] = val;\r\n                } else {\r\n                    // Register previous embedded reference\r\n                    if (prevRef && attr.embedded) {\r\n                        reader.idMap[prevRef._id] = prevRef;\r\n                    }\r\n                }\r\n                break;\r\n            case ATTR_KIND_REFS:\r\n                val = reader.readRefArray(attr.name);\r\n                if (typeof val !== "undefined") {\r\n                    this[attr.name] = val;\r\n                }\r\n                break;\r\n            case ATTR_KIND_OBJ:\r\n                val = reader.readObj(attr.name);\r\n                if (typeof val !== "undefined") {\r\n                    this[attr.name] = val;\r\n                }\r\n                break;\r\n            case ATTR_KIND_OBJS:\r\n                val = reader.readObjArray(attr.name);\r\n                if (!Array.isArray(this[attr.name])) {\r\n                    this[attr.name] = [];\r\n                }\r\n                // Append loaded objects to the existing array\r\n                if (Array.isArray(val)) {\r\n                    for (var j = 0; j < val.length; j++) {\r\n                        this[attr.name].push(val[j]);\r\n                    }\r\n                }\r\n                break;\r\n            case ATTR_KIND_VAR:\r\n                val = reader.readVariant(attr.name);\r\n                if (typeof val !== "undefined") {\r\n                    this[attr.name] = val;\r\n                }\r\n                break;\r\n            case ATTR_KIND_CUSTOM:\r\n                val = reader.readCustom(attr.type, attr.name);\r\n                if (typeof val !== "undefined") {\r\n                    this[attr.name] = val;\r\n                }\r\n                break;\r\n            default:\r\n                void 0;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Write it\'s state data to writer.\r\n     *\r\n     * @param {Writer} writer\r\n     */\r\n    Element.prototype.save = function (writer) {\r\n        writer.write(\'_type\', this.getClassName());\r\n        var attrs = this.getMetaAttributes();\r\n        for (var i = 0, len = attrs.length; i < len; i++) {\r\n            var attr = attrs[i];\r\n            if (typeof this[attr.name] !== "undefined" && attr.transient !== true) {\r\n                switch (attr.kind) {\r\n                case ATTR_KIND_PRIM:\r\n                    switch (attr.type) {\r\n                    case "String":\r\n                        if (this[attr.name] !== "" && this[attr.name] !== null) {\r\n                            writer.write(attr.name, this[attr.name]);\r\n                        }\r\n                        break;\r\n                    case "Integer":\r\n                    case "Real":\r\n                        writer.write(attr.name, this[attr.name]);\r\n                        break;\r\n                    case "Boolean":\r\n                        writer.write(attr.name, this[attr.name]);\r\n                        break;\r\n                    default:\r\n                        writer.write(attr.name, this[attr.name]);\r\n                        break;\r\n                    }\r\n                    break;\r\n                case ATTR_KIND_ENUM:\r\n                    writer.write(attr.name, this[attr.name]);\r\n                    break;\r\n                case ATTR_KIND_REF:\r\n                    if (this[attr.name] !== null) {\r\n                        writer.writeRef(attr.name, this[attr.name]);\r\n                    }\r\n                    break;\r\n                case ATTR_KIND_REFS:\r\n                    if (_.isArray(this[attr.name]) && this[attr.name].length > 0) {\r\n                        writer.writeRefArray(attr.name, this[attr.name]);\r\n                    }\r\n                    break;\r\n                case ATTR_KIND_OBJ:\r\n                    if (this[attr.name] !== null) {\r\n                        writer.writeObj(attr.name, this[attr.name]);\r\n                    }\r\n                    break;\r\n                case ATTR_KIND_OBJS:\r\n                    if (_.isArray(this[attr.name]) && this[attr.name].length > 0) {\r\n                        writer.writeObjArray(attr.name, this[attr.name]);\r\n                    }\r\n                    break;\r\n                case ATTR_KIND_VAR:\r\n                    if (this[attr.name] !== null) {\r\n                        writer.writeVariant(attr.name, this[attr.name]);\r\n                    }\r\n                    break;\r\n                case ATTR_KIND_CUSTOM:\r\n                    if (this[attr.name] !== null) {\r\n                        writer.writeCustom(attr.name, this[attr.name]);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Store it\'s state data to memento\r\n     *\r\n     * @param {object} memento\r\n     */\r\n    Element.prototype.assignTo = function (memento) {\r\n        var attrs = this.getMetaAttributes();\r\n        for (var i = 0, len = attrs.length; i < len; i++) {\r\n            var attr = attrs[i];\r\n            if (this[attr.name] !== null) {\r\n                switch (attr.kind) {\r\n                case ATTR_KIND_PRIM:\r\n                    memento[attr.name] = this[attr.name];\r\n                    break;\r\n                case ATTR_KIND_ENUM:\r\n                    memento[attr.name] = this[attr.name];\r\n                    break;\r\n                case ATTR_KIND_CUSTOM:\r\n                    memento[attr.name] = this[attr.name].__write();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Load it\'s state data from memento\r\n     *\r\n     * @param {object} memento\r\n     */\r\n    Element.prototype.assignFrom = function (memento) {\r\n        var attrs = this.getMetaAttributes();\r\n        for (var i = 0, len = attrs.length; i < len; i++) {\r\n            var attr = attrs[i];\r\n            switch (attr.kind) {\r\n            case ATTR_KIND_PRIM:\r\n                this[attr.name] = memento[attr.name];\r\n                break;\r\n            case ATTR_KIND_ENUM:\r\n                this[attr.name] = memento[attr.name];\r\n                break;\r\n            case ATTR_KIND_CUSTOM:\r\n                if (this[attr.name] !== null) {\r\n                    this[attr.name].__read(memento[attr.name]);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Return differences between it\'s state data and data stored in memento.\r\n     *\r\n     * @param {object} memento\r\n     * @return {Array.<{elem:Element, f:string, n:?, o:?}>} `{f: Field name, n: New value, o: Old value}`\r\n     */\r\n    Element.prototype.diff = function (memento) {\r\n        var diffs = [];\r\n        var attrs = this.getMetaAttributes();\r\n        var newVal = null, oldVal = null;\r\n        for (var i = 0, len = attrs.length; i < len; i++) {\r\n            var attr = attrs[i];\r\n            if (this[attr.name] !== null) {\r\n                switch (attr.kind) {\r\n                case ATTR_KIND_PRIM:\r\n                    newVal = this[attr.name];\r\n                    oldVal = memento[attr.name];\r\n                    if (newVal !== oldVal) {\r\n                        diffs.push({\r\n                            elem: this,\r\n                            f: attr.name,\r\n                            n: newVal,\r\n                            o: oldVal\r\n                        });\r\n                    }\r\n                    break;\r\n                case ATTR_KIND_ENUM:\r\n                    newVal = this[attr.name];\r\n                    oldVal = memento[attr.name];\r\n                    if (newVal !== oldVal) {\r\n                        diffs.push({\r\n                            elem: this,\r\n                            f: attr.name,\r\n                            n: newVal,\r\n                            o: oldVal\r\n                        });\r\n                    }\r\n                    break;\r\n                case ATTR_KIND_CUSTOM:\r\n                    newVal = this[attr.name].__write();\r\n                    oldVal = memento[attr.name];\r\n                    if (newVal !== oldVal) {\r\n                        diffs.push({\r\n                            elem: this,\r\n                            f: attr.name,\r\n                            n: newVal,\r\n                            o: oldVal\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return diffs;\r\n    };\r\n\r\n    /**\r\n     * Find an element by name. Find through `ownedElements` chain, and then lookup through `_parent` chain.\r\n     *\r\n     * @param {string} name\r\n     * @param {constructor} typeFilter\r\n     * @param {Element} namespace Lookup only inside of namespace\r\n     * @return {Element} Return the first matched element.\r\n     */\r\n    Element.prototype.lookup = function (name, typeFilter, namespace) {\r\n        var children = this.getChildren();\r\n        for (var i = 0, len = children.length; i < len; i++) {\r\n            var elem = children[i];\r\n            if (typeFilter) {\r\n                if ((elem instanceof typeFilter) && (elem.name === name)) {\r\n                    return elem;\r\n                }\r\n            } else {\r\n                if (elem.name === name) {\r\n                    return elem;\r\n                }\r\n            }\r\n        }\r\n        if (this !== namespace && this._parent !== null) {\r\n            return this._parent.lookup(name, typeFilter, namespace);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Find by name in child elements\r\n     *\r\n     * @param {string | Array.<string>} name\r\n     * @return {Element}\r\n     */\r\n    Element.prototype.findByName = function (name) {\r\n        var children = this.getChildren();\r\n        for (var i = 0, len = children.length; i < len; i++) {\r\n            var elem = children[i];\r\n            if (elem.name === name) {\r\n                return elem;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Look down an element along parent-children chains.\r\n     *\r\n     * @param {Array.<string>} pathName\r\n     * @return {Element}\r\n     */\r\n    Element.prototype.lookdown = function (pathName) {\r\n        if (_.isArray(pathName) && pathName.length > 0) {\r\n            var elem = this.findByName(pathName[0]);\r\n            if (pathName.length === 1) {\r\n                return elem;\r\n            } else if (elem) {\r\n                return elem.lookdown(_.rest(pathName));\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Return true only if a given elem is one of the container.\r\n     *\r\n     * @param {Element} elem\r\n     * @return {boolean}\r\n     */\r\n    Element.prototype.isOneOfTheContainers = function(elem) {\r\n        if ((this._parent === null) || (elem === this)) {\r\n            return false;\r\n        } else if (elem === this._parent) {\r\n            return true;\r\n        } else {\r\n            return this._parent.isOneOfTheContainers(elem);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Return true only if it can contain the kind of elements\r\n     *\r\n     * @param {string} kind\r\n     * @return {Boolean}\r\n     */\r\n    Element.prototype.canContainKind = function(kind) {\r\n        var attrs = this.getMetaAttributes();\r\n        for (var i = 0, len = attrs.length; i < len; i++) {\r\n            var attr = attrs[i];\r\n            if (attr.kind === ATTR_KIND_OBJ || attr.kind === ATTR_KIND_OBJS) {\r\n                if (attr.type && _global.meta[kind] && (MetaModelManager.isKindOf(kind, attr.type))) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Return true only if it can contain a given element.\r\n     *\r\n     * @param {Element} elem\r\n     * @return {Boolean}\r\n     */\r\n    Element.prototype.canContain = function(elem) {\r\n        if (elem !== null) {\r\n            return this.canContainKind(elem.getClassName()) &&\r\n                   (elem !== this) &&\r\n                   (!this.isOneOfTheContainers(elem));\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Return true only if it could be copied.\r\n     * @return {Boolean}\r\n     */\r\n    Element.prototype.canCopy = function () {\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Return true only if it could be deleted alone.\r\n     * @return {Boolean}\r\n     */\r\n    Element.prototype.canDelete = function () {\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Return true only if it can accomodate elements in clipboard\r\n     *     based on a given kind and copyContext.\r\n     *\r\n     * @param {string} kind\r\n     * @param {{field:string}} copyContext\r\n     * @return {Boolean}\r\n     */\r\n    Element.prototype.canPaste = function (kind, copyContext) {\r\n        return this.canContainKind(kind) && this[copyContext.field];\r\n    };\r\n\r\n    /**\r\n     * Model\r\n     *\r\n     * @constructor\r\n     * @extends Element\r\n     */\r\n    function Model() {\r\n        Element.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.name = "";\r\n\r\n        /** @member {Array.<Model>} */\r\n        this.ownedElements = [];\r\n    }\r\n\r\n    // inherits from Element\r\n    Model.prototype = Object.create(Element.prototype);\r\n    Model.prototype.constructor = Model;\r\n\r\n    /**\r\n     * Get a corresponding view type\r\n     *\r\n     * @return {constructor}\r\n     */\r\n    Model.prototype.getViewType = function () {\r\n        var typeName = MetaModelManager.getViewTypeOf(this.getClassName()),\r\n            ViewType = typeName ? type[typeName] : null;\r\n        return ViewType;\r\n    };\r\n\r\n    /**\r\n     * Get path to from a given base\r\n     *\r\n     * @param {Model} base\r\n     * @return {Array.<string>}\r\n     */\r\n    Model.prototype.getPath = function(base) {\r\n        if (this === base) {\r\n            return [];\r\n        } else if (!this._parent) {\r\n            return [this];\r\n        } else if (this._parent) {\r\n            var result = this._parent.getPath(base);\r\n            result.push(this);\r\n            return result;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Return full pathname\r\n     *\r\n     * @return {string}\r\n     */\r\n    Model.prototype.getPathname = function() {\r\n        var _name = this.name;\r\n        if (this._parent && this._parent._parent) {\r\n            return this._parent.getPathname() + "::" + _name;\r\n        } else {\r\n            return _name;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Return true only if it can contain a given element.\r\n     *\r\n     * @override\r\n     * @param {Element} elem\r\n     * @return {Boolean}\r\n     */\r\n    Model.prototype.canContain = function(elem) {\r\n        if (elem !== null) {\r\n            if (elem instanceof Diagram) {\r\n                return this.canContainDiagram(elem);\r\n            } else {\r\n                return this.canContainKind(elem.getClassName()) &&\r\n                       (elem !== this) &&\r\n                       (!this.isOneOfTheContainers(elem));\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Determines whether a given diagram type name can be contained or not.\r\n     *\r\n     * @param {string} kind\r\n     * @return {Boolean}\r\n     */\r\n    Model.prototype.canContainDiagramKind = function (kind) {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Determines whether a given diagram can be contained or not.\r\n     *\r\n     * @param {Diagram} diagram\r\n     * @return {Boolean}\r\n     */\r\n    Model.prototype.canContainDiagram = function (diagram) {\r\n        return this.canContainDiagramKind(diagram.getClassName());\r\n    };\r\n\r\n    /**\r\n     * Determines whether this object can be relocated to a given element.\r\n     *\r\n     * @param {Model} model\r\n     * @return {Boolean}\r\n     */\r\n    Model.prototype.canRelocateTo = function (model) {\r\n        return model.canContain(this);\r\n    };\r\n\r\n\r\n    /**\r\n     * Tag\r\n     *\r\n     * @constructor\r\n     * @extends Model\r\n     */\r\n    function Tag() {\r\n        Model.apply(this, arguments);\r\n\r\n        /** @member {TagKind} */\r\n        this.kind = TK_STRING;\r\n\r\n        /** @member {*} */\r\n        this.value = \'\';\r\n\r\n        /** @member {Model} */\r\n        this.reference = null;\r\n\r\n        /** @member {boolean} */\r\n        this.checked = false;\r\n\r\n        /** @member {number} */\r\n        this.number = 0;\r\n\r\n    }\r\n    // inherits from Model\r\n    Tag.prototype = Object.create(Model.prototype);\r\n    Tag.prototype.constructor = Tag;\r\n\r\n    /**\r\n     * Hyperlink\r\n     *\r\n     * @constructor\r\n     * @extends Model\r\n     */\r\n    function Hyperlink() {\r\n        Model.apply(this, arguments);\r\n\r\n        /** @member {Model} */\r\n        this.reference = null;\r\n\r\n        /** @member {*} */\r\n        this.url = \'\';\r\n    }\r\n    // inherits from Model\r\n    Hyperlink.prototype = Object.create(Model.prototype);\r\n    Hyperlink.prototype.constructor = Hyperlink;\r\n\r\n    Hyperlink.prototype.getNodeText = function (options) {\r\n        if (this.reference instanceof type.Model) {\r\n            return "(link to " + this.reference.name + ")";\r\n        } else if (this.url && this.url.length > 0) {\r\n            return "(link to " + this.url + ")";\r\n        } else {\r\n            return "(none)";\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * ExtensibleModel\r\n     *\r\n     * @constructor\r\n     * @extends Model\r\n     */\r\n    function ExtensibleModel() {\r\n        Model.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.documentation = "";\r\n\r\n        /** @member {Array.<Tag>} */\r\n        this.tags = [];\r\n    }\r\n    // inherits from Element\r\n    ExtensibleModel.prototype = Object.create(Model.prototype);\r\n    ExtensibleModel.prototype.constructor = ExtensibleModel;\r\n\r\n\r\n    /**\r\n     * Return whether element has a specific tag\r\n     *\r\n     * @param {string} tagName\r\n     * @return {Boolean}\r\n     */\r\n    ExtensibleModel.prototype.hasTag = function (tagName) {\r\n        for (var i = 0, len = this.tags.length; i < len; i++) {\r\n            var tag = this.tags[i];\r\n            if (tag.name === tagName) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Return a specific tag by name\r\n     *\r\n     * @param {string} tagName\r\n     * @return {Tag|undefined}\r\n     */\r\n    ExtensibleModel.prototype.getTag = function (tagName) {\r\n        for (var i = 0, len = this.tags.length; i < len; i++) {\r\n            var tag = this.tags[i];\r\n            if (tag.name === tagName) {\r\n                return tag;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Return value of a specific tag\r\n     *\r\n     * @param {string} tagName\r\n     * @return {Boolean|undefined}\r\n     */\r\n    ExtensibleModel.prototype.getTagValue = function (tagName) {\r\n        for (var i = 0, len = this.tags.length; i < len; i++) {\r\n            var tag = this.tags[i];\r\n            if (tag.name === tagName) {\r\n                return tag.value;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n\r\n    /**\r\n     * Relationship\r\n     *\r\n     * @constructor\r\n     * @extends ExtensibleModel\r\n     */\r\n    function Relationship() {\r\n        ExtensibleModel.apply(this, arguments);\r\n    }\r\n\r\n    // Relationship inherits ExtensibleModel\r\n    Relationship.prototype = Object.create(ExtensibleModel.prototype);\r\n    Relationship.prototype.constructor = Relationship;\r\n\r\n\r\n\r\n    /**\r\n     * DirectedRelationship\r\n     *\r\n     * @constructor\r\n     * @extends Relationship\r\n     */\r\n    function DirectedRelationship() {\r\n        Relationship.apply(this, arguments);\r\n\r\n        /** @member {Model} */\r\n        this.target = null;\r\n\r\n        /** @member {Model} */\r\n        this.source = null;\r\n    }\r\n    // DirectedRelationship inherits Relationship\r\n    DirectedRelationship.prototype = Object.create(Relationship.prototype);\r\n    DirectedRelationship.prototype.constructor = DirectedRelationship;\r\n\r\n    DirectedRelationship.prototype.getNodeText = function (options) {\r\n        if (!this.source || !this.target) {\r\n            console.error("source or target is not assigned");\r\n            console.log(this);\r\n            return "(?→?)";\r\n        }\r\n        var _text = "(" + this.source.name + "→" + this.target.name + ")";\r\n        if (this.name && this.name.length > 0) {\r\n            _text = this.name + " " + _text;\r\n        }\r\n        return _text;\r\n    };\r\n\r\n\r\n    /**\r\n     * RelationshipEnd\r\n     *\r\n     * @constructor\r\n     * @extends ExtensibleModel\r\n     */\r\n    function RelationshipEnd() {\r\n        ExtensibleModel.apply(this, arguments);\r\n\r\n        /** @member {Model} */\r\n        this.reference = null;\r\n    }\r\n\r\n    // RelationshipEnd inherits ExtensibleModel\r\n    RelationshipEnd.prototype = Object.create(ExtensibleModel.prototype);\r\n    RelationshipEnd.prototype.constructor = RelationshipEnd;\r\n\r\n    RelationshipEnd.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * UndirectedRelationship\r\n     *\r\n     * @constructor\r\n     * @extends Relationship\r\n     */\r\n    function UndirectedRelationship() {\r\n        Relationship.apply(this, arguments);\r\n\r\n        /** @member {RelationshipEnd} */\r\n        this.end1 = null;\r\n\r\n        /** @member {RelationshipEnd} */\r\n        this.end2 = null;\r\n    }\r\n\r\n    // UndirectedRelationship inherits Relationship\r\n    UndirectedRelationship.prototype = Object.create(Relationship.prototype);\r\n    UndirectedRelationship.prototype.constructor = UndirectedRelationship;\r\n\r\n    UndirectedRelationship.prototype.getNodeText = function (options) {\r\n        return "(" + this.end1.reference.name + "—" + this.end2.reference.name + ")";\r\n    };\r\n\r\n\r\n    /**\r\n     * View\r\n     *\r\n     * @constructor\r\n     * @extends Element\r\n     */\r\n    function View() {\r\n        Element.apply(this, arguments);\r\n\r\n        /** @member {Model} */\r\n        this.model = null;\r\n\r\n        /** @member {Array.<View>} */\r\n        this.subViews = [];\r\n\r\n        /** @member {View} */\r\n        this.containerView = null;\r\n\r\n        /** @member {Array.<View>} */\r\n        this.containedViews = [];\r\n\r\n        /** @member {boolean} */\r\n        this.visible = true;\r\n\r\n        /** @member {boolean} */\r\n        this.enabled = true;\r\n\r\n        /** @member {boolean} */\r\n        this.selected = false;\r\n\r\n        /** @member {number} */\r\n        this.selectable = SK_YES;\r\n\r\n        /** @member {string} */\r\n        this.lineColor = PreferenceManager.get("view.lineColor", "#000000");\r\n\r\n        /** @member {string} */\r\n        this.fillColor = PreferenceManager.get("view.fillColor", "#ffffff");\r\n\r\n        /** @member {string} */\r\n        this.fontColor = PreferenceManager.get("view.fontColor", "#000000");\r\n\r\n        /** @member {Font} */\r\n        this.font = new Font(\r\n            PreferenceManager.get("view.font", "Arial"),\r\n            PreferenceManager.get("view.fontSize", 13),\r\n            Graphics.FS_NORMAL\r\n        );\r\n\r\n        /** @member {boolean} */\r\n        this.parentStyle = false;\r\n\r\n        /** @member {boolean} */\r\n        this.showShadow = PreferenceManager.get("view.showShadow", true);\r\n\r\n        /** @member {boolean} */\r\n        this.containerChangeable = false;\r\n\r\n        /** @member {boolean} */\r\n        this.containerExtending = false;\r\n\r\n        /** @member {number} */\r\n        this.zIndex = 0;\r\n    }\r\n    // View inherits Element\r\n    View.prototype = Object.create(Element.prototype);\r\n    View.prototype.constructor = View;\r\n\r\n    /**\r\n     * Traverse all sub views recursively (Breadth-First Traversal)\r\n     *\r\n     * @param {function} fun\r\n     */\r\n    View.prototype.traverse = function (fun) {\r\n        fun(this);\r\n        var ref = this.subViews;\r\n        for (var i = 0, len = ref.length; i < len; i++) {\r\n            var v = ref[i];\r\n            v.traverse(fun);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Traverse all sub views recursively (Depth-First Traversal)\r\n     *\r\n     * @param {function} fun\r\n     */\r\n    View.prototype.traverseDepthFirst = function (fun) {\r\n        var ref = this.subViews;\r\n        for (var i = 0, len = ref.length; i < len; i++) {\r\n            var v = ref[i];\r\n            v.traverseDepthFirst(fun);\r\n        }\r\n        fun(this);\r\n    };\r\n\r\n    View.prototype.find = function (predicate) {\r\n        if (predicate(this)) {\r\n            return this;\r\n        }\r\n        var ref = this.subViews;\r\n        for (var i = 0, len = ref.length; i < len; i++) {\r\n            var v = ref[i];\r\n            var result = v.find(predicate);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    View.prototype.findDepthFirst = function (predicate) {\r\n        var ref = this.subViews;\r\n        for (var i = 0, len = ref.length; i < len; i++) {\r\n            var v = ref[i];\r\n            var result = v.findDepthFirst(predicate);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n        if (predicate(this)) {\r\n            return this;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Assign styles to canvas.\r\n     *\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.assignStyleToCanvas = function (canvas) {\r\n        canvas.color = this.lineColor;\r\n        canvas.fillColor = this.fillColor;\r\n        canvas.fontColor = this.fontColor;\r\n        canvas.font = this.font;\r\n    };\r\n\r\n    View.prototype.delimitContainingBoundary = function (canvas) {\r\n    };\r\n\r\n    /**\r\n     * Initialize view object.\r\n     *\r\n     * @abstract\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.initialize = function (canvas, x1, y1, x2, y2) {};\r\n\r\n    /**\r\n     * Move view object including all sub views by (dx, dy)\r\n     *\r\n     * @param {Canvas} canvas\r\n     * @param {number} dx\r\n     * @param {number} dy\r\n     */\r\n    View.prototype.move = function (canvas, dx, dy) {\r\n        this.moveObject(canvas, dx, dy);\r\n        for (var i = 0, len = this.subViews.length; i < len; i++) {\r\n            var v = this.subViews[i];\r\n            v.move(canvas, dx, dy);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Move this view object by (dx, dy).\r\n     *\r\n     * @param {Canvas} canvas\r\n     * @param {number} dx\r\n     * @param {number} dy\r\n     */\r\n    View.prototype.moveObject = function (canvas, dx, dy) {};\r\n\r\n    /**\r\n     * Setup view object (styles and attributes)\r\n     *\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.setup = function (canvas) {\r\n        if (this.parentStyle && this._parent && this._parent.font) {\r\n            this.lineColor = this._parent.lineColor;\r\n            this.fillColor = this._parent.fillColor;\r\n            this.fontColor = this._parent.fontColor;\r\n            this.font.face = this._parent.font.face;\r\n            this.font.size = this._parent.font.size;\r\n            this.font.style = this._parent.font.style;\r\n        }\r\n        this.assignStyleToCanvas(canvas);\r\n        if (this._parent && this._parent.visible === false) {\r\n            this.visible = false;\r\n        }\r\n        for (var i = 0, len = this.subViews.length; i < len; i++) {\r\n            var v = this.subViews[i];\r\n            v.setup(canvas);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update view object from a corresponding model object.\r\n     *\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.update = function (canvas) {\r\n        for (var i = 0, len = this.subViews.length; i < len; i++) {\r\n            var v = this.subViews[i];\r\n            v.update(canvas);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Compute it\'s size\r\n     *\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.size = function (canvas) {\r\n        this.assignStyleToCanvas(canvas);\r\n        for (var i = 0, len = this.subViews.length; i < len; i++) {\r\n            var v = this.subViews[i];\r\n            v.size(canvas);\r\n        }\r\n        this.sizeObject(canvas);\r\n    };\r\n\r\n    /**\r\n     * Compute it\'s size\r\n     *\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.sizeObject = function (canvas) {};\r\n\r\n    /**\r\n     * Arrange this view object.\r\n     *\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.arrange = function (canvas) {\r\n        this.assignStyleToCanvas(canvas);\r\n        for (var i = 0, len = this.subViews.length; i < len; i++) {\r\n            var v = this.subViews[i];\r\n            v.arrange(canvas);\r\n        }\r\n        this.delimitContainingBoundary(canvas);\r\n        this.arrangeObject(canvas);\r\n    };\r\n\r\n    /**\r\n     * Arrange this view object.\r\n     *\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.arrangeObject = function (canvas) {};\r\n\r\n    /**\r\n     * Draw shadow.\r\n     *\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.drawShadow = function (canvas) {\r\n        for (var i = 0, len = this.subViews.length; i < len; i++) {\r\n            var v = this.subViews[i];\r\n            if (v.visible) {\r\n                v.drawShadow(canvas);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Draw view object.\r\n     *\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.draw = function (canvas) {\r\n        this.assignStyleToCanvas(canvas);\r\n        this.drawObject(canvas);\r\n        for (var i = 0, len = this.subViews.length; i < len; i++) {\r\n            var v = this.subViews[i];\r\n            if (v.visible) {\r\n                v.draw(canvas);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Draw view object.\r\n     *\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.drawObject = function (canvas) {};\r\n\r\n    /**\r\n     * Draw selection of this view object.\r\n     *\r\n     * @abstract\r\n     * @param {Canvas} canvas\r\n     */\r\n    View.prototype.drawSelection = function (canvas) {};\r\n\r\n    /**\r\n     * Return a sub view located at (x, y).\r\n     *\r\n     * @param {Canvas} canvas\r\n     * @param {number} x\r\n     * @param {number} y\r\n     */\r\n    View.prototype.getViewAt = function (canvas, x, y) {\r\n        for (var i = this.subViews.length - 1; i >= 0; i--) {\r\n            var v = this.subViews[i];\r\n            if (v.visible && (v.selectable != SK_NO)) {\r\n                var sub = v.getViewAt(canvas, x, y);\r\n                if (sub !== null) {\r\n                    return sub;\r\n                }\r\n            }\r\n        }\r\n        if (this.containsPoint(canvas, x, y) && (this.selectable == SK_YES)) {\r\n            return this;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Return a diagram containg this view object.\r\n     *\r\n     * @return {View}\r\n     */\r\n    View.prototype.getDiagram = function () {\r\n        if (this._parent instanceof Diagram) {\r\n            return this._parent;\r\n        } else if (this._parent !== null) {\r\n            return this._parent.getDiagram();\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Return a bounding box.\r\n     *\r\n     * @param {Canvas} canvas\r\n     * @param {Rect}\r\n     */\r\n    View.prototype.getBoundingBox = function (canvas) {\r\n        return new Rect(-1, -1, 0, 0);\r\n    };\r\n\r\n    /**\r\n     * Determines whether this view contains a point (x, y)\r\n     *\r\n     * @param {Canvas} canvas\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.containsPoint = function (canvas, x, y) {\r\n        var r = this.getBoundingBox(canvas);\r\n        if (this.selected) {\r\n            var zr = r,\r\n                zp = new Point(x, y);\r\n            Coord.coordTransform2(canvas.zoomFactor, GridFactor.NO_GRID, zr);\r\n            zr.setRect(zr.x1 - Toolkit.DEFAULT_HIGHLIGHTER_SIZE, zr.y1 - Toolkit.DEFAULT_HIGHLIGHTER_SIZE, zr.x2 + Toolkit.DEFAULT_HIGHLIGHTER_SIZE, zr.y2 + Toolkit.DEFAULT_HIGHLIGHTER_SIZE);\r\n            Coord.coordTransform(canvas.zoomFactor, GridFactor.NO_GRID, zp);\r\n            return Coord.ptInRect(zp.x, zp.y, zr);\r\n        }\r\n        return Coord.ptInRect(x, y, r);\r\n    };\r\n\r\n    /**\r\n     * Determines whether this view overlaps a given rect\r\n     *\r\n     * @param {Canvas} canvas\r\n     * @param {Rect} rect\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.overlapRect = function (canvas, rect) {\r\n        var bound = this.getBoundingBox(canvas);\r\n        if (this.selected) {\r\n            bound.setRect(bound.x1 - 5, bound.y1 - 5, bound.x2 + 5, bound.y2 + 5);\r\n        }\r\n        return Coord.rectInRect(rect, bound);\r\n    };\r\n\r\n    /**\r\n     * Add a sub view.\r\n     *\r\n     * @param {View} view\r\n     */\r\n    View.prototype.addSubView = function (view) {\r\n        this.subViews.add(view);\r\n        view._parent = this;\r\n    };\r\n\r\n    /**\r\n     * Remove a sub view\r\n     *\r\n     * @param {View} view\r\n     */\r\n    View.prototype.removeSubView = function (view) {\r\n        this.subViews.remove(view);\r\n        view._parent = null;\r\n    };\r\n\r\n    /**\r\n     * Add a contained view.\r\n     *\r\n     * @param {View} view\r\n     */\r\n    View.prototype.addContainedView = function (view) {\r\n        this.containedViews.add(view);\r\n        view.containerView = this;\r\n    };\r\n\r\n    /**\r\n     * Remove a contained view.\r\n     * @param {View} view\r\n     */\r\n    View.prototype.removeContainedView = function (view) {\r\n        this.containedViews.remove(view);\r\n        view.containerView = null;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    View.prototype.isOneOfTheContainerViews = function (view) {\r\n        if ((this.containerView === null) || (view == this)) {\r\n            return false;\r\n        } else if (this.containerView == view) {\r\n            return true;\r\n        } else {\r\n            return this.containerView.isOneOfTheContainerViews(view);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    View.prototype.canContainViewKind = function (kind) {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    View.prototype.canContainView = function (view) {\r\n        return (view !== null) &&\r\n               (view !== this) &&\r\n               (!this.isOneOfTheContainerViews(view)) &&\r\n               (this.canContainViewKind(view.getClassName()));\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    View.prototype.drawContainingBox = function (canvas) {\r\n        var rect = this.getBoundingBox(canvas);\r\n        Toolkit.drawRangeBox(canvas, rect.x1 + 1, rect.y1 + 1, rect.x2 - 1, rect.y2 - 1);\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    View.prototype.eraseContainingBox = function (canvas) {\r\n        // NOTHING TO DO\r\n    };\r\n\r\n\r\n    /**\r\n     * NodeView\r\n     * @constructor\r\n     * @extends View\r\n     */\r\n    function NodeView() {\r\n        View.apply(this, arguments);\r\n\r\n        /** @member {number} */\r\n        this.left = 0;\r\n\r\n        /** @member {number} */\r\n        this.top = 0;\r\n\r\n        /** @member {number} */\r\n        this.width = 0;\r\n\r\n        /** @member {number} */\r\n        this.height = 0;\r\n\r\n        /** @member {number} */\r\n        this.minWidth = 0;\r\n\r\n        /** @member {number} */\r\n        this.minHeight = 0;\r\n\r\n        /** @member {number} */\r\n        this.sizable = SZ_FREE;\r\n\r\n        /** @member {number} */\r\n        this.movable = MM_FREE;\r\n\r\n        /** @member {Boolean} */\r\n        this.autoResize = false;\r\n    }\r\n    // NodeView inherits View\r\n    NodeView.prototype = Object.create(View.prototype);\r\n    NodeView.prototype.constructor = NodeView;\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.getRight = function () {\r\n        return this.left + this.width - 1;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.setRight = function (value) {\r\n        this.width = value - this.left + 1;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.getBottom = function () {\r\n        return this.top + this.height - 1;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.setBottom = function (value) {\r\n        this.height = value - this.top + 1;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.getCenter = function () {\r\n        return new Point((this.left + this.getRight()) / 2, (this.top + this.getBottom()) / 2);\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.moveObject = function (canvas, dx, dy) {\r\n        this.left = this.left + dx;\r\n        this.top = this.top + dy;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.initialize = function (canvas, x1, y1, x2, y2) {\r\n        var r = new Rect(x1, y1, x2, y2);\r\n        Coord.normalizeRect(r);\r\n        this.left = r.x1;\r\n        this.top = r.y1;\r\n        this.width = Math.max(this.minWidth, r.x2 - r.x1);\r\n        this.height = Math.max(this.minHeight, r.y2 - r.y1);\r\n    };\r\n\r\n    NodeView.prototype.sizeConstraints = function (canvas) {\r\n        if (this.autoResize) {\r\n            this.width = this.minWidth;\r\n            this.height = this.minHeight;\r\n        }\r\n        if (this.width < this.minWidth) {\r\n            this.width = this.minWidth;\r\n        }\r\n        if (this.height < this.minHeight) {\r\n            this.height = this.minHeight;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.sizeObject = function (canvas) {\r\n        View.prototype.sizeObject.call(this, canvas);\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.arrangeObject = function (canvas) {\r\n        View.prototype.arrangeObject.call(this, canvas);\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.drawObject = function (canvas) {\r\n        View.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.drawSelection = function (canvas) {\r\n        if (this.sizable === SZ_NONE) {\r\n            Toolkit.drawSelection(canvas, this.left-1, this.top-1, this.getRight()+1, this.getBottom()+1);\r\n        } else {\r\n            var retouch = !(this.sizable === SZ_FREE || this.sizable === SZ_RATIO);\r\n            var x1, x2, y1, y2;\r\n            x1 = this.left - 1;\r\n            y1 = this.top - 1;\r\n            x2 = this.getRight() + 1;\r\n            y2 = this.top - 1;\r\n            Toolkit.drawSelectionLine(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_SELECTIONLINE_WIDTH, Toolkit.NWSE_N, retouch);\r\n            x1 = this.left - 1;\r\n            y1 = this.top - 1;\r\n            x2 = this.left - 1;\r\n            y2 = this.getBottom() + 1;\r\n            Toolkit.drawSelectionLine(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_SELECTIONLINE_WIDTH, Toolkit.NWSE_W, retouch);\r\n            x1 = this.getRight() + 1;\r\n            y1 = this.top - 1;\r\n            x2 = this.getRight() + 1;\r\n            y2 = this.getBottom() + 1;\r\n            Toolkit.drawSelectionLine(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_SELECTIONLINE_WIDTH, Toolkit.NWSE_E, retouch);\r\n            x1 = this.left - 1;\r\n            y1 = this.getBottom() + 1;\r\n            x2 = this.getRight() + 1;\r\n            y2 = this.getBottom() + 1;\r\n            Toolkit.drawSelectionLine(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_SELECTIONLINE_WIDTH, Toolkit.NWSE_S, retouch);\r\n\r\n            x1 = this.left - 1;\r\n            y1 = this.top -1;\r\n            x2 = this.getRight() + 1;\r\n            y2 = this.getBottom() + 1;\r\n            Toolkit.drawSelectionBox(canvas, x1, y1, x2, y2);\r\n\r\n            if (this.sizable === SZ_FREE || this.sizable === SZ_RATIO) {\r\n                Toolkit.drawHighlighter2(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_HIGHLIGHTER_SIZE, Toolkit.CT_LT, true, Toolkit.HIGHLIGHTER_COLOR);\r\n                Toolkit.drawHighlighter2(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_HIGHLIGHTER_SIZE, Toolkit.CT_RT, true, Toolkit.HIGHLIGHTER_COLOR);\r\n                Toolkit.drawHighlighter2(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_HIGHLIGHTER_SIZE, Toolkit.CT_LB, true, Toolkit.HIGHLIGHTER_COLOR);\r\n                Toolkit.drawHighlighter2(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_HIGHLIGHTER_SIZE, Toolkit.CT_RB, true, Toolkit.HIGHLIGHTER_COLOR);\r\n            }\r\n            if (this.sizable === SZ_FREE || this.sizable === SZ_VERT) {\r\n                Toolkit.drawHighlighter2(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_HIGHLIGHTER_SIZE, Toolkit.CT_MT, true, Toolkit.HIGHLIGHTER_COLOR);\r\n                Toolkit.drawHighlighter2(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_HIGHLIGHTER_SIZE, Toolkit.CT_MB, true, Toolkit.HIGHLIGHTER_COLOR);\r\n            }\r\n            if (this.sizable === SZ_FREE || this.sizable === SZ_HORZ) {\r\n                Toolkit.drawHighlighter2(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_HIGHLIGHTER_SIZE, Toolkit.CT_LM, true, Toolkit.HIGHLIGHTER_COLOR);\r\n                Toolkit.drawHighlighter2(canvas, x1, y1, x2, y2, Toolkit.DEFAULT_HIGHLIGHTER_SIZE, Toolkit.CT_RM, true, Toolkit.HIGHLIGHTER_COLOR);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeView.prototype.getBoundingBox = function (canvas) {\r\n        return new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n\r\n    /**\r\n     * EdgeView\r\n     * @constructor\r\n     * @extends View\r\n     */\r\n    function EdgeView() {\r\n        View.apply(this, arguments);\r\n        this.BACKGROUND_COLOR = Color.WHITE;\r\n\r\n        /** @member {View} */\r\n        this.head = null;\r\n\r\n        /** @member {View} */\r\n        this.tail = null;\r\n\r\n        /** @member {number} */\r\n        this.lineStyle = PreferenceManager.get("view.lineStyle", LS_OBLIQUE);\r\n\r\n        this.lineMode = LM_SOLID;\r\n        this.points = new Points();\r\n        this.headEndStyle = ES_FLAT;\r\n        this.tailEndStyle = ES_FLAT;\r\n    }\r\n\r\n    // EdgeView inherits View\r\n    EdgeView.prototype = Object.create(View.prototype);\r\n    EdgeView.prototype.constructor = EdgeView;\r\n\r\n    /** EdgeView Constants */\r\n    EdgeView.SELF_EDGE_HORIZ_INTERVAL = 30;\r\n    EdgeView.SELF_EDGE_VERTI_INTERVAL = 20;\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.reducePoints = function (canvas) {\r\n        var b, i, j, _i, _results;\r\n        if (!(this.tail instanceof EdgeView)) {\r\n            b = this.tail.getBoundingBox(canvas);\r\n            i = 1;\r\n            while (i < this.points.count() - 1) {\r\n                if (Coord.ptInRect2(this.points.getPoint(i), b)) {\r\n                    for (j = _i = 1; 1 <= i ? _i <= i : _i >= i; j = 1 <= i ? ++_i : --_i) {\r\n                        this.points.remove(1);\r\n                    }\r\n                    i = 1;\r\n                } else {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        if (!(this.head instanceof EdgeView)) {\r\n            b = this.head.getBoundingBox(canvas);\r\n            i = 1;\r\n            _results = [];\r\n            while (i < this.points.count() - 1) {\r\n                if (Coord.ptInRect2(this.points.getPoint(i), b)) {\r\n                    _results.push((function () {\r\n                        var _j, _ref, _results1;\r\n                        _results1 = [];\r\n                        for (j = _j = 1, _ref = this.points.count() - i - 1; 1 <= _ref ? _j <= _ref : _j >= _ref; j = 1 <= _ref ? ++_j : --_j) {\r\n                            _results1.push(this.points.remove(i));\r\n                        }\r\n                        return _results1;\r\n                    }).call(this));\r\n                } else {\r\n                    _results.push(i++);\r\n                }\r\n            }\r\n            return _results;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.recalcOblique = function (canvas) {\r\n        var hb, headPoints, i, tailPoints, tb;\r\n        this.reducePoints(canvas);\r\n        if (!(this.tail instanceof EdgeView)) {\r\n            tb = this.tail.getBoundingBox(canvas);\r\n        } else {\r\n            tailPoints = this.tail.points;\r\n            i = Math.floor((tailPoints.count() - 1) / 2);\r\n            tb = new Rect(tailPoints.getPoint(i).x, tailPoints.getPoint(i).y, tailPoints.getPoint(i + 1).x, tailPoints.getPoint(i + 1).y);\r\n        }\r\n        this.points.setPoint(0, Coord.getCenter(tb));\r\n        if (!(this.head instanceof EdgeView)) {\r\n            hb = this.head.getBoundingBox(canvas);\r\n        } else {\r\n            headPoints = this.head.points;\r\n            i = Math.floor((headPoints.count() - 1) / 2);\r\n            hb = new Rect(headPoints.getPoint(i).x, headPoints.getPoint(i).y, headPoints.getPoint(i + 1).x, headPoints.getPoint(i + 1).y);\r\n        }\r\n        tb.expand(1);\r\n        hb.expand(1);\r\n        this.points.setPoint(this.points.count() - 1, Coord.getCenter(hb));\r\n        if (!(this.tail instanceof EdgeView)) {\r\n            this.points.setPoint(0, Coord.junction(tb, this.points.getPoint(1)));\r\n        }\r\n        if (!(this.head instanceof EdgeView)) {\r\n            this.points.setPoint(this.points.count() - 1, Coord.junction(hb, this.points.getPoint(this.points.count() - 2)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.recalcRectilinear = function (canvas) {\r\n        var bb, bh, bt, h, hps, i, p, tps, w;\r\n        if (this.head === this.tail) {\r\n            if (this.points.count() <= 3) {\r\n                this.points.clear();\r\n                bb = this.head.getBoundingBox(canvas);\r\n                w = bb.x2 - bb.x1;\r\n                h = bb.y2 - bb.y1;\r\n                this.points.add(Coord.getCenter(bb));\r\n                this.points.add(new Point(this.points.getPoint(0).x, Math.floor(this.points.getPoint(0).y - (h / 2) - EdgeView.SELF_EDGE_VERTI_INTERVAL)));\r\n                this.points.add(new Point(this.points.getPoint(0).x + Math.floor(w / 2) + EdgeView.SELF_EDGE_HORIZ_INTERVAL, this.points.getPoint(0).y - (h / 2) - EdgeView.SELF_EDGE_VERTI_INTERVAL));\r\n                this.points.add(new Point(this.points.getPoint(0).x + Math.floor(w / 2) + EdgeView.SELF_EDGE_HORIZ_INTERVAL, this.points.getPoint(0).y));\r\n                this.points.add(Coord.getCenter(bb));\r\n            }\r\n        }\r\n        if (!(this.tail instanceof EdgeView)) {\r\n            bt = this.tail.getBoundingBox(canvas);\r\n        } else {\r\n            tps = this.tail.points;\r\n            i = Math.floor((tps.count() - 1) / 2);\r\n            bt = new Rect(tps.getPoint(i).x, tps.getPoint(i).y, tps.getPoint(i + 1).x, tps.getPoint(i + 1).y);\r\n            bt.setRect3(Coord.getCenter(bt), Coord.getCenter(bt));\r\n        }\r\n        if (!(this.head instanceof EdgeView)) {\r\n            bh = this.head.getBoundingBox(canvas);\r\n        } else {\r\n            hps = this.head.points;\r\n            i = Math.floor((hps.count() - 1) / 2);\r\n            bh = new Rect(hps.getPoint(i).x, hps.getPoint(i).y, hps.getPoint(i + 1).x, hps.getPoint(i + 1).y);\r\n            bh.setRect3(Coord.getCenter(bh), Coord.getCenter(bh));\r\n            bt.expand(1);\r\n            bh.expand(1);\r\n        }\r\n\r\n        // Add new point, if have not enough points.\r\n        if (this.points.count() === 2) {\r\n            p = Coord.orthoJunction(bt, this.points.getPoint(1));\r\n            if ((p.x === -100) && (p.y === -100)) {\r\n                this.points.insert(0, Coord.orthoJunction(bt, this.points.getPoint(0)));\r\n            } else {\r\n                this.points.setPoint(0, p);\r\n            }\r\n            p = Coord.orthoJunction(bh, this.points.getPoint(this.points.count() - 2));\r\n            if ((p.x === -100) && (p.y === -100)) {\r\n                this.points.add(Coord.orthoJunction(bh, this.points.getPoint(this.points.count() - 1)));\r\n            } else {\r\n                this.points.setPoint(this.points.count() - 1, p);\r\n            }\r\n        }\r\n\r\n        // Replace 0-indexed point with junction point to TailView\r\n        p = Coord.orthoJunction(bt, this.points.getPoint(1));\r\n        if ((p.x === -100) && (p.y === -100)) {\r\n            if (this.points.getPoint(1).y === this.points.getPoint(2).y) {\r\n                this.points.setPoint(1, new Point(Coord.getCenter(bt).x, this.points.getPoint(1).y));\r\n            } else {\r\n                this.points.setPoint(1, new Point(this.points.getPoint(1).x, Coord.getCenter(bt).y));\r\n            }\r\n        }\r\n        this.points.setPoint(0, Coord.orthoJunction(bt, this.points.getPoint(1)));\r\n\r\n        // Replace highest-indexed point with junction point to HeadView\r\n        p = Coord.orthoJunction(bh, this.points.getPoint(this.points.count() - 2));\r\n        if ((p.x === -100) && (p.y === -100)) {\r\n            if (this.points.getPoint(this.points.count() - 2).y === this.points.getPoint(this.points.count() - 3).y) {\r\n                this.points.setPoint(this.points.count() - 2, new Point(Coord.getCenter(bh).x, this.points.getPoint(this.points.count() - 2).y));\r\n            } else {\r\n                this.points.setPoint(this.points.count() - 2, new Point(this.points.getPoint(this.points.count() - 2).x, Coord.getCenter(bh).y));\r\n            }\r\n        }\r\n        this.points.setPoint(this.points.count() - 1, Coord.orthoJunction(bh, this.points.getPoint(this.points.count() - 2)));\r\n\r\n        // Must be removed, and calculate this in another module (Handlers)\r\n        // FitToGrid(GraphicClasses.GridFactor(5, 5));\r\n        this.points.reduceOrthoLine();\r\n        this.reducePoints(canvas);\r\n\r\n        p = this.points.getPoint(0).copy();\r\n        this.points.setPoint(0, Coord.orthoJunction(bt, this.points.getPoint(1)));\r\n        if ((this.points.getPoint(0).x === -100) || (this.points.getPoint(0).y === -100)) {\r\n            this.points.setPoint(0, p);\r\n        }\r\n\r\n        p = this.points.getPoint(this.points.count() - 1).copy();\r\n        this.points.setPoint(this.points.count() - 1, Coord.orthoJunction(bh, this.points.getPoint(this.points.count() - 2)));\r\n        if ((this.points.getPoint(this.points.count() - 1).x === -100) || (this.points.getPoint(this.points.count() - 1).y === -100)) {\r\n            this.points.setPoint(this.points.count() - 1, p);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.drawLineEnd = function (canvas, edgeEndStyle, isHead) {\r\n        if (edgeEndStyle !== ES_FLAT) {\r\n            var rt = new Rect(0, 0, 0, 0);\r\n            if (isHead) {\r\n                rt.setRect(this.points.getPoint(this.points.count() - 1).x, this.points.getPoint(this.points.count() - 1).y, this.points.getPoint(this.points.count() - 2).x, this.points.getPoint(this.points.count() - 2).y);\r\n            } else {\r\n                rt.setRect(this.points.getPoint(0).x, this.points.getPoint(0).y, this.points.getPoint(1).x, this.points.getPoint(1).y);\r\n            }\r\n            var a = rt.y2 - rt.y1,\r\n                b = rt.x2 - rt.x1,\r\n                th = Math.atan(a / b);\r\n            if ((a < 0 && b < 0) || (a > 0 && b < 0) || (a === 0 && b < 0)) {\r\n                th = th + Math.PI;\r\n            }\r\n            var th1 = th - Math.PI / 8,\r\n                th2 = th + Math.PI / 8,\r\n                th3 = th - Math.PI / 2,\r\n                th4 = th + Math.PI / 2,\r\n                th5 = th - Math.PI / 2,\r\n                th6 = th + Math.PI / 2,\r\n                c1 = 11.0,\r\n                c2 = c1 * 2.0,\r\n                c3 = 7,\r\n                p0 = new Point(rt.x1, rt.y1),\r\n                p1 = new Point((c1 * Math.cos(th1)) + rt.x1, (c1 * Math.sin(th1)) + rt.y1),\r\n                p2 = new Point((c1 * Math.cos(th2)) + rt.x1, (c1 * Math.sin(th2)) + rt.y1),\r\n                p3 = new Point((c2 * Math.cos(th)) + rt.x1, (c2 * Math.sin(th)) + rt.y1),\r\n                p4 = new Point((c2 * Math.cos(th1)) + rt.x1, (c2 * Math.sin(th1)) + rt.y1),\r\n                p5 = new Point((c2 * Math.cos(th2)) + rt.x1, (c2 * Math.sin(th2)) + rt.y1),\r\n                p6 = new Point((c1 * Math.cos(th1)) + p3.x, (c1 * Math.sin(th1)) + p3.y),\r\n                p7 = new Point((c1 * Math.cos(th2)) + p3.x, (c1 * Math.sin(th2)) + p3.y),\r\n                p8 = new Point((c3 * Math.cos(th)) + rt.x1, (c3 * Math.sin(th)) + rt.y1),\r\n                p9 = new Point((c3 * Math.cos(th3)) + p8.x, (c3 * Math.sin(th3)) + p8.y),\r\n                p10 = new Point((c3 * Math.cos(th4)) + p8.x, (c3 * Math.sin(th4)) + p8.y),\r\n                p11 = new Point(((c3*2) * Math.cos(th)) + rt.x1, ((c3*2) * Math.sin(th)) + rt.y1),\r\n                p12 = new Point(c3 * Math.cos(th5) + p0.x, c3 * Math.sin(th5) + p0.y),\r\n                p13 = new Point(c3 * Math.cos(th6) + p0.x, c3 * Math.sin(th6) + p0.y);\r\n            canvas.color = this.lineColor;\r\n            canvas.fillColor = Color.WHITE;\r\n            switch (edgeEndStyle) {\r\n            case ES_STICK_ARROW:\r\n                canvas.polyline([p1, p0, p2]);\r\n                break;\r\n            case ES_SOLID_ARROW:\r\n                canvas.fillColor = this.lineColor;\r\n                canvas.fillPolygon([p1, p0, p2]);\r\n                canvas.polygon([p1, p0, p2]);\r\n                break;\r\n            case ES_TRIANGLE:\r\n                canvas.fillPolygon([p4, p0, p5]);\r\n                canvas.polygon([p4, p0, p5]);\r\n                break;\r\n            case ES_FILLED_TRIANGLE:\r\n                canvas.fillColor = this.lineColor;\r\n                canvas.fillPolygon([p4, p0, p5]);\r\n                break;\r\n            case ES_DIAMOND:\r\n                canvas.fillPolygon([p1, p0, p2, p3]);\r\n                canvas.polygon([p1, p0, p2, p3]);\r\n                break;\r\n            case ES_FILLED_DIAMOND:\r\n                canvas.fillColor = this.lineColor;\r\n                canvas.fillPolygon([p1, p0, p2, p3]);\r\n                canvas.polygon([p1, p0, p2, p3]);\r\n                break;\r\n            case ES_ARROW_DIAMOND:\r\n                canvas.fillPolygon([p1, p0, p2, p3]);\r\n                canvas.polygon([p1, p0, p2, p3]);\r\n                canvas.polyline([p6, p3, p7]);\r\n                break;\r\n            case ES_ARROW_FILLED_DIAMOND:\r\n                canvas.fillColor = this.lineColor;\r\n                canvas.fillPolygon([p1, p0, p2, p3]);\r\n                canvas.polygon([p1, p0, p2, p3]);\r\n                canvas.polyline([p6, p3, p7]);\r\n                break;\r\n            case ES_PLUS:\r\n                canvas.line(p9.x, p9.y, p10.x, p10.y);\r\n                break;\r\n            case ES_CIRCLE:\r\n                canvas.fillEllipse(p8.x - c3, p8.y - c3, p8.x + c3, p8.y + c3);\r\n                canvas.ellipse(p8.x - c3, p8.y - c3, p8.x + c3, p8.y + c3);\r\n                break;\r\n            case ES_CIRCLE_PLUS:\r\n                canvas.fillEllipse(p8.x - c3, p8.y - c3, p8.x + c3, p8.y + c3);\r\n                canvas.ellipse(p8.x - c3, p8.y - c3, p8.x + c3, p8.y + c3);\r\n                canvas.line(p11.x, p11.y, p0.x, p0.y);\r\n                canvas.line(p9.x, p9.y, p10.x, p10.y);\r\n                break;\r\n            case ES_CROWFOOT_ONE:\r\n                /*\r\n                canvas.putPixel(p0.x, p0.y, Color.BLACK);\r\n\r\n                canvas.putPixel(p1.x, p1.y, Color.RED);\r\n                canvas.putPixel(p2.x, p2.y, Color.RED);\r\n                canvas.putPixel(p3.x, p3.y, Color.GREEN);\r\n                canvas.putPixel(p4.x, p4.y, Color.GREEN);\r\n                canvas.putPixel(p5.x, p5.y, Color.GREEN);\r\n                canvas.putPixel(p6.x, p6.y, Color.MAGENTA);\r\n                canvas.putPixel(p7.x, p7.y, Color.MAGENTA);\r\n                canvas.putPixel(p8.x, p8.y, Color.MAGENTA);\r\n\r\n                canvas.putPixel(p9.x, p9.y, Color.ORANGE);\r\n                canvas.putPixel(p10.x, p10.y, Color.ORANGE);\r\n                canvas.putPixel(p11.x, p11.y, Color.ORANGE);\r\n\r\n                canvas.putPixel(p12.x, p12.y, Color.CYAN);\r\n                canvas.putPixel(p13.x, p13.y, Color.CYAN);\r\n                */\r\n\r\n\r\n                // canvas.line(p11.x, p11.y, p12.x, p12.y);\r\n                // canvas.line(p11.x, p11.y, p13.x, p13.y);\r\n                // canvas.fillEllipse(p3.x - c3, p3.y - c3, p3.x + c3, p3.y + c3);\r\n                // canvas.ellipse(p3.x - c3, p3.y - c3, p3.x + c3, p3.y + c3);\r\n\r\n                canvas.line(p9.x, p9.y, p10.x, p10.y);\r\n\r\n\r\n                break;\r\n            case ES_CROWFOOT_MANY:\r\n                canvas.line(p11.x, p11.y, p12.x, p12.y);\r\n                canvas.line(p11.x, p11.y, p13.x, p13.y);\r\n                break;\r\n            case ES_CROWFOOT_ZERO_ONE:\r\n                canvas.fillEllipse(p3.x - c3, p3.y - c3, p3.x + c3, p3.y + c3);\r\n                canvas.ellipse(p3.x - c3, p3.y - c3, p3.x + c3, p3.y + c3);\r\n                canvas.line(p9.x, p9.y, p10.x, p10.y);\r\n                break;\r\n            case ES_CROWFOOT_ZERO_MANY:\r\n                canvas.line(p11.x, p11.y, p12.x, p12.y);\r\n                canvas.line(p11.x, p11.y, p13.x, p13.y);\r\n                canvas.fillEllipse(p3.x - c3, p3.y - c3, p3.x + c3, p3.y + c3);\r\n                canvas.ellipse(p3.x - c3, p3.y - c3, p3.x + c3, p3.y + c3);\r\n                break;\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.initialize = function (canvas, x1, y1, x2, y2) {\r\n        this.points.clear();\r\n        this.points.add(Coord.junction(this.tail.getBoundingBox(canvas), Coord.getCenter(this.head.getBoundingBox(canvas))));\r\n        this.points.add(Coord.junction(this.head.getBoundingBox(canvas), Coord.getCenter(this.tail.getBoundingBox(canvas))));\r\n        if (this.lineStyle === LS_RECTILINEAR || this.lineStyle === LS_ROUNDRECT) {\r\n            this.points.convObliqueToRectilinear();\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.moveObject = function (canvas, dx, dy) {\r\n        var ref = this.points.points;\r\n        for (var i = 0, len = ref.length; i < len; i++) {\r\n            var p = ref[i];\r\n            p.setPoint(p.x + dx, p.y + dy);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.recalcPoints = function (canvas) {\r\n        switch (this.lineStyle) {\r\n        case LS_RECTILINEAR:\r\n            if (!this.points.isRectilinear()) {\r\n                this.points.convObliqueToRectilinear();\r\n            }\r\n            this.recalcRectilinear(canvas);\r\n            break;\r\n        case LS_OBLIQUE:\r\n            this.recalcOblique(canvas);\r\n            break;\r\n        case LS_ROUNDRECT:\r\n            if (!this.points.isRectilinear()) {\r\n                this.points.convObliqueToRectilinear();\r\n            }\r\n            this.recalcRectilinear(canvas);\r\n            break;\r\n        case LS_CURVE:\r\n            this.recalcOblique(canvas);\r\n            break;\r\n        default:\r\n            if (!this.points.isRectilinear()) {\r\n                this.points.convObliqueToRectilinear();\r\n            }\r\n            this.recalcRectilinear(canvas);\r\n        }\r\n        this.points.quantize();\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.arrangeObject = function (canvas) {\r\n        if (this.head === this.tail) {\r\n            this.lineStyle = LS_RECTILINEAR;\r\n        }\r\n        this.recalcPoints(canvas);\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.drawObject = function (canvas) {\r\n        this.assignStyleToCanvas(canvas);\r\n        canvas.fillColor = this.BACKGROUND_COLOR;\r\n        var pattern = (this.lineMode === LM_SOLID) ? null : [3];\r\n        switch (this.lineStyle) {\r\n        case LS_RECTILINEAR:\r\n            canvas.polyline(this.points.points, pattern);\r\n            break;\r\n        case LS_OBLIQUE:\r\n            canvas.polyline(this.points.points, pattern);\r\n            break;\r\n        case LS_ROUNDRECT:\r\n            canvas.roundRectLine(this.points.points, pattern);\r\n            break;\r\n        case LS_CURVE:\r\n            canvas.curveLine(this.points.points, pattern);\r\n            break;\r\n        default:\r\n            canvas.polyline(this.points.points, pattern);\r\n        }\r\n        this.drawLineEnd(canvas, this.headEndStyle, true);\r\n        this.drawLineEnd(canvas, this.tailEndStyle, false);\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.drawSelection = function (canvas) {\r\n        Toolkit.drawDottedLine(canvas, this.points);\r\n        for (var i = 0, len = this.points.points.length; i < len; i++) {\r\n            var p = this.points.points[i];\r\n            Toolkit.drawHighlighter(canvas, p.x, p.y, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE, true, Toolkit.HIGHLIGHTER_COLOR);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.getBoundingBox = function (canvas) {\r\n        var r = this.points.getBoundingRect();\r\n        for (var i = 0, len = this.subViews.length; i < len; i++) {\r\n            var sv = this.subViews[i];\r\n            if (sv.visible) {\r\n                r.setRect2(Coord.unionRect(r, sv.getBoundingBox(canvas)));\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.containsPoint = function (canvas, x, y) {\r\n        return this.containedIndex(canvas, new Point(x, y)) > -1;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.disToPoint = function (p1, p2) {\r\n        return Math.sqrt(Math.square(p1.x - p2.x) + Math.square(p1.y - p2.y));\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.disToOrthoLine = function (lh, lt, p) {\r\n        var l1, l2;\r\n        l1 = new Point(0, 0);\r\n        l2 = new Point(0, 0);\r\n        if (lh.y === lt.y) {\r\n            if (lh.x > lt.x) {\r\n                l1.setPoint(lt.x, lt.y);\r\n                l2.setPoint(lh.x, lh.y);\r\n            } else {\r\n                l1.setPoint(lh.x, lh.y);\r\n                l2.setPoint(lt.x, lt.y);\r\n            }\r\n            if (p.x > l2.x) {\r\n                return this.disToPoint(p, l2);\r\n            } else if (p.x < l1.x) {\r\n                return this.disToPoint(p, l1);\r\n            } else {\r\n                return Math.abs(p.y - l1.y);\r\n            }\r\n        } else {\r\n            if (lh.y > lt.y) {\r\n                l1.setPoint(lt.x, lt.y);\r\n                l2.setPoint(lh.x, lh.y);\r\n            } else {\r\n                l1.setPoint(lh.x, lh.y);\r\n                l2.setPoint(lt.x, lt.y);\r\n            }\r\n            if (p.y > l2.y) {\r\n                return this.disToPoint(p, l2);\r\n            } else if (p.y < l1.y) {\r\n                return this.disToPoint(p, l1);\r\n            } else {\r\n                return Math.abs(p.x - l1.x);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.containedIndex = function (canvas, p) {\r\n        var RECOG_MIN_DIS, d, i, minDis, minDisIndex, ph, pt, result, _i, _j, _ref, _ref1;\r\n        result = -1;\r\n        pt = new Point(0, 0);\r\n        ph = new Point(0, 0);\r\n        if (this.lineStyle === LS_RECTILINEAR || this.lineStyle === LS_ROUNDRECT) {\r\n            RECOG_MIN_DIS = 5;\r\n            minDis = RECOG_MIN_DIS;\r\n            minDisIndex = -1;\r\n            for (i = _i = 0, _ref = this.points.count() - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n                pt.setPoint2(this.points.getPoint(i));\r\n                ph.setPoint2(this.points.getPoint(i + 1));\r\n                d = this.disToOrthoLine(ph, pt, p);\r\n                if (d <= minDis) {\r\n                    minDis = d;\r\n                    minDisIndex = i;\r\n                }\r\n            }\r\n            result = minDisIndex;\r\n        } else {\r\n            result = -1;\r\n            for (i = _j = 0, _ref1 = this.points.count() - 2; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\r\n                pt.setPoint2(this.points.getPoint(i));\r\n                ph.setPoint2(this.points.getPoint(i + 1));\r\n                if (Coord.ptInLine(new Rect(pt.x, pt.y, ph.x, ph.y), p)) {\r\n                    result = i;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    EdgeView.prototype.selectedPoint = function (canvas, p) {\r\n        var result = -1;\r\n        for (var i = 0, len = this.points.points.length; i < len; i++) {\r\n            var pt = this.points.points[i];\r\n            if (Coord.equalPt(pt, p)) {\r\n                result = i;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Return true only if this edge can be connected the view\r\n     *\r\n     * @param {View} view\r\n     * @param {boolean} isTail Try to connect to tail-side or not\r\n     * @return {boolean}\r\n     */\r\n    EdgeView.prototype.canConnectTo = function (view, isTail) {\r\n        return true;\r\n    };\r\n\r\n\r\n    /**\r\n     * LabelView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function LabelView() {\r\n        NodeView.apply(this, arguments);\r\n        this.parentStyle = true;\r\n        this.selectable = SK_NO;\r\n\r\n        /** @member {string} */\r\n        this.underline = false;\r\n\r\n        /** @member {string} */\r\n        this.text = "";\r\n\r\n        /** @member {number} */\r\n        this.horizontalAlignment = Graphics.AL_CENTER;\r\n\r\n        /** @member {number} */\r\n        this.verticalAlignment = Graphics.AL_MIDDLE;\r\n\r\n        /** @member {number} */\r\n        this.direction = DK_HORZ;\r\n\r\n        /** @member {boolean} */\r\n        this.wordWrap = false;\r\n\r\n    }\r\n    // LabelView inherits NodeView\r\n    LabelView.prototype = Object.create(NodeView.prototype);\r\n    LabelView.prototype.constructor = LabelView;\r\n\r\n    /**\r\n     *\r\n     */\r\n    LabelView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.assignStyleToCanvas(canvas);\r\n        var size, minW, minH, w, h;\r\n        if (this.wordWrap && this.direction === DK_HORZ) {\r\n            size = canvas.textExtent(this.text, 1);\r\n            minW = size.x;\r\n            minH = canvas.textExtent(this.text, this.width - 1).y;\r\n            size = canvas.textExtent(this.text, this.width - 1);\r\n            w = size.x;\r\n            h = size.y;\r\n        } else {\r\n            minW = canvas.textExtent(this.text).x;\r\n            minH = canvas.textExtent("^_").y;\r\n            w = minW;\r\n            h = minH;\r\n        }\r\n        if (this.direction === DK_HORZ) {\r\n            this.minWidth = minW;\r\n            this.minHeight = minH;\r\n            this.height = h;\r\n        } else {\r\n            this.minWidth = minH;\r\n            this.minHeight = minW;\r\n            this.width = w;\r\n        }\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    /**\r\n     * Arrange LabelView\r\n     */\r\n    LabelView.prototype.arrange = function (canvas) {\r\n        NodeView.prototype.arrange.call(this, canvas);\r\n    };\r\n\r\n    /**\r\n     * Draw LabelView\r\n     */\r\n    LabelView.prototype.draw = function (canvas) {\r\n        this.assignStyleToCanvas(canvas);\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        if (this.direction === DK_HORZ) {\r\n            canvas.textOut2(r, this.text, this.horizontalAlignment, this.verticalAlignment, false, this.wordWrap, this.underline);\r\n        } else {\r\n            canvas.textOut2(r, this.text, this.horizontalAlignment, this.verticalAlignment, true, this.wordWrap, this.underline);\r\n        }\r\n        View.prototype.draw.call(this, canvas);\r\n    };\r\n\r\n    /**\r\n     * LabelView cannot be copied alone.\r\n     * @override\r\n     * @return {Boolean}\r\n     */\r\n    LabelView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * LabelView cannot be deleted alone.\r\n     * @override\r\n     * @return {Boolean}\r\n     */\r\n    LabelView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * ParasiticView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function ParasiticView() {\r\n        NodeView.apply(this, arguments);\r\n        this.alpha = 0;\r\n        this.distance = 0;\r\n    }\r\n    // ParasiticView inherits NodeView\r\n    ParasiticView.prototype = Object.create(NodeView.prototype);\r\n    ParasiticView.prototype.constructor = ParasiticView;\r\n\r\n    /**\r\n     * ParasiticView cannot be copied alone.\r\n     * @override\r\n     * @return {Boolean}\r\n     */\r\n    ParasiticView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * ParasiticView cannot be deleted alone.\r\n     * @override\r\n     * @return {Boolean}\r\n     */\r\n    ParasiticView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * NodeParasiticView\r\n     * @constructor\r\n     * @extends ParasiticView\r\n     */\r\n    function NodeParasiticView() {\r\n        ParasiticView.apply(this, arguments);\r\n        this.hostNode = null;\r\n    }\r\n\r\n    // NodeParasiticView inherits ParasiticView\r\n    NodeParasiticView.prototype = Object.create(ParasiticView.prototype);\r\n    NodeParasiticView.prototype.constructor = NodeParasiticView;\r\n\r\n    NodeParasiticView.prototype.arrange = function (canvas) {\r\n        ParasiticView.prototype.arrange.call(this, canvas);\r\n        var node = null;\r\n        if (this.hostNode !== null) {\r\n            node = this.hostNode;\r\n        } else if (this._parent instanceof NodeView) {\r\n            node = this._parent;\r\n        } else {\r\n            return;\r\n        }\r\n        var p1 = new Point();\r\n        p1.x = (node.left + node.getRight()) / 2;\r\n        p1.y = (node.top + node.getBottom()) / 2;\r\n        var p = Coord.getPointAwayLine(p1, p1, this.alpha, this.distance);\r\n        this.left = p.x + p1.x - this.width / 2;\r\n        this.top = p.y + p1.y - this.height / 2;\r\n    };\r\n\r\n\r\n    /**\r\n     * EdgeParasiticView\r\n     * @constructor\r\n     * @extends ParasiticView\r\n     */\r\n    function EdgeParasiticView() {\r\n        ParasiticView.apply(this, arguments);\r\n        this.hostEdge = null;\r\n        this.edgePosition = EP_HEAD;\r\n    }\r\n\r\n    // EdgeParasiticView inherits ParasiticView\r\n    EdgeParasiticView.prototype = Object.create(ParasiticView.prototype);\r\n    EdgeParasiticView.prototype.constructor = EdgeParasiticView;\r\n\r\n    EdgeParasiticView.prototype.arrangeObject = function (canvas) {\r\n        ParasiticView.prototype.arrangeObject.call(this, canvas);\r\n        var edge, midPointIndex, p, p1, p2;\r\n        edge = null;\r\n        if (this.hostEdge !== null) {\r\n            edge = this.hostEdge;\r\n        } else if (this._parent instanceof EdgeView) {\r\n            edge = this._parent;\r\n        } else {\r\n            return;\r\n        }\r\n        switch (this.edgePosition) {\r\n        case EP_HEAD:\r\n            p1 = edge.points.getPoint(edge.points.count() - 1).copy();\r\n            p2 = edge.points.getPoint(edge.points.count() - 2).copy();\r\n            break;\r\n        case EP_TAIL:\r\n            p1 = edge.points.getPoint(0).copy();\r\n            p2 = edge.points.getPoint(1).copy();\r\n            break;\r\n        case EP_MIDDLE:\r\n            midPointIndex = Math.floor(edge.points.count() / 2);\r\n            if ((edge.points.count() % 2) === 0) {\r\n                midPointIndex--;\r\n            }\r\n            p1 = edge.points.getPoint(midPointIndex).copy();\r\n            p2 = edge.points.getPoint(midPointIndex + 1).copy();\r\n            if ((edge.points.count() % 2) === 0) {\r\n                p1.x = Math.floor((p1.x + p2.x) / 2);\r\n                p1.y = Math.floor((p1.y + p2.y) / 2);\r\n            }\r\n        }\r\n        p = Coord.getPointAwayLine(p1, p2, this.alpha, this.distance);\r\n        this.left = p.x + p1.x - Math.floor(this.width / 2);\r\n        this.top = p.y + p1.y - Math.floor(this.height / 2);\r\n    };\r\n\r\n\r\n    /**\r\n     * NodeLabelView\r\n     * @constructor\r\n     * @extends NodeParasiticView\r\n     */\r\n    function NodeLabelView() {\r\n        NodeParasiticView.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.underline = false;\r\n\r\n        /** @member {boolean} */\r\n        this.wordWrap = false;\r\n\r\n        this.enabled = true;\r\n        this.movable = MM_FREE;\r\n        this.sizable = SZ_HORZ;\r\n        this.text = "";\r\n        this.horizontalAlignment = Graphics.AL_CENTER;\r\n        this.verticalAlignment = Graphics.AL_MIDDLE;\r\n    }\r\n\r\n    // NodeLabelView inherits NodeParasiticView\r\n    NodeLabelView.prototype = Object.create(NodeParasiticView.prototype);\r\n    NodeLabelView.prototype.constructor = NodeLabelView;\r\n\r\n    NodeLabelView.prototype.sizeObject = function (canvas) {\r\n        NodeParasiticView.prototype.sizeObject.call(this, canvas);\r\n        this.assignStyleToCanvas(canvas);\r\n        var size, minW, minH, w, h;\r\n        if (this.wordWrap) {\r\n            size = canvas.textExtent(this.text, 1);\r\n            minW = size.x;\r\n            minH = canvas.textExtent(this.text, this.width - 1).y;\r\n            size = canvas.textExtent(this.text, this.width - 1);\r\n            w = size.x;\r\n            h = size.y;\r\n        } else {\r\n            minW = canvas.textExtent(this.text).x;\r\n            minH = canvas.textExtent("^_").y;\r\n            w = minW;\r\n            h = minH;\r\n        }\r\n        this.minWidth = minW;\r\n        this.minHeight = minH;\r\n        this.height = h;\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    NodeLabelView.prototype.arrange = function (canvas) {\r\n        NodeParasiticView.prototype.arrange.call(this, canvas);\r\n    };\r\n\r\n    NodeLabelView.prototype.draw = function (canvas) {\r\n        this.assignStyleToCanvas(canvas);\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.textOut2(r, this.text, this.horizontalAlignment, this.verticalAlignment, false, this.wordWrap, this.underline);\r\n    };\r\n\r\n\r\n    /**\r\n     * EdgeLabelView\r\n     * @constructor\r\n     * @extends EdgeParasiticView\r\n     */\r\n    function EdgeLabelView() {\r\n        EdgeParasiticView.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.underline = false;\r\n\r\n        /** @member {boolean} */\r\n        this.wordWrap = false;\r\n\r\n        this.enabled = true;\r\n        this.movable = MM_FREE;\r\n        this.sizable = SZ_HORZ;\r\n        this.text = "";\r\n        this.horizontalAlignment = Graphics.AL_CENTER;\r\n        this.verticalAlignment = Graphics.AL_MIDDLE;\r\n    }\r\n    // EdgeLabelView inherits EdgeParasiticView\r\n    EdgeLabelView.prototype = Object.create(EdgeParasiticView.prototype);\r\n    EdgeLabelView.prototype.constructor = EdgeLabelView;\r\n\r\n    EdgeLabelView.prototype.sizeObject = function (canvas) {\r\n        EdgeParasiticView.prototype.sizeObject.call(this, canvas);\r\n        this.assignStyleToCanvas(canvas);\r\n        var size, minW, minH, w, h;\r\n        if (this.wordWrap) {\r\n            size = canvas.textExtent(this.text, 1);\r\n            minW = size.x;\r\n            minH = canvas.textExtent(this.text, this.width - 1).y;\r\n            size = canvas.textExtent(this.text, this.width - 1);\r\n            w = size.x;\r\n            h = size.y;\r\n        } else {\r\n            minW = canvas.textExtent(this.text).x;\r\n            minH = canvas.textExtent("^_").y;\r\n            w = minW;\r\n            h = minH;\r\n        }\r\n        this.minWidth = minW;\r\n        this.minHeight = minH;\r\n        this.height = h;\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    EdgeLabelView.prototype.arrange = function (canvas) {\r\n        EdgeParasiticView.prototype.arrange.call(this, canvas);\r\n    };\r\n\r\n    EdgeLabelView.prototype.draw = function (canvas) {\r\n        this.assignStyleToCanvas(canvas);\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.textOut2(r, this.text, this.horizontalAlignment, this.verticalAlignment, false, this.wordWrap, this.underline);\r\n        EdgeParasiticView.prototype.draw.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * NodeNodeView\r\n     * @constructor\r\n     * @extends NodeParasiticView\r\n     */\r\n    function NodeNodeView() {\r\n        NodeParasiticView.apply(this, arguments);\r\n    }\r\n    // NodeNodeView inherits NodeParasiticView\r\n    NodeNodeView.prototype = Object.create(NodeParasiticView.prototype);\r\n    NodeNodeView.prototype.constructor = NodeNodeView;\r\n\r\n\r\n    /**\r\n     * EdgeNodeView\r\n     * @constructor\r\n     * @extends EdgeParasiticView\r\n     */\r\n    function EdgeNodeView() {\r\n        EdgeParasiticView.apply(this, arguments);\r\n    }\r\n    // EdgeNodeView inherits EdgeParasiticView\r\n    EdgeNodeView.prototype = Object.create(EdgeParasiticView.prototype);\r\n    EdgeNodeView.prototype.constructor = EdgeNodeView;\r\n\r\n\r\n    /**\r\n     * Diagram\r\n     *\r\n     * @constructor\r\n     * @extends ExtensibleModel\r\n     */\r\n    function Diagram() {\r\n        ExtensibleModel.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.visible = true;\r\n\r\n        /** @member {boolean} */\r\n        this.defaultDiagram = false;\r\n\r\n        /** @member {Array.<View>} */\r\n        this.ownedViews = [];\r\n\r\n        /** @member {Array.<View>} */\r\n        this.selectedViews = [];\r\n    }\r\n\r\n    // Diagram inherits Model\r\n    Diagram.prototype = Object.create(ExtensibleModel.prototype);\r\n    Diagram.prototype.constructor = Diagram;\r\n\r\n    Diagram.prototype.traverse = function (fun) {\r\n        fun(this);\r\n        for (var i = 0, len = this.ownedViews.length; i < len; i++) {\r\n            var v = this.ownedViews[i];\r\n            v.traverse(fun);\r\n        }\r\n    };\r\n\r\n    Diagram.prototype.traverseDepthFirst = function (fun) {\r\n        for (var i = 0, len = this.ownedViews.length; i < len; i++) {\r\n            var v = this.ownedViews[i];\r\n            v.traverseDepthFirst(fun);\r\n        }\r\n        fun(this);\r\n    };\r\n\r\n\r\n    Diagram.prototype.find = function (predicate) {\r\n        if (predicate(this)) {\r\n            return this;\r\n        }\r\n        var ref = this.ownedViews;\r\n        for (var i = 0, len = ref.length; i < len; i++) {\r\n            var v = ref[i];\r\n            var result = v.find(predicate);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    Diagram.prototype.findDepthFirst = function (predicate) {\r\n        var ref = this.ownedViews;\r\n        for (var i = 0, len = ref.length; i < len; i++) {\r\n            var v = ref[i];\r\n            var result = v.findDepthFirst(predicate);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n        if (predicate(this)) {\r\n            return this;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    Diagram.prototype.selectViewByRect = function (canvas, v, r) {\r\n        // EdgeLabelView들은 영역에 의해 선택가능하다. (parentStyle = false 이기 때문에)\r\n        // 하지만, LabelView, CompartmentView 들은 parentStyle = true이기 때문에 선택이 불가능하다.\r\n        if (v.visible === true && v.enabled === true && v.parentStyle === false && (v.selectable === SK_YES)) {\r\n            if (v.overlapRect(canvas, r)) {\r\n                v.selected = true;\r\n                if (!_.contains(this.selectedViews, v)) {\r\n                    this.selectedViews.push(v);\r\n                }\r\n            }\r\n        }\r\n        for (var i = 0, len = v.subViews.length; i < len; i++) {\r\n            var sub = v.subViews[i];\r\n            this.selectViewByRect(canvas, sub, r);\r\n        }\r\n    };\r\n\r\n    Diagram.prototype.selectView = function (v) {\r\n        if (v.visible && v.enabled && (v.selectable === SK_YES)) {\r\n            v.selected = true;\r\n            if (!_.contains(this.selectedViews, v)) {\r\n                this.selectedViews.push(v);\r\n            }\r\n        }\r\n    };\r\n\r\n    Diagram.prototype.deselectView = function (v) {\r\n        if (v.visible && v.enabled && (v.selectable === SK_YES)) {\r\n            v.selected = false;\r\n            if (_.contains(this.selectedViews, v)) {\r\n                this.selectedViews.remove(v);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Draw Diagram\r\n     * 1. setup all views (breadth-first)\r\n     * 2. update all views (breadth-first)\r\n     * 3. compute size of views (depth-first)\r\n     * 4. arrange views (breadth-first)\r\n     * 5. draw views (breadth-first)\r\n     *\r\n     * @param {Canvas} canvas\r\n     * @param {?boolean} drawSelection\r\n     */\r\n    Diagram.prototype.drawDiagram = function (canvas, drawSelection) {\r\n        var i, len;\r\n        // Sort views by zIndex\r\n        var sortedViews = _.sortBy(this.ownedViews, function (v) { return v.zIndex; });\r\n        // Draw views\r\n        for (i = 0, len = sortedViews.length; i < len; i++) {\r\n            var view = sortedViews[i];\r\n            try {\r\n                view.setup(canvas);\r\n                view.update(canvas);\r\n                view.size(canvas);\r\n                view.arrange(canvas);\r\n                if (view.showShadow) {\r\n                    view.drawShadow(canvas);\r\n                }\r\n                view.draw(canvas);\r\n            } catch (err) {\r\n                console.log(view);\r\n                console.error(err);\r\n            }\r\n        }\r\n        // Draw selection\r\n        if (drawSelection !== false) {\r\n            for (i = 0, len = this.selectedViews.length; i < len; i++) {\r\n                var v = this.selectedViews[i];\r\n                try {\r\n                    v.drawSelection(canvas);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    Diagram.prototype.addOwnedView = function (view) {\r\n        this.ownedViews.add(view);\r\n        view._parent = this;\r\n    };\r\n\r\n    Diagram.prototype.removeOwnedView = function (view) {\r\n        this.ownedViews.remove(view);\r\n        view._parent = null;\r\n    };\r\n\r\n    Diagram.prototype.getOwnedViewById = function (id) {\r\n        for (var i = 0, len = this.ownedViews.length; i < len; i++) {\r\n            var v = this.ownedViews[i];\r\n            if (id === v._id) {\r\n                return v;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Find a view at specific position (x, y)\r\n     *\r\n     * @param {Canvas} canvas\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {boolean} shallow Find only in first level (don\'t find in subviews)\r\n     * @param {?constructor} viewType\r\n     * @return {View}\r\n     */\r\n    Diagram.prototype.getViewAt = function (canvas, x, y, shallow, viewType) {\r\n        // Sort views by zIndex\r\n        var sortedViews = _.sortBy(this.ownedViews, function (v) { return v.zIndex; });\r\n        for (var i = sortedViews.length - 1; i >= 0; i--) {\r\n            var v = sortedViews[i];\r\n            if (shallow === true) {\r\n                if (v.visible && (v.selectable === SK_YES) && v.containsPoint(canvas, x, y)) {\r\n                    if (viewType) {\r\n                        if (v instanceof viewType) {\r\n                            return v;\r\n                        }\r\n                    } else {\r\n                        return v;\r\n                    }\r\n                }\r\n            } else {\r\n                if (v.visible && (v.selectable !== SK_NO)) {\r\n                    var view = v.getViewAt(canvas, x, y);\r\n                    if (view !== null) {\r\n                        return view;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.containsPoint(canvas, x, y) && (this.selectable === SK_YES))  {\r\n            return this;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Find View at specific position (x, y) in depth-first manner\r\n     *\r\n     * @param {Canvas} canvas\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @return {View}\r\n     */\r\n    Diagram.prototype.getBottomViewAt = function (canvas, x, y) {\r\n        return this.findDepthFirst(function (v) {\r\n            return (v instanceof View && v.visible && (v.selectable !== SK_NO) && v.containsPoint(canvas, x, y));\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get a view of a specific model\r\n     *\r\n     * @param {Model} model\r\n     * @param {?constructor} viewType\r\n     * @return {View}\r\n     */\r\n    Diagram.prototype.getViewOf = function (model, viewType) {\r\n        return this.find(function (v) {\r\n            if (viewType) {\r\n                return (v.model === model) && (v instanceof viewType);\r\n            } else {\r\n                return (v.model === model);\r\n            }\r\n        });\r\n    };\r\n\r\n    Diagram.prototype.getSelectedBoundingBox = function (canvas) {\r\n        var r = new Rect(10000, 10000, -10000, -10000);\r\n        for (var i = 0, len = this.selectedViews.length; i < len; i++) {\r\n            var v = this.selectedViews[i];\r\n            r = Coord.unionRect(r, v.getBoundingBox(canvas));\r\n        }\r\n        return r;\r\n    };\r\n\r\n    Diagram.prototype.getBoundingBox = function (canvas) {\r\n        if (this.ownedViews.length > 0) {\r\n            var r = this.ownedViews[0].getBoundingBox(canvas);\r\n            for (var i = 1, len = this.ownedViews.length; i < len; i++) {\r\n                var v = this.ownedViews[i];\r\n                r.union(v.getBoundingBox(canvas));\r\n            }\r\n            return r;\r\n        }\r\n        return new Rect(0, 0, 0, 0);\r\n    };\r\n\r\n    Diagram.prototype.containsPoint = function (canvas, x, y) {\r\n        var r = this.getBoundingBox(canvas);\r\n        return Coord.ptInRect(x, y, r);\r\n    };\r\n\r\n    Diagram.prototype.selectArea = function (canvas, x1, y1, x2, y2) {\r\n        var r = new Rect(x1, y1, x2, y2);\r\n        Coord.normalizeRect(r);\r\n        for (var i = 0, len = this.ownedViews.length; i < len; i++) {\r\n            var v = this.ownedViews[i];\r\n            if (v.visible && v.enabled && (v.selectable === SK_YES) && v.overlapRect(canvas, r)) {\r\n                if (!_.contains(this.selectedViews, v)) {\r\n                    v.selected = true;\r\n                    this.selectedViews.push(v);\r\n                }\r\n            }\r\n            this.selectViewByRect(canvas, v, r);\r\n        }\r\n    };\r\n\r\n    Diagram.prototype.selectAll = function () {\r\n        var self = this;\r\n        for (var i = 0, len = this.ownedViews.length; i < len; i++) {\r\n            var v = this.ownedViews[i];\r\n            this.selectView(v);\r\n            v.traverse(function (sub) {\r\n                if (sub.visible === true && sub.enabled === true && sub.parentStyle === false && sub.selectable === SK_YES) {\r\n                    self.selectView(sub);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    Diagram.prototype.deselectAll = function () {\r\n        for (var i = 0, len = this.selectedViews.length; i < len; i++) {\r\n            var v = this.selectedViews[i];\r\n            v.selected = false;\r\n        }\r\n        this.selectedViews.clear();\r\n    };\r\n\r\n    Diagram.prototype.canPaste = function (kind, copyContext) {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Return true only if all selected views could be copied.\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    Diagram.prototype.canCopyViews = function () {\r\n        for (var i = 0, len = this.selectedViews.length; i < len; i++) {\r\n            if (!this.selectedViews[i].canCopy()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Return true only if all selected views could be deleted.\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    Diagram.prototype.canDeleteViews = function () {\r\n        for (var i = 0, len = this.selectedViews.length; i < len; i++) {\r\n            if (!this.selectedViews[i].canDelete())  {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Determine whether views in clipboard can be pasted in this diagram.\r\n     *\r\n     * @param {Array.<View>} views\r\n     * @return {Boolean}\r\n     */\r\n    Diagram.prototype.canPasteViews = function (views) {\r\n        var viewTypes = MetaModelManager.getAvailableViewTypes(this.getClassName());\r\n        return _.all(views, function (v) {\r\n            return _.any(viewTypes, function (vt) {\r\n                return v instanceof type[vt];\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Determine whether to accept to create a view of a given model drag-and-dropped from Explorer.\r\n     *\r\n     * @param {Model} model\r\n     * @return {Boolean}\r\n     */\r\n    Diagram.prototype.canAcceptModel = function (model) {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Layout diagram automatically\r\n     *\r\n     * @param {string} direction Rank Direction ( "TB" | "BT" | "LR" | "RL" )\r\n     * @param {{node:number, edge:number, rank:number}} separations\r\n     * @param {number} edgeLineStyle\r\n     */\r\n    Diagram.prototype.layout = function (direction, separations, edgeLineStyle) {\r\n        if (typeof graphlib !== "undefined" && typeof dagre !== "undefined") {\r\n            var i, len, v, g = new graphlib.Digraph();\r\n\r\n            // Make Graph\r\n            for (i = 0, len = this.ownedViews.length; i < len; i++) {\r\n                v = this.ownedViews[i];\r\n                if (v instanceof _global.type.NodeView) {\r\n                    g.addNode(v._id, { width: v.width, height: v.height });\r\n                }\r\n            }\r\n            for (i = 0, len = this.ownedViews.length; i < len; i++) {\r\n                v = this.ownedViews[i];\r\n                if (v instanceof _global.type.EdgeView && v.head instanceof type.NodeView && v.tail instanceof type.NodeView) {\r\n                    g.addEdge(v._id, v.head._id, v.tail._id);\r\n                }\r\n            }\r\n\r\n            // Layout Options\r\n            var nodeSeparation = NODE_SEPARATION,\r\n                edgeSeparation = EDGE_SEPARATION,\r\n                rankSeparation = RANK_SEPARATION,\r\n                rankDir        = DIRECTION_TB,\r\n                lineStyle      = LS_CURVE;\r\n            if (direction) {\r\n                rankDir = direction;\r\n            }\r\n            if (separations) {\r\n                if (typeof separations.node !== undefined) { nodeSeparation = separations.node; }\r\n                if (typeof separations.edge !== undefined) { edgeSeparation = separations.edge; }\r\n                if (typeof separations.rank !== undefined) { rankSeparation = separations.rank; }\r\n            }\r\n            if (_.isNumber(edgeLineStyle)) {\r\n                lineStyle = edgeLineStyle;\r\n            }\r\n\r\n            // Do Layout\r\n            var layout = dagre.layout()\r\n                .nodeSep(nodeSeparation)\r\n                .edgeSep(edgeSeparation)\r\n                .rankSep(rankSeparation)\r\n                .rankDir(rankDir)\r\n                .run(g);\r\n\r\n            // Apply Layout Results\r\n            var key;\r\n            for (key in layout._nodes) {\r\n                var node = layout._nodes[key];\r\n                var nodeView = this.getOwnedViewById(node.id);\r\n                nodeView.left = node.value.x - (node.value.width / 2) + LAYOUT_MARGIN_LEFT;\r\n                nodeView.top = node.value.y - (node.value.height / 2) + LAYOUT_MARGIN_TOP;\r\n            }\r\n            for (key in layout._edges) {\r\n                var edge = layout._edges[key];\r\n                var edgeView = this.getOwnedViewById(edge.id);\r\n                var headView = this.getOwnedViewById(edge.u);\r\n                var tailView = this.getOwnedViewById(edge.v);\r\n                edgeView.lineStyle = lineStyle;\r\n                edgeView.points.clear();\r\n                edgeView.points.add(tailView.getCenter());\r\n                for (var j = edge.value.points.length - 1; j >= 0; j--) {\r\n                    var p = edge.value.points[j];\r\n                    edgeView.points.add(new Graphics.Point(p.x + LAYOUT_MARGIN_LEFT, p.y + LAYOUT_MARGIN_TOP));\r\n                }\r\n                edgeView.points.add(headView.getCenter());\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Project\r\n     *\r\n     * @constructor\r\n     * @extends ExtensibleModel\r\n     */\r\n    function Project() {\r\n        ExtensibleModel.apply(this, arguments);\r\n        this.name = "Untitled";\r\n        this.author = \'\';\r\n        this.company = \'\';\r\n        this.copyright = \'\';\r\n        this.version = \'\';\r\n    }\r\n\r\n    // Project inherits ExtensibleModel\r\n    Project.prototype = Object.create(ExtensibleModel.prototype);\r\n    Project.prototype.constructor = Project;\r\n\r\n    Project.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    Project.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Writer Class for storing Elements into JSON data.\r\n     * @constructor\r\n     */\r\n    function Writer() {\r\n\r\n        /** @member {Object<string, ?>} - 현재 저장중인 데이터 */\r\n        this.current = {};\r\n    }\r\n\r\n    /**\r\n     * Write primitive value\r\n     *\r\n     * @param {string} name\r\n     * @param {string|number|boolean|null} value\r\n     */\r\n    Writer.prototype.write = function (name, value) {\r\n        if (!name) {\r\n            console.error("Writer.write(): missing required parameters: name");\r\n            return;\r\n        }\r\n        if (!_.isString(value) && !_.isNumber(value) && !_.isBoolean(value) && value !== null) {\r\n            console.error("Writer.write(): type of \'value\' parameter should be one of string, number or boolean.", name + " = ", value);\r\n            return;\r\n        }\r\n        this.current[name] = value;\r\n    };\r\n\r\n    /**\r\n     * Write an Object\r\n     *\r\n     * @param {string} name\r\n     * @param {Element} value\r\n     */\r\n    Writer.prototype.writeObj = function (name, value) {\r\n        if (!name) {\r\n            console.error("Writer.writeObj(): missing required parameters: name");\r\n            return;\r\n        }\r\n        if (value && value instanceof Element) {\r\n            var temp = this.current;\r\n            this.current[name] = {};\r\n            this.current = this.current[name];\r\n            value.save(this);\r\n            this.current = temp;\r\n        } else {\r\n            this.current[name] = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Write an Array of Objects\r\n     *\r\n     * @param {string} name\r\n     * @param {Array.<Element>} value\r\n     */\r\n    Writer.prototype.writeObjArray = function (name, value) {\r\n        if (!name) {\r\n            console.error("Writer.writeObjArray(): missing required parameters: name");\r\n            return;\r\n        }\r\n        if (!_.isArray(value)) {\r\n            console.error("Writer.writeObjArray(): type of \'value\' parameter should be an array.", name + " = ", value);\r\n            return;\r\n        }\r\n        var temp = this.current;\r\n        this.current[name] = [];\r\n        var i, len,\r\n            array = this.current[name];\r\n        for (i = 0, len = value.length; i < len; i++) {\r\n            var o = value[i];\r\n            if (o instanceof Element) {\r\n                this.current = {};\r\n                o.save(this);\r\n                array.push(this.current);\r\n            } else {\r\n                console.error("Writer.writeObjArray(): one of \'value\' array is not instanceof Core.Element.", o);\r\n                return;\r\n            }\r\n        }\r\n        this.current = temp;\r\n    };\r\n\r\n    /**\r\n     * Write a Reference\r\n     *\r\n     * @param {string} name\r\n     * @param {Element} value\r\n     */\r\n    Writer.prototype.writeRef = function (name, value) {\r\n        if (!name) {\r\n            console.error("Writer.writeRef(): missing required parameters: name");\r\n            return;\r\n        }\r\n        if (value) {\r\n            if (value instanceof Element) {\r\n                this.current[name] = { $ref: value._id };\r\n            } else {\r\n                console.error("Writer.writeRef(): \'value\' parameter is not instanceof Core.Element.", name + " = ", value);\r\n                return;\r\n            }\r\n        } else {\r\n            this.current[name] = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Write an Array of Reference\r\n     *\r\n     * @param {string} name\r\n     * @param {Array.<Element>} value\r\n     */\r\n    Writer.prototype.writeRefArray = function (name, value) {\r\n        if (!name) {\r\n            console.error("Writer.writeRefArray(): missing required parameters: name");\r\n            return;\r\n        }\r\n        if (!_.isArray(value)) {\r\n            console.error("Writer.writeRefArray(): type of \'value\' parameter should be an array.", name + " = ", value);\r\n            return;\r\n        }\r\n        var temp = this.current;\r\n        this.current[name] = [];\r\n        var i, len,\r\n            array = this.current[name];\r\n        for (i = 0, len = value.length; i < len; i++) {\r\n            var o = value[i];\r\n            if (o instanceof Element) {\r\n                var ref = { $ref: o._id };\r\n                array.push(ref);\r\n            } else {\r\n                console.error("Writer.writeRefArray(): one of \'value\' array is not instanceof Core.Element.", o);\r\n                return;\r\n            }\r\n        }\r\n        this.current = temp;\r\n    };\r\n\r\n    /**\r\n     * Write a Variant (Primitive or Reference)\r\n     *\r\n     * @param {string} name\r\n     * @param {number|string|boolean|Element} value\r\n     */\r\n    Writer.prototype.writeVariant = function (name, value) {\r\n        if (!name) {\r\n            console.error("Writer.writeVariant(): missing required parameters: name");\r\n            return;\r\n        }\r\n        if (value === null) {\r\n            this.current[name] = null;\r\n        } else if (value instanceof Element) {\r\n            this.current[name] = { $ref: value._id };\r\n        } else if (_.isString(value) || _.isNumber(value) || _.isBoolean(value)) {\r\n            this.current[name] = value;\r\n        } else {\r\n            console.error("Writer.writeVariant(): invalid type of parameter: value.", name + " = ", value);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Write a Custom Object (Custom Object have it\'s own method to store itself)\r\n     *\r\n     * @param {string} name\r\n     * @param {{__write: function()}} value\r\n     */\r\n    Writer.prototype.writeCustom = function (name, value) {\r\n        if (!name) {\r\n            console.error("Writer.writeCustom(): missing required parameters: name");\r\n            return;\r\n        }\r\n        if (value) {\r\n            if (_.isFunction(value.__write)) {\r\n                this.current[name] = value.__write();\r\n            } else {\r\n                console.error("Writer.writeCustom(): the \'value\' parameter should have \'__write\' function", name + " = ", value);\r\n                return;\r\n            }\r\n        } else {\r\n            console.error("Writer.writeCustom(): missing required parameters: value");\r\n            return;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reader Class\r\n     * @constructor\r\n     * @param {Object} data\r\n     * @param {Object.<string, constructor>} ctors\r\n     */\r\n    function Reader(data, ctors) {\r\n        if (!_.isObject(data)) {\r\n            console.error("Reader constructor: \'data\' parameter should be JSON object");\r\n            return;\r\n        }\r\n        this.data = data;\r\n        this.ctors = ctors;\r\n        this.current = this.data;\r\n        this.idMap = {};\r\n    }\r\n\r\n    /**\r\n     * Read primitive type\r\n     * @param {string} name\r\n     * @return {number|string|boolean|null}\r\n     */\r\n    Reader.prototype.read = function (name) {\r\n        if (!name) {\r\n            console.error("Reader.read(): missing required parameters: name");\r\n            return;\r\n        }\r\n\r\n        var value = this.current[name];\r\n\r\n        if (typeof value !== "undefined") {\r\n            // Check type of data to be read\r\n            if (!_.isString(value) && !_.isNumber(value) && !_.isBoolean(value) && value !== null) {\r\n                console.error("Reader.read(): type of data to be read should be one of number, string, boolean, or null.", name + " = ", value);\r\n                return;\r\n            }\r\n            return this.current[name];\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Read an Object\r\n     * @param {string} name\r\n     * @return {Element}\r\n     */\r\n    Reader.prototype.readObj = function (name) {\r\n        if (!name) {\r\n            console.error("Reader.readObj(): missing required parameters: name");\r\n            return;\r\n        }\r\n\r\n        var value = this.current[name];\r\n\r\n        if (typeof value !== "undefined") {\r\n            // Check type of data to be read\r\n            if (!_.isObject(value)) {\r\n                console.error("Reader.readObj(): type of data to be read should be an Object.", name + " = ", value);\r\n                return;\r\n            }\r\n            if (!value._type) {\r\n                console.error("Reader.readObj(): \'_type\' field is not found to instantiate an Object.", name + " = ", value);\r\n                return;\r\n            }\r\n            if (!_.isFunction(this.ctors[value._type])) {\r\n                console.error("Reader.readObj(): type." + value._type + " is not registered.");\r\n                return;\r\n            }\r\n\r\n            var obj = new this.ctors[value._type]();\r\n            var temp = this.current;\r\n            this.current = value;\r\n            obj.load(this);\r\n            this.current = temp;\r\n\r\n            // Register to idMap\r\n            this.idMap[obj._id] = obj;\r\n\r\n            return obj;\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Read an Array of Object\r\n     * @param {string} name\r\n     * @return {Array.<Element>}\r\n     */\r\n    Reader.prototype.readObjArray = function (name) {\r\n        if (!name) {\r\n            console.error("Reader.readObjArray(): missing required parameters: name");\r\n            return;\r\n        }\r\n\r\n        var value = this.current[name];\r\n\r\n        if (typeof value !== "undefined") {\r\n            // Check type of data to be read\r\n            if (!_.isArray(value)) {\r\n                console.error("Reader.readObjArray(): type of data to be read should be an array.", name + " = ", value);\r\n                return;\r\n            }\r\n\r\n            var ref = value;\r\n            var i, len, array = [];\r\n            for (i = 0, len = ref.length; i < len; i++) {\r\n                var o = ref[i];\r\n\r\n                // Check type of an element of array\r\n                if (!_.isObject(o)) {\r\n                    console.error("Reader.readObjArray(): one of array elements is not Object.", o);\r\n                    continue;\r\n                }\r\n                if (!o._type) {\r\n                    console.error("Reader.readObjArray(): \'_type\' field is not found to instantiate an Object.", o);\r\n                    continue;\r\n                }\r\n                if (!_.isFunction(this.ctors[o._type])) {\r\n                    console.error("Reader.readObjArray(): type." + o._type + " is not registered.");\r\n                    continue;\r\n                }\r\n\r\n                var obj = new this.ctors[o._type]();\r\n                var temp = this.current;\r\n                this.current = o;\r\n                obj.load(this);\r\n                this.current = temp;\r\n\r\n                // Register to idMap\r\n                this.idMap[obj._id] = obj;\r\n                array.push(obj);\r\n            }\r\n            return array;\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Read a reference to an Object. The returned {$ref} object should be resolved later.\r\n     * @param {string} name\r\n     * @return {{$ref:string}}\r\n     */\r\n    Reader.prototype.readRef = function (name) {\r\n        if (!name) {\r\n            console.error("Reader.readRef(): missing required parameters: name");\r\n            return;\r\n        }\r\n\r\n        var value = this.current[name];\r\n\r\n        if (typeof value !== "undefined") {\r\n            // Check type of data to be read\r\n            if (value && !_.isString(value.$ref)) {\r\n                console.error("Reader.readRef(): data is not a reference (\'$ref\' not found).", name + " = ", value);\r\n                return;\r\n            }\r\n\r\n            return value;\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Read an array of reference.\r\n     * @param {string} name\r\n     * @return {Array.<{$ref:string}>}\r\n     */\r\n    Reader.prototype.readRefArray = function (name) {\r\n        if (!name) {\r\n            console.error("Reader.readRefArray(): missing required parameters: name");\r\n            return;\r\n        }\r\n\r\n        var value = this.current[name];\r\n\r\n        if (typeof value !== "undefined") {\r\n            // Check type of data to be read\r\n            if (!_.isArray(value)) {\r\n                console.error("Reader.readRefArray(): type of data to be read should be an array.", name + " = ", value);\r\n                return;\r\n            }\r\n\r\n            var array = [];\r\n            var i, len, ref = this.current[name];\r\n            for (i = 0, len = ref.length; i < len; i++) {\r\n                var _refObj = ref[i];\r\n\r\n                // Check type of an element of array\r\n                if (!_.isObject(_refObj)) {\r\n                    console.error("Reader.readRefArray(): one of array elements is not Object.", _refObj);\r\n                    return;\r\n                }\r\n                if (!_.isString(_refObj.$ref)) {\r\n                    console.error("Reader.readRefArray(): data is not a reference (\'$ref\' not found).", _refObj);\r\n                    return;\r\n                }\r\n\r\n                array.push(_refObj);\r\n            }\r\n            return array;\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Read Variant\r\n     * @param {string} name\r\n     * @return {{$ref:string}|null|number|boolean|string}\r\n     */\r\n    Reader.prototype.readVariant = function (name) {\r\n        if (!name) {\r\n            console.error("Reader.readVariant(): missing required parameters: name");\r\n            return;\r\n        }\r\n\r\n        var value = this.current[name];\r\n\r\n        if (typeof value !== "undefined") {\r\n            // Check type of data to be read\r\n            if (!_.isString(value) && !_.isNumber(value) && !_.isBoolean(value) && value !== null && !_.isString(value.$ref)) {\r\n                console.error("Reader.readVariant(): type of data to be read should be one of number, string, boolean, null, or reference.", name + " = ", value);\r\n                return;\r\n            }\r\n\r\n            return this.current[name];\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Read a custom object\r\n     * @param {string} typeName\r\n     * @param {string} name\r\n     * @return {{__read: function(Object)}}\r\n     */\r\n    Reader.prototype.readCustom = function (typeName, name) {\r\n        if (!name) {\r\n            console.error("Reader.readCustom(): missing required parameters: name");\r\n            return;\r\n        }\r\n\r\n        var value = this.current[name];\r\n\r\n        if (typeof value !== "undefined") {\r\n            if (!_.isFunction(this.ctors[typeName])) {\r\n                console.error("Reader.readCustom(): type." + typeName + " is not registered.");\r\n                return;\r\n            }\r\n\r\n            var custom = new this.ctors[typeName]();\r\n\r\n            if (!_.isFunction(custom.__read)) {\r\n                console.error("Reader.readCustom(): Object of type." + typeName + " should have \'__read\' function.", custom);\r\n                return;\r\n            }\r\n\r\n            custom.__read(value);\r\n            return custom;\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Return a super type of a given type.\r\n     *\r\n     * @param {constructor} subType\r\n     * @return {constructor} - superType of subType\r\n     */\r\n    function getSuperType(subType) {\r\n        if (subType) {\r\n            return _global.type[_global.meta[subType.name].super];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a generalized type of given elements.\r\n     *\r\n     * @param {Array.<Element>} elems\r\n     * @return {constructor}\r\n     */\r\n    function getCommonType(elems) {\r\n        if (elems && elems.length > 0) {\r\n            var commonType = elems[0].getClass();\r\n            while (!_.every(elems, function (e) { return (e instanceof commonType); })) {\r\n                commonType = getSuperType(commonType);\r\n            }\r\n            return commonType;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find element by name in a given array.\r\n     *\r\n     * @param {Array.<Element>} array\r\n     * @param {string} name\r\n     * @return {Element}\r\n     */\r\n    function findByName(array, name) {\r\n        if (array && array.length > 0) {\r\n            for (var i = 0, len = array.length; i < len; i++) {\r\n                var elem = array[i];\r\n                if (elem.name == name) {\r\n                    return elem;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Find an available name in a given array. (e.g. Class1, Class2, ... )\r\n     *\r\n     * @param {Array.<Element>} array\r\n     * @param {string} prefix Prefix for name\r\n     * @return {string} Return a new name\r\n     */\r\n    function getNewName(array, prefix) {\r\n        var num = 0, name = null;\r\n        do {\r\n            num++;\r\n            name = prefix + num;\r\n        } while (findByName(array, name));\r\n        return name;\r\n    }\r\n\r\n    // Type definitions\r\n    _global.type.Element                = Element;\r\n    _global.type.Model                  = Model;\r\n    _global.type.Tag                    = Tag;\r\n    _global.type.Hyperlink              = Hyperlink;\r\n    _global.type.ExtensibleModel        = ExtensibleModel;\r\n    _global.type.Relationship           = Relationship;\r\n    _global.type.DirectedRelationship   = DirectedRelationship;\r\n    _global.type.RelationshipEnd        = RelationshipEnd;\r\n    _global.type.UndirectedRelationship = UndirectedRelationship;\r\n    _global.type.View                   = View;\r\n    _global.type.NodeView               = NodeView;\r\n    _global.type.EdgeView               = EdgeView;\r\n    _global.type.LabelView              = LabelView;\r\n    _global.type.ParasiticView          = ParasiticView;\r\n    _global.type.NodeParasiticView      = NodeParasiticView;\r\n    _global.type.EdgeParasiticView      = EdgeParasiticView;\r\n    _global.type.NodeLabelView          = NodeLabelView;\r\n    _global.type.EdgeLabelView          = EdgeLabelView;\r\n    _global.type.NodeNodeView           = NodeNodeView;\r\n    _global.type.EdgeNodeView           = EdgeNodeView;\r\n    _global.type.Diagram                = Diagram;\r\n    _global.type.Project                = Project;\r\n\r\n    // Define public API\r\n\r\n    exports.ATTR_KIND_PRIM          = ATTR_KIND_PRIM;\r\n    exports.ATTR_KIND_ENUM          = ATTR_KIND_ENUM;\r\n    exports.ATTR_KIND_REF           = ATTR_KIND_REF;\r\n    exports.ATTR_KIND_REFS          = ATTR_KIND_REFS;\r\n    exports.ATTR_KIND_OBJ           = ATTR_KIND_OBJ;\r\n    exports.ATTR_KIND_OBJS          = ATTR_KIND_OBJS;\r\n    exports.ATTR_KIND_VAR           = ATTR_KIND_VAR;\r\n    exports.ATTR_KIND_CUSTOM        = ATTR_KIND_CUSTOM;\r\n\r\n    exports.SK_NO                   = SK_NO;\r\n    exports.SK_YES                  = SK_YES;\r\n    exports.SK_PROPAGATE            = SK_PROPAGATE;\r\n\r\n    exports.SZ_NONE                 = SZ_NONE;\r\n    exports.SZ_HORZ                 = SZ_HORZ;\r\n    exports.SZ_VERT                 = SZ_VERT;\r\n    exports.SZ_RATIO                = SZ_RATIO;\r\n    exports.SZ_FREE                 = SZ_FREE;\r\n\r\n    exports.MM_NONE                 = MM_NONE;\r\n    exports.MM_HORZ                 = MM_HORZ;\r\n    exports.MM_VERT                 = MM_VERT;\r\n    exports.MM_FREE                 = MM_FREE;\r\n\r\n    exports.LM_SOLID                = LM_SOLID;\r\n    exports.LM_DOT                  = LM_DOT;\r\n\r\n    exports.LS_RECTILINEAR          = LS_RECTILINEAR;\r\n    exports.LS_OBLIQUE              = LS_OBLIQUE;\r\n    exports.LS_ROUNDRECT            = LS_ROUNDRECT;\r\n    exports.LS_CURVE                = LS_CURVE;\r\n\r\n    exports.ES_FLAT                 = ES_FLAT;\r\n    exports.ES_STICK_ARROW          = ES_STICK_ARROW;\r\n    exports.ES_SOLID_ARROW          = ES_SOLID_ARROW;\r\n    exports.ES_TRIANGLE             = ES_TRIANGLE;\r\n    exports.ES_FILLED_TRIANGLE      = ES_FILLED_TRIANGLE;\r\n    exports.ES_DIAMOND              = ES_DIAMOND;\r\n    exports.ES_FILLED_DIAMOND       = ES_FILLED_DIAMOND;\r\n    exports.ES_ARROW_DIAMOND        = ES_ARROW_DIAMOND;\r\n    exports.ES_ARROW_FILLED_DIAMOND = ES_ARROW_FILLED_DIAMOND;\r\n    exports.ES_PLUS                 = ES_PLUS;\r\n    exports.ES_CIRCLE               = ES_CIRCLE;\r\n    exports.ES_CIRCLE_PLUS          = ES_CIRCLE_PLUS;\r\n    exports.ES_CROWFOOT_ONE         = ES_CROWFOOT_ONE;\r\n    exports.ES_CROWFOOT_MANY        = ES_CROWFOOT_MANY;\r\n    exports.ES_CROWFOOT_ZERO_ONE    = ES_CROWFOOT_ZERO_ONE;\r\n    exports.ES_CROWFOOT_ZERO_MANY   = ES_CROWFOOT_ZERO_MANY;\r\n\r\n\r\n    exports.EP_HEAD                 = EP_HEAD;\r\n    exports.EP_MIDDLE               = EP_MIDDLE;\r\n    exports.EP_TAIL                 = EP_TAIL;\r\n\r\n    exports.DK_HORZ                 = DK_HORZ;\r\n    exports.DK_VERT                 = DK_VERT;\r\n\r\n    exports.DIRECTION_TB            = DIRECTION_TB;\r\n    exports.DIRECTION_BT            = DIRECTION_BT;\r\n    exports.DIRECTION_LR            = DIRECTION_LR;\r\n    exports.DIRECTION_RL            = DIRECTION_RL;\r\n\r\n    exports.TK_STRING               = TK_STRING;\r\n    exports.TK_REFERENCE            = TK_REFERENCE;\r\n    exports.TK_BOOLEAN              = TK_BOOLEAN;\r\n    exports.TK_NUMBER               = TK_NUMBER;\r\n    exports.TK_HIDDEN               = TK_HIDDEN;\r\n\r\n\r\n    // Public Classes\r\n    exports.Element                 = Element;\r\n    exports.Model                   = Model;\r\n    exports.Tag                     = Tag;\r\n    exports.Hyperlink               = Hyperlink;\r\n    exports.ExtensibleModel         = ExtensibleModel;\r\n    exports.Relationship            = Relationship;\r\n    exports.DirectedRelationship    = DirectedRelationship;\r\n    exports.RelationshipEnd         = RelationshipEnd;\r\n    exports.UndirectedRelationship  = UndirectedRelationship;\r\n    exports.View                    = View;\r\n    exports.NodeView                = NodeView;\r\n    exports.EdgeView                = EdgeView;\r\n    exports.LabelView               = LabelView;\r\n    exports.ParasiticView           = ParasiticView;\r\n    exports.NodeParasiticView       = NodeParasiticView;\r\n    exports.EdgeParasiticView       = EdgeParasiticView;\r\n    exports.NodeLabelView           = NodeLabelView;\r\n    exports.EdgeLabelView           = EdgeLabelView;\r\n    exports.NodeNodeView            = NodeNodeView;\r\n    exports.EdgeNodeView            = EdgeNodeView;\r\n    exports.Diagram                 = Diagram;\r\n    exports.Project                 = Project;\r\n    exports.Reader                  = Reader;\r\n    exports.Writer                  = Writer;\r\n\r\n    // Public Functions\r\n    exports.getSuperType            = getSuperType;\r\n    exports.getCommonType           = getCommonType;\r\n    exports.findByName              = findByName;\r\n    exports.getNewName              = getNewName;\r\n});\r\n\r\n\n//# sourceURL=/core/Core.js'),eval("/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _ */\r\n\r\n/**\r\n *\r\n * This module dispatches these events:\r\n *     - insert:         (elem)\r\n *     - remove:         (elem)\r\n *     - fieldAssign:    (elem, field, val)\r\n *     - fieldInsert:    (elem, field, val)\r\n *     - fieldInsertAt:  (elem, field, val, pos)\r\n *     - fieldRemove:    (elem, field, val)\r\n *     - fieldRemoveAt:  (elem, field, val, pos)\r\n *     - fieldReorder:   (elem, field, val, newPos)\r\n *     - fieldRelocate:  (elem, field, oldParent, newParent)\r\n */\r\ndefine('core/OperationBuilder',['require','exports','module','core/Global','core/IdGenerator','core/Core'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var global      = require(\"core/Global\").global,\r\n        IdGenerator = require(\"core/IdGenerator\"),\r\n        Writer      = require(\"core/Core\").Writer;\r\n\r\n    /**\r\n     * @const {string}\r\n     */\r\n    var OP_INSERT            = 'I',\r\n        OP_REMOVE            = 'R',\r\n        OP_FIELD_ASSIGN      = 'a',\r\n        OP_FIELD_INSERT      = 'i',\r\n        OP_FIELD_REMOVE      = 'r',\r\n        OP_FIELD_REORDER     = 'o',\r\n        OP_FIELD_RELOCATE    = 'l';\r\n\r\n    /**\r\n     * Current Operation\r\n     *\r\n     * @private\r\n     * @type {Object}\r\n     */\r\n    var _currentOperation = null;\r\n\r\n    /**\r\n     * Keep an array of array field of a particular element.\r\n     *\r\n     * @private\r\n     * @type {Object.<string,Array>}\r\n     */\r\n    var _currentArray = {};\r\n\r\n    /**\r\n     * Return timestamp\r\n     */\r\n    function getTimestamp() {\r\n        return (new Date()).getTime();\r\n    }\r\n\r\n    /**\r\n     * Make and return a base operation object.\r\n     *\r\n     * @private\r\n     * @param {string} name Operation name\r\n     * @return {Object} Base operation object\r\n     */\r\n    function _getBase(name) {\r\n        var operation = {\r\n            id: IdGenerator.generateGuid(),\r\n            time: getTimestamp(),\r\n            name: name,\r\n            bypass: false,\r\n            ops: []\r\n        };\r\n        return operation;\r\n    }\r\n\r\n    /**\r\n     * Return a copied array of array field of a particular element.\r\n     * It could be changed by `fieldInsert`, `fieldRemove`.\r\n     * The reason why using this is index value maybe incorrect when performing `fieldInsert` multiple times.\r\n     *\r\n     * @private\r\n     * @param {Element} elem An element\r\n     * @param {string} field Array field name\r\n     * @return {number}\r\n     */\r\n    function _getArray(elem, field) {\r\n        var f = elem._id + \".\" + field;\r\n        if (!_currentArray[f]) {\r\n            _currentArray[f] = _.clone(elem[field]);\r\n        }\r\n        return _currentArray[f];\r\n    }\r\n\r\n    /**\r\n     * Begin to make an operation.\r\n     *\r\n     * @param {string} opName Operation name\r\n     */\r\n    function begin(name, bypass) {\r\n        _currentOperation = _getBase(name);\r\n        if (bypass === true) {\r\n            _currentOperation.bypass = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finish to make an operation.\r\n     */\r\n    function end() {\r\n        _currentArray = {};\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Discard currently making operation.\r\n     */\r\n    function discard() {\r\n        _currentOperation = null;\r\n        _currentArray = {};\r\n    }\r\n\r\n    /**\r\n     * Return currently made operation.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function getOperation() {\r\n        return _currentOperation;\r\n    }\r\n\r\n    /**\r\n     * Insert an element.\r\n     *\r\n     * @param {Element} elem\r\n     */\r\n    function insert(elem) {\r\n        try {\r\n            $(exports).triggerHandler('insert', [elem]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        var writer = new Writer();\r\n        elem.save(writer);\r\n        _currentOperation.ops.push({op: OP_INSERT, arg: writer.current});\r\n    }\r\n\r\n    /**\r\n     * Remove an element.\r\n     *\r\n     * @param {Element} elem\r\n     */\r\n    function remove(elem) {\r\n        try {\r\n            $(exports).triggerHandler('remove', [elem]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        var writer = new Writer();\r\n        elem.save(writer);\r\n        _currentOperation.ops.push({op: OP_REMOVE, arg: writer.current});\r\n    }\r\n\r\n    /**\r\n     * Assign value to field.\r\n     *\r\n     * @param {Element} elem\r\n     * @param {string} field\r\n     * @param {?} val\r\n     */\r\n    function fieldAssign(elem, field, val) {\r\n        try {\r\n            $(exports).triggerHandler('fieldAssign', [elem, field, val]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        var isCustomField = (elem[field] && elem[field].__read);\r\n        var oldVal;\r\n        if (isCustomField) {\r\n            oldVal = elem[field].__write();\r\n        } else {\r\n            oldVal = elem[field];\r\n        }\r\n        _currentOperation.ops.push({\r\n            op: OP_FIELD_ASSIGN,\r\n            arg: {\r\n                _id: elem._id,\r\n                f: field,\r\n                n: val,\r\n                o: oldVal\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert an element to array field.\r\n     *\r\n     * @param {Element} elem\r\n     * @param {string} field\r\n     * @param {?} val\r\n     */\r\n    function fieldInsert(elem, field, val) {\r\n        try {\r\n            $(exports).triggerHandler('fieldInsert', [elem, field, val]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        var array = _getArray(elem, field);\r\n        array.push(val);\r\n        _currentOperation.ops.push({\r\n            op: OP_FIELD_INSERT,\r\n            arg: {\r\n                _id: elem._id,\r\n                f: field,\r\n                e: val._id,\r\n                i: array.indexOf(val)\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a value to array field at a specific position (index).\r\n     *\r\n     * @param {Element} elem\r\n     * @param {string} field\r\n     * @param {?} val\r\n     * @param {number} pos\r\n     */\r\n    function fieldInsertAt(elem, field, val, pos) {\r\n        try {\r\n            $(exports).triggerHandler('fieldInsertAt', [elem, field, val, pos]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        _currentOperation.ops.push({\r\n            op: OP_FIELD_INSERT,\r\n            arg: {\r\n                _id: elem._id,\r\n                f: field,\r\n                e: val._id,\r\n                i: pos\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove a value from array field.\r\n     *\r\n     * @param {Element} elem\r\n     * @param {string} field\r\n     * @param {?} val\r\n     */\r\n    function fieldRemove(elem, field, val) {\r\n        try {\r\n            $(exports).triggerHandler('fieldRemove', [elem, field, val]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        var array = _getArray(elem, field);\r\n        _currentOperation.ops.push({\r\n            op: OP_FIELD_REMOVE,\r\n            arg: {\r\n                _id: elem._id,\r\n                f: field,\r\n                e: val._id,\r\n                i: array.indexOf(val)\r\n            }\r\n        });\r\n        array.remove(val);\r\n    }\r\n\r\n    /**\r\n     * Remove a value from array field at a specific position.\r\n     *\r\n     * @param {Element} elem\r\n     * @param {string} field\r\n     * @param {?} value\r\n     * @param {number} pos\r\n     */\r\n    function fieldRemoveAt(elem, field, val, pos) {\r\n        try {\r\n            $(exports).triggerHandler('fieldRemoveAt', [elem, field, val, pos]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        _currentOperation.ops.push({\r\n            op: OP_FIELD_REMOVE,\r\n            arg: {\r\n                _id: elem._id,\r\n                f: field,\r\n                e: val._id,\r\n                i: pos\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Change order of a value in array field.\r\n     *\r\n     * @param {Element} elem\r\n     * @param {string} field\r\n     * @param {?} val\r\n     * @param {number} pos Position to be placed\r\n     */\r\n    function fieldReorder(elem, field, val, pos) {\r\n        try {\r\n            $(exports).triggerHandler('fieldReorder', [elem, field, val, pos]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        _currentOperation.ops.push({\r\n            op: OP_FIELD_REORDER,\r\n            arg: {\r\n                _id: elem._id,\r\n                f: field,\r\n                e: val._id,\r\n                i: pos\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Relocate an element to another parent.\r\n     *\r\n     * @param {Element} elem Element to be relocated\r\n     * @param {string} field Field name of parent\r\n     * @param {number} oldParent Current parent\r\n     * @param {number} newParent New parent to be located in\r\n     */\r\n    function fieldRelocate(elem, field, oldParent, newParent) {\r\n        try {\r\n            $(exports).triggerHandler('fieldRelocate', [elem, field, oldParent, newParent]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        _currentOperation.ops.push({\r\n            op: OP_FIELD_RELOCATE,\r\n            arg: {\r\n                _id: elem._id,\r\n                f: field,\r\n                op: oldParent._id,\r\n                np: newParent._id\r\n            }\r\n        });\r\n    }\r\n\r\n    // constants\r\n    exports.OP_INSERT            = OP_INSERT;\r\n    exports.OP_REMOVE            = OP_REMOVE;\r\n    exports.OP_FIELD_ASSIGN      = OP_FIELD_ASSIGN;\r\n    exports.OP_FIELD_INSERT      = OP_FIELD_INSERT;\r\n    exports.OP_FIELD_REMOVE      = OP_FIELD_REMOVE;\r\n    exports.OP_FIELD_REORDER     = OP_FIELD_REORDER;\r\n    exports.OP_FIELD_RELOCATE    = OP_FIELD_RELOCATE;\r\n\r\n    // Define public API\r\n    exports.begin           = begin;\r\n    exports.end             = end;\r\n    exports.discard         = discard;\r\n    exports.getOperation    = getOperation;\r\n    exports.insert          = insert;\r\n    exports.remove          = remove;\r\n    exports.fieldAssign     = fieldAssign;\r\n    exports.fieldInsert     = fieldInsert;\r\n    exports.fieldInsertAt   = fieldInsertAt;\r\n    exports.fieldRemove     = fieldRemove;\r\n    exports.fieldRemoveAt   = fieldRemoveAt;\r\n    exports.fieldReorder    = fieldReorder;\r\n    exports.fieldRelocate   = fieldRelocate;\r\n\r\n});\r\n\r\n\n//# sourceURL=/core/OperationBuilder.js"),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, loopfunc: true */\r\n/*global define, $, _, type*/\r\n\r\n/**\r\n * Repository maintains a set of elements.\r\n *\r\n * Reponsibilities:\r\n * - Applies operations. (Undo/Redo)\r\n * - Query for retrieve elements.\r\n *\r\n * This module dispatches these events:\r\n * - created:                (elems)\r\n * - updated:                (elems)\r\n * - deleted:                (elems)\r\n * - reordered:              (elem)\r\n * - relocated:              (elem, field, oldParent, newParent)\r\n * - beforeExecuteOperation: (operation)\r\n * - operationExecuted:      (operation) - after doOperation, undo, redo\r\n * - beforeUndo:             (operation)\r\n * - beforeRedo:             (operation)\r\n */\r\ndefine(\'core/Repository\',[\'require\',\'exports\',\'module\',\'core/Global\',\'core/IdGenerator\',\'core/Core\',\'core/OperationBuilder\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var _global          = require("core/Global").global,\r\n        IdGenerator      = require("core/IdGenerator"),\r\n        Core             = require("core/Core"),\r\n        OperationBuilder = require("core/OperationBuilder");\r\n\r\n    /**\r\n     * Size-limited Stack\r\n     * @private\r\n     * @constructor\r\n     */\r\n    function Stack(maxSize) {\r\n        this.maxSize = maxSize;\r\n        this.stack = [];\r\n    }\r\n\r\n    /**\r\n     * Clear stack.\r\n     */\r\n    Stack.prototype.clear = function () {\r\n        this.stack = [];\r\n    };\r\n\r\n    /**\r\n     * Push an item\r\n     * @param {?} item Item to be stacked.\r\n     */\r\n    Stack.prototype.push = function (item) {\r\n        this.stack.push(item);\r\n        if (this.stack.length > this.maxSize) {\r\n            this.stack.splice(0, 1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Pop an item from the top\r\n     * @return {?} Item on the top.\r\n     */\r\n    Stack.prototype.pop = function () {\r\n        return this.stack.pop();\r\n    };\r\n\r\n    /**\r\n     * Return size of stack\r\n     * @return {number} Size of stack.\r\n     */\r\n    Stack.prototype.size = function () {\r\n        return this.stack.length;\r\n    };\r\n\r\n\r\n    /**\r\n     * Maximum size of undo/redo stack\r\n     * @const\r\n     */\r\n    var MAX_STACK_SIZE = 100;\r\n\r\n    /**\r\n     * Map for id to Element.\r\n     * @private\r\n     * @type {Object.<string,Element>}\r\n     */\r\n    var _idMap = {};\r\n\r\n    /**\r\n     * Inverted index for referencing: {id, {id, refCount}}.\r\n     * @private\r\n     * @type {Object.<string,Object.<string,number>>}\r\n     */\r\n    var _refMap = {};\r\n\r\n    /**\r\n     * Indicate model is modified or not.\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    var _modified = false;\r\n\r\n    /**\r\n     * Undo stack.\r\n     * @private\r\n     * @type {Stack}\r\n     */\r\n    var _undoStack = new Stack(MAX_STACK_SIZE);\r\n\r\n    /**\r\n     * Redo stack.\r\n     * @private\r\n     * @type {Stack}\r\n     */\r\n    var _redoStack = new Stack(MAX_STACK_SIZE);\r\n\r\n    /**\r\n     * Add a reference to the inverted index. (increase refCount by one)\r\n     *\r\n     * @private\r\n     * @param {Core.Element} refer Referencing element.\r\n     * @param {Core.Element} refee Referenced element.\r\n     */\r\n    function _addRef(refer, refee) {\r\n        var item = _refMap[refee._id];\r\n        if (!item) {\r\n            item = {};\r\n            _refMap[refee._id] = item;\r\n        }\r\n        var count = item[refer._id];\r\n        if (count) {\r\n            item[refer._id] = count + 1;\r\n        } else {\r\n            item[refer._id] = 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a reference from the inverted index. (Decrease refCount by one. Remove the entry if refCount reached zero)\r\n     *\r\n     * @private\r\n     * @param {Core.Element} refer Referencing element.\r\n     * @param {Core.Element} refee Referenced element.\r\n     */\r\n    function _removeRef(refer, refee) {\r\n        var item = _refMap[refee._id];\r\n        if (item) {\r\n            var count = item[refer._id];\r\n            if (count && (count > 0)) {\r\n                item[refer._id] = count - 1;\r\n            } else {\r\n                item[refer._id] = 0;\r\n            }\r\n            if (item[refer._id] === 0) {\r\n                delete item[refer._id];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 요소의 모든 참조 필드들을 레퍼런스 인덱스에 추가\r\n     *\r\n     * @private\r\n     * @param {Core.Element} elem\r\n     */\r\n    function _addRefsOf(elem) {\r\n        _.forEach(elem.getMetaAttributes(), function (attr) {\r\n            var i;\r\n            switch (attr.kind) {\r\n            case Core.ATTR_KIND_OBJ:\r\n            case Core.ATTR_KIND_REF:\r\n                var ref = elem[attr.name];\r\n                if (ref && _idMap[ref._id]) {\r\n                    _addRef(elem, ref);\r\n                }\r\n                break;\r\n            case Core.ATTR_KIND_OBJS:\r\n            case Core.ATTR_KIND_REFS:\r\n                var refs = elem[attr.name];\r\n                if (refs && refs.length > 0) {\r\n                    for (i = 0; i < refs.length; i++) {\r\n                        if (refs[i] && refs[i]._id && _idMap[refs[i]._id]) {\r\n                            _addRef(elem, refs[i]);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 요소의 모든 참조 필드들을 레퍼런스 인덱스에서 제거 (요소가 제거될 것이므로 본 요소가 가지는 모든 참조는 제거됨)\r\n     *\r\n     * @private\r\n     * @param {Core.Element} elem\r\n     */\r\n    function _removeRefsOf(elem) {\r\n        _.forEach(elem.getMetaAttributes(), function (attr) {\r\n            var i;\r\n            switch (attr.kind) {\r\n            case Core.ATTR_KIND_OBJ:\r\n            case Core.ATTR_KIND_REF:\r\n                var ref = elem[attr.name];\r\n                if (ref && _idMap[ref._id]) {\r\n                    _removeRef(elem, ref);\r\n                }\r\n                break;\r\n            case Core.ATTR_KIND_OBJS:\r\n            case Core.ATTR_KIND_REFS:\r\n                var refs = elem[attr.name];\r\n                if (refs && refs.length > 0) {\r\n                    for (i = 0; i < refs.length; i++) {\r\n                        if (refs[i]._id && _idMap[refs[i]._id]) {\r\n                            _removeRef(elem, refs[i]);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        });\r\n        // 인덱스에서 항목을 제거.\r\n        delete _refMap[elem._id];\r\n    }\r\n\r\n    /**\r\n     * Operation 수행하기.\r\n     *\r\n     * @private\r\n     * @param {Operation} operation\r\n     */\r\n    function _applyOperation(operation) {\r\n        var i,\r\n            j,\r\n            len,\r\n            op,\r\n            id,\r\n            name,\r\n            elem,\r\n            obj,\r\n            reader,\r\n            val;\r\n        var createdElems = [],\r\n            deletedElems = [],\r\n            updatedElems = [];\r\n        // 1) 요소들의 생성 및 인덱스 등록\r\n        for (i = 0, len = operation.ops.length; i < len; i++) {\r\n            op = operation.ops[i];\r\n            switch (op.op) {\r\n            case OperationBuilder.OP_INSERT:\r\n                reader = new Core.Reader({ data: op.arg }, _global.type);\r\n                elem = reader.readObj("data");\r\n                op._elem = elem;\r\n                op._idMap = reader.idMap;\r\n                // 인덱스에 등록하기\r\n                for (id in reader.idMap) {\r\n                    if (reader.idMap.hasOwnProperty(id)) {\r\n                        obj = reader.idMap[id];\r\n                        _idMap[obj._id] = obj;\r\n                    }\r\n                }\r\n                break;\r\n            case OperationBuilder.OP_REMOVE:\r\n                reader = new Core.Reader({ data: op.arg }, _global.type);\r\n                elem = reader.readObj("data");\r\n                op._elem = elem;\r\n                op._idMap = reader.idMap;\r\n                // 레퍼런스 인덱스에서 제거하기\r\n                for (id in op._idMap) {\r\n                    if (op._idMap.hasOwnProperty(id)) {\r\n                        if (!_.isUndefined(_idMap[id])) {\r\n                            _removeRefsOf(_idMap[id]);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // 2) 요소들의 필드값 적용\r\n        for (i = 0, len = operation.ops.length; i < len; i++) {\r\n            op = operation.ops[i];\r\n            switch (op.op) {\r\n            case OperationBuilder.OP_INSERT:\r\n                elem = op._elem;\r\n                // 레퍼런스 값들을 복원하기.\r\n                for (id in op._idMap) {\r\n                    if (op._idMap.hasOwnProperty(id)) {\r\n                        obj = op._idMap[id];\r\n                        for (name in obj) {\r\n                            if (obj.hasOwnProperty(name)) {\r\n                                val = obj[name];\r\n                                // if val is a reference\r\n                                if (val && val.$ref) {\r\n                                    obj[name] = _idMap[val.$ref];\r\n                                // if val is an array reference\r\n                                } else if (_.isArray(val)) {\r\n                                    for (j = 0; j < val.length; j++) {\r\n                                        if (val[j] && val[j].$ref) {\r\n                                            val[j] = _idMap[val[j].$ref];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        // obj의 참조들을 레퍼런스 인덱스에 추가하기\r\n                        _addRefsOf(obj);\r\n                    }\r\n                }\r\n                createdElems.push(elem);\r\n                break;\r\n            case OperationBuilder.OP_REMOVE:\r\n                elem = op._elem;\r\n                // 인덱스에서 제거하기\r\n                for (id in op._idMap) {\r\n                    if (op._idMap.hasOwnProperty(id)) {\r\n                        delete _idMap[id];\r\n                        delete _refMap[id];\r\n                    }\r\n                }\r\n                deletedElems.push(elem);\r\n                break;\r\n            case OperationBuilder.OP_FIELD_ASSIGN:\r\n                elem = _idMap[op.arg._id];\r\n                if (elem[op.arg.f] && elem[op.arg.f].__read) {\r\n                    elem[op.arg.f].__read(op.arg.n);\r\n                } else {\r\n                    if (op.arg.n && op.arg.n._id) {\r\n                        elem[op.arg.f] = _idMap[op.arg.n._id];\r\n                    } else {\r\n                        elem[op.arg.f] = op.arg.n;\r\n                    }\r\n                    // oldVal를 레퍼런스 인덱스에서 제거\r\n                    if (op.arg.o && op.arg.o._id) {\r\n                        _removeRef(elem, op.arg.o);\r\n                    }\r\n                    // newVal를 레퍼런스 인덱스에 추가\r\n                    if (op.arg.n && op.arg.n._id) {\r\n                        _addRef(elem, op.arg.n);\r\n                    }\r\n                }\r\n                updatedElems.push(elem);\r\n                break;\r\n            case OperationBuilder.OP_FIELD_INSERT:\r\n                elem = _idMap[op.arg._id];\r\n                val = _idMap[op.arg.e];\r\n                if (elem && val) {\r\n                    elem[op.arg.f].insert(op.arg.i, val);\r\n                    // val을 레퍼런스 인덱스에 추가\r\n                    if (val._id) {\r\n                        _addRef(elem, val);\r\n                    }\r\n                }\r\n                updatedElems.push(elem);\r\n                break;\r\n            case OperationBuilder.OP_FIELD_REMOVE:\r\n                elem = _idMap[op.arg._id];\r\n                val = _idMap[op.arg.e];\r\n                if (elem && val) {\r\n                    // 레퍼런스 인덱스에서 제거\r\n                    if (val._id) {\r\n                        _removeRef(elem, val);\r\n                    }\r\n                    elem[op.arg.f].remove(val);\r\n                }\r\n                updatedElems.push(elem);\r\n                break;\r\n            case OperationBuilder.OP_FIELD_REORDER:\r\n                elem = _idMap[op.arg._id];\r\n                val = _idMap[op.arg.e];\r\n                // Store old index of val in the array field of element.\r\n                op.arg.oi = _.indexOf(elem[op.arg.f], val);\r\n                if (elem && val) {\r\n                    elem[op.arg.f].remove(val);\r\n                    elem[op.arg.f].insert(op.arg.i, val);\r\n                }\r\n                // updatedElems.push(elem);\r\n                try {\r\n                    $(exports).triggerHandler(\'reordered\', [val]);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n                break;\r\n            case OperationBuilder.OP_FIELD_RELOCATE:\r\n                elem = _idMap[op.arg._id];\r\n                var oldParent  = _idMap[op.arg.op];\r\n                var newParent  = _idMap[op.arg.np];\r\n                if (elem && oldParent && newParent) {\r\n                    oldParent[op.arg.f].remove(elem);\r\n                    newParent[op.arg.f].push(elem);\r\n                    elem._parent = newParent;\r\n                    _removeRef(oldParent, elem);\r\n                    _addRef(newParent, elem);\r\n                }\r\n                try {\r\n                    $(exports).triggerHandler(\'relocated\', [elem, op.arg.f, oldParent, newParent]);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // Bypass Operation가 아니면 이벤트를 발생한다.\r\n        if (operation.bypass !== true) {\r\n            if (createdElems.length > 0) {\r\n                try {\r\n                    $(exports).triggerHandler(\'created\', [createdElems]);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            }\r\n            if (deletedElems.length > 0) {\r\n                try {\r\n                    $(exports).triggerHandler(\'deleted\', [deletedElems]);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            }\r\n            if (updatedElems.length > 0) {\r\n                try {\r\n                    $(exports).triggerHandler(\'updated\', [updatedElems]);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            }\r\n            setModified(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Operation 되돌리기.\r\n     *\r\n     * @private\r\n     * @param {Operation} operation\r\n     */\r\n    function _revertOperation(operation) {\r\n        var i,\r\n            j,\r\n            id,\r\n            name,\r\n            op,\r\n            obj,\r\n            elem,\r\n            reader,\r\n            val;\r\n        var createdElems = [],\r\n            deletedElems = [],\r\n            updatedElems = [];\r\n        // 1) 요소들의 복구 및 인덱스 등록\r\n        for (i = operation.ops.length - 1; i >= 0; i--) {\r\n            op = operation.ops[i];\r\n            switch (op.op) {\r\n            case OperationBuilder.OP_INSERT:\r\n                reader = new Core.Reader({ data: op.arg }, _global.type);\r\n                elem = reader.readObj("data");\r\n                op._elem = elem;\r\n                op._idMap = reader.idMap;\r\n                // 레퍼런스 인덱스에서 제거하기\r\n                for (id in op._idMap) {\r\n                    if (op._idMap.hasOwnProperty(id)) {\r\n                        _removeRefsOf(_idMap[id]);\r\n                    }\r\n                }\r\n                break;\r\n            case OperationBuilder.OP_REMOVE:\r\n                reader = new Core.Reader({ data: op.arg }, _global.type);\r\n                elem = reader.readObj("data");\r\n                op._elem = elem;\r\n                op._idMap = reader.idMap;\r\n                // 인덱스에 등록하기\r\n                for (id in reader.idMap) {\r\n                    if (reader.idMap.hasOwnProperty(id)) {\r\n                        obj = reader.idMap[id];\r\n                        _idMap[obj._id] = obj;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // 2) 요소들의 필드값 복구\r\n        for (i = operation.ops.length - 1; i >= 0; i--) {\r\n            op = operation.ops[i];\r\n            switch (op.op) {\r\n            case OperationBuilder.OP_INSERT:\r\n                elem = op._elem;\r\n                // 인덱스에서 제거하기\r\n                for (id in op._idMap) {\r\n                    if (op._idMap.hasOwnProperty(id)) {\r\n                        delete _idMap[id];\r\n                        delete _refMap[id];\r\n                    }\r\n                }\r\n                deletedElems.push(elem);\r\n                break;\r\n            case OperationBuilder.OP_REMOVE:\r\n                elem = op._elem;\r\n                // 레퍼런스 값들을 복원하기.\r\n                for (id in op._idMap) {\r\n                    if (op._idMap.hasOwnProperty(id)) {\r\n                        obj = op._idMap[id];\r\n                        for (name in obj) {\r\n                            if (obj.hasOwnProperty(name)) {\r\n                                val = obj[name];\r\n                                // if val is a reference\r\n                                if (val && val.$ref) {\r\n                                    obj[name] = _idMap[val.$ref];\r\n                                // if val is an array reference\r\n                                } else if (_.isArray(val)) {\r\n                                    for (j = 0; j < val.length; j++) {\r\n                                        if (val[j] && val[j].$ref) {\r\n                                            val[j] = _idMap[val[j].$ref];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        // obj의 참조들을 레퍼런스 인덱스에 추가하기\r\n                        _addRefsOf(obj);\r\n                    }\r\n                }\r\n                createdElems.push(elem);\r\n                break;\r\n            case OperationBuilder.OP_FIELD_ASSIGN:\r\n                elem = _idMap[op.arg._id];\r\n                if (elem[op.arg.f] && elem[op.arg.f].__read) {\r\n                    elem[op.arg.f].__read(op.arg.o);\r\n                } else {\r\n                    if (op.arg.o && op.arg.o._id) {\r\n                        elem[op.arg.f] = _idMap[op.arg.o._id];\r\n                    } else {\r\n                        elem[op.arg.f] = op.arg.o;\r\n                    }\r\n                    // oldVal를 레퍼런스 인덱스에 추가\r\n                    if (op.arg.o && op.arg.o._id) {\r\n                        _addRef(elem, op.arg.o);\r\n                    }\r\n                    // newVal를 레퍼런스 인덱스에서 제거\r\n                    if (op.arg.n && op.arg.n._id) {\r\n                        _removeRef(elem, op.arg.n);\r\n                    }\r\n                }\r\n                updatedElems.push(elem);\r\n                break;\r\n            case OperationBuilder.OP_FIELD_INSERT:\r\n                elem = _idMap[op.arg._id];\r\n                val = _idMap[op.arg.e];\r\n                if (elem && val) {\r\n                    elem[op.arg.f].remove(val);\r\n                    // val 레퍼런스 인덱스에서 제거\r\n                    if (val._id) {\r\n                        _removeRef(elem, val);\r\n                    }\r\n                }\r\n                updatedElems.push(elem);\r\n                break;\r\n            case OperationBuilder.OP_FIELD_REMOVE:\r\n                elem = _idMap[op.arg._id];\r\n                val = _idMap[op.arg.e];\r\n                if (elem && val) {\r\n                    elem[op.arg.f].insert(op.arg.i, val);\r\n                    // val을 레퍼런스 인덱스에 추가\r\n                    if (val._id) {\r\n                        _addRef(elem, val);\r\n                    }\r\n                }\r\n                updatedElems.push(elem);\r\n                break;\r\n            case OperationBuilder.OP_FIELD_REORDER:\r\n                elem = _idMap[op.arg._id];\r\n                val = _idMap[op.arg.e];\r\n                if (elem && val) {\r\n                    elem[op.arg.f].remove(val);\r\n                    elem[op.arg.f].insert(op.arg.oi, val);\r\n                }\r\n                // updatedElems.push(elem);\r\n                try {\r\n                    $(exports).triggerHandler(\'reordered\', [elem]);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n                break;\r\n            case OperationBuilder.OP_FIELD_RELOCATE:\r\n                elem = _idMap[op.arg._id];\r\n                var oldParent  = _idMap[op.arg.op];\r\n                var newParent  = _idMap[op.arg.np];\r\n                if (elem && oldParent && newParent) {\r\n                    newParent[op.arg.f].remove(elem);\r\n                    oldParent[op.arg.f].push(elem);\r\n                    elem._parent = oldParent;\r\n                    _removeRef(newParent, elem);\r\n                    _addRef(oldParent, elem);\r\n                }\r\n                try {\r\n                    $(exports).triggerHandler(\'relocated\', [elem, op.arg.f, newParent, oldParent]);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (createdElems.length > 0) {\r\n            try {\r\n                $(exports).triggerHandler(\'created\', [createdElems]);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        if (deletedElems.length > 0) {\r\n            try {\r\n                $(exports).triggerHandler(\'deleted\', [deletedElems]);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        if (updatedElems.length > 0) {\r\n            try {\r\n                $(exports).triggerHandler(\'updated\', [updatedElems]);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        setModified(true);\r\n    }\r\n\r\n    /**\r\n     * Encode a given element to JSON data.\r\n     * @private\r\n     * @param {Core.Element} elem Element to be encoded\r\n     * @return {string} JSON-encoded data.\r\n     */\r\n    function writeObject(elem) {\r\n        var writer = new Core.Writer();\r\n        elem.save(writer);\r\n        var data = JSON.stringify(writer.current, null, "\\t");\r\n        return data;\r\n    }\r\n\r\n\r\n    /**\r\n     * Read object from JSON data\r\n     * @private\r\n     * @param {string|Object} data - Object or JSON-string\r\n     * @param {?boolean} replaceIds\r\n     * @return {Core.Element}\r\n     */\r\n    function readObject(data, replaceIds) {\r\n        var element = null,\r\n            id,\r\n            name,\r\n            obj,\r\n            val,\r\n            _replaceIdMap;\r\n\r\n        function _replaceRef(item) {\r\n            var newId = _replaceIdMap[item.$ref];\r\n            if (newId) {\r\n                item.$ref = newId;\r\n            }\r\n        }\r\n\r\n        function _resolveRef(item) {\r\n            return _idMap[item.$ref];\r\n        }\r\n\r\n        if (data) {\r\n            if (_.isString(data)) {\r\n                data = JSON.parse(data);\r\n            }\r\n            var reader = new Core.Reader({data: data}, _global.type);\r\n            element = reader.readObj("data");\r\n\r\n            // Replace all ids\r\n            if (replaceIds) {\r\n\r\n                // Map.<oldId, newId>\r\n                _replaceIdMap = {};\r\n\r\n                // Assign new ids\r\n                for (id in reader.idMap) {\r\n                    if (reader.idMap.hasOwnProperty(id)) {\r\n                        var newId = IdGenerator.generateGuid();\r\n                        obj = reader.idMap[id];\r\n                        _replaceIdMap[obj._id] = newId;\r\n                        delete reader.idMap[obj._id];\r\n                        obj._id = newId;\r\n                        reader.idMap[newId] = obj;\r\n                    }\r\n                }\r\n\r\n                // Fix all refs to refer to new ids\r\n                for (id in reader.idMap) {\r\n                    if (reader.idMap.hasOwnProperty(id)) {\r\n                        obj = reader.idMap[id];\r\n                        for (name in obj) {\r\n                            if (obj.hasOwnProperty(name)) {\r\n                                val = obj[name];\r\n                                // when val is reference\r\n                                if (val && val.$ref) {\r\n                                    _replaceRef(val);\r\n                                // when val is non-empty array of reference\r\n                                } else if (_.isArray(val) && val.length > 0 && val[0].$ref) {\r\n                                    _.each(val, _replaceRef);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Resolve all references\r\n            _.extend(_idMap, reader.idMap);\r\n            for (id in reader.idMap) {\r\n                if (reader.idMap.hasOwnProperty(id)) {\r\n                    obj = _idMap[id];\r\n                    for (name in obj) {\r\n                        if (obj.hasOwnProperty(name)) {\r\n                            val = obj[name];\r\n                            // when val is reference\r\n                            if (val && val.$ref) {\r\n                                obj[name] = _idMap[val.$ref];\r\n                            // when val is non-empty array of reference\r\n                            } else if (_.isArray(val) && val.length > 0 && val[0].$ref) {\r\n                                var resolvedRefs = _.map(val, _resolveRef);\r\n                                obj[name] = resolvedRefs;\r\n                            }\r\n                        }\r\n                    }\r\n                    _addRefsOf(obj);\r\n                }\r\n            }\r\n\r\n            // Fix problems in the file\r\n            // TODO: Remove this enough time after\r\n            for (id in reader.idMap) {\r\n                if (reader.idMap.hasOwnProperty(id)) {\r\n                    obj = _idMap[id];\r\n\r\n                    // Fix _parent of Image owned by Stereotype\r\n                    if (obj instanceof type.UMLStereotype && obj.icon instanceof type.UMLImage) {\r\n                        obj.icon._parent = obj;\r\n                    }\r\n\r\n                    // Fix: remove disconnected UndirectedRelationships\r\n                    if (obj instanceof type.UndirectedRelationship) {\r\n                        if (!(obj.end1 instanceof type.RelationshipEnd &&\r\n                              obj.end1.reference instanceof type.Model &&\r\n                              obj.end2 instanceof type.RelationshipEnd &&\r\n                              obj.end2.reference instanceof type.Model)) {\r\n                            if (obj._parent && obj.getParentField()) {\r\n                                obj._parent[obj.getParentField()].remove(obj);\r\n                                obj._parent = null;\r\n                                obj.end1.reference = null;\r\n                                obj.end2.reference = null;\r\n                                delete reader.idMap[obj._id];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Fix: remove disconnected DirectedRelationships\r\n                    if (obj instanceof type.DirectedRelationship) {\r\n                        if (!(obj.source instanceof type.Model &&\r\n                              obj.target instanceof type.Model)) {\r\n                            if (obj._parent && obj.getParentField()) {\r\n                                obj._parent[obj.getParentField()].remove(obj);\r\n                                obj._parent = null;\r\n                                obj.source = null;\r\n                                obj.target = null;\r\n                                delete reader.idMap[obj._id];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Fix: Clear too large distance values\r\n                    if (obj instanceof type.ParasiticView) {\r\n                        if (obj.distance > 5000) {\r\n                            obj.distance = 10;\r\n                        }\r\n                    }\r\n\r\n                    // Fix: problems in diagram\r\n                    if (obj instanceof type.Diagram) {\r\n                        var diagram = obj;\r\n\r\n                        // 1) Communication Diagram에서 hostEdge가 null인 UMLCommMessageView를 모두 지움.\r\n                        if (diagram instanceof type.UMLCommunicationDiagram) {\r\n                            _.each(diagram.ownedViews, function (v) {\r\n                                if (v instanceof type.UMLCommMessageView && v.hostEdge === null) {\r\n                                    diagram.removeOwnedView(v);\r\n                                    delete reader.idMap[v._id];\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        for (var vi = 0, vlen = diagram.ownedViews.length; vi < vlen; vi++) {\r\n                            var v = diagram.ownedViews[vi];\r\n\r\n                            if (!v) { continue; }\r\n\r\n                            // 1) model이 없는 UMLGeneralNodeView, UMLGeneralEdgeView를 모두 삭제.\r\n                            if (!v.model && v instanceof type.UMLGeneralNodeView) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (!v.model && v instanceof type.UMLGeneralEdgeView) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n\r\n                            // 2) _parent가 없는 View들 모두 삭제\r\n                            if (!v._parent) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n\r\n                            // 3) head or tail이 없는 EdgeView는 삭제\r\n                            if (v instanceof type.EdgeView) {\r\n                                if (!v.head || !v.tail) {\r\n                                    diagram.removeOwnedView(v);\r\n                                    delete reader.idMap[v._id];\r\n                                }\r\n                            }\r\n\r\n                            // 4) end1.reference or end2.reference가 없는 UndirectedRelationship을 모두 삭제.\r\n                            if (v.model instanceof type.UndirectedRelationship) {\r\n                                if (!v.model.end1.reference || !v.model.end2.reference) {\r\n                                    var pf1 = v.model.getParentField();\r\n                                    if (v.model._parent && pf1) {\r\n                                        v.model._parent[pf1].remove(v.model);\r\n                                    }\r\n                                    diagram.removeOwnedView(v);\r\n                                    delete reader.idMap[v._id];\r\n                                }\r\n                            }\r\n\r\n                            // 5) source or target이 없는 DirectedRelationship을 모두 삭제.\r\n                            if (v.model instanceof type.DirectedRelationship) {\r\n                                if (!v.model.source || !v.model.target) {\r\n                                    var pf2 = v.model.getParentField();\r\n                                    if (v.model._parent && pf2) {\r\n                                        v.model._parent[pf2].remove(v.model);\r\n                                    }\r\n                                    diagram.removeOwnedView(v);\r\n                                    delete reader.idMap[v._id];\r\n                                }\r\n                            }\r\n\r\n                            // 5) nameLabel, stereotypeLabel, propertyLabel, RoleNameLabel, MultiplicityLabel, PropertyLabel, QualifiersCompartment\r\n                            if (v.nameLabel && !reader.idMap[v.nameLabel._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (v.stereotypeLabel && !reader.idMap[v.stereotypeLabel._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (v.propertyLabel && !reader.idMap[v.propertyLabel._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (v.tailRoleNameLabel && !reader.idMap[v.tailRoleNameLabel._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (v.tailPropertyLabel && !reader.idMap[v.tailPropertyLabel._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (v.tailMultiplicityLabel && !reader.idMap[v.tailMultiplicityLabel._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (v.tailQualifiersCompartment && !reader.idMap[v.tailQualifiersCompartment._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (v.headRoleNameLabel && !reader.idMap[v.headRoleNameLabel._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (v.headPropertyLabel && !reader.idMap[v.headPropertyLabel._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (v.headMultiplicityLabel && !reader.idMap[v.headMultiplicityLabel._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n                            if (v.headQualifiersCompartment && !reader.idMap[v.headQualifiersCompartment._id]) {\r\n                                diagram.removeOwnedView(v);\r\n                                delete reader.idMap[v._id];\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        return element;\r\n    }\r\n\r\n\r\n    /**\r\n     * Extract changed elements from a given Operation\r\n     * @param {Operation} operation\r\n     * @return {Array.<Element>}\r\n     */\r\n    function extractChanged(operation) {\r\n        var i, len, op, elem, changed = [];\r\n        if (operation.ops.length > 0) {\r\n            for (i = 0, len = operation.ops.length; i < len; i++) {\r\n                op = operation.ops[i];\r\n                if (op._elem && op._elem._id) {\r\n                    elem = get(op._elem._id);\r\n                    if (elem && !_.contains(changed, elem)) {\r\n                        changed.push(elem);\r\n                    }\r\n                }\r\n                if (op.arg && op.arg._id) {\r\n                    elem = get(op.arg._id);\r\n                    if (elem && !_.contains(changed, elem)) {\r\n                        changed.push(elem);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Do an Operation\r\n     * If operation.bypass == true, the operation will not be pushed to UndoStack.\r\n     * @param {Operation} operation\r\n     */\r\n    function doOperation(operation) {\r\n        if (operation.ops.length > 0) {\r\n            try {\r\n                $(exports).triggerHandler(\'beforeExecuteOperation\', [operation]);\r\n                _applyOperation(operation);\r\n                if (operation.bypass !== true) {\r\n                    _undoStack.push(operation);\r\n                    _redoStack.clear();\r\n                    $(exports).triggerHandler(\'operationExecuted\', [operation]);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Undo\r\n     */\r\n    function undo() {\r\n        if (_undoStack.size() > 0) {\r\n            try {\r\n                var operation = _undoStack.pop();\r\n                $(exports).triggerHandler(\'beforeUndo\', [operation]);\r\n                _revertOperation(operation);\r\n                _redoStack.push(operation);\r\n                $(exports).triggerHandler(\'undo\', [operation]);\r\n                $(exports).triggerHandler(\'operationExecuted\', [operation]);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redo\r\n     */\r\n    function redo() {\r\n        if (_redoStack.size() > 0) {\r\n            try {\r\n                var operation = _redoStack.pop();\r\n                $(exports).triggerHandler(\'beforeRedo\', [operation]);\r\n                _applyOperation(operation);\r\n                _undoStack.push(operation);\r\n                $(exports).triggerHandler(\'redo\', [operation]);\r\n                $(exports).triggerHandler(\'operationExecuted\', [operation]);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all maps and stacks\r\n     */\r\n    function clear() {\r\n        _idMap = {};\r\n        _refMap = {};\r\n        _undoStack.clear();\r\n        _redoStack.clear();\r\n        setModified(false);\r\n    }\r\n\r\n    /**\r\n     * Return whether project is modified or not.\r\n     * @return {boolean}\r\n     */\r\n    function isModified() {\r\n        return _modified;\r\n    }\r\n\r\n    /**\r\n     * Set model as modified. (A event will be triggered if modified state is changed.)\r\n     * @private\r\n     * @param {boolean} modified\r\n     */\r\n    function setModified(modified) {\r\n        _modified = modified;\r\n        if (_modified) {\r\n            try {\r\n                $(exports).triggerHandler(\'modified\');\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return true if the given parameter is an element in this Repository.\r\n     * @param {Element} elem\r\n     * @return {boolean}\r\n     */\r\n    function isElement(elem) {\r\n        return (elem && elem._id && get(elem._id));\r\n    }\r\n\r\n    /**\r\n     * Return an array of elements selected by selector expression.\r\n     * This is a quite heavy operation, so you need to concern about performance.\r\n     *\r\n     * Selector expression\r\n     *     - Children selector\r\n     *       ex) Package1:: -- all children of Package1\r\n     *\r\n     *     - Type selector: "@<type>"\r\n     *       ex) Package1::@UMLClass\r\n     *\r\n     *     - Field selector: ".<field>"\r\n     *       ex) Class1.attributes, Package1.owendElements\r\n     *\r\n     *     - Value selector: "[field=value]"\r\n     *       ex) Class1.operations[isAbstract=false]\r\n     *\r\n     *     - Name selector: "<name>" (equivalent to "[name=<name>]")\r\n     *       ex) Class1, Class1::Attribute1\r\n     *\r\n     * Selector examples:\r\n     *     @UMLClass\r\n     *     Package1::Class1.attributes[type=String]\r\n     *     Package1::Model1::@UMLInterface.operations[isAbstract=false]\r\n     *\r\n     * @param {string} selector\r\n     * @return {Array.<Element>}\r\n     */\r\n    function select(selector) {\r\n        selector = selector || "";\r\n\r\n        // Parse selector into an array of terms\r\n        var interm = selector\r\n            .replace(/::/g, "\\n::\\n")\r\n            .replace(/@/g, "\\n@")\r\n            .replace(/\\./g, "\\n.")\r\n            .replace(/\\[/g, "\\n[");\r\n\r\n        var i, len,\r\n            sliced = interm.split("\\n"),\r\n            terms = [];\r\n\r\n        for (i = 0, len = sliced.length; i < len; i++) {\r\n            var item = sliced[i].trim(), arg;\r\n            // children selector\r\n            if (item === "::") {\r\n                terms.push({ op: "::" });\r\n            // type selector\r\n            } else if (item.charAt(0) === "@") {\r\n                arg = item.substring(1, item.length).trim();\r\n                if (arg.length === 0) {\r\n                    throw "[Selector] Type selector requires type name after \'@\'";\r\n                }\r\n                terms.push({ op: "@", type: arg });\r\n            // field selector\r\n            } else if (item.charAt(0) === ".") {\r\n                arg = item.substring(1, item.length).trim();\r\n                if (arg.length === 0) {\r\n                    throw "[Selector] Field selector requires field name after \'.\'";\r\n                }\r\n                terms.push({ op: ".", field: arg});\r\n            // value selector\r\n            } else if (item.charAt(0) === "[") {\r\n                arg = item.substring(1, item.length - 1);\r\n                var fv = arg.split("="), f = fv[0] || "", v = fv[1] || "";\r\n                if (!(item.charAt(item.length - 1) === "]" && fv.length === 2 && f.trim().length > 0 && v.trim().length > 0)) {\r\n                    throw "[Selector] Value selector should be format of \'[field=value]\'";\r\n                }\r\n                terms.push({ op: "[]", field: f.trim(), value: v.trim()});\r\n            // name selector\r\n            } else if (item.length > 0) {\r\n                terms.push({ op: "name", name: item });\r\n            }\r\n        }\r\n\r\n        // Process terms sequentially\r\n        var current = _.values(_idMap),\r\n            term,\r\n            elems;\r\n        for (i = 0, len = terms.length; i < len; i++) {\r\n            term = terms[i];\r\n            elems = [];\r\n            switch (term.op) {\r\n            case "::":\r\n                current.forEach(function (e) {\r\n                    elems = _.union(elems, e.getChildren());\r\n                });\r\n                current = elems;\r\n                break;\r\n            case "@":\r\n                current.forEach(function (e) {\r\n                    if (type[term.type] && e instanceof type[term.type]) {\r\n                        elems.push(e);\r\n                    }\r\n                });\r\n                current = elems;\r\n                break;\r\n            case ".":\r\n                current.forEach(function (e) {\r\n                    if (typeof e[term.field] !== "undefined") {\r\n                        var val = e[term.field];\r\n                        if (isElement(val)) {\r\n                            elems.push(val);\r\n                        }\r\n                        if (Array.isArray(val)) {\r\n                            val.forEach(function (e2) {\r\n                                if (isElement(e2)) {\r\n                                    elems.push(e2);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n                current = elems;\r\n                break;\r\n            case "[]":\r\n                current.forEach(function (e) {\r\n                    if (typeof e[term.field] !== "undefined") {\r\n                        var val = e[term.field];\r\n                        if (term.value == val) {\r\n                            elems.push(e);\r\n                        }\r\n                    }\r\n                });\r\n                current = elems;\r\n                break;\r\n            case "name":\r\n                current.forEach(function (e) {\r\n                    if (e.name === term.name) {\r\n                        elems.push(e);\r\n                    }\r\n                });\r\n                current = elems;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return current;\r\n    }\r\n\r\n    /**\r\n     * Return element by id.\r\n     * @param {string} id Identifier of element.\r\n     * @return {Element} Element of id.\r\n     */\r\n    function get(id) {\r\n        return _idMap[id];\r\n    }\r\n\r\n    /**\r\n     * Return instances of a specified type name(s).\r\n     * @param {string|Array.<string>} _typeName Type name(s) of instances to be returned.\r\n     * @return {Array.<Element>} instances of the type name(s).\r\n     */\r\n    function getInstancesOf(_typeName) {\r\n        var _instances = [],\r\n            _typeNames = [];\r\n\r\n        if (_.isArray(_typeName)) {\r\n            _typeNames = _typeName;\r\n        } else if (_.isString(_typeName)) {\r\n            _typeNames.push(_typeName);\r\n        }\r\n\r\n        _.each(_idMap, function (elem) {\r\n            var i, len, _typeTest = false;\r\n\r\n            for (i = 0, len = _typeNames.length; i < len; i++) {\r\n                if (elem instanceof _global.type[_typeNames[i]]) {\r\n                    _typeTest = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (_typeTest) {\r\n                _instances.push(elem);\r\n            }\r\n        });\r\n\r\n        return _instances;\r\n    }\r\n\r\n    /**\r\n     * Find the first matched element satisfying the predicate.\r\n     * @param {function(Element):boolean} predicate A function to filter elements.\r\n     * @return {Element} A matched element.\r\n     */\r\n    function find(predicate) {\r\n        var key, elem;\r\n        for (key in _idMap) {\r\n            if (_idMap.hasOwnProperty(key)) {\r\n                elem = _idMap[key];\r\n                if (predicate(elem)) {\r\n                    return elem;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Find all elements satisfying the predicate.\r\n     * @param {function(Element):boolean} predicate A function to filter elements.\r\n     * @return {Array.<Element>} All matched elements.\r\n     */\r\n    function findAll(predicate) {\r\n        var key,\r\n            elem,\r\n            result = [];\r\n        for (key in _idMap) {\r\n            if (_idMap.hasOwnProperty(key)) {\r\n                elem = _idMap[key];\r\n                if (predicate(elem)) {\r\n                    result.push(elem);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    /**\r\n     * Search elements by keyword and type\r\n     * @param {string} keyword\r\n     * @param {constructor} typeFilter\r\n     * @return {Array.<Element>} elements\r\n     */\r\n    function search(keyword, typeFilter) {\r\n        keyword = keyword.toLowerCase();\r\n        typeFilter = typeFilter || type.Element;\r\n        var results = findAll(function (elem) {\r\n            var name = elem.name ? elem.name.toLowerCase() : "";\r\n            return (name.indexOf(keyword) > -1 && elem instanceof typeFilter);\r\n        });\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Lookup an element and then find. (See `Element.prototype.lookup` and `find`).\r\n     * @param {!Element} namespace Element to start to lookup.\r\n     * @param {string} name Name of element to find\r\n     * @param {constructor} typeFilter Type filter. (e.g. `type.UMLClass`)\r\n     * @return {Element} A matched element.\r\n     */\r\n    function lookupAndFind(namespace, name, typeFilter) {\r\n        var ref = namespace.lookup(name, typeFilter);\r\n        if (ref === null) {\r\n            ref = find(function (elem) {\r\n                return ((elem instanceof typeFilter) && (elem.name === name));\r\n            });\r\n        }\r\n        return ref;\r\n    }\r\n\r\n\r\n    /**\r\n     * Return all elements referencing to the given element.\r\n     * @param {Core.Element} elem Element. (model element, view element, or diagram)\r\n     * @param {?function(Element):boolean} iterator if given, returns instances only satisfying iterator function.\r\n     * @return {Array<Core.Element>} Elements referencing to.\r\n     */\r\n    function getRefsTo(elem, iterator) {\r\n        var id,\r\n            ref,\r\n            obj,\r\n            list = [];\r\n        if (elem) {\r\n            obj = _refMap[elem._id];\r\n            if (obj) {\r\n                for (id in obj) {\r\n                    if (obj.hasOwnProperty(id)) {\r\n                        ref = _idMap[id];\r\n                        if (iterator) {\r\n                            if (iterator(ref)) { list.push(ref); }\r\n                        } else {\r\n                            list.push(ref);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * Return all instances of Relationship connected to the given model element.\r\n     * @param {Core.Model} model Model element.\r\n     * @param {?function(Element):boolean} iterator if given, returns instances only satisfying iterator function.\r\n     * @return {Array<Core.Model>} Instances of Relationship.\r\n     */\r\n    function getRelationshipsOf(model, iterator) {\r\n        var i,\r\n            len,\r\n            ref,\r\n            refs = getRefsTo(model),\r\n            results = [];\r\n\r\n        function _add(rel) {\r\n            if (!_.contains(results, rel)) {\r\n                results.push(rel);\r\n            }\r\n        }\r\n\r\n        for (i = 0, len = refs.length; i < len; i++) {\r\n            ref = refs[i];\r\n\r\n            // for DirectedRelationship\r\n            if ((ref instanceof Core.DirectedRelationship) && (ref.source === model || ref.target === model)) {\r\n                if (iterator) {\r\n                    if (iterator(ref)) {\r\n                        _add(ref);\r\n                    }\r\n                } else {\r\n                    _add(ref);\r\n                }\r\n            }\r\n\r\n            // for UndirectedRelationship\r\n            if ((ref instanceof Core.RelationshipEnd) && (ref.reference === model)) {\r\n                if (iterator) {\r\n                    if (iterator(ref._parent)) {\r\n                        _add(ref._parent);\r\n                    }\r\n                } else {\r\n                    _add(ref._parent);\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Return all views associated with the given model.\r\n     * @param {Core.Model} model Model element.\r\n     * @return {Array<Core.View>} View elements associated with.\r\n     */\r\n    function getViewsOf(model) {\r\n        return getRefsTo(model, function (ref) {\r\n            return (ref instanceof Core.View) && (ref.model === model);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return all instances of EdgeView linked to the given view.\r\n     * @param {Core.View} view View element. Typically an instance of NodeView.\r\n     * @return {Array<Core.EdgeView>} Instances of EdgeView linked to.\r\n     */\r\n    function getEdgeViewsOf(view) {\r\n        return getRefsTo(view, function (ref) {\r\n            return (ref instanceof Core.EdgeView) &&\r\n                   (ref.head === view || ref.tail === view);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert an element to an array field. This will not insert an Operation into UndoStack (bypass = true). Use it carefully.\r\n     * @param {Core.Element} parent Field owner.\r\n     * @param {string} field Field name.\r\n     * @param {Core.Element} elem An element to be inserted.\r\n     */\r\n    function bypassInsert(parent, field, elem) {\r\n        OperationBuilder.begin("bypassInsert", true);\r\n        OperationBuilder.insert(elem);\r\n        OperationBuilder.fieldInsert(parent, field, elem);\r\n        OperationBuilder.end();\r\n        doOperation(OperationBuilder.getOperation());\r\n    }\r\n\r\n    /**\r\n     * Assign a value to a field. This will not insert an Operation into UndoStack (bypass = true). Use it carefully.\r\n     * @param {module:core/Core.Element} elem Field owner.\r\n     * @param {string} field Field name.\r\n     * @param {Core.Element} val Value to be assigned to.\r\n     */\r\n    function bypassFieldAssign(elem, field, val) {\r\n        OperationBuilder.begin("bypassFieldAssign", true);\r\n        OperationBuilder.fieldAssign(elem, field, val);\r\n        OperationBuilder.end();\r\n        doOperation(OperationBuilder.getOperation(), true);\r\n    }\r\n\r\n    // Define public API\r\n    exports.writeObject         = writeObject;\r\n    exports.readObject          = readObject;\r\n    exports.extractChanged      = extractChanged;\r\n    exports.doOperation         = doOperation;\r\n    exports.undo                = undo;\r\n    exports.redo                = redo;\r\n    exports.clear               = clear;\r\n    exports.isModified          = isModified;\r\n    exports.setModified         = setModified;\r\n    exports.isElement           = isElement;\r\n    exports.select              = select;\r\n    exports.get                 = get;\r\n    exports.getInstancesOf      = getInstancesOf;\r\n    exports.find                = find;\r\n    exports.findAll             = findAll;\r\n    exports.search              = search;\r\n    exports.lookupAndFind       = lookupAndFind;\r\n    exports.getRefsTo           = getRefsTo;\r\n    exports.getRelationshipsOf  = getRelationshipsOf;\r\n    exports.getViewsOf          = getViewsOf;\r\n    exports.getEdgeViewsOf      = getEdgeViewsOf;\r\n\r\n    exports.bypassInsert        = bypassInsert;\r\n    exports.bypassFieldAssign   = bypassFieldAssign;\r\n\r\n    exports.getIdMap  = function () { return _idMap; };  // for test\r\n    exports.getRefMap = function () { return _refMap; }; // for test\r\n\r\n    exports.Stack = Stack; // for test\r\n\r\n});\r\n\n//# sourceURL=/core/Repository.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define */\r\n\r\n/**\r\n * FileSystemError describes the errors that can occur when using the FileSystem, File,\r\n * and Directory modules.\r\n *\r\n * Error values are strings. Any "falsy" value: null, undefined or "" means "no error".\r\n */\r\ndefine(\'filesystem/FileSystemError\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    module.exports = {\r\n        UNKNOWN                     : "Unknown",\r\n        INVALID_PARAMS              : "InvalidParams",\r\n        NOT_FOUND                   : "NotFound",\r\n        NOT_READABLE                : "NotReadable",\r\n        NOT_SUPPORTED               : "NotSupported",\r\n        NOT_WRITABLE                : "NotWritable",\r\n        OUT_OF_SPACE                : "OutOfSpace",\r\n        TOO_MANY_ENTRIES            : "TooManyEntries",\r\n        ALREADY_EXISTS              : "AlreadyExists",\r\n        CONTENTS_MODIFIED           : "ContentsModified",\r\n        ROOT_NOT_WATCHED            : "RootNotBeingWatched"\r\n        \r\n        // FUTURE: Add remote connection errors: timeout, not logged in, connection err, etc.\r\n    };\r\n});\r\n\n//# sourceURL=/filesystem/FileSystemError.js'),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define, $, brackets */\r\n\r\n/**\r\n *  Utilities functions related to string manipulation\r\n *\r\n */\r\ndefine(\'utils/StringUtils\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    // var _ = require("thirdparty/lodash");\r\n\r\n    /**\r\n     * Format a string by replacing placeholder symbols with passed in arguments.\r\n     *\r\n     * Example: var formatted = StringUtils.format("Hello {0}", "World");\r\n     *\r\n     * @param {string} str The base string\r\n     * @param {...} Arguments to be substituted into the string\r\n     *\r\n     * @return {string} Formatted string\r\n     */\r\n    function format(str) {\r\n        // arguments[0] is the base string, so we need to adjust index values here\r\n        var args = [].slice.call(arguments, 1);\r\n        return str.replace(/\\{(\\d+)\\}/g, function (match, num) {\r\n            return typeof args[num] !== "undefined" ? args[num] : match;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    function htmlEscape(str) {\r\n        console.warn("StringUtils.htmlEscape is deprecated. Use _.escape instead.");\r\n        return _.escape(str);\r\n    }\r\n\r\n    function regexEscape(str) {\r\n        return str.replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, "\\\\$1");\r\n    }\r\n\r\n    // Periods (aka "dots") are allowed in HTML identifiers, but jQuery interprets\r\n    // them as the start of a class selector, so they need to be escaped\r\n    function jQueryIdEscape(str) {\r\n        return str.replace(/\\./g, "\\\\.");\r\n    }\r\n\r\n    /**\r\n     * Splits the text by new line characters and returns an array of lines\r\n     * @param {string} text\r\n     * @return {Array.<string>} lines\r\n     */\r\n    function getLines(text) {\r\n        return text.split("\\n");\r\n    }\r\n\r\n    /**\r\n     * Returns a line number corresponding to an offset in some text. The text can\r\n     * be specified as a single string or as an array of strings that correspond to\r\n     * the lines of the string.\r\n     *\r\n     * Specify the text in lines when repeatedly calling the function on the same\r\n     * text in a loop. Use getLines() to divide the text into lines, then repeatedly call\r\n     * this function to compute a line number from the offset.\r\n     *\r\n     * @param {string | Array.<string>} textOrLines - string or array of lines from which\r\n     *      to compute the line number from the offset\r\n     * @param {number} offset\r\n     * @return {number} line number\r\n     */\r\n    function offsetToLineNum(textOrLines, offset) {\r\n        if (Array.isArray(textOrLines)) {\r\n            var lines = textOrLines,\r\n                total = 0,\r\n                line;\r\n            for (line = 0; line < lines.length; line++) {\r\n                if (total < offset) {\r\n                    // add 1 per line since /n were removed by splitting, but they needed to \r\n                    // contribute to the total offset count\r\n                    total += lines[line].length + 1;\r\n                } else if (total === offset) {\r\n                    return line;\r\n                } else {\r\n                    return line - 1;\r\n                }\r\n            }\r\n\r\n            // if offset is NOT over the total then offset is in the last line\r\n            if (offset <= total) {\r\n                return line - 1;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        } else {\r\n            return textOrLines.substr(0, offset).split("\\n").length - 1;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Returns true if the given string ends with the given suffix.\r\n     *\r\n     * @param {string} str\r\n     * @param {string} suffix\r\n     */\r\n    function endsWith(str, suffix) {\r\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n    }\r\n\r\n    function urlSort(a, b) {\r\n        var a2, b2;\r\n        function isFile(s) {\r\n            return ((s.lastIndexOf("/") + 1) < s.length);\r\n        }\r\n\r\n        if (brackets.platform === "win") {\r\n            // Windows: prepend folder names with a \'0\' and file names with a \'1\' so folders are listed first\r\n            a2 = ((isFile(a)) ? "1" : "0") + a.toLowerCase();\r\n            b2 = ((isFile(b)) ? "1" : "0") + b.toLowerCase();\r\n        } else {\r\n            a2 = a.toLowerCase();\r\n            b2 = b.toLowerCase();\r\n        }\r\n\r\n        if (a2 === b2) {\r\n            return 0;\r\n        } else {\r\n            return (a2 > b2) ? 1 : -1;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Return an escaped path or URL string that can be broken near path separators.\r\n     * @param {string} url the path or URL to format\r\n     * @return {string} the formatted path or URL\r\n     */\r\n    function breakableUrl(url) {\r\n        // This is for displaying in UI, so always want it escaped\r\n        var escUrl = _.escape(url);\r\n\r\n        // Inject zero-width space character (U+200B) near path separators (/) to allow line breaking there\r\n        return escUrl.replace(\r\n            new RegExp(regexEscape("/"), "g"),\r\n            "/" + "&#8203;"\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Convert number of bytes into human readable format. \r\n     * If param bytes is negative it returns the number without any changes.\r\n     *\r\n     * @param number bytes     Number of bytes to convert\r\n     * @param number precision Number of digits after the decimal separator\r\n     * @return string\r\n     */\r\n    function prettyPrintBytes(bytes, precision) {\r\n        var kilobyte = 1024,\r\n            megabyte = kilobyte * 1024,\r\n            gigabyte = megabyte * 1024,\r\n            terabyte = gigabyte * 1024,\r\n            returnVal = bytes;\r\n        \r\n        if ((bytes >= 0) && (bytes < kilobyte)) {\r\n            returnVal = bytes + " B";\r\n        } else if (bytes < megabyte) {\r\n            returnVal = (bytes / kilobyte).toFixed(precision) + " KB";\r\n        } else if (bytes < gigabyte) {\r\n            returnVal = (bytes / megabyte).toFixed(precision) + " MB";\r\n        } else if (bytes < terabyte) {\r\n            returnVal = (bytes / gigabyte).toFixed(precision) + " GB";\r\n        } else if (bytes >= terabyte) {\r\n            return (bytes / terabyte).toFixed(precision) + " TB";\r\n        }\r\n        \r\n        return returnVal;\r\n    }\r\n        \r\n\r\n    // Define public API\r\n    exports.format              = format;\r\n    exports.htmlEscape          = htmlEscape;\r\n    exports.regexEscape         = regexEscape;\r\n    exports.jQueryIdEscape      = jQueryIdEscape;\r\n    exports.getLines            = getLines;\r\n    exports.offsetToLineNum     = offsetToLineNum;\r\n    exports.urlSort             = urlSort;\r\n    exports.breakableUrl        = breakableUrl;\r\n    exports.endsWith            = endsWith;\r\n    exports.prettyPrintBytes    = prettyPrintBytes;\r\n});\r\n\n//# sourceURL=/utils/StringUtils.js'),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define, $, FileError, unescape, window, app */\r\n\r\n/**\r\n * Set of utilites for working with files and text content.\r\n */\r\ndefine(\'file/FileUtils\',[\'require\',\'exports\',\'module\',\'core/Global\',\'filesystem/FileSystemError\',\'utils/StringUtils\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    require("core/Global");\r\n\r\n    var FileSystemError     = require("filesystem/FileSystemError"),\r\n        // PerfUtils           = require("utils/PerfUtils"),\r\n        // Dialogs             = require("dialogs/Dialogs"),\r\n        // DefaultDialogs      = require("widgets/DefaultDialogs"),\r\n        // Strings             = require("strings"),\r\n        StringUtils         = require("utils/StringUtils");\r\n\r\n\r\n    /**\r\n     * Asynchronously reads a file as UTF-8 encoded text.\r\n     * @param {!File} file File to read\r\n     * @return {$.Promise} a jQuery promise that will be resolved with the\r\n     *  file\'s text content plus its timestamp, or rejected with a FileSystemError string\r\n     *  constant if the file can not be read.\r\n     */\r\n    function readAsText(file) {\r\n        var result = new $.Deferred();\r\n\r\n        // Measure performance\r\n        /*\r\n        var perfTimerName = PerfUtils.markStart("readAsText:\\t" + file.fullPath);\r\n        result.always(function () {\r\n            PerfUtils.addMeasurement(perfTimerName);\r\n        });\r\n        */\r\n\r\n        // Read file\r\n        file.read(function (err, data, stat) {\r\n            if (!err) {\r\n                result.resolve(data, stat.mtime);\r\n            } else {\r\n                result.reject(err);\r\n            }\r\n        });\r\n\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Asynchronously writes a file as UTF-8 encoded text.\r\n     * @param {!File} file File to write\r\n     * @param {!string} text\r\n     * @param {boolean=} allowBlindWrite Indicates whether or not CONTENTS_MODIFIED\r\n     *      errors---which can be triggered if the actual file contents differ from\r\n     *      the FileSystem\'s last-known contents---should be ignored.\r\n     * @return {$.Promise} a jQuery promise that will be resolved when\r\n     * file writing completes, or rejected with a FileSystemError string constant.\r\n     */\r\n    function writeText(file, text, allowBlindWrite) {\r\n        var result = new $.Deferred(),\r\n            options = {};\r\n\r\n        if (allowBlindWrite) {\r\n            options.blind = true;\r\n        }\r\n\r\n        file.write(text, options, function (err) {\r\n            if (!err) {\r\n                result.resolve();\r\n            } else {\r\n                result.reject(err);\r\n            }\r\n        });\r\n\r\n        return result.promise();\r\n    }\r\n\r\n    /** @const */\r\n    var LINE_ENDINGS_CRLF = "CRLF";\r\n    /** @const */\r\n    var LINE_ENDINGS_LF = "LF";\r\n\r\n    /**\r\n     * Returns the standard line endings for the current platform\r\n     * @return {LINE_ENDINGS_CRLF|LINE_ENDINGS_LF}\r\n     */\r\n    function getPlatformLineEndings() {\r\n        return app.platform === "win" ? LINE_ENDINGS_CRLF : LINE_ENDINGS_LF;\r\n    }\r\n\r\n    /**\r\n     * Scans the first 1000 chars of the text to determine how it encodes line endings. Returns\r\n     * null if usage is mixed or if no line endings found.\r\n     * @param {!string} text\r\n     * @return {null|LINE_ENDINGS_CRLF|LINE_ENDINGS_LF}\r\n     */\r\n    function sniffLineEndings(text) {\r\n        var subset = text.substr(0, 1000);  // (length is clipped to text.length)\r\n        var hasCRLF = /\\r\\n/.test(subset);\r\n        var hasLF = /[^\\r]\\n/.test(subset);\r\n\r\n        if ((hasCRLF && hasLF) || (!hasCRLF && !hasLF)) {\r\n            return null;\r\n        } else {\r\n            return hasCRLF ? LINE_ENDINGS_CRLF : LINE_ENDINGS_LF;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Translates any line ending types in the given text to the be the single form specified\r\n     * @param {!string} text\r\n     * @param {null|LINE_ENDINGS_CRLF|LINE_ENDINGS_LF} lineEndings\r\n     * @return {string}\r\n     */\r\n    function translateLineEndings(text, lineEndings) {\r\n        if (lineEndings !== LINE_ENDINGS_CRLF && lineEndings !== LINE_ENDINGS_LF) {\r\n            lineEndings = getPlatformLineEndings();\r\n        }\r\n\r\n        var eolStr = (lineEndings === LINE_ENDINGS_CRLF ? "\\r\\n" : "\\n");\r\n        var findAnyEol = /\\r\\n|\\r|\\n/g;\r\n\r\n        return text.replace(findAnyEol, eolStr);\r\n    }\r\n\r\n    function getFileErrorString(name) {\r\n        // There are a few error codes that we have specific error messages for. The rest are\r\n        // displayed with a generic "(error N)" message.\r\n        var result;\r\n\r\n        if (name === FileSystemError.NOT_FOUND) {\r\n            result = "Strings.NOT_FOUND_ERR";\r\n        } else if (name === FileSystemError.NOT_READABLE) {\r\n            result = "Strings.NOT_READABLE_ERR";\r\n        } else if (name === FileSystemError.NOT_WRITABLE) {\r\n            result = "Strings.NO_MODIFICATION_ALLOWED_ERR_FILE";\r\n        } else if (name === FileSystemError.CONTENTS_MODIFIED) {\r\n            result = "Strings.CONTENTS_MODIFIED_ERR";\r\n        } else {\r\n            result = StringUtils.format("Strings.GENERIC_ERROR", name);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function showFileOpenError(name, path) {\r\n        /*\r\n        return Dialogs.showModalDialog(\r\n            DefaultDialogs.DIALOG_ID_ERROR,\r\n            Strings.ERROR_OPENING_FILE_TITLE,\r\n            StringUtils.format(\r\n                Strings.ERROR_OPENING_FILE,\r\n                StringUtils.breakableUrl(path),\r\n                getFileErrorString(name)\r\n            )\r\n        );\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Convert a URI path to a native path.\r\n     * On both platforms, this unescapes the URI\r\n     * On windows, URI paths start with a "/", but have a drive letter ("C:"). In this\r\n     * case, remove the initial "/".\r\n     * @param {!string} path\r\n     * @return {string}\r\n     */\r\n    function convertToNativePath(path) {\r\n        path = unescape(path);\r\n        if (path.indexOf(":") !== -1 && path[0] === "/") {\r\n            return path.substr(1);\r\n        }\r\n\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Convert a Windows-native path to use Unix style slashes.\r\n     * On Windows, this converts "C:\\foo\\bar\\baz.txt" to "C:/foo/bar/baz.txt".\r\n     * On Mac, this does nothing, since Mac paths are already in Unix syntax.\r\n     * (Note that this does not add an initial forward-slash. Internally, our\r\n     * APIs generally use the "C:/foo/bar/baz.txt" style for "native" paths.)\r\n     * @param {string} path A native-style path.\r\n     * @return {string} A Unix-style path.\r\n     */\r\n    function convertWindowsPathToUnixPath(path) {\r\n        if (app.platform === "win") {\r\n            path = path.replace(/\\\\/g, "/");\r\n        }\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Removes the trailing slash from a path, if it has one.\r\n     * Warning: this differs from the format of most paths! Use paths ending in "/"\r\n     * normally, as this is the format used by Directory.fullPath.\r\n     *\r\n     * @param {string} path\r\n     * @return {string}\r\n     */\r\n    function stripTrailingSlash(path) {\r\n        if (path && path[path.length - 1] === "/") {\r\n            return path.slice(0, -1);\r\n        } else {\r\n            return path;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Although this app is generally standardized on folder paths with a trailing "/", some APIs here\r\n     * receive project paths without "/" due to legacy preference storage formats, etc.\r\n     * @param {!string} fullPath  Path that may or may not end in "/"\r\n     * @return {!string} Path that ends in "/"\r\n     */\r\n    function ensureTrailingSlash(fullPath) {\r\n        if (fullPath[fullPath.length - 1] !== "/") {\r\n            return fullPath + "/";\r\n        }\r\n        return fullPath;\r\n    }\r\n\r\n    /**\r\n     * Warning: Contrary to the name, this does NOT return a canonical path. The canonical format\r\n     * used by Directory.fullPath actually DOES include the trailing "/"\r\n     * @deprecated\r\n     *\r\n     * @param {string} path\r\n     * @return {string}\r\n     */\r\n    function canonicalizeFolderPath(path) {\r\n        console.error("Warning: FileUtils.canonicalizeFolderPath() is deprecated. Use paths ending in \'/\' if possible, like Directory.fullPath");\r\n        return stripTrailingSlash(path);\r\n    }\r\n\r\n    /**\r\n     * Get the name of a file or a directory, removing any preceding path.\r\n     * @param {string} fullPath full path to a file or directory\r\n     * @return {string} Returns the base name of a file or the name of a\r\n     * directory\r\n     */\r\n    function getBaseName(fullPath) {\r\n        var lastSlash = fullPath.lastIndexOf("/");\r\n        if (lastSlash === fullPath.length - 1) {  // directory: exclude trailing "/" too\r\n            return fullPath.slice(fullPath.lastIndexOf("/", fullPath.length - 2) + 1, -1);\r\n        } else {\r\n            return fullPath.slice(lastSlash + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a native absolute path to the application source directory.\r\n     * Note that this only works when run in /src/index.html, so it does\r\n     * not work for unit tests (which is run from /test/SpecRunner.html)\r\n     *\r\n     * WARNING: unlike most paths, this path EXCLUDES the trailing "/".\r\n     * @return {string}\r\n     */\r\n    function getNativeDirectoryPath() {\r\n        var pathname = decodeURI(window.location.pathname);\r\n        var directory = pathname.substr(0, pathname.lastIndexOf("/"));\r\n        return convertToNativePath(directory);\r\n    }\r\n\r\n    /**\r\n     * Returns the full path to the application directory.\r\n     * @return {!string} fullPath reference\r\n     */\r\n    function getApplicationDirectoryPath() {\r\n        var pathname = getNativeDirectoryPath();\r\n        pathname = pathname.substr(0, pathname.lastIndexOf("/"));\r\n        return ensureTrailingSlash(pathname);\r\n    }\r\n\r\n    /**\r\n     * Given the module object passed to JS module define function,\r\n     * convert the path to a native absolute path.\r\n     * Returns a native absolute path to the module folder.\r\n     *\r\n     * WARNING: unlike most paths, this path EXCLUDES the trailing "/".\r\n     * @return {string}\r\n     */\r\n    function getNativeModuleDirectoryPath(module) {\r\n        var path;\r\n\r\n        if (module && module.uri) {\r\n            path = decodeURI(module.uri);\r\n\r\n            // Remove module name and trailing slash from path.\r\n            path = path.substr(0, path.lastIndexOf("/"));\r\n        }\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Get the file extension (excluding ".") given a path OR a bare filename.\r\n     * Returns "" for names with no extension. If the name starts with ".", the\r\n     * full remaining text is considered the extension.\r\n     *\r\n     * @param {string} fullPath full path to a file or directory\r\n     * @return {string} Returns the extension of a filename or empty string if\r\n     * the argument is a directory or a filename with no extension\r\n     */\r\n    function getFileExtension(fullPath) {\r\n        var baseName = getBaseName(fullPath),\r\n            idx      = baseName.lastIndexOf(".");\r\n\r\n        if (idx === -1) {\r\n            return "";\r\n        }\r\n\r\n        return baseName.substr(idx + 1);\r\n    }\r\n\r\n    /**\r\n     * Computes filename as relative to the basePath. For example:\r\n     * basePath: /foo/bar/, filename: /foo/bar/baz.txt\r\n     * returns: baz.txt\r\n     *\r\n     * The net effect is that the common prefix is stripped away. If basePath is not\r\n     * a prefix of filename, then undefined is returned.\r\n     *\r\n     * @param {string} basePath Path against which we\'re computing the relative path\r\n     * @param {string} filename Full path to the file for which we are computing a relative path\r\n     * @return {string} relative path\r\n     */\r\n    function getRelativeFilename(basePath, filename) {\r\n        if (!filename || filename.substr(0, basePath.length) !== basePath) {\r\n            return;\r\n        }\r\n\r\n        return filename.substr(basePath.length);\r\n    }\r\n\r\n    /** @const - hard-coded for now, but may want to make these preferences */\r\n    var _staticHtmlFileExts = ["htm", "html"],\r\n        _serverHtmlFileExts = ["php", "php3", "php4", "php5", "phtm", "phtml", "cfm", "cfml", "asp", "aspx", "jsp", "jspx", "shtm", "shtml"];\r\n\r\n    /**\r\n     * Determine if file extension is a static html file extension.\r\n     * @param {string} filePath could be a path, a file name or just a file extension\r\n     * @return {boolean} Returns true if fileExt is in the list\r\n     */\r\n    function isStaticHtmlFileExt(filePath) {\r\n        if (!filePath) {\r\n            return false;\r\n        }\r\n\r\n        return (_staticHtmlFileExts.indexOf(getFileExtension(filePath).toLowerCase()) !== -1);\r\n    }\r\n\r\n    /**\r\n     * Determine if file extension is a server html file extension.\r\n     * @param {string} filePath could be a path, a file name or just a file extension\r\n     * @return {boolean} Returns true if fileExt is in the list\r\n     */\r\n    function isServerHtmlFileExt(filePath) {\r\n        if (!filePath) {\r\n            return false;\r\n        }\r\n\r\n        return (_serverHtmlFileExts.indexOf(getFileExtension(filePath).toLowerCase()) !== -1);\r\n    }\r\n\r\n    /**\r\n     * Get the parent directory of a file. If a directory is passed in the directory is returned.\r\n     * @param {string} fullPath full path to a file or directory\r\n     * @return {string} Returns the path to the parent directory of a file or the path of a directory,\r\n     *                  including trailing "/"\r\n     */\r\n    function getDirectoryPath(fullPath) {\r\n        return fullPath.substr(0, fullPath.lastIndexOf("/") + 1);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Get the file name without the extension.\r\n     * @param {string} filename File name of a file or directory\r\n     * @return {string} Returns the file name without the extension\r\n     */\r\n    function _getFilenameWithoutExtension(filename) {\r\n        var index = filename.lastIndexOf(".");\r\n        return index === -1 ? filename : filename.slice(0, index);\r\n    }\r\n\r\n    /**\r\n     * Compares 2 filenames in lowercases. In Windows it compares the names without the\r\n     * extension first and then the extensions to fix issue #4409\r\n     * @param {string} filename1\r\n     * @param {string} filename2\r\n     * @param {boolean} extFirst If true it compares the extensions first and then the file names.\r\n     * @return {number} The result of the local compare function\r\n     */\r\n    function compareFilenames(filename1, filename2, extFirst) {\r\n        var ext1   = getFileExtension(filename1),\r\n            ext2   = getFileExtension(filename2),\r\n            cmpExt = ext1.toLocaleLowerCase().localeCompare(ext2.toLocaleLowerCase(), undefined, {numeric: true}),\r\n            cmpNames;\r\n\r\n        if (app.platform === "win") {\r\n            filename1 = _getFilenameWithoutExtension(filename1);\r\n            filename2 = _getFilenameWithoutExtension(filename2);\r\n        }\r\n        cmpNames = filename1.toLocaleLowerCase().localeCompare(filename2.toLocaleLowerCase(), undefined, {numeric: true});\r\n\r\n        return extFirst ? (cmpExt || cmpNames) : (cmpNames || cmpExt);\r\n    }\r\n    \r\n    /**\r\n     * Converts filename to be available in Windows\r\n     * @param {string} filename Filename to be converted available in Windows\r\n     * @return {string} forbidden chars were replaced by "_"\r\n     */\r\n    function convertToWindowsFilename(filename) {\r\n        return filename.replace(/[\\/\\*<>:\\\\\\"|?]/g, "_");\r\n    }\r\n\r\n\r\n    // Define public API\r\n    exports.LINE_ENDINGS_CRLF              = LINE_ENDINGS_CRLF;\r\n    exports.LINE_ENDINGS_LF                = LINE_ENDINGS_LF;\r\n    exports.getPlatformLineEndings         = getPlatformLineEndings;\r\n    exports.sniffLineEndings               = sniffLineEndings;\r\n    exports.translateLineEndings           = translateLineEndings;\r\n    exports.showFileOpenError              = showFileOpenError;\r\n    exports.getFileErrorString             = getFileErrorString;\r\n    exports.readAsText                     = readAsText;\r\n    exports.writeText                      = writeText;\r\n    exports.convertToNativePath            = convertToNativePath;\r\n    exports.convertWindowsPathToUnixPath   = convertWindowsPathToUnixPath;\r\n    exports.getNativeDirectoryPath         = getNativeDirectoryPath;\r\n    exports.getApplicationDirectoryPath    = getApplicationDirectoryPath;\r\n    exports.getNativeModuleDirectoryPath   = getNativeModuleDirectoryPath;\r\n    exports.canonicalizeFolderPath         = canonicalizeFolderPath;\r\n    exports.stripTrailingSlash             = stripTrailingSlash;\r\n    exports.isStaticHtmlFileExt            = isStaticHtmlFileExt;\r\n    exports.isServerHtmlFileExt            = isServerHtmlFileExt;\r\n    exports.getDirectoryPath               = getDirectoryPath;\r\n    exports.getBaseName                    = getBaseName;\r\n    exports.getRelativeFilename            = getRelativeFilename;\r\n    exports.getFileExtension               = getFileExtension;\r\n    exports.compareFilenames               = compareFilenames;\r\n    exports.convertToWindowsFilename       = convertToWindowsFilename;\r\n});\r\n\n//# sourceURL=/file/FileUtils.js'),eval("/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define */\r\n\r\ndefine('filesystem/WatchedRoot',['require','exports','module'],function (require, exports, module) {\r\n    \"use strict\";\r\n    \r\n    /*\r\n     * @constructor\r\n     * Represents file or directory structure watched by the FileSystem. If the\r\n     * entry is a directory, all children (that pass the supplied filter function)\r\n     * are also watched. A WatchedRoot object begins and ends its life in the\r\n     * INACTIVE state. While in the process of starting up watchers, the WatchedRoot\r\n     * is in the STARTING state. When watchers are ready, the WatchedRoot enters\r\n     * the ACTIVE state.\r\n     *\r\n     * See the FileSystem class for more details.\r\n     *\r\n     * @param {File|Directory} entry \r\n     * @param {function(string, string):boolean} filter \r\n     */\r\n    function WatchedRoot(entry, filter) {\r\n        this.entry = entry;\r\n        this.filter = filter;\r\n    }\r\n\r\n    // Status constants\r\n    WatchedRoot.INACTIVE = 0;\r\n    WatchedRoot.STARTING = 1;\r\n    WatchedRoot.ACTIVE = 2;\r\n\r\n    /**\r\n     * @type {File|Directory}\r\n     */\r\n    WatchedRoot.prototype.entry = null;\r\n    \r\n    /**\r\n     * @type {function(string, string):boolean}\r\n     */\r\n    WatchedRoot.prototype.filter = null;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    WatchedRoot.prototype.status = WatchedRoot.INACTIVE;\r\n    \r\n    \r\n    // Export this class\r\n    module.exports = WatchedRoot;\r\n});\r\n\n//# sourceURL=/filesystem/WatchedRoot.js"),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n/*\r\n * To ensure cache coherence, current and future asynchronous state-changing \r\n * operations of FileSystemEntry and its subclasses should implement the \r\n * following high-level sequence of steps:\r\n * \r\n * 1. Block external filesystem change events;\r\n * 2. Execute the low-level state-changing operation;\r\n * 3. Update the internal filesystem state, including caches;\r\n * 4. Apply the callback;\r\n * 5. Fire an appropriate internal change notification; and\r\n * 6. Unblock external change events.\r\n *\r\n * Note that because internal filesystem state is updated first, both the original \r\n * caller and the change notification listeners observe filesystem state that is\r\n * current w.r.t. the operation. Furthermore, because external change events are\r\n * blocked before the operation begins, listeners will only receive the internal\r\n * change event for the operation and not additional (or possibly inconsistent)\r\n * external change events.\r\n * \r\n * State-changing operations that block external filesystem change events must\r\n * take care to always subsequently unblock the external change events in all\r\n * control paths. It is safe to assume, however, that the underlying impl will\r\n * always apply the callback with some value.\r\n \r\n * Caches should be conservative. Consequently, the entry\'s cached data should\r\n * always be cleared if the underlying impl\'s operation fails. This is the case\r\n * event for read-only operations because an unexpected failure implies that the\r\n * system is in an unknown state. The entry should communicate this by failing\r\n * where appropriate, and should not use the cache to hide failure.\r\n * \r\n * Only watched entries should make use of cached data because change events are\r\n * only expected for such entries, and change events are used to granularly\r\n * invalidate out-of-date caches.\r\n *\r\n * By convention, callbacks are optional for asynchronous, state-changing\r\n * operations, but required for read-only operations. The first argument to the\r\n * callback should always be a nullable error string from FileSystemError.\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define */\r\n\r\ndefine(\'filesystem/FileSystemEntry\',[\'require\',\'exports\',\'module\',\'filesystem/FileSystemError\',\'filesystem/WatchedRoot\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    var FileSystemError = require("filesystem/FileSystemError"),\r\n        WatchedRoot     = require("filesystem/WatchedRoot");\r\n    \r\n    var VISIT_DEFAULT_MAX_DEPTH = 100,\r\n        VISIT_DEFAULT_MAX_ENTRIES = 30000;\r\n    \r\n    /* Counter to give every entry a unique id */\r\n    var nextId = 0;\r\n    \r\n    /**\r\n     * @constructor\r\n     * Model for a file system entry. This is the base class for File and Directory,\r\n     * and is never used directly.\r\n     *\r\n     * See the File, Directory, and FileSystem classes for more details.\r\n     *\r\n     * @param {string} path The path for this entry.\r\n     * @param {FileSystem} fileSystem The file system associated with this entry.\r\n     */\r\n    function FileSystemEntry(path, fileSystem) {\r\n        this._setPath(path);\r\n        this._fileSystem = fileSystem;\r\n        this._id = nextId++;\r\n    }\r\n    \r\n    // Add "fullPath", "name", "parent", "id", "isFile" and "isDirectory" getters\r\n    Object.defineProperties(FileSystemEntry.prototype, {\r\n        "fullPath": {\r\n            get: function () { return this._path; },\r\n            set: function () { throw new Error("Cannot set fullPath"); }\r\n        },\r\n        "name": {\r\n            get: function () { return this._name; },\r\n            set: function () { throw new Error("Cannot set name"); }\r\n        },\r\n        "parentPath": {\r\n            get: function () { return this._parentPath; },\r\n            set: function () { throw new Error("Cannot set parentPath"); }\r\n        },\r\n        "id": {\r\n            get: function () { return this._id; },\r\n            set: function () { throw new Error("Cannot set id"); }\r\n        },\r\n        "isFile": {\r\n            get: function () { return this._isFile; },\r\n            set: function () { throw new Error("Cannot set isFile"); }\r\n        },\r\n        "isDirectory": {\r\n            get: function () { return this._isDirectory; },\r\n            set: function () { throw new Error("Cannot set isDirectory"); }\r\n        },\r\n        "_impl": {\r\n            get: function () { return this._fileSystem._impl; },\r\n            set: function () { throw new Error("Cannot set _impl"); }\r\n        }\r\n    });\r\n    \r\n    /**\r\n     * Cached stat object for this file.\r\n     * @type {?FileSystemStats}\r\n     */\r\n    FileSystemEntry.prototype._stat = null;\r\n    \r\n    /**\r\n     * Parent file system.\r\n     * @type {!FileSystem}\r\n     */\r\n    FileSystemEntry.prototype._fileSystem = null;\r\n\r\n    /**\r\n     * The path of this entry.\r\n     * @type {string}\r\n     */\r\n    FileSystemEntry.prototype._path = null;\r\n    \r\n    /**\r\n     * The name of this entry.\r\n     * @type {string}\r\n     */\r\n    FileSystemEntry.prototype._name = null;\r\n\r\n    /**\r\n     * The parent of this entry.\r\n     * @type {string}\r\n     */\r\n    FileSystemEntry.prototype._parentPath = null;\r\n    \r\n    /**\r\n     * Whether or not the entry is a file\r\n     * @type {boolean}\r\n     */\r\n    FileSystemEntry.prototype._isFile = false;\r\n    \r\n    /**\r\n     * Whether or not the entry is a directory\r\n     * @type {boolean}\r\n     */\r\n    FileSystemEntry.prototype._isDirectory = false;\r\n    \r\n    /**\r\n     * Cached copy of this entry\'s watched root\r\n     * @type {entry: File|Directory, filter: function(FileSystemEntry):boolean, active: boolean}\r\n     */\r\n    FileSystemEntry.prototype._watchedRoot = null;\r\n\r\n    /**\r\n     * Cached result of _watchedRoot.filter(this.name, this.parentPath).\r\n     * @type {boolean}\r\n     */\r\n    FileSystemEntry.prototype._watchedRootFilterResult = false;\r\n    \r\n    /**\r\n     * Determines whether or not the entry is watched.\r\n     * @param {boolean=} relaxed If falsey, the method will only return true if\r\n     *      the watched root is fully active. If true, the method will return\r\n     *      true if the watched root is either starting up or fully active.\r\n     * @return {boolean}\r\n     */\r\n    FileSystemEntry.prototype._isWatched = function (relaxed) {\r\n        var watchedRoot = this._watchedRoot,\r\n            filterResult = this._watchedRootFilterResult;\r\n        \r\n        if (!watchedRoot) {\r\n            watchedRoot = this._fileSystem._findWatchedRootForPath(this._path);\r\n            \r\n            if (watchedRoot) {\r\n                this._watchedRoot = watchedRoot;\r\n                filterResult = watchedRoot.filter(this._name, this._parentPath);\r\n                this._watchedRootFilterResult = filterResult;\r\n            }\r\n        }\r\n        \r\n        if (watchedRoot) {\r\n            if (watchedRoot.status === WatchedRoot.ACTIVE ||\r\n                    (relaxed && watchedRoot.status === WatchedRoot.STARTING)) {\r\n                return filterResult;\r\n            } else {\r\n                // We had a watched root, but it\'s no longer active, so it must now be invalid.\r\n                this._watchedRoot = undefined;\r\n                this._watchedRootFilterResult = false;\r\n                this._clearCachedData();\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    \r\n    /**\r\n     * Update the path for this entry\r\n     * @private\r\n     * @param {String} newPath\r\n     */\r\n    FileSystemEntry.prototype._setPath = function (newPath) {\r\n        var parts = newPath.split("/");\r\n        if (this.isDirectory) {\r\n            parts.pop(); // Remove the empty string after last trailing "/"\r\n        }\r\n        this._name = parts[parts.length - 1];\r\n        parts.pop(); // Remove name\r\n        \r\n        if (parts.length > 0) {\r\n            this._parentPath = parts.join("/") + "/";\r\n        } else {\r\n            // root directories have no parent path\r\n            this._parentPath = null;\r\n        }\r\n        \r\n        this._path = newPath;\r\n        \r\n        var watchedRoot = this._watchedRoot;\r\n        if (watchedRoot) {\r\n            if (newPath.indexOf(watchedRoot.entry.fullPath) === 0) {\r\n                // Update watchedRootFilterResult\r\n                this._watchedRootFilterResult = watchedRoot.filter(this._name, this._parentPath);\r\n            } else {\r\n                // The entry was moved outside of the watched root\r\n                this._watchedRoot = null;\r\n                this._watchedRootFilterResult = false;\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Clear any cached data for this entry\r\n     * @private\r\n     */\r\n    FileSystemEntry.prototype._clearCachedData = function () {\r\n        this._stat = undefined;\r\n    };\r\n    \r\n    /**\r\n     * Helpful toString for debugging purposes\r\n     */\r\n    FileSystemEntry.prototype.toString = function () {\r\n        return "[" + (this.isDirectory ? "Directory " : "File ") + this._path + "]";\r\n    };\r\n    \r\n    /**\r\n     * Check to see if the entry exists on disk. Note that there will NOT be an\r\n     * error returned if the file does not exist on the disk; in that case the\r\n     * error parameter will be null and the boolean will be false. The error \r\n     * parameter will only be truthy when an unexpected error was encountered\r\n     * during the test, in which case the state of the entry should be considered\r\n     * unknown.\r\n     *\r\n     * @param {function (?string, boolean)} callback Callback with a FileSystemError\r\n     *      string or a boolean indicating whether or not the file exists.\r\n     */\r\n    FileSystemEntry.prototype.exists = function (callback) {\r\n        if (this._stat) {\r\n            callback(null, true);\r\n            return;\r\n        }\r\n        \r\n        this._impl.exists(this._path, function (err, exists) {\r\n            if (err) {\r\n                this._clearCachedData();\r\n                callback(err);\r\n                return;\r\n            }\r\n            \r\n            if (!exists) {\r\n                this._clearCachedData();\r\n            }\r\n            \r\n            callback(null, exists);\r\n        }.bind(this));\r\n    };\r\n    \r\n    /**\r\n     * Returns the stats for the entry.\r\n     *\r\n     * @param {function (?string, FileSystemStats=)} callback Callback with a\r\n     *      FileSystemError string or FileSystemStats object.\r\n     */\r\n    FileSystemEntry.prototype.stat = function (callback) {\r\n        if (this._stat) {\r\n            callback(null, this._stat);\r\n            return;\r\n        }\r\n        \r\n        this._impl.stat(this._path, function (err, stat) {\r\n            if (err) {\r\n                this._clearCachedData();\r\n                callback(err);\r\n                return;\r\n            }\r\n            \r\n            if (this._isWatched()) {\r\n                this._stat = stat;\r\n            }\r\n            \r\n            callback(null, stat);\r\n        }.bind(this));\r\n    };\r\n    \r\n    /**\r\n     * Rename this entry.\r\n     *\r\n     * @param {string} newFullPath New path & name for this entry.\r\n     * @param {function (?string)=} callback Callback with a single FileSystemError\r\n     *      string parameter.\r\n     */\r\n    FileSystemEntry.prototype.rename = function (newFullPath, callback) {\r\n        callback = callback || function () {};\r\n        \r\n        // Block external change events until after the write has finished\r\n        this._fileSystem._beginChange();\r\n        \r\n        this._impl.rename(this._path, newFullPath, function (err) {\r\n            var oldFullPath = this._path;\r\n            \r\n            try {\r\n                if (err) {\r\n                    this._clearCachedData();\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                \r\n                // Update internal filesystem state\r\n                this._fileSystem._handleRename(this._path, newFullPath, this.isDirectory);\r\n                \r\n                try {\r\n                    // Notify the caller\r\n                    callback(null);\r\n                } finally {\r\n                    // Notify rename listeners\r\n                    this._fileSystem._fireRenameEvent(oldFullPath, newFullPath);\r\n                }\r\n            } finally {\r\n                // Unblock external change events\r\n                this._fileSystem._endChange();\r\n            }\r\n        }.bind(this));\r\n    };\r\n        \r\n    /**\r\n     * Permanently delete this entry. For Directories, this will delete the directory\r\n     * and all of its contents. For reversible delete, see moveToTrash().\r\n     *\r\n     * @param {function (?string)=} callback Callback with a single FileSystemError\r\n     *      string parameter.\r\n     */\r\n    FileSystemEntry.prototype.unlink = function (callback) {\r\n        callback = callback || function () {};\r\n        \r\n        // Block external change events until after the write has finished\r\n        this._fileSystem._beginChange();\r\n        \r\n        this._clearCachedData();\r\n        this._impl.unlink(this._path, function (err) {\r\n            var parent = this._fileSystem.getDirectoryForPath(this.parentPath);\r\n\r\n            // Update internal filesystem state\r\n            this._fileSystem._handleDirectoryChange(parent, function (added, removed) {\r\n                try {\r\n                    // Notify the caller \r\n                    callback(err);\r\n                } finally {\r\n                    // Notify change listeners\r\n                    this._fileSystem._fireChangeEvent(parent, added, removed);\r\n                    \r\n                    // Unblock external change events\r\n                    this._fileSystem._endChange();\r\n                }\r\n            }.bind(this));\r\n        }.bind(this));\r\n    };\r\n    \r\n    /**\r\n     * Move this entry to the trash. If the underlying file system doesn\'t support move\r\n     * to trash, the item is permanently deleted.\r\n     *\r\n     * @param {function (?string)=} callback Callback with a single FileSystemError\r\n     *      string parameter.\r\n     */\r\n    FileSystemEntry.prototype.moveToTrash = function (callback) {\r\n        if (!this._impl.moveToTrash) {\r\n            this.unlink(callback);\r\n            return;\r\n        }\r\n\r\n        callback = callback || function () {};\r\n\r\n        // Block external change events until after the write has finished\r\n        this._fileSystem._beginChange();\r\n        \r\n        this._clearCachedData();\r\n        this._impl.moveToTrash(this._path, function (err) {\r\n            var parent = this._fileSystem.getDirectoryForPath(this.parentPath);\r\n\r\n            // Update internal filesystem state\r\n            this._fileSystem._handleDirectoryChange(parent, function (added, removed) {\r\n                try {\r\n                    // Notify the caller\r\n                    callback(err);\r\n                } finally {\r\n                    // Notify change listeners\r\n                    this._fileSystem._fireChangeEvent(parent, added, removed);\r\n                    \r\n                    // Unblock external change events\r\n                    this._fileSystem._endChange();\r\n                }\r\n            }.bind(this));\r\n        }.bind(this));\r\n    };\r\n    \r\n    /**\r\n     * Private helper function for FileSystemEntry.visit that requires sanitized options.\r\n     *\r\n     * @private\r\n     * @param {FileSystemStats} stats - the stats for this entry\r\n     * @param {{string: boolean}} visitedPaths - the set of fullPaths that have already been visited\r\n     * @param {function(FileSystemEntry): boolean} visitor - A visitor function, which is\r\n     *      applied to descendent FileSystemEntry objects. If the function returns false for\r\n     *      a particular Directory entry, that directory\'s descendents will not be visited.\r\n     * @param {{maxDepth: number, maxEntriesCounter: {value: number}}} options\r\n     * @param {function(?string)=} callback Callback with single FileSystemError string parameter.\r\n     */\r\n    FileSystemEntry.prototype._visitHelper = function (stats, visitedPaths, visitor, options, callback) {\r\n        var maxDepth = options.maxDepth,\r\n            maxEntriesCounter = options.maxEntriesCounter;\r\n        \r\n        if (maxEntriesCounter.value-- <= 0 || maxDepth-- < 0) {\r\n            // The outer FileSystemEntry.visit call is responsible for applying\r\n            // the main callback to FileSystemError.TOO_MANY_FILES in this case\r\n            callback(null);\r\n            return;\r\n        }\r\n        \r\n        if (this.isDirectory) {\r\n            var visitedPath = stats.realPath || this.fullPath;\r\n    \r\n            if (visitedPaths.hasOwnProperty(visitedPath)) {\r\n                // Link cycle detected\r\n                callback(null);\r\n                return;\r\n            }\r\n            \r\n            visitedPaths[visitedPath] = true;\r\n        }\r\n        \r\n        if (!visitor(this) || this.isFile) {\r\n            callback(null);\r\n            return;\r\n        }\r\n        \r\n        this.getContents(function (err, entries, entriesStats) {\r\n            if (err) {\r\n                callback(err);\r\n                return;\r\n            }\r\n            \r\n            var counter = entries.length;\r\n            if (counter === 0) {\r\n                callback(null);\r\n                return;\r\n            }\r\n\r\n            function helperCallback(err) {\r\n                if (--counter === 0) {\r\n                    callback(null);\r\n                }\r\n            }\r\n            \r\n            var nextOptions = {\r\n                maxDepth: maxDepth,\r\n                maxEntriesCounter: maxEntriesCounter\r\n            };\r\n            \r\n            entries.forEach(function (entry, index) {\r\n                var stats = entriesStats[index];\r\n                entry._visitHelper(stats, visitedPaths, visitor, nextOptions, helperCallback);\r\n            });\r\n        }.bind(this));\r\n    };\r\n    \r\n    /**\r\n     * Visit this entry and its descendents with the supplied visitor function.\r\n     * Correctly handles symbolic link cycles and options can be provided to limit\r\n     * search depth and total number of entries visited. No particular traversal\r\n     * order is guaranteed; instead of relying on such an order, it is preferable\r\n     * to use the visit function to build a list of visited entries, sort those\r\n     * entries as desired, and then process them. Whenever possible, deep\r\n     * filesystem traversals should use this method. \r\n     *\r\n     * @param {function(FileSystemEntry): boolean} visitor - A visitor function, which is\r\n     *      applied to this entry and all descendent FileSystemEntry objects. If the function returns\r\n     *      false for a particular Directory entry, that directory\'s descendents will not be visited.\r\n     * @param {{maxDepth: number=, maxEntries: number=}=} options\r\n     * @param {function(?string)=} callback Callback with single FileSystemError string parameter.\r\n     */\r\n    FileSystemEntry.prototype.visit = function (visitor, options, callback) {\r\n        if (typeof options === "function") {\r\n            callback = options;\r\n            options = {};\r\n        } else {\r\n            if (options === undefined) {\r\n                options = {};\r\n            }\r\n            \r\n            callback = callback || function () {};\r\n        }\r\n        \r\n        if (options.maxDepth === undefined) {\r\n            options.maxDepth = VISIT_DEFAULT_MAX_DEPTH;\r\n        }\r\n        \r\n        if (options.maxEntries === undefined) {\r\n            options.maxEntries = VISIT_DEFAULT_MAX_ENTRIES;\r\n        }\r\n\r\n        options.maxEntriesCounter = { value: options.maxEntries };\r\n        \r\n        this.stat(function (err, stats) {\r\n            if (err) {\r\n                callback(err);\r\n                return;\r\n            }\r\n            \r\n            this._visitHelper(stats, {}, visitor, options, function (err) {\r\n                if (callback) {\r\n                    if (err) {\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    \r\n                    if (options.maxEntriesCounter.value < 0) {\r\n                        callback(FileSystemError.TOO_MANY_ENTRIES);\r\n                        return;\r\n                    }\r\n                    \r\n                    callback(null);\r\n                }\r\n            }.bind(this));\r\n        }.bind(this));\r\n    };\r\n    \r\n    // Export this class\r\n    module.exports = FileSystemEntry;\r\n});\r\n\n//# sourceURL=/filesystem/FileSystemEntry.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define */\r\n\r\ndefine(\'filesystem/Directory\',[\'require\',\'exports\',\'module\',\'filesystem/FileSystemEntry\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    var FileSystemEntry = require("filesystem/FileSystemEntry");\r\n    \r\n    /*\r\n     * @constructor\r\n     * Model for a file system Directory.\r\n     *\r\n     * This class should *not* be instantiated directly. Use FileSystem.getDirectoryForPath,\r\n     * FileSystem.resolve, or Directory.getContents to create an instance of this class.\r\n     *\r\n     * Note: Directory.fullPath always has a trailing slash.\r\n     *\r\n     * See the FileSystem class for more details.\r\n     *\r\n     * @param {!string} fullPath The full path for this Directory.\r\n     * @param {!FileSystem} fileSystem The file system associated with this Directory.\r\n     */\r\n    function Directory(fullPath, fileSystem) {\r\n        this._isDirectory = true;\r\n        FileSystemEntry.call(this, fullPath, fileSystem);\r\n    }\r\n    \r\n    Directory.prototype = Object.create(FileSystemEntry.prototype);\r\n    Directory.prototype.constructor = Directory;\r\n    Directory.prototype.parentClass = FileSystemEntry.prototype;\r\n    \r\n    /**\r\n     * The contents of this directory. This "private" property is used by FileSystem.\r\n     * @type {Array<FileSystemEntry>}\r\n     */\r\n    Directory.prototype._contents = null;\r\n\r\n    /**\r\n     * The stats for the contents of this directory, such that this._contentsStats[i]\r\n     * corresponds to this._contents[i].\r\n     * @type {Array.<FileSystemStats>}\r\n     */\r\n    Directory.prototype._contentsStats = null;\r\n    \r\n    /**\r\n     * The stats errors for the contents of this directory.\r\n     * @type {object.<string: string>} fullPaths are mapped to FileSystemError strings\r\n     */\r\n    Directory.prototype._contentsStatsErrors = null;\r\n    \r\n    /**\r\n     * Clear any cached data for this directory. By default, we clear the contents\r\n     * of immediate children as well, because in some cases file watchers fail \r\n     * provide precise change notifications. (Sometimes, like after a "git\r\n     * checkout", they just report that some directory has changed when in fact\r\n     * many of the file within the directory have changed.\r\n     * \r\n     * @private\r\n     * @param {boolean=} preserveImmediateChildren\r\n     */\r\n    Directory.prototype._clearCachedData = function (preserveImmediateChildren) {\r\n        FileSystemEntry.prototype._clearCachedData.apply(this);\r\n        \r\n        if (!preserveImmediateChildren) {\r\n            if (this._contents) {\r\n                this._contents.forEach(function (child) {\r\n                    child._clearCachedData(true);\r\n                });\r\n            } else {\r\n                // No cached _contents, but child entries may still exist.\r\n                // Scan the full index to catch all of them.\r\n                var dirPath = this.fullPath;\r\n                this._fileSystem._index.visitAll(function (entry) {\r\n                    if (entry.parentPath === dirPath) {\r\n                        entry._clearCachedData(true);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        \r\n        this._contents = undefined;\r\n        this._contentsStats = undefined;\r\n        this._contentsStatsErrors = undefined;\r\n    };\r\n    \r\n    /**\r\n     * Apply each callback in a list to the provided arguments. Callbacks\r\n     * can throw without preventing other callbacks from being applied.\r\n     * \r\n     * @private\r\n     * @param {Array.<function>} callbacks The callbacks to apply\r\n     * @param {Array} args The arguments to which each callback is applied\r\n     */\r\n    function _applyAllCallbacks(callbacks, args) {\r\n        if (callbacks.length > 0) {\r\n            var callback = callbacks.pop();\r\n            try {\r\n                callback.apply(undefined, args);\r\n            } finally {\r\n                _applyAllCallbacks(callbacks, args);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Read the contents of a Directory. \r\n     *\r\n     * @param {Directory} directory Directory whose contents you want to get\r\n     * @param {function (?string, Array.<FileSystemEntry>=, Array.<FileSystemStats>=, Object.<string, string>=)} callback\r\n     *          Callback that is passed an error code or the stat-able contents\r\n     *          of the directory along with the stats for these entries and a\r\n     *          fullPath-to-FileSystemError string map of unstat-able entries\r\n     *          and their stat errors. If there are no stat errors then the last\r\n     *          parameter shall remain undefined.\r\n     */\r\n    Directory.prototype.getContents = function (callback) {\r\n        if (this._contentsCallbacks) {\r\n            // There is already a pending call for this directory\'s contents.\r\n            // Push the new callback onto the stack and return.\r\n            this._contentsCallbacks.push(callback);\r\n            return;\r\n        }\r\n\r\n        // Return cached contents if the directory is watched\r\n        if (this._contents) {\r\n            callback(null, this._contents, this._contentsStats, this._contentsStatsErrors);\r\n            return;\r\n        }\r\n        \r\n        this._contentsCallbacks = [callback];\r\n        \r\n        this._impl.readdir(this.fullPath, function (err, names, stats) {\r\n            var contents = [],\r\n                contentsStats = [],\r\n                contentsStatsErrors;\r\n            \r\n            if (err) {\r\n                this._clearCachedData();\r\n            } else {\r\n                // Use the "relaxed" parameter to _isWatched because it\'s OK to\r\n                // cache data even while watchers are still starting up\r\n                var watched = this._isWatched(true);\r\n                \r\n                names.forEach(function (name, index) {\r\n                    var entryPath = this.fullPath + name;\r\n                    \r\n                    if (this._fileSystem._indexFilter(entryPath, name)) {\r\n                        var entryStats = stats[index],\r\n                            entry;\r\n                        \r\n                        // Note: not all entries necessarily have associated stats.\r\n                        if (typeof entryStats === "string") {\r\n                            // entryStats is an error string\r\n                            if (contentsStatsErrors === undefined) {\r\n                                contentsStatsErrors = {};\r\n                            }\r\n                            contentsStatsErrors[entryPath] = entryStats;\r\n                        } else {\r\n                            // entryStats is a FileSystemStats object\r\n                            if (entryStats.isFile) {\r\n                                entry = this._fileSystem.getFileForPath(entryPath);\r\n                            } else {\r\n                                entry = this._fileSystem.getDirectoryForPath(entryPath);\r\n                            }\r\n                            \r\n                            if (watched) {\r\n                                entry._stat = entryStats;\r\n                            }\r\n                            \r\n                            contents.push(entry);\r\n                            contentsStats.push(entryStats);\r\n                        }\r\n                    }\r\n                }, this);\r\n\r\n                if (watched) {\r\n                    this._contents = contents;\r\n                    this._contentsStats = contentsStats;\r\n                    this._contentsStatsErrors = contentsStatsErrors;\r\n                }\r\n            }\r\n            \r\n            // Reset the callback list before we begin calling back so that\r\n            // synchronous reentrant calls are handled correctly.\r\n            var currentCallbacks = this._contentsCallbacks;\r\n            \r\n            this._contentsCallbacks = null;\r\n            \r\n            // Invoke all saved callbacks\r\n            var callbackArgs = [err, contents, contentsStats, contentsStatsErrors];\r\n            _applyAllCallbacks(currentCallbacks, callbackArgs);\r\n        }.bind(this));\r\n    };\r\n    \r\n    /**\r\n     * Create a directory\r\n     *\r\n     * @param {function (?string, FileSystemStats=)=} callback Callback resolved with a\r\n     *      FileSystemError string or the stat object for the created directory.\r\n     */\r\n    Directory.prototype.create = function (callback) {\r\n        callback = callback || function () {};\r\n        \r\n        // Block external change events until after the write has finished\r\n        this._fileSystem._beginChange();\r\n        \r\n        this._impl.mkdir(this._path, function (err, stat) {\r\n            if (err) {\r\n                this._clearCachedData();\r\n                try {\r\n                    callback(err);\r\n                    return;\r\n                } finally {\r\n                    // Unblock external change events\r\n                    this._fileSystem._endChange();\r\n                }\r\n            }\r\n\r\n            var parent = this._fileSystem.getDirectoryForPath(this.parentPath);\r\n            \r\n            // Update internal filesystem state\r\n            if (this._isWatched()) {\r\n                this._stat = stat;\r\n            }\r\n            \r\n            this._fileSystem._handleDirectoryChange(parent, function (added, removed) {\r\n                try {\r\n                    callback(null, stat);\r\n                } finally {\r\n                    this._fileSystem._fireChangeEvent(parent, added, removed);\r\n                    // Unblock external change events\r\n                    this._fileSystem._endChange();\r\n                }\r\n            }.bind(this));\r\n        }.bind(this));\r\n    };\r\n    \r\n    // Export this class\r\n    module.exports = Directory;\r\n});\r\n\n//# sourceURL=/filesystem/Directory.js'),eval("/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define */\r\n\r\ndefine('filesystem/File',['require','exports','module','filesystem/FileSystemEntry','filesystem/FileSystemError'],function (require, exports, module) {\r\n    \"use strict\";\r\n    \r\n    var FileSystemEntry = require(\"filesystem/FileSystemEntry\"),\r\n        FileSystemError = require(\"filesystem/FileSystemError\");\r\n    \r\n    \r\n    /*\r\n     * @constructor\r\n     * Model for a File.\r\n     *\r\n     * This class should *not* be instantiated directly. Use FileSystem.getFileForPath,\r\n     * FileSystem.resolve, or Directory.getContents to create an instance of this class.\r\n     *\r\n     * See the FileSystem class for more details.\r\n     *\r\n     * @param {!string} fullPath The full path for this File.\r\n     * @param {!FileSystem} fileSystem The file system associated with this File.\r\n     */\r\n    function File(fullPath, fileSystem) {\r\n        this._isFile = true;\r\n        FileSystemEntry.call(this, fullPath, fileSystem);\r\n    }\r\n    \r\n    File.prototype = Object.create(FileSystemEntry.prototype);\r\n    File.prototype.constructor = File;\r\n    File.prototype.parentClass = FileSystemEntry.prototype;\r\n    \r\n    /**\r\n     * Cached contents of this file. This value is nullable but should NOT be undefined.\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    File.prototype._contents = null;\r\n    \r\n    /**\r\n     * Consistency hash for this file. Reads and writes update this value, and\r\n     * writes confirm the hash before overwriting existing files. The type of\r\n     * this object is dependent on the FileSystemImpl; the only constraint is\r\n     * that === can be used as an equality relation on hashes.\r\n     * @private\r\n     * @type {?object}\r\n     */\r\n    File.prototype._hash = null;\r\n    \r\n    /**\r\n     * Clear any cached data for this file. Note that this explicitly does NOT\r\n     * clear the file's hash.\r\n     * @private\r\n     */\r\n    File.prototype._clearCachedData = function () {\r\n        FileSystemEntry.prototype._clearCachedData.apply(this);\r\n        this._contents = null;\r\n    };\r\n    \r\n    /**\r\n     * Read a file.\r\n     *\r\n     * @param {Object=} options Currently unused.\r\n     * @param {function (?string, string=, FileSystemStats=)} callback Callback that is passed the\r\n     *              FileSystemError string or the file's contents and its stats.\r\n     */\r\n    File.prototype.read = function (options, callback) {\r\n        if (typeof (options) === \"function\") {\r\n            callback = options;\r\n            options = {};\r\n        }\r\n        \r\n        // We don't need to check isWatched() here because contents are only saved\r\n        // for watched files. Note that we need to explicitly test this._contents\r\n        // for a default value; otherwise it could be the empty string, which is\r\n        // falsey.\r\n        if (this._contents !== null && this._stat) {\r\n            callback(null, this._contents, this._stat);\r\n            return;\r\n        }\r\n        \r\n        var watched = this._isWatched();\r\n        if (watched) {\r\n            options.stat = this._stat;\r\n        }\r\n        \r\n        this._impl.readFile(this._path, options, function (err, data, stat) {\r\n            if (err) {\r\n                this._clearCachedData();\r\n                callback(err);\r\n                return;\r\n            }\r\n            \r\n            // Always store the hash\r\n            this._hash = stat._hash;\r\n            \r\n            // Only cache data for watched files\r\n            if (watched) {\r\n                this._stat = stat;\r\n                this._contents = data;\r\n            }\r\n            \r\n            callback(err, data, stat);\r\n        }.bind(this));\r\n    };\r\n    \r\n    /**\r\n     * Write a file.\r\n     *\r\n     * @param {string} data Data to write.\r\n     * @param {object=} options Currently unused.\r\n     * @param {function (?string, FileSystemStats=)=} callback Callback that is passed the\r\n     *              FileSystemError string or the file's new stats.\r\n     */\r\n    File.prototype.write = function (data, options, callback) {\r\n        if (typeof options === \"function\") {\r\n            callback = options;\r\n            options = {};\r\n        } else {\r\n            if (options === undefined) {\r\n                options = {};\r\n            }\r\n            \r\n            callback = callback || function () {};\r\n        }\r\n        \r\n        // Request a consistency check if the write is not blind\r\n        if (!options.blind) {\r\n            options.expectedHash = this._hash; \r\n            options.expectedContents = this._contents;\r\n        }\r\n        \r\n        // Block external change events until after the write has finished\r\n        this._fileSystem._beginChange();\r\n        \r\n        this._impl.writeFile(this._path, data, options, function (err, stat, created) {\r\n            if (err) {\r\n                this._clearCachedData();\r\n                try {\r\n                    callback(err);\r\n                    return;\r\n                } finally {\r\n                    // Always unblock external change events\r\n                    this._fileSystem._endChange();\r\n                }\r\n            }\r\n            \r\n            // Always store the hash\r\n            this._hash = stat._hash;\r\n            \r\n            // Only cache data for watched files\r\n            if (this._isWatched()) {\r\n                this._stat = stat;\r\n                this._contents = data;\r\n            }\r\n            \r\n            if (created) {\r\n                var parent = this._fileSystem.getDirectoryForPath(this.parentPath);\r\n                this._fileSystem._handleDirectoryChange(parent, function (added, removed) {\r\n                    try {\r\n                        // Notify the caller\r\n                        callback(null, stat);\r\n                    } finally {\r\n                        // If the write succeeded, fire a synthetic change event\r\n                        this._fileSystem._fireChangeEvent(parent, added, removed);\r\n                        \r\n                        // Always unblock external change events\r\n                        this._fileSystem._endChange();\r\n                    }\r\n                }.bind(this));\r\n            } else {\r\n                try {\r\n                    // Notify the caller\r\n                    callback(null, stat);\r\n                } finally {\r\n                    // existing file modified\r\n                    this._fileSystem._fireChangeEvent(this);\r\n                    \r\n                    // Always unblock external change events\r\n                    this._fileSystem._endChange();\r\n                }\r\n            }\r\n        }.bind(this));\r\n    };\r\n    \r\n    // Export this class\r\n    module.exports = File;\r\n});\r\n\n//# sourceURL=/filesystem/File.js"),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define */\r\n\r\n/**\r\n * FileIndex is an internal module used by FileSystem to maintain an index of all files and directories.\r\n *\r\n * This module is *only* used by FileSystem, and should not be called directly.\r\n */\r\ndefine(\'filesystem/FileIndex\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    /**\r\n     * @constructor\r\n     */\r\n    function FileIndex() {\r\n        this._index = {};\r\n    }\r\n    \r\n    /**\r\n     * Master index\r\n     * \r\n     * @type {Object.<string, File|Directory>} Maps a fullPath to a File or Directory object\r\n     */\r\n    FileIndex.prototype._index = null;\r\n    \r\n    /**\r\n     * Clear the file index cache.\r\n     */\r\n    FileIndex.prototype.clear = function () {\r\n        this._index = {};\r\n    };\r\n    \r\n    /**\r\n     * Visits every entry in the entire index; no stopping condition.\r\n     * @param {!function(FileSystemEntry, string):void} Called with an entry and its fullPath\r\n     */\r\n    FileIndex.prototype.visitAll = function (visitor) {\r\n        var path;\r\n        for (path in this._index) {\r\n            if (this._index.hasOwnProperty(path)) {\r\n                visitor(this._index[path], path);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Add an entry.\r\n     *\r\n     * @param {FileSystemEntry} entry The entry to add.\r\n     */\r\n    FileIndex.prototype.addEntry = function (entry) {\r\n        this._index[entry.fullPath] = entry;\r\n    };\r\n    \r\n    /**\r\n     * Remove an entry.\r\n     * \r\n     * @param {FileSystemEntry} entry The entry to remove.\r\n     */\r\n    FileIndex.prototype.removeEntry = function (entry) {\r\n        var path = entry.fullPath,\r\n            property,\r\n            member;\r\n        \r\n        function replaceMember(property) {\r\n            var member = entry[property];\r\n            if (typeof member === "function") {\r\n                entry[property] = function () {\r\n                    console.warn("FileSystemEntry used after being removed from index: ", path);\r\n                    return member.apply(entry, arguments);\r\n                };\r\n            }\r\n        }\r\n        \r\n        delete this._index[path];\r\n        \r\n        for (property in entry) {\r\n            if (entry.hasOwnProperty(property)) {\r\n                replaceMember(property);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Notify the index that an entry has been renamed. This updates\r\n     * all affected entries in the index.\r\n     *\r\n     * @param {string} oldPath\r\n     * @param {string} newPath\r\n     * @param {boolean} isDirectory\r\n     */\r\n    FileIndex.prototype.entryRenamed = function (oldPath, newPath, isDirectory) {\r\n        var path,\r\n            splitName = oldPath.split("/"),\r\n            finalPart = splitName.length - 1,\r\n            renameMap = {};\r\n        \r\n        // Find all entries affected by the rename and put into a separate map.\r\n        for (path in this._index) {\r\n            if (this._index.hasOwnProperty(path)) {\r\n                // See if we have a match. For directories, see if the path\r\n                // starts with the old name. This is safe since paths always end\r\n                // with \'/\'. For files, see if there is an exact match between\r\n                // the path and the old name.\r\n                if (isDirectory ? path.indexOf(oldPath) === 0 : path === oldPath) {\r\n                    renameMap[path] = newPath + path.substr(oldPath.length);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Do the rename. \r\n        for (path in renameMap) {\r\n            if (renameMap.hasOwnProperty(path)) {\r\n                var item = this._index[path];\r\n                \r\n                // Sanity check to make sure the item and path still match\r\n                console.assert(item.fullPath === path);\r\n                \r\n                delete this._index[path];\r\n                this._index[renameMap[path]] = item;\r\n                item._setPath(renameMap[path]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Returns the cached entry for the specified path, or undefined\r\n     * if the path has not been cached.\r\n     * \r\n     * @param {string} path The path of the entry to return.\r\n     * @return {File|Directory} The entry for the path, or undefined if it hasn\'t \r\n     *              been cached yet.\r\n     */\r\n    FileIndex.prototype.getEntry = function (path) {\r\n        return this._index[path];\r\n    };\r\n    \r\n    // Export public API\r\n    module.exports = FileIndex;\r\n});\r\n\n//# sourceURL=/filesystem/FileIndex.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define */\r\n\r\n/**\r\n * The FileSystemStats represents a particular FileSystemEntry\'s stats.\r\n */\r\ndefine(\'filesystem/FileSystemStats\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {{isFile: boolean, mtime: Date, size: Number, realPath: ?string, hash: object}} options\r\n     */\r\n    function FileSystemStats(options) {\r\n        var isFile = options.isFile;\r\n        \r\n        this._isFile = isFile;\r\n        this._isDirectory = !isFile;\r\n        this._mtime = options.mtime;\r\n        this._size = options.size;\r\n        this._hash = options.hash;\r\n        \r\n        var realPath = options.realPath;\r\n        if (realPath) {\r\n            if (!isFile && realPath[realPath.length - 1] !== "/") {\r\n                realPath += "/";\r\n            }\r\n        \r\n            this._realPath = realPath;\r\n        }\r\n    }\r\n    \r\n    // Add "isFile", "isDirectory", "mtime" and "size" getters\r\n    Object.defineProperties(FileSystemStats.prototype, {\r\n        "isFile": {\r\n            get: function () { return this._isFile; },\r\n            set: function () { throw new Error("Cannot set isFile"); }\r\n        },\r\n        "isDirectory": {\r\n            get: function () { return this._isDirectory; },\r\n            set: function () { throw new Error("Cannot set isDirectory"); }\r\n        },\r\n        "mtime": {\r\n            get: function () { return this._mtime; },\r\n            set: function () { throw new Error("Cannot set mtime"); }\r\n        },\r\n        "size": {\r\n            get: function () { return this._size; },\r\n            set: function () { throw new Error("Cannot set size"); }\r\n        },\r\n        "realPath": {\r\n            get: function () { return this._realPath; },\r\n            set: function () { throw new Error("Cannot set realPath"); }\r\n        }\r\n    });\r\n    \r\n    /**\r\n     * Whether or not this is a stats object for a file\r\n     * @type {boolean}\r\n     */\r\n    FileSystemStats.prototype._isFile = false;\r\n\r\n    /**\r\n     * Whether or not this is a stats object for a directory\r\n     * @type {boolean}\r\n     */\r\n    FileSystemStats.prototype._isDirectory = false;\r\n    \r\n    /**\r\n     * Modification time for a file\r\n     * @type {Date}\r\n     */\r\n    FileSystemStats.prototype._mtime = null;\r\n\r\n    /**\r\n     * Size in bytes of a file\r\n     * @type {Number}\r\n     */\r\n    FileSystemStats.prototype._size = null;\r\n\r\n    /**\r\n     * Consistency hash for a file\r\n     * @type {object}\r\n     */\r\n    FileSystemStats.prototype._hash = null;\r\n    \r\n    /**\r\n     * The canonical path of this file or directory ONLY if it is a symbolic link,\r\n     * and null otherwise.\r\n     * \r\n     * @type {?string}\r\n     */\r\n    FileSystemStats.prototype._realPath = null;\r\n\r\n    module.exports = FileSystemStats;\r\n});\r\n\n//# sourceURL=/filesystem/FileSystemStats.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4,\r\nmaxerr: 50, browser: true */\r\n/*global $, define, brackets, WebSocket, ArrayBuffer, Uint32Array */\r\n\r\ndefine(\'utils/NodeConnection\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    /** @define{number} Connection attempts to make before failing */\r\n    var CONNECTION_ATTEMPTS = 10;\r\n\r\n    /**\r\n     * @define{number} Milliseconds to wait before a particular connection\r\n     *     attempt is considered failed.\r\n     *\r\n     * NOTE: It\'s okay for the connection timeout to be long because the\r\n     * expected behavior of WebSockets is to send a "close" event as soon\r\n     * as they realize they can\'t connect. So, we should rarely hit the\r\n     * connection timeout even if we try to connect to a port that isn\'t open.\r\n     */\r\n    var CONNECTION_TIMEOUT  = 10000; // 10 seconds\r\n\r\n    /** @define{number} Milliseconds to wait before retrying connecting */\r\n    var RETRY_DELAY         = 500;   // 1/2 second\r\n\r\n    /** @define {number} Maximum value of the command ID counter */\r\n    var MAX_COUNTER_VALUE = 4294967295; // 2^32 - 1\r\n\r\n    /**\r\n     * @private\r\n     * Helper function to auto-reject a deferred after a given amount of time.\r\n     * If the deferred is resolved/rejected manually, then the timeout is\r\n     * automatically cleared.\r\n     */\r\n    function setDeferredTimeout(deferred, delay) {\r\n        var timer = setTimeout(function () {\r\n            deferred.reject("timeout");\r\n        }, delay);\r\n        deferred.always(function () { clearTimeout(timer); });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Helper function to attempt a single connection to the node server\r\n     */\r\n    function attemptSingleConnect() {\r\n        var deferred = $.Deferred();\r\n        var port = null;\r\n        var ws = null;\r\n        setDeferredTimeout(deferred, CONNECTION_TIMEOUT);\r\n\r\n        appshell.app.getNodeState(function (err, nodePort) {\r\n            if (!err && nodePort && deferred.state() !== "rejected") {\r\n                port = nodePort;\r\n                ws = new WebSocket("ws://localhost:" + port);\r\n\r\n                // Expect ArrayBuffer objects from Node when receiving binary\r\n                // data instead of DOM Blobs, which are the default.\r\n                ws.binaryType = "arraybuffer";\r\n\r\n                // If the server port isn\'t open, we get a close event\r\n                // at some point in the future (and will not get an onopen\r\n                // event)\r\n                ws.onclose = function () {\r\n                    deferred.reject("WebSocket closed");\r\n                };\r\n\r\n                ws.onopen = function () {\r\n                    // If we successfully opened, remove the old onclose\r\n                    // handler (which was present to detect failure to\r\n                    // connect at all).\r\n                    ws.onclose = null;\r\n                    deferred.resolveWith(null, [ws, port]);\r\n                };\r\n            } else {\r\n                deferred.reject("appshell.app.getNodeState error: " + err);\r\n            }\r\n        });\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * Provides an interface for interacting with the node server.\r\n     */\r\n    function NodeConnection() {\r\n        this.domains = {};\r\n        this._registeredModules = [];\r\n        this._pendingInterfaceRefreshDeferreds = [];\r\n        this._pendingCommandDeferreds = [];\r\n    }\r\n\r\n    /**\r\n     * @type{Object}\r\n     * Exposes the domains registered with the server. This object will\r\n     * have a property for each registered domain. Each of those properties\r\n     * will be an object containing properties for all the commands in that\r\n     * domain. So, myConnection.base.enableDebugger would point to the function\r\n     * to call to enable the debugger.\r\n     *\r\n     * This object is automatically replaced every time the API changes (based\r\n     * on the base:newDomains event from the server). Therefore, code that\r\n     * uses this object should not keep their own pointer to the domain property.\r\n     */\r\n    NodeConnection.prototype.domains = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type{Array.<string>}\r\n     * List of module pathnames that should be re-registered if there is\r\n     * a disconnection/connection (i.e. if the server died).\r\n     */\r\n    NodeConnection.prototype._registeredModules = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type{WebSocket}\r\n     * The connection to the server\r\n     */\r\n    NodeConnection.prototype._ws = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type{?number}\r\n     * The port the WebSocket is currently connected to\r\n     */\r\n    NodeConnection.prototype._port = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type{number}\r\n     * Unique ID for commands\r\n     */\r\n    NodeConnection.prototype._commandCount = 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type{boolean}\r\n     * Whether to attempt reconnection if connection fails\r\n     */\r\n    NodeConnection.prototype._autoReconnect = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type{Array.<jQuery.Deferred>}\r\n     * List of deferred objects that should be resolved pending\r\n     * a successful refresh of the API\r\n     */\r\n    NodeConnection.prototype._pendingInterfaceRefreshDeferreds = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type{Array.<jQuery.Deferred>}\r\n     * Array (indexed on command ID) of deferred objects that should be\r\n     * resolved/rejected with the response of commands.\r\n     */\r\n    NodeConnection.prototype._pendingCommandDeferreds = null;\r\n\r\n    /**\r\n     * @private\r\n     * @return {number} The next command ID to use. Always representable as an\r\n     * unsigned 32-bit integer.\r\n     */\r\n    NodeConnection.prototype._getNextCommandID = function () {\r\n        var nextID;\r\n\r\n        if (this._commandCount > MAX_COUNTER_VALUE) {\r\n            nextID = this._commandCount = 0;\r\n        } else {\r\n            nextID = this._commandCount++;\r\n        }\r\n\r\n        return nextID;\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Helper function to do cleanup work when a connection fails\r\n     */\r\n    NodeConnection.prototype._cleanup = function () {\r\n        // clear out the domains, since we may get different ones\r\n        // on the next connection\r\n        this.domains = {};\r\n\r\n        // shut down the old connection if there is one\r\n        if (this._ws && this._ws.readyState !== WebSocket.CLOSED) {\r\n            try {\r\n                this._ws.close();\r\n            } catch (e) { }\r\n        }\r\n        var failedDeferreds = this._pendingInterfaceRefreshDeferreds\r\n            .concat(this._pendingCommandDeferreds);\r\n        failedDeferreds.forEach(function (d) {\r\n            d.reject("cleanup");\r\n        });\r\n        this._pendingInterfaceRefreshDeferreds = [];\r\n        this._pendingCommandDeferreds = [];\r\n\r\n        this._ws = null;\r\n        this._port = null;\r\n    };\r\n\r\n    /**\r\n     * Connect to the node server. After connecting, the NodeConnection\r\n     * object will trigger a "close" event when the underlying socket\r\n     * is closed. If the connection is set to autoReconnect, then the\r\n     * event will also include a jQuery promise for the connection.\r\n     *\r\n     * @param {boolean} autoReconnect Whether to automatically try to\r\n     *    reconnect to the server if the connection succeeds and then\r\n     *    later disconnects. Note if this connection fails initially, the\r\n     *    autoReconnect flag is set to false. Future calls to connect()\r\n     *    can reset it to true\r\n     * @return {jQuery.Promise} Promise that resolves/rejects when the\r\n     *    connection succeeds/fails\r\n     */\r\n    NodeConnection.prototype.connect = function (autoReconnect) {\r\n        var self = this;\r\n        self._autoReconnect = autoReconnect;\r\n        var deferred = $.Deferred();\r\n        var attemptCount = 0;\r\n        var attemptTimestamp = null;\r\n\r\n        // Called after a successful connection to do final setup steps\r\n        function registerHandlersAndDomains(ws, port) {\r\n            // Called if we succeed at the final setup\r\n            function success() {\r\n                self._ws.onclose = function () {\r\n                    if (self._autoReconnect) {\r\n                        var $promise = self.connect(true);\r\n                        $(self).triggerHandler("close", [$promise]);\r\n                    } else {\r\n                        self._cleanup();\r\n                        $(self).triggerHandler("close");\r\n                    }\r\n                };\r\n                deferred.resolve();\r\n            }\r\n            // Called if we fail at the final setup\r\n            function fail(err) {\r\n                self._cleanup();\r\n                deferred.reject(err);\r\n            }\r\n\r\n            self._ws = ws;\r\n            self._port = port;\r\n            self._ws.onmessage = self._receive.bind(self);\r\n\r\n            // refresh the current domains, then re-register any\r\n            // "autoregister" modules\r\n            self._refreshInterface().then(\r\n                function () {\r\n                    if (self._registeredModules.length > 0) {\r\n                        self.loadDomains(self._registeredModules, false).then(\r\n                            success,\r\n                            fail\r\n                        );\r\n                    } else {\r\n                        success();\r\n                    }\r\n                },\r\n                fail\r\n            );\r\n        }\r\n\r\n        // Repeatedly tries to connect until we succeed or until we\'ve\r\n        // failed CONNECTION_ATTEMPT times. After each attempt, waits\r\n        // at least RETRY_DELAY before trying again.\r\n        function doConnect() {\r\n            attemptCount++;\r\n            attemptTimestamp = new Date();\r\n            attemptSingleConnect().then(\r\n                registerHandlersAndDomains, // succeded\r\n                function () { // failed this attempt, possibly try again\r\n                    if (attemptCount < CONNECTION_ATTEMPTS) { //try again\r\n                        // Calculate how long we should wait before trying again\r\n                        var now = new Date();\r\n                        var delay = Math.max(\r\n                            RETRY_DELAY - (now - attemptTimestamp),\r\n                            1\r\n                        );\r\n                        setTimeout(doConnect, delay);\r\n                    } else { // too many attempts, give up\r\n                        deferred.reject("Max connection attempts reached");\r\n                    }\r\n                }\r\n            );\r\n        }\r\n\r\n        // Start the connection process\r\n        self._cleanup();\r\n        doConnect();\r\n\r\n        return deferred.promise();\r\n    };\r\n\r\n    /**\r\n     * Determines whether the NodeConnection is currently connected\r\n     * @return{boolean} Whether the NodeConnection is connected.\r\n     */\r\n    NodeConnection.prototype.connected = function () {\r\n        return !!(this._ws && this._ws.readyState === WebSocket.OPEN);\r\n    };\r\n\r\n    /**\r\n     * Explicitly disconnects from the server. Note that even if\r\n     * autoReconnect was set to true at connection time, the connection\r\n     * will not reconnect after this call. Reconnection can be manually done\r\n     * by calling connect() again.\r\n     */\r\n    NodeConnection.prototype.disconnect = function () {\r\n        this._autoReconnect = false;\r\n        this._cleanup();\r\n    };\r\n\r\n    /**\r\n     * Load domains into the server by path\r\n     * @param {Array.<string>} List of absolute paths to load\r\n     * @param {boolean} autoReload Whether to auto-reload the domains if the server\r\n     *    fails and restarts. Note that the reload is initiated by the\r\n     *    client, so it will only happen after the client reconnects.\r\n     * @return {jQuery.Promise} Promise that resolves after the load has\r\n     *    succeeded and the new API is availale at NodeConnection.domains,\r\n     *    or that rejects on failure.\r\n     */\r\n    NodeConnection.prototype.loadDomains = function (paths, autoReload) {\r\n        var deferred = $.Deferred();\r\n        setDeferredTimeout(deferred, CONNECTION_TIMEOUT);\r\n        var pathArray = paths;\r\n        if (!Array.isArray(paths)) {\r\n            pathArray = [paths];\r\n        }\r\n\r\n        if (autoReload) {\r\n            Array.prototype.push.apply(this._registeredModules, pathArray);\r\n        }\r\n\r\n        if (this.domains.base && this.domains.base.loadDomainModulesFromPaths) {\r\n            this.domains.base.loadDomainModulesFromPaths(pathArray).then(\r\n                function (success) { // command call succeeded\r\n                    if (!success) {\r\n                        // response from commmand call was "false" so we know\r\n                        // the actual load failed.\r\n                        deferred.reject("loadDomainModulesFromPaths failed");\r\n                    }\r\n                    // if the load succeeded, we wait for the API refresh to\r\n                    // resolve the deferred.\r\n                },\r\n                function (reason) { // command call failed\r\n                    deferred.reject("Unable to load one of the modules: " + pathArray + (reason ? ", reason: " + reason : ""));\r\n                }\r\n            );\r\n\r\n            this._pendingInterfaceRefreshDeferreds.push(deferred);\r\n        } else {\r\n            deferred.reject("this.domains.base is undefined");\r\n        }\r\n\r\n        return deferred.promise();\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Sends a message over the WebSocket. Automatically JSON.stringifys\r\n     * the message if necessary.\r\n     * @param {Object|string} m Object to send. Must be JSON.stringify-able.\r\n     */\r\n    NodeConnection.prototype._send = function (m) {\r\n        if (this.connected()) {\r\n\r\n            // Convert the message to a string\r\n            var messageString = null;\r\n            if (typeof m === "string") {\r\n                messageString = m;\r\n            } else {\r\n                try {\r\n                    messageString = JSON.stringify(m);\r\n                } catch (stringifyError) {\r\n                    console.error("[NodeConnection] Unable to stringify message in order to send: " + stringifyError.message);\r\n                }\r\n            }\r\n\r\n            // If we succeded in making a string, try to send it\r\n            if (messageString) {\r\n                try {\r\n                    this._ws.send(messageString);\r\n                } catch (sendError) {\r\n                    console.error("[NodeConnection] Error sending message: " + sendError.message);\r\n                }\r\n            }\r\n        } else {\r\n            console.error("[NodeConnection] Not connected to node, unable to send.");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Handler for receiving events on the WebSocket. Parses the message\r\n     * and dispatches it appropriately.\r\n     * @param {WebSocket.Message} message Message object from WebSocket\r\n     */\r\n    NodeConnection.prototype._receive = function (message) {\r\n        var responseDeferred = null;\r\n        var data = message.data;\r\n        var m;\r\n\r\n        if (message.data instanceof ArrayBuffer) {\r\n            // The first four bytes encode the command ID as an unsigned 32-bit integer\r\n            if (data.byteLength < 4) {\r\n                console.error("[NodeConnection] received malformed binary message");\r\n                return;\r\n            }\r\n\r\n            var header = data.slice(0, 4),\r\n                body = data.slice(4),\r\n                headerView = new Uint32Array(header),\r\n                id = headerView[0];\r\n\r\n            // Unpack the binary message into a commandResponse\r\n            m = {\r\n                type: "commandResponse",\r\n                message: {\r\n                    id: id,\r\n                    response: body\r\n                }\r\n            };\r\n        } else {\r\n            try {\r\n                m = JSON.parse(data);\r\n            } catch (e) {\r\n                console.error("[NodeConnection] received malformed message", message, e.message);\r\n                return;\r\n            }\r\n        }\r\n\r\n        switch (m.type) {\r\n        case "event":\r\n            var $this = $(this);\r\n\r\n            if (m.message.domain === "base" && m.message.event === "newDomains") {\r\n                this._refreshInterface();\r\n            }\r\n\r\n            // Event type for backwards compatibility for original design: "domain.event"\r\n            $this.triggerHandler(m.message.domain + "." + m.message.event,\r\n                                   m.message.parameters);\r\n\r\n            // Event type "domain:event"\r\n            $this.triggerHandler(m.message.domain + ":" + m.message.event,\r\n                                   m.message.parameters);\r\n            break;\r\n        case "commandResponse":\r\n            responseDeferred = this._pendingCommandDeferreds[m.message.id];\r\n            if (responseDeferred) {\r\n                responseDeferred.resolveWith(this, [m.message.response]);\r\n                delete this._pendingCommandDeferreds[m.message.id];\r\n            }\r\n            break;\r\n        case "commandError":\r\n            responseDeferred = this._pendingCommandDeferreds[m.message.id];\r\n            if (responseDeferred) {\r\n                responseDeferred.rejectWith(\r\n                    this,\r\n                    [m.message.message, m.message.stack]\r\n                );\r\n                delete this._pendingCommandDeferreds[m.message.id];\r\n            }\r\n            break;\r\n        case "error":\r\n            console.error("[NodeConnection] received error: " +\r\n                            m.message.message);\r\n            break;\r\n        default:\r\n            console.error("[NodeConnection] unknown event type: " + m.type);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Helper function for refreshing the interface in the "domain" property.\r\n     * Automatically called when the connection receives a base:newDomains\r\n     * event from the server, and also called at connection time.\r\n     */\r\n    NodeConnection.prototype._refreshInterface = function () {\r\n        var deferred = $.Deferred();\r\n        var self = this;\r\n\r\n        var pendingDeferreds = this._pendingInterfaceRefreshDeferreds;\r\n        this._pendingInterfaceRefreshDeferreds = [];\r\n        deferred.then(\r\n            function () {\r\n                pendingDeferreds.forEach(function (d) { d.resolve(); });\r\n            },\r\n            function (err) {\r\n                pendingDeferreds.forEach(function (d) { d.reject(err); });\r\n            }\r\n        );\r\n\r\n        function refreshInterfaceCallback(spec) {\r\n            function makeCommandFunction(domainName, commandSpec) {\r\n                return function () {\r\n                    var deferred = $.Deferred();\r\n                    var parameters = Array.prototype.slice.call(arguments, 0);\r\n                    var id = self._getNextCommandID();\r\n                    self._pendingCommandDeferreds[id] = deferred;\r\n                    self._send({id: id,\r\n                               domain: domainName,\r\n                               command: commandSpec.name,\r\n                               parameters: parameters\r\n                               });\r\n                    return deferred;\r\n                };\r\n            }\r\n\r\n            // TODO: Don\'t replace the domain object every time. Instead, merge.\r\n            self.domains = {};\r\n            self.domainEvents = {};\r\n            spec.forEach(function (domainSpec) {\r\n                self.domains[domainSpec.domain] = {};\r\n                domainSpec.commands.forEach(function (commandSpec) {\r\n                    self.domains[domainSpec.domain][commandSpec.name] =\r\n                        makeCommandFunction(domainSpec.domain, commandSpec);\r\n                });\r\n                self.domainEvents[domainSpec.domain] = {};\r\n                domainSpec.events.forEach(function (eventSpec) {\r\n                    var parameters = eventSpec.parameters;\r\n                    self.domainEvents[domainSpec.domain][eventSpec.name] = parameters;\r\n                });\r\n            });\r\n            deferred.resolve();\r\n        }\r\n\r\n        if (this.connected()) {\r\n            $.getJSON("http://localhost:" + this._port + "/api")\r\n                .done(refreshInterfaceCallback)\r\n                .fail(function (err) { deferred.reject(err); });\r\n        } else {\r\n            deferred.reject("Attempted to call _refreshInterface when not connected.");\r\n        }\r\n\r\n        return deferred.promise();\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Get the default timeout value\r\n     * @return {number} Timeout value in milliseconds\r\n     */\r\n    NodeConnection._getConnectionTimeout = function () {\r\n        return CONNECTION_TIMEOUT;\r\n    };\r\n\r\n    module.exports = NodeConnection;\r\n\r\n});\r\n\n//# sourceURL=/utils/NodeConnection.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define, $ */\r\n\r\ndefine(\'utils/NodeDomain\',[\'require\',\'exports\',\'module\',\'utils/NodeConnection\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    var NodeConnection = require("utils/NodeConnection");\r\n    \r\n    // Used to remove all listeners at once when the connection drops\r\n    var EVENT_NAMESPACE = ".NodeDomainEvent";\r\n    \r\n    /**\r\n     * Provides a simple abstraction for executing the commands of a single\r\n     * domain loaded via a NodeConnection. Automatically handles connection\r\n     * management and domain loading, and exposes each command in the domain as\r\n     * a promise-returning method that can safely be called regardless of the\r\n     * current status of the underlying connection. Example usage:\r\n     * \r\n     * var myDomain = new NodeDomain("someDomain", "/path/to/SomeDomainDef.js"),\r\n     *     $result = myDomain.exec("someCommand", arg1, arg2);\r\n     * \r\n     * $result.done(function (value) {\r\n     *     // the command succeeded!\r\n     * });\r\n     * \r\n     * $result.fail(function (err) {\r\n     *     // the command failed; act accordingly!\r\n     * });\r\n     * \r\n     * To handle domain events, just listen for the event on the domain:\r\n     * \r\n     * $(myDomain).on("someEvent", someHandler);\r\n     * \r\n     * @constructor\r\n     * @param {string} domainName Name of the registered Node Domain\r\n     * @param {string} domainPath Full path of the JavaScript Node domain specification\r\n     */\r\n    function NodeDomain(domainName, domainPath) {\r\n        var connection = new NodeConnection();\r\n        \r\n        this.connection = connection;\r\n        this._domainName = domainName;\r\n        this._domainPath = domainPath;\r\n        this._domainLoaded = false;\r\n        this._load = this._load.bind(this);\r\n        this._connectionPromise = connection.connect(true)\r\n            .then(this._load);\r\n        \r\n        $(connection).on("close", function (event, promise) {\r\n            $(this.connection).off(EVENT_NAMESPACE);\r\n            this._domainLoaded = false;\r\n            this._connectionPromise = promise.then(this._load);\r\n        }.bind(this));\r\n    }\r\n    \r\n    /** \r\n     * The underlying Node connection object for this domain.\r\n     * \r\n     * @type {!NodeConnection} \r\n     */\r\n    NodeDomain.prototype.connection = null;\r\n\r\n    /**\r\n     * A promise that is resolved once the NodeConnection is connected and the\r\n     * domain has been loaded.\r\n     * \r\n     * @type {?jQuery.Promise}\r\n     * @private\r\n     */\r\n    NodeDomain.prototype._connectionPromise = null;\r\n    \r\n    /**\r\n     * The name of this domain.\r\n     * \r\n     * @type {string}\r\n     * @private\r\n     */\r\n    NodeDomain.prototype._domainName = null;\r\n    \r\n    /**\r\n     * The path at which the Node definition of this domain resides.\r\n     * \r\n     * @type {string}\r\n     * @private\r\n     */\r\n    NodeDomain.prototype._domainPath = null;\r\n    \r\n    /**\r\n     * Whether or not the domain has been successfully loaded.\r\n     * \r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    NodeDomain.prototype._domainLoaded = false;\r\n    \r\n    /**\r\n     * Loads the domain via the underlying connection object and exposes the\r\n     * domain\'s commands as methods on this object. Assumes the underlying\r\n     * connection has already been opened.\r\n     * \r\n     * @return {jQuery.Promise} Resolves once the domain is been loaded.\r\n     * @private\r\n     */\r\n    NodeDomain.prototype._load = function () {\r\n        var connection = this.connection;\r\n        return connection.loadDomains(this._domainPath, true)\r\n            .done(function () {\r\n                this._domainLoaded = true;\r\n                this._connectionPromise = null;\r\n                \r\n                var eventNames = Object.keys(connection.domainEvents[this._domainName]);\r\n                eventNames.forEach(function (domainEvent) {\r\n                    var connectionEvent = this._domainName + ":" + domainEvent + EVENT_NAMESPACE;\r\n                    \r\n                    $(connection).on(connectionEvent, function () {\r\n                        var params = Array.prototype.slice.call(arguments, 1);\r\n                        $(this).triggerHandler(domainEvent, params);\r\n                    }.bind(this));\r\n                }, this);\r\n            }.bind(this))\r\n            .fail(function (err) {\r\n                console.error("[NodeDomain] Error loading domain \\"" + this._domainName + "\\": " + err);\r\n            }.bind(this));\r\n    };\r\n    \r\n    /**\r\n     * Synchronously determine whether the domain is ready; i.e., whether the\r\n     * connection is open and the domain is loaded.\r\n     * \r\n     * @return {boolean} Whether or not the domain is currently ready.\r\n     */\r\n    NodeDomain.prototype.ready = function () {\r\n        return this._domainLoaded && this.connection.connected();\r\n    };\r\n    \r\n    /**\r\n     * Get a promise that resolves when the connection is open and the domain\r\n     * is loaded.\r\n     *\r\n     * @return {jQuery.Promise}\r\n     */\r\n    NodeDomain.prototype.promise = function () {\r\n        if (this._connectionPromise) {\r\n            return this._connectionPromise;\r\n        } else {\r\n            var deferred = new $.Deferred();\r\n            \r\n            if (this.ready()) {\r\n                deferred.resolve();\r\n            } else {\r\n                deferred.reject();\r\n            }\r\n            \r\n            return deferred.promise();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Applies the named command from the domain to a list of parameters, which\r\n     * are passed as extra arguments to this method. If the connection is open\r\n     * and the domain is loaded, the function is applied immediately. Otherwise\r\n     * the function is applied as soon as the connection has been opened and the\r\n     * domain has finished loading.\r\n     * \r\n     * @param {string} name The name of the domain command to execute\r\n     * @return {jQuery.Promise} Resolves with the result of the command\r\n     */\r\n    NodeDomain.prototype.exec = function (name) {\r\n        var connection = this.connection,\r\n            params = Array.prototype.slice.call(arguments, 1),\r\n            execConnected = function () {\r\n                var domain  = connection.domains[this._domainName],\r\n                    fn      = domain && domain[name],\r\n                    execResult;\r\n        \r\n                if (fn) {\r\n                    execResult = fn.apply(domain, params);\r\n                } else {\r\n                    execResult = new $.Deferred().reject().promise();\r\n                }\r\n                return execResult;\r\n            }.bind(this);\r\n        \r\n        var result;\r\n        if (this.ready()) {\r\n            result = execConnected();\r\n        } else if (this._connectionPromise) {\r\n            result = this._connectionPromise.then(execConnected);\r\n        } else {\r\n            result = new $.Deferred.reject().promise();\r\n        }\r\n        return result;\r\n    };\r\n        \r\n    module.exports = NodeDomain;\r\n});\r\n\n//# sourceURL=/utils/NodeDomain.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define, appshell, $, window */\r\n\r\ndefine(\'fileSystemImpl\',[\'require\',\'exports\',\'module\',\'file/FileUtils\',\'filesystem/FileSystemStats\',\'filesystem/FileSystemError\',\'utils/NodeDomain\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    var FileUtils           = require("file/FileUtils"),\r\n        FileSystemStats     = require("filesystem/FileSystemStats"),\r\n        FileSystemError     = require("filesystem/FileSystemError"),\r\n        NodeDomain          = require("utils/NodeDomain");\r\n    \r\n    var FILE_WATCHER_BATCH_TIMEOUT = 200;   // 200ms - granularity of file watcher changes\r\n    \r\n    var _changeCallback,            // Callback to notify FileSystem of watcher changes\r\n        _offlineCallback,           // Callback to notify FileSystem that watchers are offline\r\n        _changeTimeout,             // Timeout used to batch up file watcher changes\r\n        _pendingChanges = {};       // Pending file watcher changes\r\n    \r\n    var _bracketsPath   = FileUtils.getNativeDirectoryPath(),\r\n        _modulePath     = FileUtils.getNativeModuleDirectoryPath(module),\r\n        _nodePath       = "node/FileWatcherDomain",\r\n        _domainPath     = [_bracketsPath, _modulePath, _nodePath].join("/"),\r\n        _nodeDomain     = new NodeDomain("fileWatcher", _domainPath);\r\n    \r\n    var _isRunningOnWindowsXP = navigator.userAgent.indexOf("Windows NT 5.") >= 0;\r\n    \r\n    // If the connection closes, notify the FileSystem that watchers have gone offline.\r\n    $(_nodeDomain.connection).on("close", function (event, promise) {\r\n        if (_offlineCallback) {\r\n            _offlineCallback();\r\n        }\r\n    });\r\n    \r\n    /**\r\n     * Enqueue a file change event for eventual reporting back to the FileSystem.\r\n     * \r\n     * @param {string} changedPath The path that was changed\r\n     * @param {boolean} needsStats Whether or not the eventual change event should include stats\r\n     * @private\r\n     */\r\n    function _enqueueChange(changedPath, needsStats) {\r\n        _pendingChanges[changedPath] = _pendingChanges[changedPath] || needsStats;\r\n\r\n        if (!_changeTimeout) {\r\n            _changeTimeout = window.setTimeout(function () {\r\n                if (_changeCallback) {\r\n                    Object.keys(_pendingChanges).forEach(function (path) {\r\n                        var needsStats = _pendingChanges[path];\r\n                        if (needsStats) {\r\n                            exports.stat(path, function (err, stats) {\r\n                                if (err) {\r\n                                    console.warn("Unable to stat changed path: ", path, err);\r\n                                    return;\r\n                                }\r\n                                _changeCallback(path, stats);\r\n                            });\r\n                        } else {\r\n                            _changeCallback(path);\r\n                        }\r\n                    });\r\n                }\r\n                \r\n                _changeTimeout = null;\r\n                _pendingChanges = {};\r\n            }, FILE_WATCHER_BATCH_TIMEOUT);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Event handler for the Node fileWatcher domain\'s change event.\r\n     * \r\n     * @param {jQuery.Event} The underlying change event\r\n     * @param {string} path The path that is reported to have changed\r\n     * @param {string} event The type of the event: either "change" or "rename"\r\n     * @param {string=} filename The name of the file that changed.\r\n     * @private\r\n     */\r\n    function _fileWatcherChange(evt, path, event, filename) {\r\n        var change;\r\n\r\n        if (event === "change") {\r\n            // Only register change events if filename is passed\r\n            if (filename) {\r\n                // an existing file was created; stats are needed\r\n                change = path + filename;\r\n                _enqueueChange(change, true);\r\n            }\r\n        } else if (event === "rename") {\r\n            // a new file was created; no stats are needed\r\n            change = path;\r\n            _enqueueChange(change, false);\r\n        }\r\n    }\r\n\r\n    // Setup the change handler. This only needs to happen once.\r\n    $(_nodeDomain).on("change", _fileWatcherChange);\r\n\r\n    /**\r\n     * Convert appshell error codes to FileSystemError values.\r\n     * \r\n     * @param {?number} err An appshell error code\r\n     * @return {?string} A FileSystemError string, or null if there was no error code.\r\n     * @private\r\n     */\r\n    function _mapError(err) {\r\n        if (!err) {\r\n            return null;\r\n        }\r\n        \r\n        switch (err) {\r\n        case appshell.fs.ERR_INVALID_PARAMS:\r\n            return FileSystemError.INVALID_PARAMS;\r\n        case appshell.fs.ERR_NOT_FOUND:\r\n            return FileSystemError.NOT_FOUND;\r\n        case appshell.fs.ERR_CANT_READ:\r\n            return FileSystemError.NOT_READABLE;\r\n        case appshell.fs.ERR_CANT_WRITE:\r\n            return FileSystemError.NOT_WRITABLE;\r\n        case appshell.fs.ERR_UNSUPPORTED_ENCODING:\r\n            return FileSystemError.NOT_READABLE;\r\n        case appshell.fs.ERR_OUT_OF_SPACE:\r\n            return FileSystemError.OUT_OF_SPACE;\r\n        case appshell.fs.ERR_FILE_EXISTS:\r\n            return FileSystemError.ALREADY_EXISTS;\r\n        }\r\n        return FileSystemError.UNKNOWN;\r\n    }\r\n    \r\n    /**\r\n     * Convert a callback to one that transforms its first parameter from an\r\n     * appshell error code to a FileSystemError string.\r\n     * \r\n     * @param {function(?number)} cb A callback that expects an appshell error code\r\n     * @return {function(?string)} A callback that expects a FileSystemError string\r\n     * @private\r\n     */\r\n    function _wrap(cb) {\r\n        return function (err) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            args[0] = _mapError(args[0]);\r\n            cb.apply(null, args);\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Display an open-files dialog to the user and call back asynchronously with\r\n     * either a FileSystmError string or an array of path strings, which indicate\r\n     * the entry or entries selected.\r\n     * \r\n     * @param {boolean} allowMultipleSelection\r\n     * @param {boolean} chooseDirectories\r\n     * @param {string} title\r\n     * @param {string} initialPath\r\n     * @param {Array.<string>=} fileTypes\r\n     * @param {function(?string, Array.<string>=)} callback\r\n     */\r\n    function showOpenDialog(allowMultipleSelection, chooseDirectories, title, initialPath, fileTypes, callback) {\r\n        appshell.fs.showOpenDialog(allowMultipleSelection, chooseDirectories, title, initialPath, fileTypes, _wrap(callback));\r\n    }\r\n    \r\n    /**\r\n     * Display a save-file dialog and call back asynchronously with either a\r\n     * FileSystemError string or the path to which the user has chosen to save\r\n     * the file. If the dialog is cancelled, the path string will be empty.\r\n     * \r\n     * @param {string} title\r\n     * @param {string} initialPath\r\n     * @param {string} proposedNewFilename\r\n     * @param {function(?string, string=)} callback\r\n     */\r\n    function showSaveDialog(title, initialPath, proposedNewFilename, callback) {\r\n        appshell.fs.showSaveDialog(title, initialPath, proposedNewFilename, _wrap(callback));\r\n    }\r\n    \r\n    /**\r\n     * Stat the file or directory at the given path, calling back\r\n     * asynchronously with either a FileSystemError string or the entry\'s\r\n     * associated FileSystemStats object.\r\n     * \r\n     * @param {string} path\r\n     * @param {function(?string, FileSystemStats=)} callback\r\n     */\r\n    function stat(path, callback) {\r\n        appshell.fs.stat(path, function (err, stats) {\r\n            if (err) {\r\n                callback(_mapError(err));\r\n            } else {\r\n                var options = {\r\n                    isFile: stats.isFile(),\r\n                    mtime: stats.mtime,\r\n                    size: stats.size,\r\n                    realPath: stats.realPath,\r\n                    hash: stats.mtime.getTime()\r\n                };\r\n                \r\n                var fsStats = new FileSystemStats(options);\r\n                \r\n                callback(null, fsStats);\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Determine whether a file or directory exists at the given path by calling\r\n     * back asynchronously with either a FileSystemError string or a boolean,\r\n     * which is true if the file exists and false otherwise. The error will never\r\n     * be FileSystemError.NOT_FOUND; in that case, there will be no error and the\r\n     * boolean parameter will be false.\r\n     * \r\n     * @param {string} path\r\n     * @param {function(?string, boolean)} callback\r\n     */\r\n    function exists(path, callback) {\r\n        stat(path, function (err) {\r\n            if (err) {\r\n                if (err === FileSystemError.NOT_FOUND) {\r\n                    callback(null, false);\r\n                } else {\r\n                    callback(err);\r\n                }\r\n                return;\r\n            }\r\n\r\n            callback(null, true);\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Read the contents of the directory at the given path, calling back\r\n     * asynchronously either with a FileSystemError string or an array of \r\n     * FileSystemEntry objects along with another consistent array, each index\r\n     * of which either contains a FileSystemStats object for the corresponding\r\n     * FileSystemEntry object in the second parameter or a FileSystemError\r\n     * string describing a stat error.\r\n     * \r\n     * @param {string} path\r\n     * @param {function(?string, Array.<FileSystemEntry>=, Array.<string|FileSystemStats>=)} callback\r\n     */\r\n    function readdir(path, callback) {\r\n        appshell.fs.readdir(path, function (err, contents) {\r\n            if (err) {\r\n                callback(_mapError(err));\r\n                return;\r\n            }\r\n            \r\n            var count = contents.length;\r\n            if (!count) {\r\n                callback(null, [], []);\r\n                return;\r\n            }\r\n            \r\n            var stats = [];\r\n            contents.forEach(function (val, idx) {\r\n                stat(path + "/" + val, function (err, stat) {\r\n                    stats[idx] = err || stat;\r\n                    count--;\r\n                    if (count <= 0) {\r\n                        callback(null, contents, stats);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Create a directory at the given path, and call back asynchronously with\r\n     * either a FileSystemError string or a stats object for the newly created\r\n     * directory. The octal mode parameter is optional; if unspecified, the mode\r\n     * of the created directory is implementation dependent.\r\n     * \r\n     * @param {string} path\r\n     * @param {number=} mode The base-eight mode of the newly created directory.\r\n     * @param {function(?string, FileSystemStats=)=} callback\r\n     */\r\n    function mkdir(path, mode, callback) {\r\n        if (typeof mode === "function") {\r\n            callback = mode;\r\n            mode = parseInt("0755", 8);\r\n        }\r\n        appshell.fs.makedir(path, mode, function (err) {\r\n            if (err) {\r\n                callback(_mapError(err));\r\n            } else {\r\n                stat(path, function (err, stat) {\r\n                    callback(err, stat);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Rename the file or directory at oldPath to newPath, and call back\r\n     * asynchronously with a possibly null FileSystemError string.\r\n     * \r\n     * @param {string} oldPath\r\n     * @param {string} newPath\r\n     * @param {function(?string)=} callback\r\n     */\r\n    function rename(oldPath, newPath, callback) {\r\n        appshell.fs.rename(oldPath, newPath, _wrap(callback));\r\n    }\r\n    \r\n    /**\r\n     * Read the contents of the file at the given path, calling back\r\n     * asynchronously with either a FileSystemError string, or with the data and\r\n     * the FileSystemStats object associated with the read file. The options\r\n     * parameter can be used to specify an encoding (default "utf8"), and also\r\n     * a cached stats object that the implementation is free to use in order\r\n     * to avoid an additional stat call.\r\n     * \r\n     * Note: if either the read or the stat call fails then neither the read data\r\n     * nor stat will be passed back, and the call should be considered to have failed.\r\n     * If both calls fail, the error from the read call is passed back.\r\n     * \r\n     * @param {string} path\r\n     * @param {{encoding: string=, stat: FileSystemStats=}} options\r\n     * @param {function(?string, string=, FileSystemStats=)} callback\r\n     */\r\n    function readFile(path, options, callback) {\r\n        var encoding = options.encoding || "utf8";\r\n        \r\n        // Execute the read and stat calls in parallel. Callback early if the\r\n        // read call completes first with an error; otherwise wait for both\r\n        // to finish.\r\n        var done = false, data, stat, err;\r\n\r\n        if (options.stat) {\r\n            done = true;\r\n            stat = options.stat;\r\n        } else {\r\n            exports.stat(path, function (_err, _stat) {\r\n                if (done) {\r\n                    callback(_err, _err ? null : data, _stat);\r\n                } else {\r\n                    done = true;\r\n                    stat = _stat;\r\n                    err = _err;\r\n                }\r\n            });\r\n        }\r\n        \r\n        appshell.fs.readFile(path, encoding, function (_err, _data) {\r\n            if (_err) {\r\n                callback(_mapError(_err));\r\n                return;\r\n            }\r\n            \r\n            if (done) {\r\n                callback(err, err ? null : _data, stat);\r\n            } else {\r\n                done = true;\r\n                data = _data;\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Write data to the file at the given path, calling back asynchronously with\r\n     * either a FileSystemError string or the FileSystemStats object associated\r\n     * with the written file and a boolean that indicates whether the file was\r\n     * created by the write (true) or not (false). If no file exists at the\r\n     * given path, a new file will be created. The options parameter can be used\r\n     * to specify an encoding (default "utf8"), an octal mode (default\r\n     * unspecified and implementation dependent), and a consistency hash, which\r\n     * is used to the current state of the file before overwriting it. If a\r\n     * consistency hash is provided but does not match the hash of the file on\r\n     * disk, a FileSystemError.CONTENTS_MODIFIED error is passed to the callback.\r\n     * \r\n     * @param {string} path\r\n     * @param {string} data\r\n     * @param {{encoding : string=, mode : number=, expectedHash : object=, expectedContents : string=}} options\r\n     * @param {function(?string, FileSystemStats=, boolean)} callback\r\n     */\r\n    function writeFile(path, data, options, callback) {\r\n        var encoding = options.encoding || "utf8";\r\n        \r\n        function _finishWrite(created) {\r\n            appshell.fs.writeFile(path, data, encoding, function (err) {\r\n                if (err) {\r\n                    callback(_mapError(err));\r\n                } else {\r\n                    stat(path, function (err, stat) {\r\n                        callback(err, stat, created);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        \r\n        stat(path, function (err, stats) {\r\n            if (err) {\r\n                switch (err) {\r\n                case FileSystemError.NOT_FOUND:\r\n                    _finishWrite(true);\r\n                    break;\r\n                default:\r\n                    callback(err);\r\n                }\r\n                return;\r\n            }\r\n            \r\n            if (options.hasOwnProperty("expectedHash") && options.expectedHash !== stats._hash) {\r\n                console.error("Blind write attempted: ", path, stats._hash, options.expectedHash);\r\n\r\n                if (options.hasOwnProperty("expectedContents")) {\r\n                    appshell.fs.readFile(path, encoding, function (_err, _data) {\r\n                        if (_err || _data !== options.expectedContents) {\r\n                            callback(FileSystemError.CONTENTS_MODIFIED);\r\n                            return;\r\n                        }\r\n                    \r\n                        _finishWrite(false);\r\n                    });\r\n                    return;\r\n                } else {\r\n                    callback(FileSystemError.CONTENTS_MODIFIED);\r\n                    return;\r\n                }\r\n            }\r\n            \r\n            _finishWrite(false);\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Unlink (i.e., permanently delete) the file or directory at the given path,\r\n     * calling back asynchronously with a possibly null FileSystemError string.\r\n     * Directories will be unlinked even when non-empty.\r\n     * \r\n     * @param {string} path\r\n     * @param {function(string)=} callback\r\n     */\r\n    function unlink(path, callback) {\r\n        appshell.fs.unlink(path, function (err) {\r\n            callback(_mapError(err));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Move the file or directory at the given path to a system dependent trash\r\n     * location, calling back asynchronously with a possibly null FileSystemError\r\n     * string. Directories will be moved even when non-empty.\r\n     * \r\n     * @param {string} path\r\n     * @param {function(string)=} callback\r\n     */\r\n    function moveToTrash(path, callback) {\r\n        appshell.fs.moveToTrash(path, function (err) {\r\n            callback(_mapError(err));\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Initialize file watching for this filesystem, using the supplied\r\n     * changeCallback to provide change notifications. The first parameter of\r\n     * changeCallback specifies the changed path (either a file or a directory);\r\n     * if this parameter is null, it indicates that the implementation cannot\r\n     * specify a particular changed path, and so the callers should consider all\r\n     * paths to have changed and to update their state accordingly. The second\r\n     * parameter to changeCallback is an optional FileSystemStats object that\r\n     * may be provided in case the changed path already exists and stats are\r\n     * readily available. The offlineCallback will be called in case watchers\r\n     * are no longer expected to function properly. All watched paths are\r\n     * cleared when the offlineCallback is called.\r\n     * \r\n     * @param {function(?string, FileSystemStats=)} changeCallback\r\n     * @param {function()=} offlineCallback\r\n     */\r\n    function initWatchers(changeCallback, offlineCallback) {\r\n        _changeCallback = changeCallback;\r\n        _offlineCallback = offlineCallback;\r\n        \r\n        if (_isRunningOnWindowsXP && _offlineCallback) {\r\n            _offlineCallback();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Start providing change notifications for the file or directory at the\r\n     * given path, calling back asynchronously with a possibly null FileSystemError\r\n     * string when the initialization is complete. Notifications are provided\r\n     * using the changeCallback function provided by the initWatchers method.\r\n     * Note that change notifications are only provided recursively for directories\r\n     * when the recursiveWatch property of this module is true.\r\n     * \r\n     * @param {string} path\r\n     * @param {function(?string)=} callback\r\n     */\r\n    function watchPath(path, callback) {\r\n        if (_isRunningOnWindowsXP) {\r\n            callback(FileSystemError.NOT_SUPPORTED);\r\n            return;\r\n        }\r\n        appshell.fs.isNetworkDrive(path, function (err, isNetworkDrive) {\r\n            if (err || isNetworkDrive) {\r\n                callback(FileSystemError.UNKNOWN);\r\n                return;\r\n            }\r\n            \r\n            _nodeDomain.exec("watchPath", path)\r\n                .then(callback, callback);\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Stop providing change notifications for the file or directory at the\r\n     * given path, calling back asynchronously with a possibly null FileSystemError\r\n     * string when the operation is complete.\r\n     * \r\n     * @param {string} path\r\n     * @param {function(?string)=} callback\r\n     */\r\n    function unwatchPath(path, callback) {\r\n        _nodeDomain.exec("unwatchPath", path)\r\n            .then(callback, callback);\r\n    }\r\n    \r\n    /**\r\n     * Stop providing change notifications for all previously watched files and\r\n     * directories, optionally calling back asynchronously with a possibly null\r\n     * FileSystemError string when the operation is complete.\r\n     *\r\n     * @param {function(?string)=} callback\r\n     */\r\n    function unwatchAll(callback) {\r\n        _nodeDomain.exec("unwatchAll")\r\n            .then(callback, callback);\r\n    }\r\n    \r\n    // Export public API\r\n    exports.showOpenDialog  = showOpenDialog;\r\n    exports.showSaveDialog  = showSaveDialog;\r\n    exports.exists          = exists;\r\n    exports.readdir         = readdir;\r\n    exports.mkdir           = mkdir;\r\n    exports.rename          = rename;\r\n    exports.stat            = stat;\r\n    exports.readFile        = readFile;\r\n    exports.writeFile       = writeFile;\r\n    exports.unlink          = unlink;\r\n    exports.moveToTrash     = moveToTrash;\r\n    exports.initWatchers    = initWatchers;\r\n    exports.watchPath       = watchPath;\r\n    exports.unwatchPath     = unwatchPath;\r\n    exports.unwatchAll      = unwatchAll;\r\n    \r\n    /**\r\n     * Indicates whether or not recursive watching notifications are supported\r\n     * by the watchPath call. Currently, only Darwin supports recursive watching.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    exports.recursiveWatch = (appshell.platform === "mac" || appshell.platform === "win");\r\n    \r\n    /**\r\n     * Indicates whether or not the filesystem should expect and normalize UNC\r\n     * paths. If set, then //server/directory/ is a normalized path; otherwise the\r\n     * filesystem will normalize it to /server/directory. Currently, UNC path \r\n     * normalization only occurs on Windows.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    exports.normalizeUNCPaths = appshell.platform === "win";\r\n});\r\n\n//# sourceURL=/filesystem/impls/appshell/AppshellFileSystem.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define, $ */\r\n\r\n/**\r\n * FileSystem is a model object representing a complete file system. This object creates\r\n * and manages File and Directory instances, dispatches events when the file system changes,\r\n * and provides methods for showing \'open\' and \'save\' dialogs.\r\n *\r\n * FileSystem automatically initializes when loaded. It depends on a pluggable "impl" layer, which\r\n * it loads itself but must be designated in the require.config() that loads FileSystem.\r\n *\r\n * There are three ways to get File or Directory instances:\r\n *    * Use FileSystem.resolve() to convert a path to a File/Directory object. This will only\r\n *      succeed if the file/directory already exists.\r\n *    * Use FileSystem.getFileForPath()/FileSystem.getDirectoryForPath() if you know the\r\n *      file/directory already exists, or if you want to create a new entry.\r\n *    * Use Directory.getContents() to return all entries for the specified Directory.\r\n *\r\n * All paths passed *to* FileSystem APIs must be in the following format:\r\n *    * The path separator is "/" regardless of platform\r\n *    * Paths begin with "/" on Mac/Linux and "c:/" (or some other drive letter) on Windows\r\n *\r\n * All paths returned *from* FileSystem APIs additionally meet the following guarantees:\r\n *    * No ".." segments\r\n *    * No consecutive "/"s\r\n *    * Paths to a directory always end with a trailing "/"\r\n * (Because FileSystem normalizes paths automatically, paths passed *to* FileSystem do not need\r\n * to meet these requirements)\r\n *\r\n * FileSystem dispatches the following events:\r\n *    change - Sent whenever there is a change in the file system. The handler\r\n *          is passed up to three arguments: the changed entry and, if that changed entry\r\n *          is a Directory, a list of entries added to the directory and a list of entries\r\n *          removed from the Directory. The entry argument can be:\r\n *          *  a File - the contents of the file have changed, and should be reloaded.\r\n *          *  a Directory - an immediate child of the directory has been added, removed,\r\n *             or renamed/moved. Not triggered for "grandchildren".\r\n *               - If the added & removed arguments are null, we don\'t know what was added/removed:\r\n *                 clients should assume the whole subtree may have changed.\r\n *               - If the added & removed arguments are 0-length, there\'s no net change in the set\r\n *                 of files but a file may have been replaced: clients should assume the contents\r\n *                 of any immediate child file may have changed.\r\n *          *  null - a \'wholesale\' change happened, and you should assume everything may\r\n *             have changed.\r\n *          For changes made externally, there may be a significant delay before a "change" event\r\n *          is dispatched.\r\n *    rename - Sent whenever a File or Directory is renamed. All affected File and Directory\r\n *          objects have been updated to reflect the new path by the time this event is dispatched.\r\n *          This event should be used to trigger any UI updates that may need to occur when a path\r\n *          has changed. Note that these events will only be sent for rename operations that happen\r\n *          within the filesystem. If a file is renamed externally, a change event on the parent\r\n *          directory will be sent instead.\r\n *\r\n * FileSystem may perform caching. But it guarantees:\r\n *    * File contents & metadata - reads are guaranteed to be up to date (cached data is not used\r\n *      without first veryifying it is up to date).\r\n *    * Directory structure / file listing - reads may return cached data immediately, which may not\r\n *      reflect external changes made recently. (However, changes made via FileSystem itself are always\r\n *      reflected immediately, as soon as the change operation\'s callback signals success).\r\n *\r\n * The FileSystem doesn\'t directly read or write contents--this work is done by a low-level\r\n * implementation object. This allows client code to use the FileSystem API without having to\r\n * worry about the underlying storage, which could be a local filesystem or a remote server.\r\n */\r\ndefine(\'filesystem/FileSystem\',[\'require\',\'exports\',\'module\',\'filesystem/Directory\',\'filesystem/File\',\'filesystem/FileIndex\',\'filesystem/FileSystemError\',\'filesystem/WatchedRoot\',\'fileSystemImpl\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Directory       = require("filesystem/Directory"),\r\n        File            = require("filesystem/File"),\r\n        FileIndex       = require("filesystem/FileIndex"),\r\n        FileSystemError = require("filesystem/FileSystemError"),\r\n        WatchedRoot     = require("filesystem/WatchedRoot");\r\n\r\n    /** Unique token used to indicate user-driven cancellation of Save As (as opposed to file IO error) */\r\n    var USER_CANCELED = { userCanceled: true };\r\n\r\n    /**\r\n     * @constructor\r\n     * The FileSystem is not usable until init() signals its callback.\r\n     */\r\n    function FileSystem() {\r\n        // Create a file index\r\n        this._index = new FileIndex();\r\n\r\n        // Initialize the set of watched roots\r\n        this._watchedRoots = {};\r\n\r\n        // Initialize the watch/unwatch request queue\r\n        this._watchRequests = [];\r\n\r\n        // Initialize the queue of pending external changes\r\n        this._externalChanges = [];\r\n    }\r\n\r\n    /**\r\n     * The low-level file system implementation used by this object.\r\n     * This is set in the init() function and cannot be changed.\r\n     */\r\n    FileSystem.prototype._impl = null;\r\n\r\n    /**\r\n     * The FileIndex used by this object. This is initialized in the constructor.\r\n     */\r\n    FileSystem.prototype._index = null;\r\n\r\n    /**\r\n     * Refcount of any pending filesystem mutation operations (e.g., writes,\r\n     * unlinks, etc.). Used to ensure that external change events aren\'t processed\r\n     * until after index fixups, operation-specific callbacks, and internal change\r\n     * events are complete. (This is important for distinguishing rename from\r\n     * an unrelated delete-add pair).\r\n     * @type {number}\r\n     */\r\n    FileSystem.prototype._activeChangeCount = 0;\r\n\r\n    // For unit testing only\r\n    FileSystem.prototype._getActiveChangeCount = function () {\r\n        return this._activeChangeCount;\r\n    };\r\n\r\n    /**\r\n     * Queue of arguments with which to invoke _handleExternalChanges(); triggered\r\n     * once _activeChangeCount drops to zero.\r\n     * @type {!Array.<{path:?string, stat:FileSystemStats=}>}\r\n     */\r\n    FileSystem.prototype._externalChanges = null;\r\n\r\n    /** Process all queued watcher results, by calling _handleExternalChange() on each */\r\n    FileSystem.prototype._triggerExternalChangesNow = function () {\r\n        this._externalChanges.forEach(function (info) {\r\n            this._handleExternalChange(info.path, info.stat);\r\n        }, this);\r\n        this._externalChanges.length = 0;\r\n    };\r\n\r\n    /**\r\n     * Receives a result from the impl\'s watcher callback, and either processes it\r\n     * immediately (if _activeChangeCount is 0) or otherwise stores it for later\r\n     * processing.\r\n     * @param {?string} path The fullPath of the changed entry\r\n     * @param {FileSystemStats=} stat An optional stat object for the changed entry\r\n     */\r\n    FileSystem.prototype._enqueueExternalChange = function (path, stat) {\r\n        this._externalChanges.push({path: path, stat: stat});\r\n        if (!this._activeChangeCount) {\r\n            this._triggerExternalChangesNow();\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * The queue of pending watch/unwatch requests.\r\n     * @type {Array.<{fn: function(), cb: function()}>}\r\n     */\r\n    FileSystem.prototype._watchRequests = null;\r\n\r\n    /**\r\n     * Dequeue and process all pending watch/unwatch requests\r\n     */\r\n    FileSystem.prototype._dequeueWatchRequest = function () {\r\n        if (this._watchRequests.length > 0) {\r\n            var request = this._watchRequests[0];\r\n\r\n            request.fn.call(null, function () {\r\n                // Apply the given callback\r\n                var callbackArgs = arguments;\r\n                try {\r\n                    request.cb.apply(null, callbackArgs);\r\n                } finally {\r\n                    // Process the remaining watch/unwatch requests\r\n                    this._watchRequests.shift();\r\n                    this._dequeueWatchRequest();\r\n                }\r\n            }.bind(this));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Enqueue a new watch/unwatch request.\r\n     *\r\n     * @param {function()} fn - The watch/unwatch request function.\r\n     * @param {callback()} cb - The callback for the provided watch/unwatch\r\n     *      request function.\r\n     */\r\n    FileSystem.prototype._enqueueWatchRequest = function (fn, cb) {\r\n        // Enqueue the given watch/unwatch request\r\n        this._watchRequests.push({fn: fn, cb: cb});\r\n\r\n        // Begin processing the queue if it is not already being processed\r\n        if (this._watchRequests.length === 1) {\r\n            this._dequeueWatchRequest();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * The set of watched roots, encoded as a mapping from full paths to WatchedRoot\r\n     * objects which contain a file entry, filter function, and an indication of\r\n     * whether the watched root is inactive, starting up or fully active.\r\n     *\r\n     * @type{Object.<string, WatchedRoot>}\r\n     */\r\n    FileSystem.prototype._watchedRoots = null;\r\n\r\n    /**\r\n     * Finds a parent watched root for a given path, or returns null if a parent\r\n     * watched root does not exist.\r\n     *\r\n     * @param{string} fullPath The child path for which a parent watched root is to be found\r\n     * @return{?{entry: FileSystemEntry, filter: function(string) boolean}} The parent\r\n     *      watched root, if it exists, or null.\r\n     */\r\n    FileSystem.prototype._findWatchedRootForPath = function (fullPath) {\r\n        var watchedRoot = null;\r\n\r\n        Object.keys(this._watchedRoots).some(function (watchedPath) {\r\n            if (fullPath.indexOf(watchedPath) === 0) {\r\n                watchedRoot = this._watchedRoots[watchedPath];\r\n                return true;\r\n            }\r\n        }, this);\r\n\r\n        return watchedRoot;\r\n    };\r\n\r\n    /**\r\n     * Helper function to watch or unwatch a filesystem entry beneath a given\r\n     * watchedRoot.\r\n     *\r\n     * @private\r\n     * @param {FileSystemEntry} entry - The FileSystemEntry to watch. Must be a\r\n     *      non-strict descendent of watchedRoot.entry.\r\n     * @param {WatchedRoot} watchedRoot - See FileSystem._watchedRoots.\r\n     * @param {function(?string)} callback - A function that is called once the\r\n     *      watch is complete, possibly with a FileSystemError string.\r\n     * @param {boolean} shouldWatch - Whether the entry should be watched (true)\r\n     *      or unwatched (false).\r\n     */\r\n    FileSystem.prototype._watchOrUnwatchEntry = function (entry, watchedRoot, callback, shouldWatch) {\r\n        var impl = this._impl,\r\n            recursiveWatch = impl.recursiveWatch,\r\n            commandName = shouldWatch ? "watchPath" : "unwatchPath";\r\n\r\n        if (recursiveWatch) {\r\n            if (entry !== watchedRoot.entry) {\r\n                // Watch and unwatch calls to children of the watched root are\r\n                // no-ops if the impl supports recursiveWatch\r\n                callback(null);\r\n            } else {\r\n                // The impl will handle finding all subdirectories to watch.\r\n                this._enqueueWatchRequest(function (requestCb) {\r\n                    impl[commandName].call(impl, entry.fullPath, requestCb);\r\n                }.bind(this), callback);\r\n            }\r\n        } else if (shouldWatch) {\r\n            // The impl can\'t handle recursive watch requests, so it\'s up to the\r\n            // filesystem to recursively watch all subdirectories.\r\n            this._enqueueWatchRequest(function (requestCb) {\r\n                // First construct a list of entries to watch or unwatch\r\n                var entriesToWatch = [];\r\n\r\n                var visitor = function (child) {\r\n                    if (watchedRoot.filter(child.name, child.parentPath)) {\r\n                        if (child.isDirectory || child === watchedRoot.entry) {\r\n                            entriesToWatch.push(child);\r\n                        }\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                };\r\n\r\n                entry.visit(visitor, function (err) {\r\n                    if (err) {\r\n                        // Unexpected error\r\n                        requestCb(err);\r\n                        return;\r\n                    }\r\n\r\n                    // Then watch or unwatched all these entries\r\n                    var count = entriesToWatch.length;\r\n                    if (count === 0) {\r\n                        requestCb(null);\r\n                        return;\r\n                    }\r\n\r\n                    var watchCallback = function () {\r\n                        if (--count === 0) {\r\n                            requestCb(null);\r\n                        }\r\n                    };\r\n\r\n                    entriesToWatch.forEach(function (entry) {\r\n                        impl.watchPath(entry.fullPath, watchCallback);\r\n                    });\r\n                });\r\n            }, callback);\r\n        } else {\r\n            this._enqueueWatchRequest(function (requestCb) {\r\n                impl.unwatchPath(entry.fullPath, requestCb);\r\n            }, callback);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Watch a filesystem entry beneath a given watchedRoot.\r\n     *\r\n     * @private\r\n     * @param {FileSystemEntry} entry - The FileSystemEntry to watch. Must be a\r\n     *      non-strict descendent of watchedRoot.entry.\r\n     * @param {WatchedRoot} watchedRoot - See FileSystem._watchedRoots.\r\n     * @param {function(?string)} callback - A function that is called once the\r\n     *      watch is complete, possibly with a FileSystemError string.\r\n     */\r\n    FileSystem.prototype._watchEntry = function (entry, watchedRoot, callback) {\r\n        this._watchOrUnwatchEntry(entry, watchedRoot, callback, true);\r\n    };\r\n\r\n    /**\r\n     * Unwatch a filesystem entry beneath a given watchedRoot.\r\n     *\r\n     * @private\r\n     * @param {FileSystemEntry} entry - The FileSystemEntry to watch. Must be a\r\n     *      non-strict descendent of watchedRoot.entry.\r\n     * @param {WatchedRoot} watchedRoot - See FileSystem._watchedRoots.\r\n     * @param {function(?string)} callback - A function that is called once the\r\n     *      watch is complete, possibly with a FileSystemError string.\r\n     */\r\n    FileSystem.prototype._unwatchEntry = function (entry, watchedRoot, callback) {\r\n        this._watchOrUnwatchEntry(entry, watchedRoot, function (err) {\r\n            // Make sure to clear cached data for all unwatched entries because\r\n            // entries always return cached data if it exists!\r\n            this._index.visitAll(function (child) {\r\n                if (child.fullPath.indexOf(entry.fullPath) === 0) {\r\n                    // \'true\' so entry doesn\'t try to clear its immediate childrens\' caches too. That would be redundant\r\n                    // with the visitAll() here, and could be slow if we\'ve already cleared its parent (#7150).\r\n                    child._clearCachedData(true);\r\n                }\r\n            }.bind(this));\r\n\r\n            callback(err);\r\n        }.bind(this), false);\r\n    };\r\n\r\n    /**\r\n     * Initialize this FileSystem instance.\r\n     *\r\n     * @param {FileSystemImpl} impl The back-end implementation for this\r\n     *      FileSystem instance.\r\n     */\r\n    FileSystem.prototype.init = function (impl) {\r\n        console.assert(!this._impl, "This FileSystem has already been initialized!");\r\n\r\n        var changeCallback = this._enqueueExternalChange.bind(this),\r\n            offlineCallback = this._unwatchAll.bind(this);\r\n\r\n        this._impl = impl;\r\n        this._impl.initWatchers(changeCallback, offlineCallback);\r\n    };\r\n\r\n    /**\r\n     * Close a file system. Clear all caches, indexes, and file watchers.\r\n     */\r\n    FileSystem.prototype.close = function () {\r\n        this._impl.unwatchAll();\r\n        this._index.clear();\r\n    };\r\n\r\n    /**\r\n     * Returns true if the given path should be automatically added to the index & watch list when one of its ancestors\r\n     * is a watch-root. (Files are added automatically when the watch-root is first established, or later when a new\r\n     * directory is created and its children enumerated).\r\n     *\r\n     * Entries explicitly created via FileSystem.getFile/DirectoryForPath() are *always* added to the index regardless\r\n     * of this filtering - but they will not be watched if the watch-root\'s filter excludes them.\r\n     *\r\n     * @param {string} path Full path\r\n     * @param {string} name Name portion of the path\r\n     */\r\n    FileSystem.prototype._indexFilter = function (path, name) {\r\n        var parentRoot = this._findWatchedRootForPath(path);\r\n\r\n        if (parentRoot) {\r\n            return parentRoot.filter(name, path);\r\n        }\r\n\r\n        // It might seem more sensible to return false (exclude) for files outside the watch roots, but\r\n        // that would break usage of appFileSystem for \'system\'-level things like enumerating extensions.\r\n        // (Or in general, Directory.getContents() for any Directory outside the watch roots).\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Indicates that a filesystem-mutating operation has begun. As long as there\r\n     * are changes taking place, change events from the external watchers are\r\n     * blocked and queued, to be handled once changes have finished. This is done\r\n     * because for mutating operations that originate from within the filesystem,\r\n     * synthetic change events are fired that do not depend on external file\r\n     * watchers, and we prefer the former over the latter for the following\r\n     * reasons: 1) there is no delay; and 2) they may have higher fidelity ---\r\n     * e.g., a rename operation can be detected as such, instead of as a nearly\r\n     * simultaneous addition and deletion.\r\n     *\r\n     * All operations that mutate the file system MUST begin with a call to\r\n     * _beginChange and must end with a call to _endChange.\r\n     */\r\n    FileSystem.prototype._beginChange = function () {\r\n        this._activeChangeCount++;\r\n        //console.log("> beginChange  -> " + this._activeChangeCount);\r\n    };\r\n\r\n    /**\r\n     * Indicates that a filesystem-mutating operation has completed. See\r\n     * FileSystem._beginChange above.\r\n     */\r\n    FileSystem.prototype._endChange = function () {\r\n        this._activeChangeCount--;\r\n        //console.log("< endChange    -> " + this._activeChangeCount);\r\n\r\n        if (this._activeChangeCount < 0) {\r\n            console.error("FileSystem _activeChangeCount has fallen below zero!");\r\n        }\r\n\r\n        if (!this._activeChangeCount) {\r\n            this._triggerExternalChangesNow();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Determines whether or not the supplied path is absolute, as opposed to relative.\r\n     *\r\n     * @param {!string} fullPath\r\n     * @return {boolean} True if the fullPath is absolute and false otherwise.\r\n     */\r\n    FileSystem.isAbsolutePath = function (fullPath) {\r\n        return (fullPath[0] === "/" || (fullPath[1] === ":" && fullPath[2] === "/"));\r\n    };\r\n\r\n    function _ensureTrailingSlash(path) {\r\n        if (path[path.length - 1] !== "/") {\r\n            path += "/";\r\n        }\r\n\r\n        return path;\r\n    }\r\n\r\n    /*\r\n     * Matches continguous groups of forward slashes\r\n     * @const\r\n     */\r\n    var _DUPLICATED_SLASH_RE = /\\/{2,}/g;\r\n\r\n    /**\r\n     * Returns a canonical version of the path: no duplicated "/"es, no ".."s,\r\n     * and directories guaranteed to end in a trailing "/"\r\n     * @param {!string} path  Absolute path, using "/" as path separator\r\n     * @param {boolean=} isDirectory\r\n     * @return {!string}\r\n     */\r\n    FileSystem.prototype._normalizePath = function (path, isDirectory) {\r\n\r\n        if (!FileSystem.isAbsolutePath(path)) {\r\n            throw new Error("Paths must be absolute: \'" + path + "\'");  // expect only absolute paths\r\n        }\r\n\r\n        var isUNCPath = this._impl.normalizeUNCPaths && path.search(_DUPLICATED_SLASH_RE) === 0;\r\n\r\n        // Remove duplicated "/"es\r\n        path = path.replace(_DUPLICATED_SLASH_RE, "/");\r\n\r\n        // Remove ".." segments\r\n        if (path.indexOf("..") !== -1) {\r\n            var segments = path.split("/"),\r\n                i;\r\n            for (i = 1; i < segments.length; i++) {\r\n                if (segments[i] === "..") {\r\n                    if (i < 2) {\r\n                        throw new Error("Invalid absolute path: \'" + path + "\'");\r\n                    }\r\n                    segments.splice(i - 1, 2);\r\n                    i -= 2; // compensate so we start on the right index next iteration\r\n                }\r\n            }\r\n            path = segments.join("/");\r\n        }\r\n\r\n        if (isDirectory) {\r\n            // Make sure path DOES include trailing slash\r\n            path = _ensureTrailingSlash(path);\r\n        }\r\n\r\n        if (isUNCPath) {\r\n            // Restore the leading double slash that was removed previously\r\n            path = "/" + path;\r\n        }\r\n\r\n        return path;\r\n    };\r\n\r\n    /**\r\n     * Return a (strict subclass of a) FileSystemEntry object for the specified\r\n     * path using the provided constuctor. For now, the provided constructor\r\n     * should be either File or Directory.\r\n     *\r\n     * @private\r\n     * @param {function(string, FileSystem)} EntryConstructor Constructor with\r\n     *      which to initialize new FileSystemEntry objects.\r\n     * @param {string} path Absolute path of file.\r\n     * @return {File|Directory} The File or Directory object. This file may not\r\n     *      yet exist on disk.\r\n     */\r\n    FileSystem.prototype._getEntryForPath = function (EntryConstructor, path) {\r\n        var isDirectory = EntryConstructor === Directory;\r\n        path = this._normalizePath(path, isDirectory);\r\n        var entry = this._index.getEntry(path);\r\n\r\n        if (!entry) {\r\n            entry = new EntryConstructor(path, this);\r\n            this._index.addEntry(entry);\r\n        }\r\n\r\n        return entry;\r\n    };\r\n\r\n    /**\r\n     * Return a File object for the specified path.\r\n     *\r\n     * @param {string} path Absolute path of file.\r\n     *\r\n     * @return {File} The File object. This file may not yet exist on disk.\r\n     */\r\n    FileSystem.prototype.getFileForPath = function (path) {\r\n        return this._getEntryForPath(File, path);\r\n    };\r\n\r\n    /**\r\n     * Return a Directory object for the specified path.\r\n     *\r\n     * @param {string} path Absolute path of directory.\r\n     *\r\n     * @return {Directory} The Directory object. This directory may not yet exist on disk.\r\n     */\r\n    FileSystem.prototype.getDirectoryForPath = function (path) {\r\n        return this._getEntryForPath(Directory, path);\r\n    };\r\n\r\n    /**\r\n     * Resolve a path.\r\n     *\r\n     * @param {string} path The path to resolve\r\n     * @param {function (?string, FileSystemEntry=, FileSystemStats=)} callback Callback resolved\r\n     *      with a FileSystemError string or with the entry for the provided path.\r\n     */\r\n    FileSystem.prototype.resolve = function (path, callback) {\r\n        var normalizedPath = this._normalizePath(path, false),\r\n            item = this._index.getEntry(normalizedPath);\r\n\r\n        if (!item) {\r\n            normalizedPath = _ensureTrailingSlash(normalizedPath);\r\n            item = this._index.getEntry(normalizedPath);\r\n        }\r\n\r\n        if (item) {\r\n            item.stat(function (err, stat) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n\r\n                callback(null, item, stat);\r\n            });\r\n        } else {\r\n            this._impl.stat(path, function (err, stat) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n\r\n                if (stat.isFile) {\r\n                    item = this.getFileForPath(path);\r\n                } else {\r\n                    item = this.getDirectoryForPath(path);\r\n                }\r\n\r\n                if (item._isWatched()) {\r\n                    item._stat = stat;\r\n                }\r\n\r\n                callback(null, item, stat);\r\n            }.bind(this));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Show an "Open" dialog and return the file(s)/directories selected by the user.\r\n     *\r\n     * @param {boolean} allowMultipleSelection Allows selecting more than one file at a time\r\n     * @param {boolean} chooseDirectories Allows directories to be opened\r\n     * @param {string} title The title of the dialog\r\n     * @param {string} initialPath The folder opened inside the window initially. If initialPath\r\n     *                          is not set, or it doesn\'t exist, the window would show the last\r\n     *                          browsed folder depending on the OS preferences\r\n     * @param {?Array.<string>} fileTypes (Currently *ignored* except on Mac - https://trello.com/c/430aXkpq)\r\n     *                          List of extensions that are allowed to be opened, without leading ".".\r\n     *                          Null or empty array allows all files to be selected. Not applicable\r\n     *                          when chooseDirectories = true.\r\n     * @param {function (?string, Array.<string>=)} callback Callback resolved with a FileSystemError\r\n     *                          string or the selected file(s)/directories. If the user cancels the\r\n     *                          open dialog, the error will be falsy and the file/directory array will\r\n     *                          be empty.\r\n     */\r\n    FileSystem.prototype.showOpenDialog = function (allowMultipleSelection,\r\n                            chooseDirectories,\r\n                            title,\r\n                            initialPath,\r\n                            fileTypes,\r\n                            callback) {\r\n\r\n        this._impl.showOpenDialog(allowMultipleSelection, chooseDirectories, title, initialPath, fileTypes, callback);\r\n    };\r\n\r\n    /**\r\n     * Show a "Save" dialog and return the path of the file to save.\r\n     *\r\n     * @param {string} title The title of the dialog.\r\n     * @param {string} initialPath The folder opened inside the window initially. If initialPath\r\n     *                          is not set, or it doesn\'t exist, the window would show the last\r\n     *                          browsed folder depending on the OS preferences.\r\n     * @param {string} proposedNewFilename Provide a new file name for the user. This could be based on\r\n     *                          on the current file name plus an additional suffix\r\n     * @param {function (?string, string=)} callback Callback that is resolved with a FileSystemError\r\n     *                          string or the name of the file to save. If the user cancels the save,\r\n     *                          the error will be falsy and the name will be empty.\r\n     */\r\n    FileSystem.prototype.showSaveDialog = function (title, initialPath, proposedNewFilename, callback) {\r\n        this._impl.showSaveDialog(title, initialPath, proposedNewFilename, callback);\r\n    };\r\n\r\n    /**\r\n     * Fire a rename event. Clients listen for these events using FileSystem.on.\r\n     *\r\n     * @param {string} oldPath The entry\'s previous fullPath\r\n     * @param {string} newPath The entry\'s current fullPath\r\n     */\r\n    FileSystem.prototype._fireRenameEvent = function (oldPath, newPath) {\r\n        $(this).trigger("rename", [oldPath, newPath]);\r\n    };\r\n\r\n    /**\r\n     * Fire a change event. Clients listen for these events using FileSystem.on.\r\n     *\r\n     * @param {File|Directory} entry The entry that has changed\r\n     * @param {Array<File|Directory>=} added If the entry is a directory, this\r\n     *      is a set of new entries in the directory.\r\n     * @param {Array<File|Directory>=} removed If the entry is a directory, this\r\n     *      is a set of removed entries from the directory.\r\n     */\r\n    FileSystem.prototype._fireChangeEvent = function (entry, added, removed) {\r\n        $(this).trigger("change", [entry, added, removed]);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Notify the system when an entry name has changed.\r\n     *\r\n     * @param {string} oldFullPath\r\n     * @param {string} newFullPath\r\n     * @param {boolean} isDirectory\r\n     */\r\n    FileSystem.prototype._handleRename = function (oldFullPath, newFullPath, isDirectory) {\r\n        // Update all affected entries in the index\r\n        this._index.entryRenamed(oldFullPath, newFullPath, isDirectory);\r\n    };\r\n\r\n    /**\r\n     * Notify the filesystem that the given directory has changed. Updates the filesystem\'s\r\n     * internal state as a result of the change, and calls back with the set of added and\r\n     * removed entries. Mutating FileSystemEntry operations should call this method before\r\n     * applying the operation\'s callback, and pass along the resulting change sets in the\r\n     * internal change event.\r\n     *\r\n     * @param {Directory} directory The directory that has changed.\r\n     * @param {function(Array<File|Directory>=, Array<File|Directory>=)} callback\r\n     *      The callback that will be applied to a set of added and a set of removed\r\n     *      FileSystemEntry objects.\r\n     */\r\n    FileSystem.prototype._handleDirectoryChange = function (directory, callback) {\r\n        var oldContents = directory._contents;\r\n\r\n        directory._clearCachedData();\r\n        directory.getContents(function (err, contents) {\r\n            var addedEntries = oldContents && contents.filter(function (entry) {\r\n                return oldContents.indexOf(entry) === -1;\r\n            });\r\n\r\n            var removedEntries = oldContents && oldContents.filter(function (entry) {\r\n                return contents.indexOf(entry) === -1;\r\n            });\r\n\r\n            // If directory is not watched, clear children\'s caches manually.\r\n            var watchedRoot = this._findWatchedRootForPath(directory.fullPath);\r\n            if (!watchedRoot || !watchedRoot.filter(directory.name, directory.parentPath)) {\r\n                this._index.visitAll(function (entry) {\r\n                    if (entry.fullPath.indexOf(directory.fullPath) === 0) {\r\n                        // Passing \'true\' for a similar reason as in _unwatchEntry() - see #7150\r\n                        entry._clearCachedData(true);\r\n                    }\r\n                }.bind(this));\r\n\r\n                callback(addedEntries, removedEntries);\r\n                return;\r\n            }\r\n\r\n            var addedCounter = addedEntries ? addedEntries.length : 0,\r\n                removedCounter = removedEntries ? removedEntries.length : 0,\r\n                counter = addedCounter + removedCounter;\r\n\r\n            if (counter === 0) {\r\n                callback(addedEntries, removedEntries);\r\n                return;\r\n            }\r\n\r\n            var watchOrUnwatchCallback = function (err) {\r\n                if (err) {\r\n                    console.error("FileSystem error in _handleDirectoryChange after watch/unwatch entries: " + err);\r\n                }\r\n\r\n                if (--counter === 0) {\r\n                    callback(addedEntries, removedEntries);\r\n                }\r\n            };\r\n\r\n            if (addedEntries) {\r\n                addedEntries.forEach(function (entry) {\r\n                    this._watchEntry(entry, watchedRoot, watchOrUnwatchCallback);\r\n                }, this);\r\n            }\r\n\r\n            if (removedEntries) {\r\n                removedEntries.forEach(function (entry) {\r\n                    this._unwatchEntry(entry, watchedRoot, watchOrUnwatchCallback);\r\n                }, this);\r\n            }\r\n        }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Processes a result from the file/directory watchers. Watch results are sent from the low-level implementation\r\n     * whenever a directory or file is changed.\r\n     *\r\n     * @param {string} path The path that changed. This could be a file or a directory.\r\n     * @param {FileSystemStats=} stat Optional stat for the item that changed. This param is not always\r\n     *         passed.\r\n     */\r\n    FileSystem.prototype._handleExternalChange = function (path, stat) {\r\n\r\n        if (!path) {\r\n            // This is a "wholesale" change event; clear all caches\r\n            this._index.visitAll(function (entry) {\r\n                // Passing \'true\' for a similar reason as in _unwatchEntry() - see #7150\r\n                entry._clearCachedData(true);\r\n            });\r\n\r\n            this._fireChangeEvent(null);\r\n            return;\r\n        }\r\n\r\n        path = this._normalizePath(path, false);\r\n\r\n        var entry = this._index.getEntry(path);\r\n        if (entry) {\r\n            var oldStat = entry._stat;\r\n            if (entry.isFile) {\r\n                // Update stat and clear contents, but only if out of date\r\n                if (!(stat && oldStat && stat.mtime.getTime() === oldStat.mtime.getTime())) {\r\n                    entry._clearCachedData();\r\n                    entry._stat = stat;\r\n                    this._fireChangeEvent(entry);\r\n                }\r\n            } else {\r\n                this._handleDirectoryChange(entry, function (added, removed) {\r\n                    entry._stat = stat;\r\n\r\n                    // We send a change even if added & removed are both zero-length. Something may still have changed,\r\n                    // e.g. a file may have been quickly removed & re-added before we got a chance to reread the directory\r\n                    // listing.\r\n                    this._fireChangeEvent(entry, added, removed);\r\n                }.bind(this));\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Start watching a filesystem root entry.\r\n     *\r\n     * @param {FileSystemEntry} entry - The root entry to watch. If entry is a directory,\r\n     *      all subdirectories that aren\'t explicitly filtered will also be watched.\r\n     * @param {function(string): boolean} filter - Returns true if a particular item should\r\n     *      be watched, given its name (not full path). Items that are ignored are also\r\n     *      filtered from Directory.getContents() results within this subtree.\r\n     * @param {function(?string)=} callback - A function that is called when the watch has\r\n     *      completed. If the watch fails, the function will have a non-null FileSystemError\r\n     *      string parametr.\r\n     */\r\n    FileSystem.prototype.watch = function (entry, filter, callback) {\r\n        var fullPath = entry.fullPath;\r\n\r\n        callback = callback || function () {};\r\n\r\n        var watchingParentRoot = this._findWatchedRootForPath(fullPath);\r\n        if (watchingParentRoot &&\r\n                (watchingParentRoot.status === WatchedRoot.STARTING ||\r\n                 watchingParentRoot.status === WatchedRoot.ACTIVE)) {\r\n            callback("A parent of this root is already watched");\r\n            return;\r\n        }\r\n\r\n        var watchingChildRoot = Object.keys(this._watchedRoots).some(function (path) {\r\n            var watchedRoot = this._watchedRoots[path],\r\n                watchedPath = watchedRoot.entry.fullPath;\r\n\r\n            return watchedPath.indexOf(fullPath) === 0;\r\n        }, this);\r\n\r\n        if (watchingChildRoot &&\r\n                (watchingChildRoot.status === WatchedRoot.STARTING ||\r\n                 watchingChildRoot.status === WatchedRoot.ACTIVE)) {\r\n            callback("A child of this root is already watched");\r\n            return;\r\n        }\r\n\r\n        var watchedRoot = new WatchedRoot(entry, filter);\r\n\r\n        this._watchedRoots[fullPath] = watchedRoot;\r\n\r\n        // Enter the STARTING state early to indiate that watched Directory\r\n        // objects may cache their contents. See FileSystemEntry._isWatched.\r\n        watchedRoot.status = WatchedRoot.STARTING;\r\n\r\n        this._watchEntry(entry, watchedRoot, function (err) {\r\n            if (err) {\r\n                console.warn("Failed to watch root: ", entry.fullPath, err);\r\n                delete this._watchedRoots[fullPath];\r\n                callback(err);\r\n                return;\r\n            }\r\n\r\n            watchedRoot.status = WatchedRoot.ACTIVE;\r\n\r\n            callback(null);\r\n        }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * Stop watching a filesystem root entry.\r\n     *\r\n     * @param {FileSystemEntry} entry - The root entry to stop watching. The unwatch will\r\n     *      if the entry is not currently being watched.\r\n     * @param {function(?string)=} callback - A function that is called when the unwatch has\r\n     *      completed. If the unwatch fails, the function will have a non-null FileSystemError\r\n     *      string parameter.\r\n     */\r\n    FileSystem.prototype.unwatch = function (entry, callback) {\r\n        var fullPath = entry.fullPath,\r\n            watchedRoot = this._watchedRoots[fullPath];\r\n\r\n        callback = callback || function () {};\r\n\r\n        if (!watchedRoot) {\r\n            callback(FileSystemError.ROOT_NOT_WATCHED);\r\n            return;\r\n        }\r\n\r\n        // Mark this as inactive, but don\'t delete the entry until the unwatch is complete.\r\n        // This is useful for making sure we don\'t try to concurrently watch overlapping roots.\r\n        watchedRoot.status = WatchedRoot.INACTIVE;\r\n\r\n        this._unwatchEntry(entry, watchedRoot, function (err) {\r\n            delete this._watchedRoots[fullPath];\r\n\r\n            this._index.visitAll(function (child) {\r\n                if (child.fullPath.indexOf(entry.fullPath) === 0) {\r\n                    this._index.removeEntry(child);\r\n                }\r\n            }.bind(this));\r\n\r\n            if (err) {\r\n                console.warn("Failed to unwatch root: ", entry.fullPath, err);\r\n                callback(err);\r\n                return;\r\n            }\r\n\r\n            callback(null);\r\n        }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * Unwatch all watched roots. Calls unwatch on the underlying impl for each\r\n     * watched root and ignores errors.\r\n     * @private\r\n     */\r\n    FileSystem.prototype._unwatchAll = function () {\r\n        console.warn("File watchers went offline!");\r\n\r\n        Object.keys(this._watchedRoots).forEach(function (path) {\r\n            var watchedRoot = this._watchedRoots[path];\r\n\r\n            watchedRoot.status = WatchedRoot.INACTIVE;\r\n            delete this._watchedRoots[path];\r\n            this._unwatchEntry(watchedRoot.entry, watchedRoot, function () {\r\n                console.warn("Watching disabled for", watchedRoot.entry.fullPath);\r\n            });\r\n        }, this);\r\n\r\n        // Fire a wholesale change event, clearing all caches and request that\r\n        // clients manually update their state.\r\n        this._handleExternalChange(null);\r\n    };\r\n\r\n\r\n    // The singleton instance\r\n    var _instance;\r\n\r\n    function _wrap(func) {\r\n        return function () {\r\n            return func.apply(_instance, arguments);\r\n        };\r\n    }\r\n\r\n\r\n    exports.USER_CANCELED = USER_CANCELED;\r\n\r\n    // Export public methods as proxies to the singleton instance\r\n    exports.init = _wrap(FileSystem.prototype.init);\r\n    exports.close = _wrap(FileSystem.prototype.close);\r\n    exports.shouldShow = _wrap(FileSystem.prototype.shouldShow);\r\n    exports.getFileForPath = _wrap(FileSystem.prototype.getFileForPath);\r\n    exports.getDirectoryForPath = _wrap(FileSystem.prototype.getDirectoryForPath);\r\n    exports.resolve = _wrap(FileSystem.prototype.resolve);\r\n    exports.showOpenDialog = _wrap(FileSystem.prototype.showOpenDialog);\r\n    exports.showSaveDialog = _wrap(FileSystem.prototype.showSaveDialog);\r\n    exports.watch = _wrap(FileSystem.prototype.watch);\r\n    exports.unwatch = _wrap(FileSystem.prototype.unwatch);\r\n\r\n    // Static public utility methods\r\n    exports.isAbsolutePath = FileSystem.isAbsolutePath;\r\n\r\n    // For testing only\r\n    exports._getActiveChangeCount = _wrap(FileSystem.prototype._getActiveChangeCount);\r\n\r\n    /**\r\n     * Add an event listener for a FileSystem event.\r\n     *\r\n     * @param {string} event The name of the event\r\n     * @param {function} handler The handler for the event\r\n     */\r\n    exports.on = function (event, handler) {\r\n        $(_instance).on(event, handler);\r\n    };\r\n\r\n    /**\r\n     * Remove an event listener for a FileSystem event.\r\n     *\r\n     * @param {string} event The name of the event\r\n     * @param {function} handler The handler for the event\r\n     */\r\n    exports.off = function (event, handler) {\r\n        $(_instance).off(event, handler);\r\n    };\r\n\r\n    // Export the FileSystem class as "private" for unit testing only.\r\n    exports._FileSystem = FileSystem;\r\n\r\n    // Create the singleton instance\r\n    _instance = new FileSystem();\r\n\r\n    // Initialize the singleton instance\r\n    _instance.init(require("fileSystemImpl"));\r\n});\r\n\n//# sourceURL=/filesystem/FileSystem.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _*/\r\n\r\n/**\r\n *\r\n * This module dispatches these events:\r\n * - projectCreated:         (project)\r\n * - projectSaved:           (filename, project)\r\n * - projectLoaded:          (filename, project)\r\n * - beforeProjectClose:     (filename, project);\r\n * - projectClosed:\r\n * - imported:               (filename, element)\r\n * - exported:               (filename, element)\r\n */\r\ndefine('engine/ProjectManager',['require','exports','module','core/Core','core/OperationBuilder','core/Repository','file/FileUtils','filesystem/FileSystem'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var Core             = require(\"core/Core\"),\r\n        OperationBuilder = require(\"core/OperationBuilder\"),\r\n        Repository       = require(\"core/Repository\"),\r\n        FileUtils        = require(\"file/FileUtils\"),\r\n        FileSystem       = require(\"filesystem/FileSystem\");\r\n\r\n    /**\r\n     * Top-level project element.\r\n     * @private\r\n     * @type {Core.Project}\r\n     */\r\n    var _project = null;\r\n\r\n    /**\r\n     * 프로젝트 파일 이름\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    var _filename = null;\r\n\r\n\r\n    /**\r\n     * Return project\r\n     * @return {Core.Project}\r\n     */\r\n    function getProject() {\r\n        return _project;\r\n    }\r\n\r\n    /**\r\n     * New project\r\n     * @return {Core.Project}\r\n     */\r\n    function newProject() {\r\n        try {\r\n            _project = new Core.Project();\r\n            _filename = null;\r\n            Repository.clear();\r\n            Repository.getIdMap()[_project._id] = _project;\r\n            $(exports).triggerHandler('projectCreated', [_project]);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        return _project;\r\n    }\r\n\r\n    /**\r\n     * Close project\r\n     */\r\n    function closeProject() {\r\n        try {\r\n            $(exports).triggerHandler('beforeProjectClose', [_filename, _project]);\r\n            _project = null;\r\n            _filename = null;\r\n            Repository.clear();\r\n            $(exports).triggerHandler('projectClosed');\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save project to file\r\n     * @param {string} fullPath\r\n     * @return {$.Promise}\r\n     */\r\n    function save(fullPath) {\r\n        var file = FileSystem.getFileForPath(fullPath),\r\n            result = new $.Deferred(),\r\n            data = Repository.writeObject(_project);\r\n\r\n        FileUtils.writeText(file, data, true)\r\n            .done(function () {\r\n                try {\r\n                    _filename = fullPath;\r\n                    Repository.setModified(false);\r\n                    $(exports).triggerHandler('projectSaved', [_filename, _project]);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n                result.resolve(_filename);\r\n            })\r\n            .fail(function (err) {\r\n                result.reject(err);\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Load from a file\r\n     * @param {string} fullPath\r\n     * @return {$.Promise}\r\n     */\r\n    function load(fullPath) {\r\n        var result = new $.Deferred(),\r\n            file = FileSystem.getFileForPath(fullPath);\r\n\r\n        FileUtils.readAsText(file)\r\n            .done(function (data) {\r\n                if (data) {\r\n                    closeProject();\r\n                    try {\r\n                        _project = Repository.readObject(data);\r\n                        _filename = fullPath;\r\n                        Repository.setModified(false);\r\n                        $(exports).triggerHandler('projectLoaded', [_filename, _project]);\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                    }\r\n                    result.resolve(_project);\r\n                }\r\n            })\r\n            .fail(function (err) {\r\n                result.reject(err);\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n\r\n    /**\r\n     * Load from a file as template\r\n     * @param {string} fullPath\r\n     * @return {$.Promise} JQuery Promise Object.\r\n     */\r\n    function loadAsTemplate(fullPath) {\r\n        var file = FileSystem.getFileForPath(fullPath),\r\n            result = new $.Deferred();\r\n        FileUtils.readAsText(file)\r\n            .done(function (data) {\r\n                if (data) {\r\n                    closeProject();\r\n                    try {\r\n                        _project = Repository.readObject(data);\r\n                        _filename = null;\r\n                        Repository.setModified(false);\r\n                        $(exports).triggerHandler('projectLoaded', [_filename, _project]);\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                    }\r\n                    result.resolve(_project);\r\n                }\r\n            })\r\n            .fail(function (err) {\r\n                result.reject(err);\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Load project from JSON\r\n     * @param {Object} data JSON data.\r\n     * @param {Project} Loaded Project object.\r\n     */\r\n    function loadFromJson(data) {\r\n        if (data) {\r\n            closeProject();\r\n            try {\r\n                _project = Repository.readObject(data);\r\n                Repository.setModified(false);\r\n                $(exports).triggerHandler('projectLoaded', [null, _project]);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        return _project;\r\n    }\r\n\r\n    /**\r\n     * Import model fragment from a file.\r\n     * @param {Core.Element} parent Element to contain the imported element.\r\n     * @param {string} fullPath\r\n     * @return {$.Promise} JQuery Promise Object.\r\n     */\r\n    function importFromFile(parent, fullPath) {\r\n        var file = FileSystem.getFileForPath(fullPath),\r\n            result = new $.Deferred();\r\n        FileUtils.readAsText(file)\r\n            .done(function (data) {\r\n                var elem;\r\n                if (data) {\r\n                    try {\r\n                        elem = Repository.readObject(data, true);\r\n                        // Bypass Operation (for insert elem to parent)\r\n                        OperationBuilder.begin(\"\", true);\r\n                        OperationBuilder.fieldInsert(parent, \"ownedElements\", elem);\r\n                        OperationBuilder.fieldAssign(elem, \"_parent\", parent);\r\n                        OperationBuilder.end();\r\n                        Repository.doOperation(OperationBuilder.getOperation());\r\n                        Repository.setModified(true);\r\n                        $(exports).triggerHandler('imported', [fullPath, elem]);\r\n                        result.resolve(elem);\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                        result.reject(err);\r\n                    }\r\n                }\r\n            })\r\n            .fail(function (err) {\r\n                result.reject(err);\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Import from JSON\r\n     * @param {Element} parent Element to contain the imported element.\r\n     * @param {Object} data JSON data\r\n     * @return {Element} Imported element.\r\n     */\r\n    function importFromJson(parent, data) {\r\n        var elem = null;\r\n        if (data) {\r\n            try {\r\n                elem = Repository.readObject(data);\r\n                // Bypass Operation (for insert elem to parent)\r\n                OperationBuilder.begin(\"\", true);\r\n                OperationBuilder.fieldInsert(parent, \"ownedElements\", elem);\r\n                OperationBuilder.fieldAssign(elem, \"_parent\", parent);\r\n                OperationBuilder.end();\r\n                Repository.doOperation(OperationBuilder.getOperation());\r\n                Repository.setModified(true);\r\n                $(exports).triggerHandler('imported', [null, elem]);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        return elem;\r\n    }\r\n\r\n    /**\r\n     * Export model fragment to a file.\r\n     * @param {Core.Element} elem Element to be exported.\r\n     * @param {string} fullPath\r\n     * @return {$.Promise} JQuerty Promise Object\r\n     */\r\n    function exportToFile(elem, fullPath) {\r\n        var file = FileSystem.getFileForPath(fullPath),\r\n            result = new $.Deferred(),\r\n            data = Repository.writeObject(elem);\r\n        FileUtils.writeText(file, data, true)\r\n            .done(function () {\r\n                try {\r\n                    $(exports).triggerHandler('exported', [fullPath, elem]);\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n                result.resolve(fullPath);\r\n            })\r\n            .fail(function (err) {\r\n                result.reject(err);\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Return current filename.\r\n     * @return {string}\r\n     */\r\n    function getFilename() {\r\n        return _filename;\r\n    }\r\n\r\n    exports.getProject          = getProject;\r\n    exports.newProject          = newProject;\r\n    exports.closeProject        = closeProject;\r\n    exports.save                = save;\r\n    exports.load                = load;\r\n    exports.loadAsTemplate      = loadAsTemplate;\r\n    exports.loadFromJson        = loadFromJson;\r\n    exports.importFromFile      = importFromFile;\r\n    exports.importFromJson      = importFromJson;\r\n    exports.exportToFile        = exportToFile;\r\n    exports.getFilename         = getFilename;\r\n    exports._setFilename = function (fullPath) { _filename = fullPath; };  // for test\r\n\r\n});\r\n\n//# sourceURL=/engine/ProjectManager.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, _, $, window, btoa, atob*/\r\n\r\ndefine(\'utils/Helper\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n\r\n    /**\r\n     * 난수 생성을 위한 Counter\r\n     */\r\n    var idGeneratorCounter = Math.floor(Math.random() * 65536);\r\n\r\n\r\n    /**\r\n     * 난수 생성기\r\n     */\r\n    var _idGenerator = null;\r\n\r\n\r\n    /**\r\n     * Define atob, btoa functions\r\n     */\r\n    if (!window.atob) {\r\n        var tableStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";\r\n        var table = tableStr.split("");\r\n\r\n        window.atob = function (base64) {\r\n            if (/(=[^=]+|={3,})$/.test(base64)) throw new Error("String contains an invalid character");\r\n            base64 = base64.replace(/=/g, "");\r\n            var n = base64.length & 3;\r\n            if (n === 1) throw new Error("String contains an invalid character");\r\n            for (var i = 0, j = 0, len = base64.length / 4, bin = []; i < len; ++i) {\r\n                var a = tableStr.indexOf(base64[j++] || "A"),\r\n                    b = tableStr.indexOf(base64[j++] || "A");\r\n                var c = tableStr.indexOf(base64[j++] || "A"),\r\n                    d = tableStr.indexOf(base64[j++] || "A");\r\n                if ((a | b | c | d) < 0) throw new Error("String contains an invalid character");\r\n                bin[bin.length] = ((a << 2) | (b >> 4)) & 255;\r\n                bin[bin.length] = ((b << 4) | (c >> 2)) & 255;\r\n                bin[bin.length] = ((c << 6) | d) & 255;\r\n            }\r\n            return String.fromCharCode.apply(null, bin).substr(0, bin.length + n - 4);\r\n        };\r\n\r\n        window.btoa = function (bin) {\r\n            for (var i = 0, j = 0, len = bin.length / 3, base64 = []; i < len; ++i) {\r\n                var a = bin.charCodeAt(j++),\r\n                    b = bin.charCodeAt(j++),\r\n                    c = bin.charCodeAt(j++);\r\n                if ((a | b | c) > 255) throw new Error("String contains an invalid character");\r\n                base64[base64.length] = table[a >> 2] + table[((a << 4) & 63) | (b >> 4)] +\r\n                    (isNaN(b) ? "=" : table[((b << 2) & 63) | (c >> 6)]) +\r\n                    (isNaN(b + c) ? "=" : table[c & 63]);\r\n            }\r\n            return base64.join("");\r\n        };\r\n    }\r\n\r\n    /**\r\n     * hexToBase64\r\n     * @private\r\n     */\r\n    function hexToBase64(str) {\r\n        return btoa(String.fromCharCode.apply(null,\r\n            str.replace(/\\r|\\n/g, "").replace(/([\\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")));\r\n    }\r\n\r\n    /**\r\n     * base64ToHex\r\n     * @private\r\n     */\r\n    function base64ToHex(str) {\r\n        for (var i = 0, bin = atob(str.replace(/[ \\r\\n]+$/, "")), hex = []; i < bin.length; ++i) {\r\n            var tmp = bin.charCodeAt(i).toString(16);\r\n            if (tmp.length === 1) tmp = "0" + tmp;\r\n            hex[hex.length] = tmp;\r\n        }\r\n        return hex.join(" ");\r\n    }\r\n\r\n    /**\r\n     * IdGenerator\r\n     *\r\n     * @constructor\r\n     */\r\n    function IdGenerator() {\r\n\r\n    }\r\n\r\n    IdGenerator.prototype.setBaseHex = function (val) {\r\n        return this.baseHex = val;\r\n    };\r\n\r\n    IdGenerator.prototype.toHex = function (digit, num) {\r\n        var fill, hex, r;\r\n        hex = num.toString(16);\r\n        if (hex.length < digit) {\r\n            r = digit - hex.length;\r\n            fill = Array(r + 1).join("0");\r\n            hex = fill + hex;\r\n        }\r\n        return hex;\r\n    };\r\n\r\n    IdGenerator.prototype.generate = function () {\r\n        var base64, counter, counterHex, hex, random, randomHex, timestamp, timestampHex;\r\n        timestamp = (new Date()).getTime();\r\n        counter = idGeneratorCounter;\r\n        idGeneratorCounter++;\r\n        if (idGeneratorCounter > 65535) {\r\n            idGeneratorCounter = 0;\r\n        }\r\n        random = Math.floor(Math.random() * 65536);\r\n        timestampHex = this.toHex(16, timestamp);\r\n        counterHex = this.toHex(4, counter);\r\n        randomHex = this.toHex(4, random);\r\n        hex = this.baseHex + timestampHex + counterHex + randomHex;\r\n        base64 = hexToBase64(hex);\r\n        return base64;\r\n    };\r\n\r\n    /**\r\n     *\r\n     *\r\n     */\r\n    function isElement(elem) {\r\n        if (_.isObject(elem) && (elem._id)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * append items to array\r\n     *\r\n     * @param {Array} array\r\n     * @param {Array} items\r\n     */\r\n    function append(array, items) {\r\n        var item, _i, _len, _results;\r\n        _results = [];\r\n        for (_i = 0, _len = items.length; _i < _len; _i++) {\r\n            item = items[_i];\r\n            _results.push(array.push(item));\r\n        }\r\n        return _results;\r\n    }\r\n\r\n    /**\r\n     * Traverse all elements\r\n     */\r\n    function traverse(elem, fun) {\r\n        var item, name, val, _i, _len, _results, _results1;\r\n        if (isElement(elem)) {\r\n            fun(elem);\r\n            _results = [];\r\n            for (name in elem) {\r\n                val = elem[name];\r\n                _results.push(this.traverse(val, fun));\r\n            }\r\n            return _results;\r\n        } else if (_.isArray(elem)) {\r\n            _results1 = [];\r\n            for (_i = 0, _len = elem.length; _i < _len; _i++) {\r\n                item = elem[_i];\r\n                _results1.push(this.traverse(item, fun));\r\n            }\r\n            return _results1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return timestamp\r\n     */\r\n    function getTimestamp() {\r\n        return (new Date()).getTime();\r\n    }\r\n\r\n    /**\r\n     * Set GUID Base\r\n     */\r\n    function setGuidBase(baseHex) {\r\n        _idGenerator = new IdGenerator();\r\n        _idGenerator.setBaseHex(baseHex);\r\n    }\r\n\r\n    /**\r\n     * Set GUID Base as Number\r\n     */\r\n    function setGuidBaseNum(baseNum) {\r\n        _idGenerator = new IdGenerator();\r\n        _idGenerator.setBaseHex(_idGenerator.toHex(24, baseNum));\r\n    }\r\n\r\n    /**\r\n     * Generate GUID\r\n     */\r\n    function generateGuid() {\r\n        if (_idGenerator === null) {\r\n            _idGenerator = new IdGenerator("");\r\n        }\r\n        return _idGenerator.generate();\r\n    }\r\n\r\n    /**\r\n     * 여러 요소의 필드 값을 조사하여 하나의 값으로 리턴.\r\n     * (모두 값은 값인 경우 그 값을 리턴하고, 아닌 경우에는 null을 리턴)\r\n     * @param {Array.<Element>} elems\r\n     * @param {string} field - 요소의 필드명\r\n     */\r\n    function reduceValue(elems, field) {\r\n        // Collect values only if elem has the field.\r\n        var values = [];\r\n        _.each(elems, function (e) {\r\n            if (typeof e[field] !== "undefined") {\r\n                values.push(e[field]);\r\n            }\r\n        });\r\n        // if all values are same, then return that value, otherwise return null;\r\n        if (values.length > 0) {\r\n            var value = values[0];\r\n            for (var i = 0, len = values.length; i < len; i++) {\r\n                if (value !== values[i]) {\r\n                    return null;\r\n                }\r\n            }\r\n            return value;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 모든 요소들이 필드를 가지고 있으면 true 아니면 false를 리턴.\r\n     * @param {Array.<Element>} elems\r\n     * @param {string} field - 요소의 필드명\r\n     */\r\n    function reduceField(elems, field) {\r\n        if (elems && elems.length > 0) {\r\n            for (var i = 0, len = elems.length; i < len; i++) {\r\n                if (_.isUndefined(elems[i][field])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 부모 요소에 크기를 맞춤.\r\n     *\r\n     * @param {jQueryObject} $elem\r\n     */\r\n    function fillParent(selector) {\r\n        $(selector).each(function (index) {\r\n            var $elem          = $(this),\r\n                $parent        = $elem.parent(),\r\n                widthGap       = $elem.outerWidth(true) - $elem.innerWidth(),\r\n                heightGap      = $elem.outerHeight(true) - $elem.innerHeight(),\r\n                siblingsHeight = 0;\r\n            $elem.siblings().each(function (index) {\r\n                siblingsHeight += Math.ceil($(this).outerHeight(true));\r\n            });\r\n            $elem.width($parent.innerWidth() - widthGap);\r\n            $elem.height($parent.innerHeight() - heightGap - siblingsHeight);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 문자열을 jQuery용 id에 적합한 문자열로 변환하여 돌려줌.\r\n     * @param {string} idStr\r\n     * @return {string}\r\n     */\r\n    function convertId(idStr) {\r\n        return idStr.replace(/\\./gi, "-");\r\n    }\r\n\r\n    /**\r\n     * Degree 값을 Radian 값으로 변환\r\n     * @param {number} degree\r\n     * @return {number} - radian\r\n     */\r\n    function toRadian(degree) {\r\n        return degree * Math.PI / 180;\r\n    }\r\n\r\n    /**\r\n     * Radian 값을 Degree 값으로 변환\r\n     * @param {number} radin\r\n     * @return {number} - degree\r\n     */\r\n    function toDegree(radian) {\r\n        return radian * (180 / Math.PI);\r\n    }\r\n\r\n    /**\r\n     * Assert 함수\r\n     * @param {boolean} condition\r\n     * @param {string} message\r\n     * @throws exception\r\n     */\r\n    function assert(condition, message) {\r\n        if (!condition) {\r\n            throw message || "Assertion failed";\r\n        }\r\n    }\r\n\r\n    // Public API\r\n    exports.isElement      = isElement;\r\n    exports.append         = append;\r\n    exports.traverse       = traverse;\r\n    exports.getTimestamp   = getTimestamp;\r\n    exports.setGuidBase    = setGuidBase;\r\n    exports.setGuidBaseNum = setGuidBaseNum;\r\n    exports.generateGuid   = generateGuid;\r\n    exports.reduceValue    = reduceValue;\r\n    exports.reduceField    = reduceField;\r\n    exports.fillParent     = fillParent;\r\n    exports.convertId      = convertId;\r\n    exports.toRadian       = toRadian;\r\n    exports.toDegree       = toDegree;\r\n    exports.assert         = assert;\r\n\r\n});\r\n\n//# sourceURL=/utils/Helper.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, loopfunc: true */\r\n/*global define, $, _, window, appshell */\r\n\r\n/**\r\n * Engine\r\n */\r\ndefine(\'engine/Engine\',[\'require\',\'exports\',\'module\',\'core/Global\',\'utils/Helper\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Repository\',\'core/OperationBuilder\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global            = require("core/Global").global,\r\n        Helper            = require("utils/Helper"),\r\n        Core              = require("core/Core"),\r\n        Project           = require("core/Core").Project,\r\n        Reader            = require("core/Core").Reader,\r\n        Writer            = require("core/Core").Writer,\r\n        Const             = require("core/Core").Const,\r\n        Cursor            = require("core/Core").Cursor,\r\n        MouseEvent        = require("core/Core").MouseEvent,\r\n        NodeView          = require("core/Core").NodeView,\r\n        EdgeView          = require("core/Core").EdgeView,\r\n        LabelView         = require("core/Core").LabelView,\r\n        ParasiticView     = require("core/Core").ParasiticView,\r\n        NodeParasiticView = require("core/Core").NodeParasiticView,\r\n        EdgeParasiticView = require("core/Core").EdgeParasiticView,\r\n        EdgeLabelView     = require("core/Core").EdgeLabelView,\r\n        Repository        = require("core/Repository"),\r\n        OperationBuilder  = require("core/OperationBuilder");\r\n\r\n\r\n    /**\r\n     * Add a model element\r\n     *\r\n     * @param {Model} parent\r\n     * @param {string} field\r\n     * @param {Model} model - model element to be added\r\n     * @return {Model}\r\n     */\r\n    function addModel(parent, field, model) {\r\n        if (!parent || !field || !model) {\r\n            console.error("Engine.addModel(): missing required parameters: parent, field, or model.");\r\n            return null;\r\n        }\r\n        if (!parent[field]) {\r\n            console.error("Engine.addModel(): " + field + " is not defined in parent parameter.");\r\n            return null;\r\n        }\r\n        if (parent !== null) {\r\n            OperationBuilder.begin("add model");\r\n            model._parent = parent;\r\n            OperationBuilder.insert(model);\r\n            OperationBuilder.fieldInsert(parent, field, model);\r\n            OperationBuilder.end();\r\n            var cmd = OperationBuilder.getOperation();\r\n            Repository.doOperation(cmd);\r\n        }\r\n        if (model) {\r\n            return Repository.get(model._id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add view elements.\r\n     *\r\n     * @param {diagram} diagram Diagram where added views to be placed.\r\n     * @param {Array.<Core.View>} views Views to be added.\r\n     */\r\n    function addViews(diagram, views) {\r\n        if (!diagram || !views) {\r\n            console.error("Engine.addViews(): missing required parameters: diagram or views");\r\n            return null;\r\n        }\r\n\r\n        OperationBuilder.begin(\'add views\');\r\n        for (var i = 0, len = views.length; i < len; i++) {\r\n            var view = views[i];\r\n            view._parent = diagram;\r\n            OperationBuilder.insert(view);\r\n            OperationBuilder.fieldInsert(diagram, \'ownedViews\', view);\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    }\r\n\r\n    /**\r\n     * Add a model element and a view element.\r\n     *\r\n     * @param {Diagram} diagram Diagram where added views to be placed.\r\n     * @param {Model} model Model element to be added.\r\n     * @param {View} view View element to be added.\r\n     * @param {Model} parent Parent element to contain the model element\r\n     * @param {?string} parentField Array field name of the parent (default = \'ownedElements\')\r\n     * @param {?View} containerView Container view where the view element to be contained (optional)\r\n     */\r\n    function addModelAndView(diagram, model, view, parent, parentField, containerView) {\r\n        if (!diagram || !model || !view || !parent) {\r\n            console.error("Engine.addModelAndView(): missing required parameters: diagram, model, view or parent");\r\n            return null;\r\n        }\r\n\r\n        var field = \'ownedElements\';\r\n        if (parentField) {\r\n            field = parentField;\r\n        }\r\n\r\n        if (!parent[field]) {\r\n            console.error("Engine.addModelAndView(): " + field + " is not defined in parent parameter.");\r\n            return null;\r\n        }\r\n\r\n        OperationBuilder.begin(\'add element\');\r\n        // model\r\n        model._parent = parent;\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, field, model);\r\n        // view\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        if (containerView) {\r\n            view.containerView = containerView;\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, \'ownedViews\', view);\r\n        if (containerView) {\r\n            OperationBuilder.fieldInsert(containerView, \'containedViews\', view);\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n\r\n        if (view) {\r\n            return Repository.get(view._id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set value to a property of an element.\r\n     *\r\n     * @param {Element} elem\r\n     * @param {string} field\r\n     * @param {?} value\r\n     */\r\n    function setProperty(elem, field, value) {\r\n        if (!elem || !field) {\r\n            console.error("Engine.setProperty(): missing required parameters: elem or field");\r\n            return null;\r\n        }\r\n\r\n        if (typeof elem[field] === "undefined") {\r\n            console.error("Engine.setProperty(): " + field + " is not defined in elem parameter.");\r\n            return null;\r\n        }\r\n\r\n        OperationBuilder.begin(\'change property\');\r\n        OperationBuilder.fieldAssign(elem, field, value);\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    }\r\n\r\n    /**\r\n     * Set values to multiple properties of an elements.\r\n     *\r\n     * @param {Element} elem\r\n     * @param {Object.<{string,?}>} fieldValueMap\r\n     */\r\n    function setProperties(elem, fieldValueMap) {\r\n        if (!elem || !fieldValueMap) {\r\n            console.error("Engine.setProperties(): missing required parameters: elem or fieldValueMap");\r\n            return null;\r\n        }\r\n        OperationBuilder.begin(\'change properties\');\r\n        var field, value;\r\n        for (field in fieldValueMap) {\r\n            if (fieldValueMap.hasOwnProperty(field)) {\r\n                value = fieldValueMap[field];\r\n                OperationBuilder.fieldAssign(elem, field, value);\r\n            }\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    }\r\n\r\n    /**\r\n     * Set value to a property of multiple elements\r\n     *\r\n     * @param {Array.<View>} views\r\n     * @param {string} field\r\n     * @param {?} value\r\n     */\r\n    function setElemsProperty(elems, field, value) {\r\n        if (!elems || !field) {\r\n            console.error("Engine.setElemsProperty(): missing required parameters: elems or field");\r\n            return null;\r\n        }\r\n\r\n        OperationBuilder.begin(\'change property\');\r\n        for (var i = 0, len = elems.length; i < len; i++) {\r\n            var elem = elems[i];\r\n            if (!_.isUndefined(elem[field])) {\r\n                OperationBuilder.fieldAssign(elem, field, value);\r\n            }\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    }\r\n\r\n    /**\r\n     * Determine a set of elements to be deleted.\r\n     * @private\r\n     * @param {Array.<Model>} models A set of model elements to be deleted.\r\n     * @param {Array.<View>} views A set of view elements to be deleted.\r\n     */\r\n    function _determineDeletingElements(models, views) {\r\n\r\n        var changed = false;\r\n\r\n        // 1) exclude undeletable models\r\n        _.each(models, function (m) {\r\n            if (m instanceof Core.Project) {\r\n                models.remove(m);\r\n            }\r\n        });\r\n        do {\r\n            changed = false;\r\n            // 2) include models owned by\r\n            _.each(models, function (m) {\r\n                _.each(m.getChildren(), function (child) {\r\n                    if (!_.contains(models, child)) {\r\n                        models.push(child);\r\n                        changed = true;\r\n                    }\r\n                });\r\n            });\r\n            // 3) include relations of\r\n            _.each(models, function (m) {\r\n                _.each(Repository.getRelationshipsOf(m), function (rel) {\r\n                    if (!_.contains(models, rel)) {\r\n                        models.push(rel);\r\n                        changed = true;\r\n                    }\r\n                });\r\n            });\r\n            // 4) include views of\r\n            _.each(models, function (m) {\r\n                _.each(Repository.getViewsOf(m), function (v) {\r\n                    if (!_.contains(views, v)) {\r\n                        views.push(v);\r\n                        changed = true;\r\n                    }\r\n                });\r\n            });\r\n            // 5) include contained views of\r\n            _.each(views, function (v) {\r\n                _.each(v.containedViews, function (cv) {\r\n                    if (!_.contains(views, cv)) {\r\n                        views.push(cv);\r\n                        changed = true;\r\n                    }\r\n                });\r\n            });\r\n            // 6) include subviews of\r\n            _.each(views, function (v) {\r\n                _.each(v.subViews, function (sub) {\r\n                    if (!_.contains(views, sub)) {\r\n                        views.push(sub);\r\n                        changed = true;\r\n                    }\r\n                });\r\n            });\r\n            // 7) include edge views of\r\n            _.each(views, function (v) {\r\n                _.each(Repository.getEdgeViewsOf(v), function (edge) {\r\n                    if (!_.contains(views, edge)) {\r\n                        views.push(edge);\r\n                        changed = true;\r\n                    }\r\n                });\r\n            });\r\n            // 8) include parasitic views of\r\n            _.each(views, function (v) {\r\n                var _parasiticViews = Repository.getRefsTo(v, function (_refTo) {\r\n                    return ((_refTo instanceof type.NodeParasiticView) && (_refTo.hostNode === v)) ||\r\n                           ((_refTo instanceof type.EdgeParasiticView) && (_refTo.hostEdge === v));\r\n                });\r\n                _.each(_parasiticViews, function (parasiticView) {\r\n                    if (!_.contains(views, parasiticView)) {\r\n                        views.push(parasiticView);\r\n                        changed = true;\r\n                    }\r\n                });\r\n            });\r\n            // 9) customizable deleting models and views (plug-in dependent)\r\n            //    e.g) _includeRelatedViewsOf(data);\r\n            //    e.g.) _includeModelsThatShouldBeDeletedWithViews(data);\r\n        } while (changed);\r\n    }\r\n\r\n    /**\r\n     * Determine elements referencing to a particular set of elements.\r\n     *\r\n     * @private\r\n     * @param {Array.<Element>} elems A set of elements\r\n     * @return {Array.<Element>} Elements referencing to the set of elements\r\n     */\r\n    function _determineOutsideElements(elems) {\r\n        var outsides = [];\r\n        _.each(elems, function (e) {\r\n            _.each(Repository.getRefsTo(e), function (ref) {\r\n                if (!_.contains(outsides, ref) && !_.contains(elems, ref)) {\r\n                    outsides.push(ref);\r\n                }\r\n            });\r\n        });\r\n        return outsides;\r\n    }\r\n\r\n    /**\r\n     * Delete elements.\r\n     *\r\n     * @param {Array.<Model>} models Model elements to be deleted.\r\n     * @param {Array.<View>} views View elements to be deleted.\r\n     */\r\n    function deleteElements(models, views) {\r\n        if (!models || !views) {\r\n            console.error("Engine.deleteElements(): missing required parameters: models or views");\r\n            return null;\r\n        }\r\n\r\n        var ms = _.clone(models),\r\n            vs = _.clone(views);\r\n\r\n        // 1) determine deleting elements\r\n        _determineDeletingElements(ms, vs);\r\n\r\n        // 2) determine outside elements (which referencing deleting elements)\r\n        var all = _.union(ms, vs);\r\n        var outsides = _determineOutsideElements(all);\r\n\r\n        // 3) make delete operation and execute\r\n        OperationBuilder.begin(\'delete elements\');\r\n\r\n        // 3.1) - 외부로부터의 참조는 모두 제거하도록 한다.\r\n        _.each(outsides, function (elem) {\r\n            _.each(elem.getMetaAttributes(), function (attr) {\r\n                switch (attr.kind) {\r\n                case Core.ATTR_KIND_OBJ:\r\n                case Core.ATTR_KIND_REF:\r\n                    var ref = elem[attr.name];\r\n                    if (ref && _.contains(all, ref)) {\r\n                        OperationBuilder.fieldAssign(elem, attr.name, null);\r\n                    }\r\n                    break;\r\n                case Core.ATTR_KIND_OBJS:\r\n                case Core.ATTR_KIND_REFS:\r\n                    var refs = elem[attr.name];\r\n                    if (refs && refs.length > 0) {\r\n                        for (var i = 0; i < refs.length; i++) {\r\n                            var ref = refs[i];\r\n                            if (ref._id && _.contains(all, ref)) {\r\n                                OperationBuilder.fieldRemove(elem, attr.name, ref);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            });\r\n        });\r\n\r\n        // 3.2) - 중복 삭제 제거하기\r\n        // OperationBuilder의 remove는 모든 하위 요소들의 삭제들도 함께 제거하기 때문에\r\n        // 하위 요소들을 중복해서 삭제하지 않도록 하는것이 효율적이다.\r\n        var subElements = [];\r\n        _.each(all, function (e) {\r\n            var children = e.getChildren();\r\n            _.each(children, function (c) {\r\n                if (!_.contains(subElements, c)) {\r\n                    subElements.push(c);\r\n                }\r\n            });\r\n        });\r\n        for (var i = vs.length-1; i >= 0; i--) {\r\n            var v = vs[i];\r\n            if (_.contains(subElements, v)) {\r\n                vs.remove(v);\r\n            }\r\n        }\r\n        for (var i = ms.length-1; i >= 0; i--) {\r\n            var m = ms[i];\r\n            if (_.contains(subElements, m)) {\r\n                ms.remove(m);\r\n            }\r\n        }\r\n\r\n        // 3.3) - 뷰 요소들 삭제\r\n        _.each(vs, function (v) {\r\n            OperationBuilder.remove(v);\r\n        });\r\n\r\n        // 3.4) - 모델 요소들 삭제\r\n        _.each(ms, function (m) {\r\n            OperationBuilder.remove(m);\r\n        });\r\n        OperationBuilder.end();\r\n        Repository.doOperation(OperationBuilder.getOperation());\r\n    }\r\n\r\n    /**\r\n     * Add an item to a particular array field of an element.\r\n     *\r\n     * @param {Element} elem\r\n     * @param {string} field\r\n     * @param {Element} val\r\n     */\r\n    function addItem(elem, field, val) {\r\n        if (!elem || !field) {\r\n            console.error("Engine.addItem(): missing required parameters: elem or field");\r\n            return null;\r\n        }\r\n\r\n        if (_.isArray(elem[field])) {\r\n            OperationBuilder.begin("add item");\r\n            OperationBuilder.fieldInsert(elem, field, val);\r\n            OperationBuilder.end();\r\n            var cmd = OperationBuilder.getOperation();\r\n            Repository.doOperation(cmd);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an item from a particular array field of an element.\r\n     *\r\n     * @param {Element} elem\r\n     * @param {string} field\r\n     * @param {Element} val\r\n     */\r\n    function removeItem(elem, field, val) {\r\n        if (!elem || !field) {\r\n            console.error("Engine.removeItem(): missing required parameters: elem or field");\r\n            return null;\r\n        }\r\n\r\n        if (_.isArray(elem[field])) {\r\n            OperationBuilder.begin("remove item");\r\n            OperationBuilder.fieldRemove(elem, field, val);\r\n            OperationBuilder.end();\r\n            var cmd = OperationBuilder.getOperation();\r\n            Repository.doOperation(cmd);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reorder an item of array field of an element to index - 1.\r\n     *\r\n     * @param {Element} parent\r\n     * @param {string} field\r\n     * @param {Element} elem\r\n     */\r\n    function moveUp(parent, field, elem) {\r\n        if (!parent || !field) {\r\n            console.error("Engine.moveUp(): missing required parameters: parent or field");\r\n            return null;\r\n        }\r\n\r\n        // Find above index considering sort by type ordering.\r\n        var array = parent[field];\r\n        var sortedArray = _.sortBy(array, function (child, idx) {\r\n            return child.getOrdering(idx);\r\n        });\r\n        var indexInSortedArray = _.indexOf(sortedArray, elem);\r\n        var above, index = 0;\r\n        if (indexInSortedArray > 0) {\r\n            above = sortedArray[indexInSortedArray - 1];\r\n            index = _.indexOf(array, above);\r\n        }\r\n\r\n        // Make move up operation\r\n        if (index >= 0) {\r\n            OperationBuilder.begin("move up");\r\n            OperationBuilder.fieldReorder(parent, field, elem, index);\r\n            OperationBuilder.end();\r\n            var cmd = OperationBuilder.getOperation();\r\n            Repository.doOperation(cmd);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reorder an item of array field of an element to index + 1.\r\n     *\r\n     * @param {Element} parent\r\n     * @param {string} field\r\n     * @param {Element} elem\r\n     */\r\n    function moveDown(parent, field, elem) {\r\n        if (!parent || !field) {\r\n            console.error("Engine.moveDown(): missing required parameters: parent or field");\r\n            return null;\r\n        }\r\n\r\n        // Find below index considering sort by type ordering.\r\n        var array = parent[field];\r\n        var sortedArray = _.sortBy(array, function (child, idx) {\r\n            return child.getOrdering(idx);\r\n        });\r\n        var indexInSortedArray = _.indexOf(sortedArray, elem);\r\n        var below, index = 0;\r\n        if (indexInSortedArray >= 0 && indexInSortedArray < sortedArray.length - 1) {\r\n            below = sortedArray[indexInSortedArray + 1];\r\n            index = _.indexOf(array, below);\r\n        }\r\n\r\n        // Make move down operation\r\n        if (index < array.length) {\r\n            OperationBuilder.begin("move down");\r\n            OperationBuilder.fieldReorder(parent, field, elem, index);\r\n            OperationBuilder.end();\r\n            var cmd = OperationBuilder.getOperation();\r\n            Repository.doOperation(cmd);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Relocate an element to a new owner (parent).\r\n     *\r\n     * @param {Element} elem\r\n     * @param {Element} newOwner\r\n     * @param {string} field\r\n     */\r\n    function relocate(elem, newOwner, field) {\r\n        if (!elem || !newOwner || !field) {\r\n            console.error("Engine.relocate(): missing required parameters: elem, newOwner or field");\r\n            return null;\r\n        }\r\n\r\n        var oldOwner = elem._parent;\r\n        if ((oldOwner !== newOwner) && oldOwner[field] && _.contains(oldOwner[field], elem) && newOwner[field]) {\r\n            OperationBuilder.begin("relocate");\r\n            OperationBuilder.fieldRelocate(elem, field, oldOwner, newOwner);\r\n            var cmd = OperationBuilder.getOperation();\r\n            Repository.doOperation(cmd);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Move views.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {number} dx\r\n     * @param {number} dy\r\n     */\r\n    function moveViews(editor, views, dx, dy) {\r\n        if (!editor || !views) {\r\n            console.error("Engine.moveView(): missing required parameters: editor or views");\r\n            return null;\r\n        }\r\n\r\n        if (!_.isNumber(dx) || !_.isNumber(dy)) {\r\n            console.error("Engine.moveView(): dx and dy should be number type");\r\n            return null;\r\n        }\r\n\r\n        // 1. 이동할 뷰들을 결정\r\n        var moveViews = [], changed = false;\r\n        Helper.append(moveViews, views);\r\n        // 1.1) ContainedViews 포함하기\r\n        do {\r\n            changed = false;\r\n            _.each(moveViews, function (v) {\r\n                _.each(v.containedViews, function (v1) {\r\n                    if (!_.contains(moveViews, v1)) {\r\n                        moveViews.push(v1);\r\n                        changed = true;\r\n                    }\r\n                });\r\n                // subViews의 containedViews도 포함\r\n                _.each(v.subViews, function (v2) {\r\n                    _.each(v2.subViews, function (v3) {\r\n                        if (!_.contains(moveViews, v3)) {\r\n                            moveViews.push(v3);\r\n                            changed = true;\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        } while (changed);\r\n        // 1.2) Self-Linked EdgeViews들 포함하기\r\n        editor.diagram.traverse(function (v) {\r\n            if ((v instanceof EdgeView) && _.contains(moveViews, v.head) && (v.head === v.tail) && !_.contains(moveViews, v)) {\r\n                if (!_.contains(moveViews, v)) {\r\n                    moveViews.push(v);\r\n                }\r\n            }\r\n        });\r\n        // 1.3) Head 및 Tail 측이 모두 이동하는 경우, 해당 EdgeViews들 포함하기\r\n        editor.diagram.traverse(function (v) {\r\n            if ((v instanceof EdgeView) && _.contains(moveViews, v.head) && _.contains(moveViews, v.tail) && !_.contains(moveViews, v)) {\r\n                if (!_.contains(moveViews, v)) {\r\n                    moveViews.push(v);\r\n                }\r\n            }\r\n        });\r\n        // 2. 이동으로 인하여 변경될 수 있는 Views의 상태들 기억하기\r\n        var changes = [];\r\n        Helper.append(changes, moveViews);\r\n        editor.diagram.traverse(function (v) {\r\n            // 이동하는 Views들을 연결하는 Edge 뷰들도 변경 대상에 포함. (노드가 이동하면 엣지의 points들이 변경되기 때문)\r\n            if ((v instanceof EdgeView) && (_.contains(changes, v.head) || _.contains(changes, v.tail))) {\r\n                if (!_.contains(changes, v)) { changes.push(v); }\r\n                for (var i = 0, len = v.subViews.length; i < len; i++) {\r\n                    var sub = v.subViews[i];\r\n                    if (!_.contains(changes, v)) { changes.push(sub); }\r\n                }\r\n            }\r\n        });\r\n        // ContainedViews가 이동하면 ContainerView의 크기가 변한다.\r\n        for (var i = 0, len = moveViews.length; i < len; i++) {\r\n            var v = moveViews[i];\r\n            if ((!_.contains(changes, v.containerView)) && (v.containerView != null)) {\r\n                changes.push(v.containerView);\r\n            }\r\n        }\r\n        // 이동할 뷰들의 상태를 memento에 저장\r\n        var mementoArray = [];\r\n        for (var i = 0, len = changes.length; i < len; i++) {\r\n            var v = changes[i];\r\n            var memento = {};\r\n            v.assignTo(memento);\r\n            mementoArray.push(memento);\r\n        }\r\n        // 3. 뷰들을 이동\r\n        for (var i = 0, len = moveViews.length; i < len; i++) {\r\n            var v = moveViews[i];\r\n            v.move(editor.canvas, dx, dy);\r\n        }\r\n        // 모든 뷰들의 크기와 위치를 재계산함.\r\n        editor.repaint();\r\n        // 4. 이동하기전의 Views와 이동후의 Views의 diff를 수행하여 변경된 값들만 추출\r\n        var diffs = [];\r\n        for (var i = 0, len = changes.length; i < len; i++) {\r\n            var v = changes[i];\r\n            var ds = v.diff(mementoArray[i]);\r\n            Helper.append(diffs, ds);\r\n        }\r\n        // memento에 저장된 Views들의 상태를 복원\r\n        for (var i = 0, len = changes.length; i < len; i++) {\r\n            var v = changes[i];\r\n            v.assignFrom(mementoArray[i]);\r\n        }\r\n        // 5. diff의 결과를 바탕으로 operation를 구성하여 수행함.\r\n        OperationBuilder.begin(\'move views\');\r\n        for (var i = 0, len = diffs.length; i < len; i++) {\r\n            var d = diffs[i];\r\n            OperationBuilder.fieldAssign(d.elem, d.f, d.n);\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Move a parasitic view.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {ParasiticView} view\r\n     * @param {number} alpha\r\n     * @param {number} distance\r\n     */\r\n    function moveParasiticView(editor, view, alpha, distance) {\r\n        if (!editor || !view) {\r\n            console.error("Engine.moveParasiticView(): missing required parameters: editor or view");\r\n            return null;\r\n        }\r\n\r\n        if (!_.isNumber(alpha) || !_.isNumber(distance)) {\r\n            console.error("Engine.moveParasiticView(): alpha and distance should be number type");\r\n            return null;\r\n        }\r\n\r\n        var memento = {};\r\n        view.assignTo(memento);\r\n        view.alpha = alpha;\r\n        view.distance = distance;\r\n        editor.repaint();\r\n        var diffs = view.diff(memento);\r\n        OperationBuilder.begin(\'move parasitic view\');\r\n        for (var i = 0, len = diffs.length; i < len; i++) {\r\n            var d = diffs[i];\r\n            OperationBuilder.fieldAssign(d.elem, d.f, d.n);\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Resize a node view.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {NodeView} node\r\n     * @param {number} left\r\n     * @param {number} top\r\n     * @param {number} right\r\n     * @param {number} bottom\r\n     */\r\n    function resizeNode(editor, node, left, top, right, bottom) {\r\n        if (!editor || !node) {\r\n            console.error("Engine.resizeNode(): missing required parameters: editor or node");\r\n            return null;\r\n        }\r\n\r\n        if (!_.isNumber(left) || !_.isNumber(top) || !_.isNumber(right) || !_.isNumber(bottom)) {\r\n            console.error("Engine.resizeNode(): left, top, right and bottom should be number type");\r\n            return null;\r\n        }\r\n\r\n        var changes, cmd, d, diffs, ds, i, memento, mementoArray, v, _i, _j, _k, _l, _len, _len1, _len2, _len3;\r\n        changes = [node];\r\n        editor.diagram.traverse(function (v) {\r\n            var sub, _i, _len, _ref, _results;\r\n            if ((v instanceof EdgeView) && ((v.head === node) || (v.tail === node))) {\r\n                changes.push(v);\r\n                _ref = v.subViews;\r\n                _results = [];\r\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                    sub = _ref[_i];\r\n                    _results.push(changes.push(sub));\r\n                }\r\n                return _results;\r\n            }\r\n        });\r\n        mementoArray = [];\r\n        for (_i = 0, _len = changes.length; _i < _len; _i++) {\r\n            v = changes[_i];\r\n            memento = {};\r\n            v.assignTo(memento);\r\n            mementoArray.push(memento);\r\n        }\r\n        node.left = left;\r\n        node.top = top;\r\n        node.setRight(right);\r\n        node.setBottom(bottom);\r\n        editor.repaint();\r\n        diffs = [];\r\n        for (i = _j = 0, _len1 = changes.length; _j < _len1; i = ++_j) {\r\n            v = changes[i];\r\n            ds = v.diff(mementoArray[i]);\r\n            Helper.append(diffs, ds);\r\n        }\r\n        for (i = _k = 0, _len2 = changes.length; _k < _len2; i = ++_k) {\r\n            v = changes[i];\r\n            v.assignFrom(mementoArray[i]);\r\n        }\r\n        OperationBuilder.begin(\'resize node\');\r\n        for (_l = 0, _len3 = diffs.length; _l < _len3; _l++) {\r\n            d = diffs[_l];\r\n            OperationBuilder.fieldAssign(d.elem, d.f, d.n);\r\n        }\r\n        OperationBuilder.end();\r\n        cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Modify points of an edge view.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {EdgeView} edge\r\n     * @param {Points} points\r\n     */\r\n    function modifyEdge(editor, edge, points) {\r\n        if (!editor || !edge || !points) {\r\n            console.error("Engine.modifyEdge(): missing required parameters: editor, edge, or points");\r\n            return null;\r\n        }\r\n\r\n        var changes = [edge];\r\n        for (var i = 0, len = edge.subViews.length; i < len; i++) {\r\n            var sub = edge.subViews[i];\r\n            changes.push(sub);\r\n        }\r\n        var mementoArray = [];\r\n        for (var j = 0, len1 = changes.length; j < len1; j++) {\r\n            var v = changes[j];\r\n            var memento = {};\r\n            v.assignTo(memento);\r\n            mementoArray.push(memento);\r\n        }\r\n        edge.points.assign(points);\r\n        editor.repaint();\r\n        var diffs = [];\r\n        for (var i = 0, len2 = changes.length; i < len2; i++) {\r\n            var v = changes[i];\r\n            var ds = v.diff(mementoArray[i]);\r\n            Helper.append(diffs, ds);\r\n        }\r\n        for (var i = 0, len3 = changes.length; i < len3; i++) {\r\n            var v = changes[i];\r\n            v.assignFrom(mementoArray[i]);\r\n        }\r\n        OperationBuilder.begin(\'modify edge\');\r\n        for (var m = 0, len4 = diffs.length; m < len4; m++) {\r\n            var d = diffs[m];\r\n            OperationBuilder.fieldAssign(d.elem, d.f, d.n);\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Reconnect an end (head-side or tail-side) of edge view to new element.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {EdgeView} edge\r\n     * @param {Points} points\r\n     * @param {NodeView} newParticipant\r\n     * @param {boolean} isTailSide\r\n     */\r\n    function reconnectEdge(editor, edge, points, newParticipant, isTailSide) {\r\n        if (!editor || !edge || !points || !newParticipant) {\r\n            console.error("Engine.reconnectEdge(): missing required parameters: editor, edge, points, or newParticipant");\r\n            return null;\r\n        }\r\n\r\n        var changes = [edge];\r\n        for (var i = 0, len = edge.subViews.length; i < len; i++) {\r\n            var sub = edge.subViews[i];\r\n            changes.push(sub);\r\n        }\r\n        var mementoArray = [];\r\n        for (var j = 0, len1 = changes.length; j < len1; j++) {\r\n            var v = changes[j];\r\n            var memento = {};\r\n            v.assignTo(memento);\r\n            mementoArray.push(memento);\r\n        }\r\n        edge.points.assign(points);\r\n        editor.repaint();\r\n        var diffs = [];\r\n        for (var i = 0, len2 = changes.length; i < len2; i++) {\r\n            var v = changes[i];\r\n            var ds = v.diff(mementoArray[i]);\r\n            Helper.append(diffs, ds);\r\n        }\r\n        for (var i = 0, len3 = changes.length; i < len3; i++) {\r\n            var v = changes[i];\r\n            v.assignFrom(mementoArray[i]);\r\n        }\r\n        OperationBuilder.begin(\'reconnect edge\');\r\n        for (var m = 0, len4 = diffs.length; m < len4; m++) {\r\n            var d = diffs[m];\r\n            OperationBuilder.fieldAssign(d.elem, d.f, d.n);\r\n        }\r\n        // reconnect model\'s field\r\n        if (isTailSide === true) {\r\n            OperationBuilder.fieldAssign(edge, \'tail\', newParticipant);\r\n        } else {\r\n            OperationBuilder.fieldAssign(edge, \'head\', newParticipant);\r\n        }\r\n        if (edge.model && newParticipant.model) {\r\n            if (edge.model instanceof Core.DirectedRelationship) {\r\n                if (isTailSide === true) {\r\n                    OperationBuilder.fieldAssign(edge.model, \'source\', newParticipant.model);\r\n                } else {\r\n                    OperationBuilder.fieldAssign(edge.model, \'target\', newParticipant.model);\r\n                }\r\n            } else if (edge.model instanceof Core.UndirectedRelationship) {\r\n                if (isTailSide === true) {\r\n                    OperationBuilder.fieldAssign(edge.model.end1, \'reference\', newParticipant.model);\r\n                } else {\r\n                    OperationBuilder.fieldAssign(edge.model.end2, \'reference\', newParticipant.model);\r\n                }\r\n            }\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    }\r\n\r\n    /**\r\n     * Move views by changing their container view.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {number} dx\r\n     * @param {number} dy\r\n     * @param {View} containerView\r\n     */\r\n    function moveViewsChangingContainer(editor, views, dx, dy, containerView, containerModel) {\r\n        if (!editor || !views) {\r\n            console.error("Engine.moveViewsChangingContainer(): missing required parameters: editor, views");\r\n            return null;\r\n        }\r\n\r\n        if (!_.isNumber(dx) || !_.isNumber(dy)) {\r\n            console.error("Engine.moveViewsChangingContainer(): dx and dy should be number type");\r\n            return null;\r\n        }\r\n\r\n        // 1. 이동할 뷰들을 결정\r\n        var moveViews = [];\r\n        Helper.append(moveViews, views);\r\n        // 1.1) ContainedViews 포함하기\r\n        for (var i = 0, len = moveViews.length; i < len; i++) {\r\n            var v = moveViews[i];\r\n            v.traverseField(\'containedViews\', function (view) {\r\n                if (!_.contains(moveViews, view)) {\r\n                    moveViews.push(view);\r\n                }\r\n            });\r\n            // subViews의 containedViews도 포함\r\n            v.traverseField(\'subViews\', function (v2) {\r\n                v2.traverseField(\'containedViews\', function (v3) {\r\n                    if (!_.contains(moveViews, v3)) {\r\n                        moveViews.push(v3);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        // 1.2) Self-Linked EdgeViews들 포함하기\r\n        editor.diagram.traverse(function (v) {\r\n            if ((v instanceof EdgeView) && _.contains(moveViews, v.head) && (v.head === v.tail) && !_.contains(moveViews, v)) {\r\n                if (!_.contains(moveViews, v)) {\r\n                    moveViews.push(v);\r\n                }\r\n            }\r\n        });\r\n        // 2. 이동으로 인하여 변경될 수 있는 Views의 상태들 기억하기\r\n        var changes = [];\r\n        Helper.append(changes, moveViews);\r\n        editor.diagram.traverse(function (v) {\r\n            // 이동하는 Views들을 연결하는 Edge 뷰들도 변경 대상에 포함. (노드가 이동하면 엣지의 points들이 변경되기 때문)\r\n            if ((v instanceof EdgeView) && (_.contains(changes, v.head) || _.contains(changes, v.tail))) {\r\n                if (!_.contains(changes, v)) { changes.push(v); }\r\n                for (var i = 0, len = v.subViews.length; i < len; i++) {\r\n                    var sub = v.subViews[i];\r\n                    if (!_.contains(changes, v)) { changes.push(sub); }\r\n                }\r\n            }\r\n        });\r\n        // ContainedViews가 이동하면 ContainerView의 크기가 변한다.\r\n        for (var i = 0, len = moveViews.length; i < len; i++) {\r\n            var v = moveViews[i];\r\n            if ((!_.contains(changes, v.containerView)) && (v.containerView != null)) {\r\n                changes.push(v.containerView);\r\n            }\r\n        }\r\n        // 이동할 뷰들의 상태를 memento에 저장\r\n        var mementoArray = [];\r\n        for (var i = 0, len = changes.length; i < len; i++) {\r\n            var v = changes[i];\r\n            var memento = {};\r\n            v.assignTo(memento);\r\n            mementoArray.push(memento);\r\n        }\r\n        // 3. 뷰들을 이동\r\n        for (var i = 0, len = moveViews.length; i < len; i++) {\r\n            var v = moveViews[i];\r\n            v.move(editor.canvas, dx, dy);\r\n        }\r\n        // 모든 뷰들의 크기와 위치를 재계산함.\r\n        editor.repaint();\r\n        // 4. 이동하기전의 Views와 이동후의 Views의 diff를 수행하여 변경된 값들만 추출\r\n        var diffs = [];\r\n        for (var i = 0, len = changes.length; i < len; i++) {\r\n            var v = changes[i];\r\n            var ds = v.diff(mementoArray[i]);\r\n            Helper.append(diffs, ds);\r\n        }\r\n        // memento에 저장된 Views들의 상태를 복원\r\n        for (var i = 0, len = changes.length; i < len; i++) {\r\n            var v = changes[i];\r\n            v.assignFrom(mementoArray[i]);\r\n        }\r\n        // 5. diff의 결과를 바탕으로 operation를 구성하여 수행함.\r\n        OperationBuilder.begin(\'move views\');\r\n        for (var i = 0, len = diffs.length; i < len; i++) {\r\n            var d = diffs[i];\r\n            OperationBuilder.fieldAssign(d.elem, d.f, d.n);\r\n        }\r\n\r\n        // 6. containerView, _parent를 변경\r\n        for (var i = 0, len = views.length; i < len; i++) {\r\n            var v = views[i];\r\n            // v.containerView를 변경\r\n            if (v.containerView !== null) {\r\n                OperationBuilder.fieldRemove(v.containerView, \'containedViews\', v);\r\n            }\r\n            OperationBuilder.fieldAssign(v, \'containerView\', containerView);\r\n            if (containerView !== null) {\r\n                OperationBuilder.fieldInsert(containerView, \'containedViews\', v);\r\n            }\r\n            // v를 containerView보다 나중에 그려지도록 diagram의 가장 뒤로 index를 변경\r\n            var newIdx = v.getDiagram().ownedViews.length - 1;\r\n            OperationBuilder.fieldReorder(v.getDiagram(), \'ownedViews\', v, newIdx);\r\n            // v.model을 containerModel로 relocate\r\n            var m = v.model;\r\n            var field = m.getParentField();\r\n            if (field) {\r\n                OperationBuilder.fieldRelocate(m, field, m._parent, containerModel);\r\n            }\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Change fill color of views.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {string} color (color string in CSS style: e.g. "#ffffff")\r\n     */\r\n    function setFillColor(editor, views, color) {\r\n        if (!editor || !views || !color) {\r\n            console.error("Engine.setFillColor(): missing required parameters: editor, views, or color");\r\n            return null;\r\n        }\r\n\r\n        var cmd, v, _i, _len;\r\n        OperationBuilder.begin(\'change fill color\');\r\n        for (_i = 0, _len = views.length; _i < _len; _i++) {\r\n            v = views[_i];\r\n            OperationBuilder.fieldAssign(v, \'fillColor\', color);\r\n        }\r\n        OperationBuilder.end();\r\n        cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Change line color of views.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {string} color (color string in CSS style: e.g. "#ffffff")\r\n     */\r\n    function setLineColor(editor, views, color) {\r\n        if (!editor || !views || !color) {\r\n            console.error("Engine.setLineColor(): missing required parameters: editor, views, or color");\r\n            return null;\r\n        }\r\n\r\n        var cmd, v, _i, _len;\r\n        OperationBuilder.begin(\'change line color\');\r\n        for (_i = 0, _len = views.length; _i < _len; _i++) {\r\n            v = views[_i];\r\n            OperationBuilder.fieldAssign(v, \'lineColor\', color);\r\n        }\r\n        OperationBuilder.end();\r\n        cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Change font of views.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {string} face Font face (family)\r\n     * @param {number} size Font size (in pixel)\r\n     * @param {string} color Font color\r\n     */\r\n    function setFont(editor, views, face, size, color) {\r\n        if (!editor || !views || !face || !color) {\r\n            console.error("Engine.setFont(): missing required parameters: editor, views, face, or color");\r\n            return null;\r\n        }\r\n\r\n        if (!_.isNumber(size)) {\r\n            console.error("Engine.setFont(): size should be number type");\r\n            return null;\r\n        }\r\n\r\n        OperationBuilder.begin(\'change font\');\r\n        for (var i = 0, len = views.length; i < len; i++) {\r\n            var v = views[i];\r\n            if (face && size) {\r\n                OperationBuilder.fieldAssign(v, \'font\', face + ";" + size + ";?");\r\n            }\r\n            if (color) {\r\n                OperationBuilder.fieldAssign(v, \'fontColor\', color);\r\n            }\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Change font color of views.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {string} color Font color (color string in CSS style: e.g. "#ffffff")\r\n     */\r\n    function setFontColor(editor, views, color) {\r\n        if (!editor || !views || !color) {\r\n            console.error("Engine.setFontColor(): missing required parameters: editor, views, or color");\r\n            return null;\r\n        }\r\n\r\n        var cmd, v, _i, _len;\r\n        OperationBuilder.begin(\'change font color\');\r\n        for (_i = 0, _len = views.length; _i < _len; _i++) {\r\n            v = views[_i];\r\n            OperationBuilder.fieldAssign(v, \'fontColor\', color);\r\n        }\r\n        OperationBuilder.end();\r\n        cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Change font face of views.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {string} fontFace\r\n     */\r\n    function setFontFace(editor, views, fontFace) {\r\n        if (!editor || !views || !fontFace) {\r\n            console.error("Engine.setFontFace(): missing required parameters: editor, views, or fontFace");\r\n            return null;\r\n        }\r\n\r\n        var cmd, v, _i, _len;\r\n        OperationBuilder.begin(\'change font face\');\r\n        for (_i = 0, _len = views.length; _i < _len; _i++) {\r\n            v = views[_i];\r\n            OperationBuilder.fieldAssign(v, \'font\', fontFace + ";?;?");\r\n        }\r\n        OperationBuilder.end();\r\n        cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Change font size of views.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {number} fontSize\r\n     */\r\n    function setFontSize(editor, views, fontSize) {\r\n        if (!editor || !views) {\r\n            console.error("Engine.setFontSize(): missing required parameters: editor, or views");\r\n            return null;\r\n        }\r\n\r\n        if (!_.isNumber(fontSize)) {\r\n            console.error("Engine.setFontSize(): fontSize should be number type");\r\n            return null;\r\n        }\r\n\r\n        var cmd, v, _i, _len;\r\n        OperationBuilder.begin(\'change font size\');\r\n        for (_i = 0, _len = views.length; _i < _len; _i++) {\r\n            v = views[_i];\r\n            OperationBuilder.fieldAssign(v, \'font\', "?;" + fontSize + ";?");\r\n        }\r\n        OperationBuilder.end();\r\n        cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Change stereotypeDisplay of views.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {string} stereotypeDisplay\r\n     */\r\n    function setStereotypeDisplay(editor, views, stereotypeDisplay) {\r\n        if (!editor || !views || !stereotypeDisplay) {\r\n            console.error("Engine.setStereotypeDisplay(): missing required parameters: editor, views, or stereotypeDisplay");\r\n            return null;\r\n        }\r\n\r\n        var cmd, v, _i, _len;\r\n        OperationBuilder.begin(\'change stereotype display\');\r\n        for (_i = 0, _len = views.length; _i < _len; _i++) {\r\n            v = views[_i];\r\n            OperationBuilder.fieldAssign(v, \'stereotypeDisplay\', stereotypeDisplay);\r\n        }\r\n        OperationBuilder.end();\r\n        cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Change lineStyle of edge views.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {string} lineStyle\r\n     */\r\n    function setLineStyle(editor, views, lineStyle) {\r\n        if (!editor || !views) {\r\n            console.error("Engine.setLineStyle(): missing required parameters: editor, or views");\r\n            return null;\r\n        }\r\n\r\n        var changes, cmd, d, diffs, ds, i, memento, mementoArray, sub, v, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref;\r\n        changes = [];\r\n        for (_i = 0, _len = views.length; _i < _len; _i++) {\r\n            v = views[_i];\r\n            if (v instanceof EdgeView) {\r\n                changes.push(v);\r\n                _ref = v.subViews;\r\n                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\r\n                    sub = _ref[_j];\r\n                    changes.push(sub);\r\n                }\r\n            }\r\n        }\r\n        mementoArray = [];\r\n        for (_k = 0, _len2 = changes.length; _k < _len2; _k++) {\r\n            v = changes[_k];\r\n            memento = {};\r\n            v.assignTo(memento);\r\n            mementoArray.push(memento);\r\n        }\r\n        for (_l = 0, _len3 = views.length; _l < _len3; _l++) {\r\n            v = views[_l];\r\n            if (v instanceof EdgeView) {\r\n                v.lineStyle = lineStyle;\r\n                v.arrange(editor.canvas);\r\n            }\r\n        }\r\n        editor.repaint();\r\n        diffs = [];\r\n        for (i = _m = 0, _len4 = changes.length; _m < _len4; i = ++_m) {\r\n            v = changes[i];\r\n            ds = v.diff(mementoArray[i]);\r\n            Helper.append(diffs, ds);\r\n        }\r\n        for (i = _n = 0, _len5 = changes.length; _n < _len5; i = ++_n) {\r\n            v = changes[i];\r\n            v.assignFrom(mementoArray[i]);\r\n        }\r\n        OperationBuilder.begin(\'change line style\');\r\n        for (_o = 0, _len6 = diffs.length; _o < _len6; _o++) {\r\n            d = diffs[_o];\r\n            OperationBuilder.fieldAssign(d.elem, d.f, d.n);\r\n        }\r\n        OperationBuilder.end();\r\n        cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Change autoResize of node views.\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Array.<View>} views\r\n     * @param {boolean} autoResize\r\n     */\r\n    function setAutoResize(editor, views, autoResize) {\r\n        if (!editor || !views) {\r\n            console.error("Engine.setAutoResize(): missing required parameters: editor, or views");\r\n            return null;\r\n        }\r\n\r\n        var cmd, v, _i, _len;\r\n        OperationBuilder.begin(\'change auto resize\');\r\n        for (_i = 0, _len = views.length; _i < _len; _i++) {\r\n            v = views[_i];\r\n            OperationBuilder.fieldAssign(v, \'autoResize\', autoResize);\r\n        }\r\n        OperationBuilder.end();\r\n        cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    };\r\n\r\n    /**\r\n     * Layout diagram\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {Diagram} diagram\r\n     * @param {string} direction\r\n     * @param {{node:number, edge:number, rank:number}} separations\r\n     * @param {number} edgeLineStyle\r\n     */\r\n    function layoutDiagram(editor, diagram, direction, separations, edgeLineStyle) {\r\n        if (!editor || !diagram) {\r\n            console.error("Engine.layoutDiagram(): missing required parameters: editor, or diagram");\r\n            return null;\r\n        }\r\n\r\n        // store memento\r\n        var mementoArray = [];\r\n        for (var i = 0, len = diagram.ownedViews.length; i < len; i++) {\r\n            var v = diagram.ownedViews[i];\r\n            var memento = {};\r\n            v.assignTo(memento);\r\n            mementoArray.push(memento);\r\n        }\r\n        diagram.layout(direction, separations, edgeLineStyle);\r\n        editor.repaint();\r\n        // compute diffs\r\n        var diffs = [];\r\n        for (var i = 0, len = diagram.ownedViews.length; i < len; i++) {\r\n            var v = diagram.ownedViews[i];\r\n            var ds = v.diff(mementoArray[i]);\r\n            Helper.append(diffs, ds);\r\n            v.assignFrom(mementoArray[i]);\r\n        }\r\n        // execute as a operation\r\n        OperationBuilder.begin(\'layout diagram\');\r\n        for (var i = 0, len = diffs.length; i < len; i++) {\r\n            var d = diffs[i];\r\n            OperationBuilder.fieldAssign(d.elem, d.f, d.n);\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    }\r\n\r\n    // Define public API\r\n    exports.addModel                   = addModel;\r\n    exports.addViews                   = addViews;\r\n    exports.addModelAndView            = addModelAndView;\r\n    exports.setProperty                = setProperty;\r\n    exports.setProperties              = setProperties;\r\n    exports.setElemsProperty           = setElemsProperty;\r\n    exports.deleteElements             = deleteElements;\r\n    exports.addItem                    = addItem;\r\n    exports.removeItem                 = removeItem;\r\n    exports.moveUp                     = moveUp;\r\n    exports.moveDown                   = moveDown;\r\n    exports.relocate                   = relocate;\r\n    exports.moveViews                  = moveViews;\r\n    exports.moveParasiticView          = moveParasiticView;\r\n    exports.resizeNode                 = resizeNode;\r\n    exports.modifyEdge                 = modifyEdge;\r\n    exports.reconnectEdge              = reconnectEdge;\r\n    exports.moveViewsChangingContainer = moveViewsChangingContainer;\r\n    exports.setFillColor               = setFillColor;\r\n    exports.setLineColor               = setLineColor;\r\n    exports.setFont                    = setFont;\r\n    exports.setFontColor               = setFontColor;\r\n    exports.setFontFace                = setFontFace;\r\n    exports.setFontSize                = setFontSize;\r\n    exports.setStereotypeDisplay       = setStereotypeDisplay;\r\n    exports.setLineStyle               = setLineStyle;\r\n    exports.setAutoResize              = setAutoResize;\r\n    exports.layoutDiagram              = layoutDiagram;\r\n\r\n});\r\n\r\n\n//# sourceURL=/engine/Engine.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _*/\r\n\r\n/**\r\n *\r\n * This module dispatches these events:\r\n * - selectionChanged: (selectedModels, selectedViews)\r\n */\r\ndefine('engine/SelectionManager',['require','exports','module','core/Global'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var Global = require(\"core/Global\");\r\n\r\n    /**\r\n     * 선택된 모델 요소들\r\n     * @private\r\n     * @type {Array.<Model>}\r\n     */\r\n    var _selectedModels = [];\r\n\r\n    /**\r\n     * 선택된 뷰 요소들\r\n     * @private\r\n     * @type {Array.<View>}\r\n     */\r\n    var _selectedViews = [];\r\n\r\n    /**\r\n     * 활성화된 다이어그램\r\n     * @private\r\n     * @type {Diagram}\r\n     */\r\n    var _activeDiagram = null;\r\n\r\n    /**\r\n     * 요소 선택 이벤트 발생\r\n     * @private\r\n     */\r\n    function _triggerEvent() {\r\n        $(exports).triggerHandler('selectionChanged', [_selectedModels, _selectedViews]);\r\n    }\r\n\r\n    function _isChanged(models, views) {\r\n        models = models || [];\r\n        views = views || [];\r\n        var i, len, m, v;\r\n        for (i = 0, len = models.length; i < len; i++) {\r\n            m = models[i];\r\n            if (!_.contains(_selectedModels, m)) {\r\n                return true;\r\n            }\r\n        }\r\n        for (i = 0, len = _selectedModels.length; i < len; i++) {\r\n            m = _selectedModels[i];\r\n            if (!_.contains(models, m)) {\r\n                return true;\r\n            }\r\n        }\r\n        for (i = 0, len = views.length; i < len; i++) {\r\n            v = views[i];\r\n            if (!_.contains(_selectedViews, v)) {\r\n                return true;\r\n            }\r\n        }\r\n        for (i = 0, len = _selectedViews.length; i < len; i++) {\r\n            v = _selectedViews[i];\r\n            if (!_.contains(views, v)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return selected model elements.\r\n     *\r\n     * @return {Array.<Model>} Array of selected model elements.\r\n     */\r\n    function getSelectedModels() {\r\n        return _selectedModels;\r\n    }\r\n\r\n    /**\r\n     * Return selected view elements.\r\n     *\r\n     * @return {Array.<View>} Array of selected view elements.\r\n     */\r\n    function getSelectedViews() {\r\n        return _selectedViews;\r\n    }\r\n\r\n    /**\r\n     * Deselect all elements.\r\n     */\r\n    function deselectAll() {\r\n        if (_isChanged([], [])) {\r\n            _selectedViews = [];\r\n            _selectedModels = [];\r\n            _triggerEvent();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select elements (models and views)\r\n     * @param {Array.<Model>} models Model elements to be selected.\r\n     * @param {Array.<View>} views View elements to be selected.\r\n     */\r\n    function select(models, views) {\r\n        if (_isChanged(models, views)) {\r\n            _selectedModels = models;\r\n            _selectedViews = views;\r\n            if (!Array.isArray(_selectedModels)) {\r\n                _selectedModels = [];\r\n            }\r\n            if (!Array.isArray(_selectedViews)) {\r\n                _selectedViews = [];\r\n            }\r\n            _triggerEvent();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select a model element\r\n     * @param {Model} model Model element to be selected.\r\n     */\r\n    function selectModel(model) {\r\n        if (_isChanged([model], [])) {\r\n            _selectedModels = [model];\r\n            _triggerEvent();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select view elements\r\n     * @param {Array.<View>} views Array of view elements to be selected.\r\n     */\r\n    function selectViews(views) {\r\n        if ((views !== null) && views.length > 0) {\r\n            var _tempModels = [];\r\n            for (var i = 0, len = views.length; i < len; i++) {\r\n                var v = views[i];\r\n                if (v.model !== null) {\r\n                    _tempModels.push(v.model);\r\n                }\r\n            }\r\n            if (_isChanged(views, _tempModels)) {\r\n                _selectedViews = views;\r\n                _selectedModels = _tempModels;\r\n                _triggerEvent();\r\n            }\r\n        } else {\r\n            deselectAll();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the first selected model element.\r\n     */\r\n    function getSelected() {\r\n        return _selectedModels[0];\r\n    }\r\n\r\n    // Define public API\r\n    exports.getSelectedModels = getSelectedModels;\r\n    exports.getSelectedViews  = getSelectedViews;\r\n    exports.deselectAll       = deselectAll;\r\n    exports.select            = select;\r\n    exports.selectModel       = selectModel;\r\n    exports.selectViews       = selectViews;\r\n    exports.getSelected       = getSelected;\r\n\r\n});\r\n\r\n\n//# sourceURL=/engine/SelectionManager.js"),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, $ */\r\n\r\n /**\r\n  * Manages global application commands that can be called from menu items, key bindings, or subparts\r\n  * of the application.\r\n  *\r\n  * This module dispatches these event(s):\r\n  *    - commandRegistered  -- when a new command is registered\r\n  *    - beforeExecuteCommand -- before dispatching a command\r\n  */\r\ndefine(\'command/CommandManager\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    /**\r\n     * Map of all registered global commands\r\n     * @type Object.<commandID: string, Command>\r\n     */\r\n    var _commands = {};\r\n\r\n    /**\r\n     * Temporary copy of commands map for restoring after testing\r\n     * TODO (issue #1039): implement separate require contexts for unit tests\r\n     * @type Object.<commandID: string, Command>\r\n     */\r\n    var _commandsOriginal = {};\r\n\r\n    /**\r\n     * @constructor\r\n     * @private\r\n     *\r\n     * @param {string} name - text that will be displayed in the UI to represent command\r\n     * @param {string} id\r\n     * @param {function} commandFn - the function that is called when the command is executed.\r\n     *\r\n     * TODO: where should this be triggered, The Command or Exports?\r\n     * Events:\r\n     *      enabledStateChange\r\n     *      checkedStateChange\r\n     *      visibleStateChange\r\n     *      keyBindingAdded\r\n     *      keyBindingRemoved\r\n     */\r\n    function Command(name, id, commandFn) {\r\n        this._name = name;\r\n        this._id = id;\r\n        this._commandFn = commandFn;\r\n        this._checked = undefined;\r\n        this._enabled = true;\r\n        this._visible = true;\r\n    }\r\n\r\n    /** @return {Command} */\r\n    Command.prototype.getID = function () {\r\n        return this._id;\r\n    };\r\n\r\n    /**\r\n     * Executes the command. Additional arguments are passed to the executing function\r\n     *\r\n     * @return {$.Promise} a jQuery promise that will be resolved when the command completes.\r\n     */\r\n    Command.prototype.execute = function () {\r\n        if (!this._enabled) {\r\n            return (new $.Deferred()).reject().promise();\r\n        }\r\n\r\n        var result = this._commandFn.apply(this, arguments);\r\n        if (!result) {\r\n            // If command does not return a promise, assume that it handled the\r\n            // command and return a resolved promise\r\n            return (new $.Deferred()).resolve().promise();\r\n        } else {\r\n            return result;\r\n        }\r\n    };\r\n\r\n    /** @return {boolean} */\r\n    Command.prototype.getEnabled = function () {\r\n        return this._enabled;\r\n    };\r\n\r\n    /**\r\n     * Sets enabled state of Command and dispatches "enabledStateChange"\r\n     * when the enabled state changes.\r\n     * @param {boolean} enabled\r\n     */\r\n    Command.prototype.setEnabled = function (enabled) {\r\n        var changed = this._enabled !== enabled;\r\n        this._enabled = enabled;\r\n\r\n        if (changed) {\r\n            $(this).triggerHandler("enabledStateChange");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets enabled state of Command and dispatches "checkedStateChange"\r\n     * when the enabled state changes.\r\n     * @param {boolean} checked\r\n     */\r\n    Command.prototype.setChecked = function (checked) {\r\n        var changed = this._checked !== checked;\r\n        this._checked = checked;\r\n\r\n        if (changed) {\r\n            $(this).triggerHandler("checkedStateChange");\r\n        }\r\n    };\r\n\r\n    /** @return {boolean} */\r\n    Command.prototype.getChecked = function () {\r\n        return this._checked;\r\n    };\r\n\r\n    /**\r\n     * Sets visible state of Command and dispatches "visibleStateChange"\r\n     * when the visible state changes.\r\n     * @param {boolean} visible\r\n     */\r\n    Command.prototype.setVisible = function (visible) {\r\n        var changed = this._visible !== visible;\r\n        this._visible = visible;\r\n\r\n        if (changed) {\r\n            $(this).triggerHandler("visibleStateChange");\r\n        }\r\n    };\r\n\r\n    /** @return {boolean} */\r\n    Command.prototype.getVisible = function () {\r\n        return this._visible;\r\n    };\r\n\r\n    /**\r\n     * Sets the name of the Command and dispatches "nameChange" so that\r\n     * UI that reflects the command name can update.\r\n     *\r\n     * Note, a Command name can appear in either HTML or native UI\r\n     * so HTML tags should not be used. To add a Unicode character,\r\n     * use \\uXXXX instead of an HTML entity.\r\n     *\r\n     * @param {string} name\r\n     */\r\n    Command.prototype.setName = function (name) {\r\n        var changed = this._name !== name;\r\n        this._name = name;\r\n\r\n        if (changed) {\r\n            $(this).triggerHandler("nameChange");\r\n        }\r\n    };\r\n\r\n    /** @return {string} */\r\n    Command.prototype.getName = function () {\r\n        return this._name;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Registers a global command.\r\n     * @param {string} name - text that will be displayed in the UI to represent command\r\n     * @param {string} id - unique identifier for command.\r\n     *      Core commands in app use a simple command title as an id, for example "open.file".\r\n     *      Extensions should use the following format: "author.myextension.mycommandname".\r\n     *      For example, "lschmitt.csswizard.format.css".\r\n     * @param {function(...)} commandFn - the function to call when the command is executed. Any arguments passed to\r\n     *     execute() (after the id) are passed as arguments to the function. If the function is asynchronous,\r\n     *     it must return a jQuery promise that is resolved when the command completes. Otherwise, the\r\n     *     CommandManager will assume it is synchronous, and return a promise that is already resolved.\r\n     * @return {?Command}\r\n     */\r\n    function register(name, id, commandFn) {\r\n        if (_commands[id]) {\r\n            console.log("Attempting to register an already-registered command: " + id);\r\n            return null;\r\n        }\r\n        if (!name || !id || !commandFn) {\r\n            console.error("Attempting to register a command with a missing name, id, or command function:" + name + " " + id);\r\n            return null;\r\n        }\r\n\r\n        var command = new Command(name, id, commandFn);\r\n        _commands[id] = command;\r\n\r\n        $(exports).triggerHandler("commandRegistered", [command]);\r\n\r\n        return command;\r\n    }\r\n\r\n    /**\r\n     * Registers a global internal only command.\r\n     * @param {string} id - unique identifier for command.\r\n     *      Core commands in app use a simple command title as an id, for example "app.abort_quit".\r\n     *      Extensions should use the following format: "author.myextension.mycommandname".\r\n     *      For example, "lschmitt.csswizard.format.css".\r\n     * @param {function(...)} commandFn - the function to call when the command is executed. Any arguments passed to\r\n     *     execute() (after the id) are passed as arguments to the function. If the function is asynchronous,\r\n     *     it must return a jQuery promise that is resolved when the command completes. Otherwise, the\r\n     *     CommandManager will assume it is synchronous, and return a promise that is already resolved.\r\n     * @return {?Command}\r\n     */\r\n    function registerInternal(id, commandFn) {\r\n        if (_commands[id]) {\r\n            console.log("Attempting to register an already-registered command: " + id);\r\n            return null;\r\n        }\r\n        if (!id || !commandFn) {\r\n            console.error("Attempting to register an internal command with a missing id, or command function: " + id);\r\n            return null;\r\n        }\r\n\r\n        var command = new Command(null, id, commandFn);\r\n        _commands[id] = command;\r\n\r\n        $(exports).triggerHandler("commandRegistered", [command]);\r\n\r\n        return command;\r\n    }\r\n\r\n    /**\r\n     * Clear all commands for unit testing, but first make copy of commands so that\r\n     * they can be restored afterward\r\n     */\r\n    function _testReset() {\r\n        _commandsOriginal = _commands;\r\n        _commands = {};\r\n    }\r\n\r\n    /**\r\n     * Restore original commands after test and release copy\r\n     */\r\n    function _testRestore() {\r\n        _commands = _commandsOriginal;\r\n        _commandsOriginal = {};\r\n    }\r\n\r\n    /**\r\n     * Retrieves a Command object by id\r\n     * @param {string} id\r\n     * @return {Command}\r\n     */\r\n    function get(id) {\r\n        return _commands[id];\r\n    }\r\n\r\n    /**\r\n     * Returns the ids of all registered commands\r\n     * @return {Array.<string>}\r\n     */\r\n    function getAll() {\r\n        return Object.keys(_commands);\r\n    }\r\n\r\n    /**\r\n     * Looks up and runs a global command. Additional arguments are passed to the command.\r\n     *\r\n     * @param {string} id The ID of the command to run.\r\n     * @return {$.Promise} a jQuery promise that will be resolved when the command completes.\r\n     */\r\n    function execute(id) {\r\n        var command = _commands[id];\r\n\r\n        if (command) {\r\n            try {\r\n                $(exports).triggerHandler("beforeExecuteCommand", id);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n\r\n            return command.execute.apply(command, Array.prototype.slice.call(arguments, 1));\r\n        } else {\r\n            return (new $.Deferred()).reject().promise();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Blank handler\r\n     */\r\n    function doNothing() {\r\n    }\r\n\r\n    // Define public API\r\n    exports.register            = register;\r\n    exports.registerInternal    = registerInternal;\r\n    exports.execute             = execute;\r\n    exports.get                 = get;\r\n    exports.getAll              = getAll;\r\n    exports.doNothing           = doNothing;\r\n    exports._testReset          = _testReset;\r\n    exports._testRestore        = _testRestore;\r\n});\r\n\n//# sourceURL=/command/CommandManager.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*global define*/\r\n\r\n/**\r\n * List of common commands.\r\n *\r\n * ```\r\n *    exports.FILE                          = 'file';\r\n *    exports.FILE_NEW                      = 'file.new';\r\n *    exports.FILE_NEW_FROM_TEMPLATE        = 'file.newFromTemplate';\r\n *    exports.FILE_OPEN                     = 'file.open';\r\n *    exports.FILE_OPEN_RECENT              = 'file.openRecent';\r\n *    exports.FILE_SAVE                     = 'file.save';\r\n *    exports.FILE_SAVE_AS                  = 'file.saveAs';\r\n *    exports.FILE_CLOSE                    = 'file.close';\r\n *    exports.FILE_IMPORT                   = 'file.import';\r\n *    exports.FILE_IMPORT_FRAGMENT          = 'file.import.fragment';\r\n *    exports.FILE_EXPORT                   = 'file.export';\r\n *    exports.FILE_EXPORT_FRAGMENT          = 'file.export.fragment';\r\n *    exports.FILE_PREFERENCES              = 'file.preferences';\r\n *    exports.FILE_PRINT_TO_PDF             = 'file.printToPDF';\r\n *\r\n *    exports.FILE_CLOSE_WINDOW             = 'file.close_window';\r\n *    exports.FILE_QUIT                     = 'file.quit';\r\n *\r\n *    exports.EDIT                          = 'edit';\r\n *    exports.EDIT_UNDO                     = 'edit.undo';\r\n *    exports.EDIT_REDO                     = 'edit.redo';\r\n *    exports.EDIT_CUT                      = 'edit.cut';\r\n *    exports.EDIT_COPY                     = 'edit.copy';\r\n *    exports.EDIT_PASTE                    = 'edit.paste';\r\n *    exports.EDIT_SELECT_ALL               = 'edit.selectAll';\r\n *\r\n *    exports.EDIT_DELETE                   = 'edit.delete';\r\n *    exports.EDIT_DELETE_FROM_MODEL        = 'edit.deleteFromModel';\r\n *    exports.EDIT_MOVE_UP                  = 'edit.moveUp';\r\n *    exports.EDIT_MOVE_DOWN                = 'edit.moveDown';\r\n *    exports.EDIT_SELECT_IN_EXPLORER       = 'edit.selectInExplorer';\r\n *    exports.EDIT_SELECT_IN_DIAGRAM        = 'edit.selectInDiagram';\r\n *\r\n *    exports.FORMAT                        = 'format';\r\n *    exports.FORMAT_FONT                   = 'format.font';\r\n *    exports.FORMAT_FILL_COLOR             = 'format.fillColor';\r\n *    exports.FORMAT_LINE_COLOR             = 'format.lineColor';\r\n *    exports.FORMAT_LINE_STYLE             = 'format.linestyle';\r\n *    exports.FORMAT_LINE_STYLE_RECTILINEAR = 'format.linestyle.rectilinear';\r\n *    exports.FORMAT_LINE_STYLE_OBLIQUE     = 'format.linestyle.oblique';\r\n *    exports.FORMAT_LINE_STYLE_ROUNDRECT   = 'format.linestyle.roundRect';\r\n *    exports.FORMAT_LINE_STYLE_CURVE       = 'format.linestyle.curve';\r\n *    exports.FORMAT_AUTO_RESIZE            = 'format.autoResize';\r\n *    exports.FORMAT_SHOW_SHADOW            = 'format.showShadow';\r\n *\r\n *    exports.MODEL                         = 'model';\r\n *\r\n *    exports.TOOLS                         = 'tools';\r\n *    exports.TOOLS_EXTENSION_MANAGER       = 'tools.extensionManager';\r\n *\r\n *    exports.VIEW                          = 'view';\r\n *    exports.VIEW_CLOSE_DIAGRAM            = 'view.closeDiagram';\r\n *    exports.VIEW_CLOSE_OTHER_DIAGRAMS     = 'view.closeOtherDiagrams';\r\n *    exports.VIEW_CLOSE_ALL_DIAGRAMS       = 'view.closeAllDiagrams';\r\n *    exports.VIEW_NEXT_DIAGRAM             = 'view.nextDiagram';\r\n *    exports.VIEW_PREVIOUS_DIAGRAM         = 'view.previousDiagram';\r\n *    exports.VIEW_ZOOM_IN                  = 'view.zoomIn';\r\n *    exports.VIEW_ZOOM_OUT                 = 'view.zoomOut';\r\n *    exports.VIEW_ACTUAL_SIZE              = 'view.actualSize';\r\n *    exports.VIEW_FIT_TO_WINDOW            = 'view.fitToWindow';\r\n *    exports.VIEW_SHOW_GRID                = \"view.showGrid\";\r\n *    exports.VIEW_HIDE_SIDEBAR             = 'view.hideSidebar';\r\n *    exports.VIEW_HIDE_NAVIGATOR           = 'view.hideNavigator';\r\n *    exports.VIEW_HIDE_TOOLBAR             = 'view.hideToolbar';\r\n *    exports.VIEW_HIDE_STATUSBAR           = 'view.hideStatusBar';\r\n *    exports.VIEW_HIDE_TOOLBOX             = 'view.hideToolbox';\r\n *    exports.VIEW_HIDE_EDITORS             = 'view.hideEditors';\r\n *\r\n *    exports.HELP                          = 'help';\r\n *    exports.HELP_ABOUT                    = 'help.about';\r\n *    exports.HELP_CHECK_FOR_UPDATES        = 'help.checkForUpdates';\r\n *    exports.HELP_ENTER_LICENSE            = 'help.enterLicense';\r\n *    exports.HELP_DOCUMENTATION            = 'help.documentation';\r\n *    exports.HELP_FORUM                    = 'help.forum';\r\n *    exports.HELP_RELEASE_NOTE             = 'help.releaseNote';\r\n *    exports.HELP_REQUEST_FEATURE          = 'help.requestFeature';\r\n *\r\n *    exports.APP_RELOAD                    = 'app.reload';\r\n * ```\r\n */\r\ndefine('command/Commands',['require','exports','module'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    // File\r\n    exports.FILE                          = 'file';\r\n    exports.FILE_NEW                      = 'file.new';\r\n    exports.FILE_NEW_FROM_TEMPLATE        = 'file.newFromTemplate';\r\n    exports.FILE_OPEN                     = 'file.open';\r\n    exports.FILE_OPEN_RECENT              = 'file.openRecent';\r\n    exports.FILE_SAVE                     = 'file.save';\r\n    exports.FILE_SAVE_AS                  = 'file.saveAs';\r\n    exports.FILE_CLOSE                    = 'file.close';\r\n    exports.FILE_IMPORT                   = 'file.import';\r\n    exports.FILE_IMPORT_FRAGMENT          = 'file.import.fragment';\r\n    exports.FILE_EXPORT                   = 'file.export';\r\n    exports.FILE_EXPORT_FRAGMENT          = 'file.export.fragment';\r\n    exports.FILE_PREFERENCES              = 'file.preferences';\r\n    exports.FILE_PRINT_TO_PDF             = 'file.printToPDF';\r\n\r\n    // File shell callbacks - string must MATCH string in native code (appshell/command_callbacks.h)\r\n    exports.FILE_CLOSE_WINDOW             = 'file.close_window';\r\n    exports.FILE_QUIT                     = 'file.quit';\r\n\r\n    // Edit\r\n    exports.EDIT                          = 'edit';\r\n    // File shell callbacks - string must MATCH string in native code (appshell/command_callbacks.h)\r\n    exports.EDIT_UNDO                     = 'edit.undo';\r\n    exports.EDIT_REDO                     = 'edit.redo';\r\n    exports.EDIT_CUT                      = 'edit.cut';\r\n    exports.EDIT_COPY                     = 'edit.copy';\r\n    exports.EDIT_PASTE                    = 'edit.paste';\r\n    exports.EDIT_SELECT_ALL               = 'edit.selectAll';\r\n\r\n    exports.EDIT_DELETE                   = 'edit.delete';\r\n    exports.EDIT_DELETE_FROM_MODEL        = 'edit.deleteFromModel';\r\n    exports.EDIT_MOVE_UP                  = 'edit.moveUp';\r\n    exports.EDIT_MOVE_DOWN                = 'edit.moveDown';\r\n    exports.EDIT_SELECT_IN_EXPLORER       = 'edit.selectInExplorer';\r\n    exports.EDIT_SELECT_IN_DIAGRAM        = 'edit.selectInDiagram';\r\n\r\n    // Format\r\n    exports.FORMAT                        = 'format';\r\n    exports.FORMAT_FONT                   = 'format.font';\r\n    exports.FORMAT_FILL_COLOR             = 'format.fillColor';\r\n    exports.FORMAT_LINE_COLOR             = 'format.lineColor';\r\n    exports.FORMAT_LINE_STYLE             = 'format.linestyle';\r\n    exports.FORMAT_LINE_STYLE_RECTILINEAR = 'format.linestyle.rectilinear';\r\n    exports.FORMAT_LINE_STYLE_OBLIQUE     = 'format.linestyle.oblique';\r\n    exports.FORMAT_LINE_STYLE_ROUNDRECT   = 'format.linestyle.roundRect';\r\n    exports.FORMAT_LINE_STYLE_CURVE       = 'format.linestyle.curve';\r\n    exports.FORMAT_AUTO_RESIZE            = 'format.autoResize';\r\n    exports.FORMAT_SHOW_SHADOW            = 'format.showShadow';\r\n\r\n    // Model\r\n    exports.MODEL                         = 'model';\r\n    exports.MODEL_ADD                     = \"model.add\";\r\n    exports.MODEL_ADD_DIAGRAM             = 'model.addDiagram';\r\n\r\n    // Tools\r\n    exports.TOOLS                         = 'tools';\r\n    exports.TOOLS_EXTENSION_MANAGER       = 'tools.extensionManager';\r\n\r\n    // Model\r\n    exports.VIEW                          = 'view';\r\n    exports.VIEW_CLOSE_DIAGRAM            = 'view.closeDiagram';\r\n    exports.VIEW_CLOSE_OTHER_DIAGRAMS     = 'view.closeOtherDiagrams';\r\n    exports.VIEW_CLOSE_ALL_DIAGRAMS       = 'view.closeAllDiagrams';\r\n    exports.VIEW_NEXT_DIAGRAM             = 'view.nextDiagram';\r\n    exports.VIEW_PREVIOUS_DIAGRAM         = 'view.previousDiagram';\r\n    exports.VIEW_ZOOM_IN                  = 'view.zoomIn';\r\n    exports.VIEW_ZOOM_OUT                 = 'view.zoomOut';\r\n    exports.VIEW_ACTUAL_SIZE              = 'view.actualSize';\r\n    exports.VIEW_FIT_TO_WINDOW            = 'view.fitToWindow';\r\n    exports.VIEW_SHOW_GRID                = \"view.showGrid\";\r\n    exports.VIEW_HIDE_SIDEBAR             = 'view.hideSidebar';\r\n    exports.VIEW_HIDE_NAVIGATOR           = 'view.hideNavigator';\r\n    exports.VIEW_HIDE_TOOLBAR             = 'view.hideToolbar';\r\n    exports.VIEW_HIDE_STATUSBAR           = 'view.hideStatusBar';\r\n    exports.VIEW_HIDE_TOOLBOX             = 'view.hideToolbox';\r\n    exports.VIEW_HIDE_EDITORS             = 'view.hideEditors';\r\n\r\n    // Help\r\n    exports.HELP                          = 'help';\r\n    exports.HELP_ABOUT                    = 'help.about';\r\n    exports.HELP_CHECK_FOR_UPDATES        = 'help.checkForUpdates';\r\n    exports.HELP_ENTER_LICENSE            = 'help.enterLicense';\r\n    exports.HELP_DOCUMENTATION            = 'help.documentation';\r\n    exports.HELP_FORUM                    = 'help.forum';\r\n    exports.HELP_RELEASE_NOTE             = 'help.releaseNote';\r\n    exports.HELP_REQUEST_FEATURE          = 'help.requestFeature';\r\n\r\n    // Internals\r\n    exports.APP_RELOAD                    = 'app.reload';\r\n\r\n});\r\n\n//# sourceURL=/command/Commands.js"),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define  */\r\n\r\n/**\r\n * Utilities module to provide constants for keyCodes\r\n *\r\n * ```\r\n *  DOM_VK_CANCEL: 3,\r\n *  DOM_VK_HELP: 6,\r\n *  DOM_VK_BACK_SPACE: 8,\r\n *  DOM_VK_TAB: 9,\r\n *  DOM_VK_CLEAR: 12,\r\n *  DOM_VK_RETURN: 13,\r\n *  DOM_VK_ENTER: 14,\r\n *  DOM_VK_SHIFT: 16,\r\n *  DOM_VK_CONTROL: 17,\r\n *  DOM_VK_ALT: 18,\r\n *  DOM_VK_PAUSE: 19,\r\n *  DOM_VK_CAPS_LOCK: 20,\r\n *  DOM_VK_ESCAPE: 27,\r\n *  DOM_VK_SPACE: 32,\r\n *  DOM_VK_PAGE_UP: 33,\r\n *  DOM_VK_PAGE_DOWN: 34,\r\n *  DOM_VK_END: 35,\r\n *  DOM_VK_HOME: 36,\r\n *  DOM_VK_LEFT: 37,\r\n *  DOM_VK_UP: 38,\r\n *  DOM_VK_RIGHT: 39,\r\n *  DOM_VK_DOWN: 40,\r\n *  DOM_VK_PRINTSCREEN: 44,\r\n *  DOM_VK_INSERT: 45,\r\n *  DOM_VK_DELETE: 46,\r\n *  DOM_VK_0: 48,\r\n *  DOM_VK_1: 49,\r\n *  DOM_VK_2: 50,\r\n *  DOM_VK_3: 51,\r\n *  DOM_VK_4: 52,\r\n *  DOM_VK_5: 53,\r\n *  DOM_VK_6: 54,\r\n *  DOM_VK_7: 55,\r\n *  DOM_VK_8: 56,\r\n *  DOM_VK_9: 57,\r\n *  DOM_VK_A: 65,\r\n *  DOM_VK_B: 66,\r\n *  DOM_VK_C: 67,\r\n *  DOM_VK_D: 68,\r\n *  DOM_VK_E: 69,\r\n *  DOM_VK_F: 70,\r\n *  DOM_VK_G: 71,\r\n *  DOM_VK_H: 72,\r\n *  DOM_VK_I: 73,\r\n *  DOM_VK_J: 74,\r\n *  DOM_VK_K: 75,\r\n *  DOM_VK_L: 76,\r\n *  DOM_VK_M: 77,\r\n *  DOM_VK_N: 78,\r\n *  DOM_VK_O: 79,\r\n *  DOM_VK_P: 80,\r\n *  DOM_VK_Q: 81,\r\n *  DOM_VK_R: 82,\r\n *  DOM_VK_S: 83,\r\n *  DOM_VK_T: 84,\r\n *  DOM_VK_U: 85,\r\n *  DOM_VK_V: 86,\r\n *  DOM_VK_W: 87,\r\n *  DOM_VK_X: 88,\r\n *  DOM_VK_Y: 89,\r\n *  DOM_VK_Z: 90,\r\n *  DOM_VK_CONTEXT_MENU: 93,\r\n *  DOM_VK_NUMPAD0: 96,\r\n *  DOM_VK_NUMPAD1: 97,\r\n *  DOM_VK_NUMPAD2: 98,\r\n *  DOM_VK_NUMPAD3: 99,\r\n *  DOM_VK_NUMPAD4: 100,\r\n *  DOM_VK_NUMPAD5: 101,\r\n *  DOM_VK_NUMPAD6: 102,\r\n *  DOM_VK_NUMPAD7: 103,\r\n *  DOM_VK_NUMPAD8: 104,\r\n *  DOM_VK_NUMPAD9: 105,\r\n *  DOM_VK_MULTIPLY: 106,\r\n *  DOM_VK_ADD: 107,\r\n *  DOM_VK_SEPARATOR: 108,\r\n *  DOM_VK_SUBTRACT: 109,\r\n *  DOM_VK_DECIMAL: 110,\r\n *  DOM_VK_DIVIDE: 111,\r\n *  DOM_VK_F1: 112,\r\n *  DOM_VK_F2: 113,\r\n *  DOM_VK_F3: 114,\r\n *  DOM_VK_F4: 115,\r\n *  DOM_VK_F5: 116,\r\n *  DOM_VK_F6: 117,\r\n *  DOM_VK_F7: 118,\r\n *  DOM_VK_F8: 119,\r\n *  DOM_VK_F9: 120,\r\n *  DOM_VK_F10: 121,\r\n *  DOM_VK_F11: 122,\r\n *  DOM_VK_F12: 123,\r\n *  DOM_VK_F13: 124,\r\n *  DOM_VK_F14: 125,\r\n *  DOM_VK_F15: 126,\r\n *  DOM_VK_F16: 127,\r\n *  DOM_VK_F17: 128,\r\n *  DOM_VK_F18: 129,\r\n *  DOM_VK_F19: 130,\r\n *  DOM_VK_F20: 131,\r\n *  DOM_VK_F21: 132,\r\n *  DOM_VK_F22: 133,\r\n *  DOM_VK_F23: 134,\r\n *  DOM_VK_F24: 135,\r\n *  DOM_VK_NUM_LOCK: 144,\r\n *  DOM_VK_SCROLL_LOCK: 145,\r\n *  DOM_VK_SEMICOLON: 186,\r\n *  DOM_VK_EQUALS: 187,\r\n *  DOM_VK_COMMA: 188,\r\n *  DOM_VK_DASH: 189,\r\n *  DOM_VK_PERIOD: 190,\r\n *  DOM_VK_SLASH: 191,\r\n *  DOM_VK_BACK_QUOTE: 192,\r\n *  DOM_VK_OPEN_BRACKET: 219,\r\n *  DOM_VK_BACK_SLASH: 220,\r\n *  DOM_VK_CLOSE_BRACKET: 221,\r\n *  DOM_VK_QUOTE: 222,\r\n *  DOM_VK_META: 224,\r\n *  DOM_VK_PLUS: 107, // in Number Keypad\r\n *  DOM_VK_MINUS: 109 // in Number Keypad\r\n * ```\r\n */\r\ndefine(\'utils/KeyEvent\',{\r\n    DOM_VK_CANCEL: 3,\r\n    DOM_VK_HELP: 6,\r\n    DOM_VK_BACK_SPACE: 8,\r\n    DOM_VK_TAB: 9,\r\n    DOM_VK_CLEAR: 12,\r\n    DOM_VK_RETURN: 13,\r\n    DOM_VK_ENTER: 14,\r\n    DOM_VK_SHIFT: 16,\r\n    DOM_VK_CONTROL: 17,\r\n    DOM_VK_ALT: 18,\r\n    DOM_VK_PAUSE: 19,\r\n    DOM_VK_CAPS_LOCK: 20,\r\n    DOM_VK_ESCAPE: 27,\r\n    DOM_VK_SPACE: 32,\r\n    DOM_VK_PAGE_UP: 33,\r\n    DOM_VK_PAGE_DOWN: 34,\r\n    DOM_VK_END: 35,\r\n    DOM_VK_HOME: 36,\r\n    DOM_VK_LEFT: 37,\r\n    DOM_VK_UP: 38,\r\n    DOM_VK_RIGHT: 39,\r\n    DOM_VK_DOWN: 40,\r\n    DOM_VK_PRINTSCREEN: 44,\r\n    DOM_VK_INSERT: 45,\r\n    DOM_VK_DELETE: 46,\r\n    DOM_VK_0: 48,\r\n    DOM_VK_1: 49,\r\n    DOM_VK_2: 50,\r\n    DOM_VK_3: 51,\r\n    DOM_VK_4: 52,\r\n    DOM_VK_5: 53,\r\n    DOM_VK_6: 54,\r\n    DOM_VK_7: 55,\r\n    DOM_VK_8: 56,\r\n    DOM_VK_9: 57,\r\n    DOM_VK_A: 65,\r\n    DOM_VK_B: 66,\r\n    DOM_VK_C: 67,\r\n    DOM_VK_D: 68,\r\n    DOM_VK_E: 69,\r\n    DOM_VK_F: 70,\r\n    DOM_VK_G: 71,\r\n    DOM_VK_H: 72,\r\n    DOM_VK_I: 73,\r\n    DOM_VK_J: 74,\r\n    DOM_VK_K: 75,\r\n    DOM_VK_L: 76,\r\n    DOM_VK_M: 77,\r\n    DOM_VK_N: 78,\r\n    DOM_VK_O: 79,\r\n    DOM_VK_P: 80,\r\n    DOM_VK_Q: 81,\r\n    DOM_VK_R: 82,\r\n    DOM_VK_S: 83,\r\n    DOM_VK_T: 84,\r\n    DOM_VK_U: 85,\r\n    DOM_VK_V: 86,\r\n    DOM_VK_W: 87,\r\n    DOM_VK_X: 88,\r\n    DOM_VK_Y: 89,\r\n    DOM_VK_Z: 90,\r\n    DOM_VK_CONTEXT_MENU: 93,\r\n    DOM_VK_NUMPAD0: 96,\r\n    DOM_VK_NUMPAD1: 97,\r\n    DOM_VK_NUMPAD2: 98,\r\n    DOM_VK_NUMPAD3: 99,\r\n    DOM_VK_NUMPAD4: 100,\r\n    DOM_VK_NUMPAD5: 101,\r\n    DOM_VK_NUMPAD6: 102,\r\n    DOM_VK_NUMPAD7: 103,\r\n    DOM_VK_NUMPAD8: 104,\r\n    DOM_VK_NUMPAD9: 105,\r\n    DOM_VK_MULTIPLY: 106,\r\n    DOM_VK_ADD: 107,\r\n    DOM_VK_SEPARATOR: 108,\r\n    DOM_VK_SUBTRACT: 109,\r\n    DOM_VK_DECIMAL: 110,\r\n    DOM_VK_DIVIDE: 111,\r\n    DOM_VK_F1: 112,\r\n    DOM_VK_F2: 113,\r\n    DOM_VK_F3: 114,\r\n    DOM_VK_F4: 115,\r\n    DOM_VK_F5: 116,\r\n    DOM_VK_F6: 117,\r\n    DOM_VK_F7: 118,\r\n    DOM_VK_F8: 119,\r\n    DOM_VK_F9: 120,\r\n    DOM_VK_F10: 121,\r\n    DOM_VK_F11: 122,\r\n    DOM_VK_F12: 123,\r\n    DOM_VK_F13: 124,\r\n    DOM_VK_F14: 125,\r\n    DOM_VK_F15: 126,\r\n    DOM_VK_F16: 127,\r\n    DOM_VK_F17: 128,\r\n    DOM_VK_F18: 129,\r\n    DOM_VK_F19: 130,\r\n    DOM_VK_F20: 131,\r\n    DOM_VK_F21: 132,\r\n    DOM_VK_F22: 133,\r\n    DOM_VK_F23: 134,\r\n    DOM_VK_F24: 135,\r\n    DOM_VK_NUM_LOCK: 144,\r\n    DOM_VK_SCROLL_LOCK: 145,\r\n    DOM_VK_SEMICOLON: 186,\r\n    DOM_VK_EQUALS: 187,\r\n    DOM_VK_COMMA: 188,\r\n    DOM_VK_DASH: 189,\r\n    DOM_VK_PERIOD: 190,\r\n    DOM_VK_SLASH: 191,\r\n    DOM_VK_BACK_QUOTE: 192,\r\n    DOM_VK_OPEN_BRACKET: 219,\r\n    DOM_VK_BACK_SLASH: 220,\r\n    DOM_VK_CLOSE_BRACKET: 221,\r\n    DOM_VK_QUOTE: 222,\r\n    DOM_VK_META: 224,\r\n    DOM_VK_PLUS: 107, // in Number Keypad\r\n    DOM_VK_MINUS: 109 // in Number Keypad\r\n\r\n});\r\n\n//# sourceURL=/utils/KeyEvent.js'),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define */\r\n\r\ndefine(\'strings\',{\r\n\r\n    // Menus\r\n\r\n    // Menus and Commands\r\n    // File\r\n    "CMD_FILE"                          : "File",\r\n    "CMD_FILE_NEW"                      : "New",\r\n    "CMD_FILE_NEW_FROM_TEMPLATE"        : "New From Template",\r\n    "CMD_FILE_OPEN"                     : "Open...",\r\n    "CMD_FILE_OPEN_RECENT"              : "Open Recent",\r\n    "CMD_FILE_SAVE"                     : "Save",\r\n    "CMD_FILE_SAVE_AS"                  : "Save As...",\r\n    "CMD_FILE_IMPORT"                   : "Import",\r\n    "CMD_FILE_IMPORT_FRAGMENT"          : "Fragment...",\r\n    "CMD_FILE_EXPORT"                   : "Export",\r\n    "CMD_FILE_EXPORT_FRAGMENT"          : "Fragment...",\r\n    "CMD_FILE_CLOSE"                    : "Close",\r\n    "CMD_FILE_PREFERENCES"              : "Preferences...",\r\n    "CMD_FILE_PRINT_TO_PDF"             : "Print to PDF...",\r\n    "CMD_QUIT"                          : "Quit",\r\n    "CMD_EXIT"                          : "Exit",\r\n    // Edit\r\n    "CMD_EDIT"                          : "Edit",\r\n    "CMD_EDIT_UNDO"                     : "Undo",\r\n    "CMD_EDIT_REDO"                     : "Redo",\r\n    "CMD_EDIT_CUT"                      : "Cut",\r\n    "CMD_EDIT_COPY"                     : "Copy",\r\n    "CMD_EDIT_PASTE"                    : "Paste",\r\n    "CMD_EDIT_DELETE"                   : "Delete",\r\n    "CMD_EDIT_DELETE_FROM_MODEL"        : "Delete from Model",\r\n    "CMD_EDIT_MOVE_UP"                  : "Move Up",\r\n    "CMD_EDIT_MOVE_DOWN"                : "Move Down",\r\n    "CMD_EDIT_SELECT_ALL"               : "Select All",\r\n    "CMD_EDIT_SELECT_IN_EXPLORER"       : "Select In Explorer",\r\n    "CMD_EDIT_SELECT_IN_DIAGRAM"        : "Select In Diagram",\r\n    // Format\r\n    "CMD_FORMAT"                        : "Format",\r\n    "CMD_FORMAT_FONT"                   : "Font...",\r\n    "CMD_FORMAT_FILL_COLOR"             : "Fill Color...",\r\n    "CMD_FORMAT_LINE_COLOR"             : "Line Color...",\r\n    "CMD_FORMAT_LINE_STYLE"             : "Line Style",\r\n    "CMD_FORMAT_LINE_STYLE_RECTILINEAR" : "Rectilinear",\r\n    "CMD_FORMAT_LINE_STYLE_OBLIQUE"     : "Oblique",\r\n    "CMD_FORMAT_LINE_STYLE_ROUNDRECT"   : "Rounded Rectilinear",\r\n    "CMD_FORMAT_LINE_STYLE_CURVE"       : "Curve",\r\n\r\n    "CMD_FORMAT_AUTO_RESIZE"            : "Auto Resize",\r\n    "CMD_FORMAT_SHOW_SHADOW"            : "Show Shadow",\r\n    // Model\r\n    "CMD_MODEL"                         : "Model",\r\n    // Tools\r\n    "CMD_TOOLS"                         : "Tools",\r\n    "CMD_TOOLS_EXTENSION_MANAGER"       : "Extension Manager...",\r\n    // View\r\n    "CMD_VIEW"                          : "View",\r\n    "CMD_VIEW_CLOSE_DIAGRAM"            : "Close Diagram",\r\n    "CMD_VIEW_CLOSE_OTHER_DIAGRAMS"     : "Close Other Diagrams",\r\n    "CMD_VIEW_CLOSE_ALL_DIAGRAMS"       : "Close All Diagrams",\r\n    "CMD_VIEW_NEXT_DIAGRAM"             : "Next Diagram",\r\n    "CMD_VIEW_PREVIOUS_DIAGRAM"         : "Previous Diagram",\r\n    "CMD_VIEW_ZOOM_IN"                  : "Zoom In",\r\n    "CMD_VIEW_ZOOM_OUT"                 : "Zoom Out",\r\n    "CMD_VIEW_ACTUAL_SIZE"              : "Actual Size",\r\n    "CMD_VIEW_FIT_TO_WINDOW"            : "Fit To Window",\r\n    "CMD_VIEW_SHOW_GRID"                : "Show Grid",\r\n    "CMD_VIEW_SHOW_SIDEBAR"             : "Show Sidebar",\r\n    "CMD_VIEW_HIDE_SIDEBAR"             : "Hide Sidebar",\r\n    "CMD_VIEW_SHOW_NAVIGATOR"           : "Show Navigator",\r\n    "CMD_VIEW_HIDE_NAVIGATOR"           : "Hide Navigator",\r\n    "CMD_VIEW_SHOW_TOOLBAR"             : "Show Toolbar",\r\n    "CMD_VIEW_HIDE_TOOLBAR"             : "Hide Toolbar",\r\n    "CMD_VIEW_SHOW_STATUSBAR"           : "Show Status Bar",\r\n    "CMD_VIEW_HIDE_STATUSBAR"           : "Hide Status Bar",\r\n    "CMD_VIEW_SHOW_TOOLBOX"             : "Show Toolbox",\r\n    "CMD_VIEW_HIDE_TOOLBOX"             : "Hide Toolbox",\r\n    "CMD_VIEW_SHOW_EDITORS"             : "Show Editors",\r\n    "CMD_VIEW_HIDE_EDITORS"             : "Hide Editors",\r\n    // Help\r\n    "CMD_HELP"                          : "Help",\r\n    "CMD_HELP_ABOUT"                    : "About StarUML",\r\n    "CMD_HELP_CHECK_FOR_UPDATES"        : "Check for Updates...",\r\n    "CMD_HELP_ENTER_LICENSE"            : "Enter License...",\r\n    "CMD_HELP_DOCUMENTATION"            : "Documentation",\r\n    "CMD_HELP_FORUM"                    : "Forum",\r\n    "CMD_HELP_RELEASE_NOTE"             : "Release Notes",\r\n    "CMD_HELP_REQUEST_FEATURE"          : "Request Feature",\r\n\r\n    // UML Commands\r\n    /* File: New From Template */\r\n    "CMD_FILE_NEW_FROM_TEMPLATE_UML_MINIMAL"      : "UML Minimal",\r\n    "CMD_FILE_NEW_FROM_TEMPLATE_UML_CONVENTIONAL" : "UML Conventional",\r\n    "CMD_FILE_NEW_FROM_TEMPLATE_4P1VIEWMODEL"     : "4+1 View Model",\r\n    "CMD_FILE_NEW_FROM_TEMPLATE_RATIONAL"         : "Rational",\r\n    // Model: Profiles\r\n    "CMD_MODEL_APPLY_PROFILE"                  : "Apply Profile",\r\n    "CMD_MODEL_APPLY_PROFILE_UML_STANDARD"     : "UML Standard Profile (v2)",\r\n    // Model Add\r\n    "CMD_MODEL_ADD"                            : "Add",\r\n    "CMD_MODEL_ADD_DIAGRAM"                    : "Add Diagram",\r\n    // Model: Packages\r\n    "CMD_MODEL_ADD_MODEL"                      : "Model",\r\n    "CMD_MODEL_ADD_SUBSYSTEM"                  : "Subsystem",\r\n    "CMD_MODEL_ADD_PACKAGE"                    : "Package",\r\n    "CMD_MODEL_ADD_PROFILE"                    : "Profile",\r\n    // Model: Classes\r\n    "CMD_MODEL_ADD_CLASS"                      : "Class",\r\n    "CMD_MODEL_ADD_INTERFACE"                  : "Interface",\r\n    "CMD_MODEL_ADD_SIGNAL"                     : "Signal",\r\n    "CMD_MODEL_ADD_DATATYPE"                   : "DataType",\r\n    "CMD_MODEL_ADD_PRIMITIVETYPE"              : "PrimitiveType",\r\n    "CMD_MODEL_ADD_ENUMERATION"                : "Enumeration",\r\n    "CMD_MODEL_ADD_ARTIFACT"                   : "Artifact",\r\n    "CMD_MODEL_ADD_COMPONENT"                  : "Component",\r\n    "CMD_MODEL_ADD_NODE"                       : "Node",\r\n    "CMD_MODEL_ADD_USECASE"                    : "UseCase",\r\n    "CMD_MODEL_ADD_ACTOR"                      : "Actor",\r\n    "CMD_MODEL_ADD_STEREOTYPE"                 : "Stereotype",\r\n    // Model: Instances\r\n    "CMD_MODEL_ADD_OBJECT"                     : "Object",\r\n    "CMD_MODEL_ADD_ARTIFACTINSTANCE"           : "Artifact Instance",\r\n    "CMD_MODEL_ADD_COMPONENTINSTANCE"          : "Component Instance",\r\n    "CMD_MODEL_ADD_NODEINSTANCE"               : "Node Instance",\r\n    // Model: Behaviors\r\n    "CMD_MODEL_ADD_COLLABORATION"              : "Collaboration",\r\n    "CMD_MODEL_ADD_INTERACTION"                : "Interaction",\r\n    "CMD_MODEL_ADD_STATEMACHINE"               : "State Machine",\r\n    "CMD_MODEL_ADD_ACTIVITY"                   : "Activity",\r\n    "CMD_MODEL_ADD_OPAQUEBEHAVIOR"             : "Opaque Behavior",\r\n    // Model: Features\r\n    "CMD_MODEL_ADD_TEMPLATEPARAMETER"          : "Template Parameter",\r\n    "CMD_MODEL_ADD_PARAMETER"                  : "Parameter",\r\n    "CMD_MODEL_ADD_ENUMERATIONLITERAL"         : "Enumeration Literal",\r\n    "CMD_MODEL_ADD_ATTRIBUTE"                  : "Attribute",\r\n    "CMD_MODEL_ADD_PORT"                       : "Port",\r\n    "CMD_MODEL_ADD_OPERATION"                  : "Operation",\r\n    "CMD_MODEL_ADD_RECEPTION"                  : "Reception",\r\n    "CMD_MODEL_ADD_EXTENSIONPOINT"             : "Extension Point",\r\n    "CMD_MODEL_ADD_SLOT"                       : "Slot",\r\n    // Model: States\r\n    "CMD_MODEL_ADD_STATE"                      : "State",\r\n    "CMD_MODEL_ADD_REGION"                     : "Region",\r\n    "CMD_MODEL_ADD_ENTRY_ACTIVITY"             : "Entry Activity",\r\n    "CMD_MODEL_ADD_DO_ACTIVITY"                : "Do Activity",\r\n    "CMD_MODEL_ADD_EXIT_ACTIVITY"              : "Exit Activity",\r\n    "CMD_MODEL_ADD_TRIGGER"                    : "Trigger",\r\n    "CMD_MODEL_ADD_EFFECT"                     : "Effect",\r\n    // Model: Actions\r\n    "CMD_MODEL_ADD_ACTION"                     : "Action",\r\n    // Model: Common\r\n    "CMD_MODEL_ADD_CONSTRAINT"                 : "Constraint",\r\n    "CMD_MODEL_ADD_TAG"                        : "Tag",\r\n    // Model: Diagrams\r\n    "CMD_MODEL_ADD_DIAGRAM_CLASS"              : "Class Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_PACKAGE"            : "Package Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_OBJECT"             : "Object Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_COMPOSITESTRUCTURE" : "Composite Structure Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_COMPONENT"          : "Component Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_DEPLOYMENT"         : "Deployment Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_USECASE"            : "Use Case Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_SEQUENCE"           : "Sequence Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_COMMUNICATION"      : "Communication Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_STATECHART"         : "Statechart Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_ACTIVITY"           : "Activity Diagram",\r\n    "CMD_MODEL_ADD_DIAGRAM_PROFILE"            : "Profile Diagram",\r\n    // Format\r\n    "CMD_FORMAT_STEREOTYPE"                    : "Stereotype Display",\r\n    "CMD_FORMAT_STEREOTYPE_NONE"               : "None",\r\n    "CMD_FORMAT_STEREOTYPE_LABEL"              : "Label",\r\n    "CMD_FORMAT_STEREOTYPE_DECORATION"         : "Decoration",\r\n    "CMD_FORMAT_STEREOTYPE_DECORATION_LABEL"   : "Decoration with Label",\r\n    "CMD_FORMAT_STEREOTYPE_ICON"               : "Icon",\r\n    "CMD_FORMAT_STEREOTYPE_ICON_LABEL"         : "Icon with Label",\r\n    "CMD_FORMAT_WORD_WRAP"                     : "Word Wrap",\r\n    "CMD_FORMAT_SHOW_VISIBILITY"               : "Show Visibility",\r\n    "CMD_FORMAT_SHOW_NAMESPACE"                : "Show Namespace",\r\n    "CMD_FORMAT_SHOW_PROPERTY"                 : "Show Property",\r\n    "CMD_FORMAT_SHOW_TYPE"                     : "Show Type",\r\n    "CMD_FORMAT_SHOW_MULTIPLICITY"             : "Show Multiplicity",\r\n    "CMD_FORMAT_SHOW_OPERATION_SIGNATURE"      : "Show Operation Signature",\r\n    "CMD_FORMAT_SUPPRESS_ATTRIBUTES"           : "Suppress Attributes",\r\n    "CMD_FORMAT_SUPPRESS_OPERATIONS"           : "Suppress Operations",\r\n    "CMD_FORMAT_SUPPRESS_RECEPTIONS"           : "Suppress Receptions",\r\n    "CMD_FORMAT_SUPPRESS_LITERALS"             : "Suppress Literals",\r\n\r\n    // Extension Manager\r\n    "EXTENSION_NOT_INSTALLED"              : "Couldn\'t remove extension {0} because it wasn\'t installed.",\r\n    "CANT_UPDATE"                          : "The update isn\'t compatible with this version of StarUML.",\r\n    "CANT_UPDATE_DEV"                      : "Extensions in the \\"dev\\" folder can\'t be updated automatically.",\r\n    "INSTALL"                              : "Install",\r\n    "UPDATE"                               : "Update",\r\n    "REMOVE"                               : "Remove",\r\n    "OVERWRITE"                            : "Overwrite",\r\n    "EXTENSION_MANAGER_ERROR_LOAD"         : "Unable to access the extension registry. Please try again later.",\r\n    "EXTENSION_INCOMPATIBLE_NEWER"         : "This extension requires a newer version of StarUML.",\r\n    "EXTENSION_INCOMPATIBLE_OLDER"         : "This extension currently only works with older versions of StarUML.",\r\n    "EXTENSION_LATEST_INCOMPATIBLE_NEWER"  : "Version {0} of this extension requires a newer version of StarUML. But you can install the earlier version {1}.",\r\n    "EXTENSION_LATEST_INCOMPATIBLE_OLDER"  : "Version {0} of this extension only works with older versions of StarUML. But you can install the earlier version {1}.",\r\n    "EXTENSION_NO_DESCRIPTION"             : "No description",\r\n    "EXTENSION_ISSUES"                     : "Issues",\r\n    "EXTENSION_MORE_INFO"                  : "More info...",\r\n    "EXTENSION_ERROR"                      : "Extension error",\r\n    "EXTENSION_KEYWORDS"                   : "Keywords",\r\n    "EXTENSION_INSTALLED"                  : "Installed",\r\n    "EXTENSION_UPDATE_INSTALLED"           : "This extension update has been downloaded and will be installed after StarUML reloads.",\r\n    "EXTENSION_MANAGER_REMOVE"             : "Remove Extension",\r\n    "EXTENSION_MANAGER_REMOVE_ERROR"       : "Unable to remove one or more extensions: {0}. StarUML will still reload.",\r\n    "EXTENSION_MANAGER_UPDATE"             : "Update Extension",\r\n    "EXTENSION_MANAGER_UPDATE_ERROR"       : "Unable to update one or more extensions: {0}. StarUML will still reload.",\r\n    "MARKED_FOR_REMOVAL"                   : "Marked for removal",\r\n    "UNDO_REMOVE"                          : "Undo",\r\n    "MARKED_FOR_UPDATE"                    : "Marked for update",\r\n    "UNDO_UPDATE"                          : "Undo",\r\n    "CHANGE_AND_RELOAD_TITLE"              : "Change Extensions",\r\n    "CHANGE_AND_RELOAD_MESSAGE"            : "To update or remove the marked extensions, StarUML will need to reload. You\'ll be prompted to save unsaved changes.",\r\n    "REMOVE_AND_RELOAD"                    : "Remove Extensions and Reload",\r\n    "CHANGE_AND_RELOAD"                    : "Change Extensions and Reload",\r\n    "UPDATE_AND_RELOAD"                    : "Update Extensions and Reload",\r\n    "PROCESSING_EXTENSIONS"                : "Processing extension changes\\u2026",\r\n    "NO_EXTENSIONS"                        : "No extensions installed yet.<br>Click on the Registry tab above to get started.",\r\n    "NO_EXTENSION_MATCHES"                 : "No extensions match your search.",\r\n    "REGISTRY_SANITY_CHECK_WARNING"        : "Be cautious when installing extensions from an unknown source.",\r\n    "UNKNOWN_ERROR"                        : "Unknown internal error.",\r\n\r\n    // Install Extension Dialog\r\n    "INSTALL_EXTENSION_TITLE"              : "Install Extension",\r\n    "UPDATE_EXTENSION_TITLE"               : "Update Extension",\r\n    "INSTALLING_FROM"                      : "Installing extension from {0}\\u2026",\r\n    "INSTALL_SUCCEEDED"                    : "Installation successful!",\r\n    "INSTALL_FAILED"                       : "Installation failed.",\r\n    "INSTALL_CANCELED"                     : "Installation canceled.",\r\n    "CANCELING_INSTALL"                    : "Canceling\\u2026",\r\n    "CANCELING_HUNG"                       : "Canceling the install is taking a long time. An internal error may have occurred.",\r\n\r\n    // Dialogs\r\n    "OK"                                   : "OK",\r\n    "CANCEL"                               : "Cancel",\r\n    "SAVE"                                 : "Save",\r\n    "DONTSAVE"                             : "Don\'t Save",\r\n    "CLOSE"                                : "Close",\r\n    "DOWNLOAD"                             : "Download",\r\n\r\n    // Settings for Explorer\r\n    "EXPLORER_SETTINGS_SORT_BY_ADDED"      : "Sort By Added",\r\n    "EXPLORER_SETTINGS_SORT_BY_NAME"       : "Sort By Name",\r\n    "EXPLORER_SETTINGS_SHOW_STEREOTYPE_TEXT" : "Show Stereotype Text",\r\n\r\n    /**\r\n     * Keyboard modifier names\r\n     */\r\n    "KEYBOARD_CTRL"   : "Ctrl",\r\n    "KEYBOARD_SHIFT"  : "Shift",\r\n    "KEYBOARD_SPACE"  : "Space"\r\n\r\n});\r\n\n//# sourceURL=/strings.js'),eval('define(\'text!base-config/keyboard.json\',[],function () { return \'{\\r\\n    "file.new": [\\r\\n        "Ctrl-N"\\r\\n    ],\\r\\n    "file.open": [\\r\\n        "Ctrl-O"\\r\\n    ],\\r\\n    "file.save": [\\r\\n        "Ctrl-S"\\r\\n    ],\\r\\n    "file.saveAs": [\\r\\n        "Ctrl-Shift-S"\\r\\n    ],\\r\\n    "edit.undo": [\\r\\n        "Ctrl-Z"\\r\\n    ],\\r\\n    "edit.redo": [\\r\\n        "Ctrl-Y"\\r\\n    ],\\r\\n    "edit.cut": [\\r\\n        "Ctrl-X"\\r\\n    ],\\r\\n    "edit.copy": [\\r\\n        "Ctrl-C"\\r\\n    ],\\r\\n    "edit.paste": [\\r\\n        "Ctrl-V"\\r\\n    ],\\r\\n    "edit.deleteFromModel": [\\r\\n        {\\r\\n            "key": "Ctrl-Delete"\\r\\n        },\\r\\n        {\\r\\n            "key": "Cmd-Backspace",\\r\\n            "platform": "mac"\\r\\n        }\\r\\n    ],\\r\\n    "edit.moveUp": [\\r\\n        "Ctrl-Shift-Up"\\r\\n    ],\\r\\n    "edit.moveDown": [\\r\\n        "Ctrl-Shift-Down"\\r\\n    ],\\r\\n    "edit.selectAll": [\\r\\n        "Ctrl-A"\\r\\n    ],\\r\\n    "edit.selectInExplorer": [\\r\\n        "Ctrl-E"\\r\\n    ],\\r\\n    "edit.selectInDiagram": [\\r\\n        "Ctrl-D"\\r\\n    ],\\r\\n    "format.font": [\\r\\n        "Ctrl-Shift-F"\\r\\n    ],\\r\\n    "format.fillColor": [\\r\\n        "Ctrl-Shift-I"\\r\\n    ],\\r\\n    "format.lineColor": [\\r\\n        "Ctrl-Shift-L"\\r\\n    ],\\r\\n    "format.linestyle.rectilinear": [\\r\\n        "Ctrl-L"\\r\\n    ],\\r\\n    "format.linestyle.oblique": [\\r\\n        "Ctrl-B"\\r\\n    ],\\r\\n    "format.linestyle.roundRect": [\\r\\n        "Ctrl-Alt-L"\\r\\n    ],\\r\\n    "format.linestyle.curve": [\\r\\n        "Ctrl-Alt-B"\\r\\n    ],\\r\\n    "format.autoResize": [\\r\\n        "Ctrl-Shift-R"\\r\\n    ],\\r\\n    "format.showShadow": [\\r\\n        "Ctrl-Shift-H"\\r\\n    ],\\r\\n    "view.closeDiagram": [\\r\\n        "F4"\\r\\n    ],\\r\\n    "view.closeOtherDiagrams": [\\r\\n        "Ctrl-F4"\\r\\n    ],\\r\\n    "view.closeAllDiagrams": [\\r\\n        "Shift-F4"\\r\\n    ],\\r\\n    "view.nextDiagram": [\\r\\n        "Ctrl-Shift-]"\\r\\n    ],\\r\\n    "view.previousDiagram": [\\r\\n        "Ctrl-Shift-["\\r\\n    ],\\r\\n    "view.zoomIn": [\\r\\n        {\\r\\n            "key": "Ctrl-=",\\r\\n            "displayKey": "Cmd-+"\\r\\n        },\\r\\n        {\\r\\n            "key": "Ctrl-+",\\r\\n            "displayKey": "Cmd-+"\\r\\n        }\\r\\n    ],\\r\\n    "view.zoomOut": [\\r\\n        {\\r\\n            "key": "Ctrl--",\\r\\n            "displayKey": "Cmd-−"\\r\\n        }\\r\\n    ],\\r\\n    "view.actualSize": [\\r\\n        {\\r\\n            "key": "Ctrl-0",\\r\\n            "displayKey": "Cmd-0"\\r\\n        }\\r\\n    ],\\r\\n    "view.fitToWindow": [\\r\\n        {\\r\\n            "key": "Ctrl-Alt-0",\\r\\n            "displayKey": "Cmd-Alt-0"\\r\\n        }\\r\\n    ],\\r\\n    "view.showGrid": [\\r\\n        {\\r\\n            "key": "Ctrl-G",\\r\\n            "displayKey": "Cmd-G"\\r\\n        }\\r\\n    ],\\r\\n    "view.hideSidebar": [\\r\\n        {\\r\\n            "key": "Ctrl-1",\\r\\n            "displayKey": "Cmd-1"\\r\\n        }\\r\\n    ],\\r\\n    "view.hideNavigator": [\\r\\n        {\\r\\n            "key": "Ctrl-2",\\r\\n            "displayKey": "Cmd-2"\\r\\n        }\\r\\n    ],\\r\\n    "view.hideToolbar": [\\r\\n        {\\r\\n            "key": "Ctrl-3",\\r\\n            "displayKey": "Cmd-3"\\r\\n        }\\r\\n    ],\\r\\n    "view.hideStatusBar": [\\r\\n        {\\r\\n            "key": "Ctrl-4",\\r\\n            "displayKey": "Cmd-4"\\r\\n        }\\r\\n    ],\\r\\n    "view.hideToolbox": [\\r\\n        {\\r\\n            "key": "Ctrl-5",\\r\\n            "displayKey": "Cmd-5"\\r\\n        }\\r\\n    ],\\r\\n    "view.hideEditors": [\\r\\n        {\\r\\n            "key": "Ctrl-6",\\r\\n            "displayKey": "Cmd-6"\\r\\n        }\\r\\n    ],\\r\\n    "tools.debug.reload": [\\r\\n        "Ctrl-R"\\r\\n    ],\\r\\n    "format.stereotype.none": [\\r\\n        "Ctrl-Shift-0"\\r\\n    ],\\r\\n    "format.stereotype.label": [\\r\\n        "Ctrl-Shift-1"\\r\\n    ],\\r\\n    "format.stereotype.decoration": [\\r\\n        "Ctrl-Shift-2"\\r\\n    ],\\r\\n    "format.stereotype.decorationLabel": [\\r\\n        "Ctrl-Shift-3"\\r\\n    ],\\r\\n    "format.stereotype.icon": [\\r\\n        "Ctrl-Shift-4"\\r\\n    ],\\r\\n    "format.stereotype.iconLabel": [\\r\\n        "Ctrl-Shift-5"\\r\\n    ],\\r\\n    "format.wordWrap": [\\r\\n        "Ctrl-Shift-W"\\r\\n    ],\\r\\n    "format.showVisibility": [\\r\\n        "Ctrl-Shift-V"\\r\\n    ],\\r\\n    "format.showNamespace": [\\r\\n        "Ctrl-Shift-N"\\r\\n    ],\\r\\n    "format.showProperty": [\\r\\n        "Ctrl-Shift-P"\\r\\n    ],\\r\\n    "format.showType": [\\r\\n        "Ctrl-Shift-Y"\\r\\n    ],\\r\\n    "format.showMultiplicity": [\\r\\n        "Ctrl-Shift-M"\\r\\n    ],\\r\\n    "format.showOperationSignature": [\\r\\n        "Ctrl-Shift-G"\\r\\n    ],\\r\\n    "format.suppressAttributes": [\\r\\n        "Ctrl-Shift-A"\\r\\n    ],\\r\\n    "format.suppressOperations": [\\r\\n        "Ctrl-Shift-O"\\r\\n    ],\\r\\n    "format.suppressReceptions": [\\r\\n        "Ctrl-Shift-E"\\r\\n    ],\\r\\n    "format.suppressLiterals": [\\r\\n        "Ctrl-Shift-T"\\r\\n    ]\\r\\n}\\r\\n\';});\n\n//# sourceURL=/text!base-config/keyboard.json'),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, app, window */\r\n/*unittests: KeyBindingManager */\r\n\r\n/**\r\n * Manages the mapping of keyboard inputs to commands.\r\n */\r\ndefine(\'command/KeyBindingManager\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Global\',\'utils/Initializer\',\'command/CommandManager\',\'utils/KeyEvent\',\'strings\',\'text!base-config/keyboard.json\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit        = require("utils/AppInit"),\r\n        global         = require("core/Global").global,\r\n        Initializer    = require("utils/Initializer"),\r\n        CommandManager = require("command/CommandManager"),\r\n        KeyEvent       = require("utils/KeyEvent"),\r\n        Strings        = require("strings");\r\n\r\n    var KeyboardPrefs = JSON.parse(require("text!base-config/keyboard.json"));\r\n\r\n    /**\r\n     * @private\r\n     * Maps normalized shortcut descriptor to key binding info.\r\n     * @type {!Object.<string, {commandID: string, key: string, displayKey: string}>}\r\n     */\r\n    var _keyMap = {};\r\n\r\n    /**\r\n     * @private\r\n     * Maps commandID to the list of shortcuts that are bound to it.\r\n     * @type {!Object.<string, Array.<{key: string, displayKey: string}>>}\r\n     */\r\n    var _commandMap = {};\r\n\r\n    /**\r\n     * @private\r\n     * Allow clients to toggle key binding\r\n     * @type {boolean}\r\n     */\r\n    var _enabled = true;\r\n\r\n    /**\r\n     * @private\r\n     * Stack of registered global keydown hooks.\r\n     * @type {Array.<function(Event): boolean>}\r\n     */\r\n    var _globalKeydownHooks = [];\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function _reset() {\r\n        _keyMap = {};\r\n        _commandMap = {};\r\n        _globalKeydownHooks = [];\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Initialize an empty keymap as the current keymap. It overwrites the current keymap if there is one.\r\n     * builds the keyDescriptor string from the given parts\r\n     * @param {boolean} hasCtrl Is Ctrl key enabled\r\n     * @param {boolean} hasAlt Is Alt key enabled\r\n     * @param {boolean} hasShift Is Shift key enabled\r\n     * @param {string} key The key that\'s pressed\r\n     * @return {string} The normalized key descriptor\r\n     */\r\n    function _buildKeyDescriptor(hasMacCtrl, hasCtrl, hasAlt, hasShift, key) {\r\n        if (!key) {\r\n            console.log("KeyBindingManager _buildKeyDescriptor() - No key provided!");\r\n            return "";\r\n        }\r\n\r\n        var keyDescriptor = [];\r\n\r\n        if (hasMacCtrl) {\r\n            keyDescriptor.push("Ctrl");\r\n        }\r\n        if (hasAlt) {\r\n            keyDescriptor.push("Alt");\r\n        }\r\n        if (hasShift) {\r\n            keyDescriptor.push("Shift");\r\n        }\r\n\r\n        if (hasCtrl) {\r\n            // Windows display Ctrl first, Mac displays Command symbol last\r\n            if (global.app.platform === "mac") {\r\n                keyDescriptor.push("Cmd");\r\n            } else {\r\n                keyDescriptor.unshift("Ctrl");\r\n            }\r\n        }\r\n\r\n        keyDescriptor.push(key);\r\n\r\n        return keyDescriptor.join("-");\r\n    }\r\n\r\n\r\n    /**\r\n     * normalizes the incoming key descriptor so the modifier keys are always specified in the correct order\r\n     * @param {string} The string for a key descriptor, can be in any order, the result will be Ctrl-Alt-Shift-<Key>\r\n     * @return {string} The normalized key descriptor or null if the descriptor invalid\r\n     */\r\n    function normalizeKeyDescriptorString(origDescriptor) {\r\n        var hasMacCtrl = false,\r\n            hasCtrl = false,\r\n            hasAlt = false,\r\n            hasShift = false,\r\n            key = "",\r\n            error = false;\r\n\r\n        function _compareModifierString(left, right) {\r\n            if (!left || !right) {\r\n                return false;\r\n            }\r\n            left = left.trim().toLowerCase();\r\n            right = right.trim().toLowerCase();\r\n\r\n            return (left.length > 0 && left === right);\r\n        }\r\n\r\n        origDescriptor.split("-").forEach(function parseDescriptor(ele, i, arr) {\r\n            if (_compareModifierString("ctrl", ele)) {\r\n                if (global.app.platform === "mac") {\r\n                    hasMacCtrl = true;\r\n                } else {\r\n                    hasCtrl = true;\r\n                }\r\n            } else if (_compareModifierString("cmd", ele)) {\r\n                hasCtrl = true;\r\n            } else if (_compareModifierString("alt", ele)) {\r\n                hasAlt = true;\r\n            } else if (_compareModifierString("opt", ele)) {\r\n                hasAlt = true;\r\n            } else if (_compareModifierString("shift", ele)) {\r\n                hasShift = true;\r\n            } else if (key.length > 0) {\r\n                console.log("KeyBindingManager normalizeKeyDescriptorString() - Multiple keys defined. Using key: " + key + " from: " + origDescriptor);\r\n                error = true;\r\n            } else {\r\n                key = ele;\r\n            }\r\n        });\r\n\r\n        if (error) {\r\n            return null;\r\n        }\r\n\r\n        // Check to see if the binding is for "-".\r\n        if (key === "" && origDescriptor.search(/^.+--$/) !== -1) {\r\n            key = "-";\r\n        }\r\n\r\n        // \'+\' char is valid if it\'s the only key. Keyboard shortcut strings should use\r\n        // unicode characters (unescaped). Keyboard shortcut display strings may use\r\n        // unicode escape sequences (e.g. \\u20AC euro sign)\r\n        if ((key.indexOf("+")) >= 0 && (key.length > 1)) {\r\n            return null;\r\n        }\r\n\r\n        return _buildKeyDescriptor(hasMacCtrl, hasCtrl, hasAlt, hasShift, key);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Looks for keycodes that have os-inconsistent keys and fixes them.\r\n     * @param {number} The keycode from the keyboard event.\r\n     * @param {string} The current best guess at what the key is.\r\n     * @return {string} If the key is OS-inconsistent, the correct key; otherwise, the original key.\r\n     **/\r\n    function _mapKeycodeToKey(keycode, key) {\r\n        // If keycode represents one of the digit keys (0-9), then return the corresponding digit\r\n        // by subtracting KeyEvent.DOM_VK_0 from keycode. ie. [48-57] --> [0-9]\r\n        if (keycode >= KeyEvent.DOM_VK_0 && keycode <= KeyEvent.DOM_VK_9) {\r\n            return String(keycode - KeyEvent.DOM_VK_0);\r\n        // Do the same with the numpad numbers\r\n        // by subtracting KeyEvent.DOM_VK_NUMPAD0 from keycode. ie. [96-105] --> [0-9]\r\n        } else if (keycode >= KeyEvent.DOM_VK_NUMPAD0 && keycode <= KeyEvent.DOM_VK_NUMPAD9) {\r\n            return String(keycode - KeyEvent.DOM_VK_NUMPAD0);\r\n        }\r\n\r\n\r\n        switch (keycode) {\r\n        case KeyEvent.DOM_VK_SEMICOLON:\r\n            return ";";\r\n        case KeyEvent.DOM_VK_EQUALS:\r\n            return "=";\r\n        case KeyEvent.DOM_VK_COMMA:\r\n            return ",";\r\n        case KeyEvent.DOM_VK_SUBTRACT:\r\n        case KeyEvent.DOM_VK_DASH:\r\n            return "-";\r\n        case KeyEvent.DOM_VK_ADD:\r\n            return "+";\r\n        case KeyEvent.DOM_VK_DECIMAL:\r\n        case KeyEvent.DOM_VK_PERIOD:\r\n            return ".";\r\n        case KeyEvent.DOM_VK_DIVIDE:\r\n        case KeyEvent.DOM_VK_SLASH:\r\n            return "/";\r\n        case KeyEvent.DOM_VK_BACK_QUOTE:\r\n            return "`";\r\n        case KeyEvent.DOM_VK_OPEN_BRACKET:\r\n            return "[";\r\n        case KeyEvent.DOM_VK_BACK_SLASH:\r\n            return "\\\\";\r\n        case KeyEvent.DOM_VK_CLOSE_BRACKET:\r\n            return "]";\r\n        case KeyEvent.DOM_VK_QUOTE:\r\n            return "\'";\r\n        default:\r\n            return key;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Takes a keyboard event and translates it into a key in a key map\r\n     */\r\n    function _translateKeyboardEvent(event) {\r\n        var hasMacCtrl = (global.app.platform === "mac") ? (event.ctrlKey) : false,\r\n            hasCtrl = (global.app.platform !== "mac") ? (event.ctrlKey) : (event.metaKey),\r\n            hasAlt = (event.altKey),\r\n            hasShift = (event.shiftKey),\r\n            key = String.fromCharCode(event.keyCode);\r\n\r\n        //From the W3C, if we can get the KeyboardEvent.keyIdentifier then look here\r\n        //As that will let us use keys like then function keys "F5" for commands. The\r\n        //full set of values we can use is here\r\n        //http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/keyset.html#KeySet-Set\r\n        var ident = event.keyIdentifier;\r\n        if (ident) {\r\n            if (ident.charAt(0) === "U" && ident.charAt(1) === "+") {\r\n                //This is a unicode code point like "U+002A", get the 002A and use that\r\n                key = String.fromCharCode(parseInt(ident.substring(2), 16));\r\n            } else {\r\n                //This is some non-character key, just use the raw identifier\r\n                key = ident;\r\n            }\r\n        }\r\n\r\n        // Translate some keys to their common names\r\n        if (key === "\\t") {\r\n            key = "Tab";\r\n        } else if (key === " ") {\r\n            key = "Space";\r\n        } else {\r\n            key = _mapKeycodeToKey(event.keyCode, key);\r\n        }\r\n\r\n        return _buildKeyDescriptor(hasMacCtrl, hasCtrl, hasAlt, hasShift, key);\r\n    }\r\n\r\n    /**\r\n     * Convert normalized key representation to display appropriate for platform.\r\n     * @param {!string} descriptor Normalized key descriptor.\r\n     * @return {!string} Display/Operating system appropriate string\r\n     */\r\n    function formatKeyDescriptor(descriptor) {\r\n        var displayStr;\r\n\r\n        if (global.app.platform === "mac") {\r\n            displayStr = descriptor.replace(/-(?!$)/g, "");     // remove dashes\r\n            displayStr = displayStr.replace("Ctrl", "\\u2303");  // Ctrl > control symbol\r\n            displayStr = displayStr.replace("Cmd", "\\u2318");   // Cmd > command symbol\r\n            displayStr = displayStr.replace("Shift", "\\u21E7"); // Shift > shift symbol\r\n            displayStr = displayStr.replace("Alt", "\\u2325");   // Alt > option symbol\r\n            displayStr = displayStr.replace("Backspace", "⌫"); // Backspace > backspace symbol\r\n            displayStr = displayStr.replace("Delete", "⌦");    // Backspace > backspace symbol\r\n            displayStr = displayStr.replace("Up", "↑");         // Up > up arrow\r\n            displayStr = displayStr.replace("Down", "↓");       // Down >  down arrow\r\n        } else {\r\n            displayStr = descriptor.replace("Ctrl", Strings.KEYBOARD_CTRL);   // Ctrl\r\n            displayStr = displayStr.replace("Shift", Strings.KEYBOARD_SHIFT); // Shift > shift symbol\r\n            displayStr = displayStr.replace("Space", Strings.KEYBOARD_SPACE); // Alt > option symbol\r\n            displayStr = displayStr.replace(/-(?!$)/g, "+");\r\n        }\r\n\r\n        return displayStr;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {string} A normalized key-description string.\r\n     * @return {boolean} true if the key is already assigned, false otherwise.\r\n     */\r\n    function _isKeyAssigned(key) {\r\n        return (_keyMap[key] !== undefined);\r\n    }\r\n\r\n    /**\r\n     * Remove a key binding from _keymap\r\n     *\r\n     * @param {!string} key - a key-description string that may or may not be normalized.\r\n     * @param {?string} platform - OS from which to remove the binding (all platforms if unspecified)\r\n     */\r\n    function removeBinding(key, platform) {\r\n        if (!key || ((platform !== null) && (platform !== undefined) && (platform !== global.app.platform))) {\r\n            return;\r\n        }\r\n\r\n        var normalizedKey = normalizeKeyDescriptorString(key);\r\n\r\n        if (!normalizedKey) {\r\n            console.log("Fail to nomalize " + key);\r\n        } else if (_isKeyAssigned(normalizedKey)) {\r\n            var binding = _keyMap[normalizedKey],\r\n                command = CommandManager.get(binding.commandID),\r\n                bindings = _commandMap[binding.commandID];\r\n\r\n            // delete key binding record\r\n            delete _keyMap[normalizedKey];\r\n\r\n            if (bindings) {\r\n                // delete mapping from command to key binding\r\n                _commandMap[binding.commandID] = bindings.filter(function (b) {\r\n                    return (b.key !== normalizedKey);\r\n                });\r\n\r\n                if (command) {\r\n                    $(command).triggerHandler("keyBindingRemoved", [{key: normalizedKey, displayKey: binding.displayKey}]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * @param {string} commandID\r\n     * @param {string|{{key: string, displayKey: string}}} keyBinding - a single shortcut.\r\n     * @param {?string} platform\r\n     *     - "all" indicates all platforms, not overridable\r\n     *     - undefined indicates all platforms, overridden by platform-specific binding\r\n     * @return {?{key: string, displayKey:String}} Returns a record for valid key bindings.\r\n     *     Returns null when key binding platform does not match, binding does not normalize,\r\n     *     or is already assigned.\r\n     */\r\n    function _addBinding(commandID, keyBinding, platform) {\r\n        var key,\r\n            result = null,\r\n            normalized,\r\n            normalizedDisplay,\r\n            explicitPlatform = keyBinding.platform || platform,\r\n            targetPlatform,\r\n            command,\r\n            bindingsToDelete = [],\r\n            existing;\r\n\r\n        // For platform: "all", use explicit current plaform\r\n        if (explicitPlatform && explicitPlatform !== "all") {\r\n            targetPlatform = explicitPlatform;\r\n        } else {\r\n            targetPlatform = global.app.platform;\r\n        }\r\n\r\n        // if the request does not specify an explicit platform, and we\'re\r\n        // currently on a mac, then replace Ctrl with Cmd.\r\n        key = (keyBinding.key) || keyBinding;\r\n        if (global.app.platform === "mac" && (explicitPlatform === undefined || explicitPlatform === "all")) {\r\n            key = key.replace("Ctrl", "Cmd");\r\n            if (keyBinding.displayKey !== undefined) {\r\n                keyBinding.displayKey = keyBinding.displayKey.replace("Ctrl", "Cmd");\r\n            }\r\n        }\r\n        normalized = normalizeKeyDescriptorString(key);\r\n\r\n        // skip if the key binding is invalid\r\n        if (!normalized) {\r\n            console.error("Unable to parse key binding " + key + ". Permitted modifiers: Ctrl, Cmd, Alt, Opt, Shift; separated by \'-\' (not \'+\').");\r\n            return null;\r\n        }\r\n\r\n        // check for duplicate key bindings\r\n        existing = _keyMap[normalized];\r\n\r\n        // for cross-platform compatibility\r\n        if (exports.useWindowsCompatibleBindings) {\r\n            // windows-only key bindings are used as the default binding\r\n            // only if a default binding wasn\'t already defined\r\n            if (explicitPlatform === "win") {\r\n                // search for a generic or platform-specific binding if it\r\n                // already exists\r\n                if (existing && (!existing.explicitPlatform ||\r\n                                 existing.explicitPlatform === global.app.platform ||\r\n                                 existing.explicitPlatform === "all")) {\r\n                    // do not clobber existing binding with windows-only binding\r\n                    return null;\r\n                }\r\n\r\n                // target this windows binding for the current platform\r\n                targetPlatform = global.app.platform;\r\n            }\r\n        }\r\n\r\n        // skip if this binding doesn\'t match the current platform\r\n        if (targetPlatform !== global.app.platform) {\r\n            return null;\r\n        }\r\n\r\n        // skip if the key is already assigned\r\n        if (existing) {\r\n            if (!existing.explicitPlatform && explicitPlatform) {\r\n                // remove the the generic binding to replace with this new platform-specific binding\r\n                removeBinding(normalized);\r\n                existing = false;\r\n            }\r\n        }\r\n\r\n        // delete existing bindings when\r\n        // (1) replacing a windows-compatible binding with a generic or\r\n        //     platform-specific binding\r\n        // (2) replacing a generic binding with a platform-specific binding\r\n        var existingBindings = _commandMap[commandID] || [],\r\n            isWindowsCompatible,\r\n            isReplaceGeneric,\r\n            ignoreGeneric;\r\n\r\n        existingBindings.forEach(function (binding) {\r\n            // remove windows-only bindings in _commandMap\r\n            isWindowsCompatible = exports.useWindowsCompatibleBindings &&\r\n                binding.explicitPlatform === "win";\r\n\r\n            // remove existing generic binding\r\n            isReplaceGeneric = !binding.explicitPlatform &&\r\n                explicitPlatform;\r\n\r\n            if (isWindowsCompatible || isReplaceGeneric) {\r\n                bindingsToDelete.push(binding);\r\n            } else {\r\n                // existing binding is platform-specific and the requested binding is generic\r\n                ignoreGeneric = binding.explicitPlatform && !explicitPlatform;\r\n            }\r\n        });\r\n\r\n        if (ignoreGeneric) {\r\n            // explicit command binding overrides this one\r\n            return null;\r\n        }\r\n\r\n        if (existing) {\r\n            // do not re-assign a key binding\r\n            console.error("Cannot assign " + normalized + " to " + commandID + ". It is already assigned to " + _keyMap[normalized].commandID);\r\n            return null;\r\n        }\r\n\r\n        // remove generic or windows-compatible bindings\r\n        bindingsToDelete.forEach(function (binding) {\r\n            removeBinding(binding.key);\r\n        });\r\n\r\n        // optional display-friendly string (e.g. CMD-+ instead of CMD-=)\r\n        normalizedDisplay = (keyBinding.displayKey) ? normalizeKeyDescriptorString(keyBinding.displayKey) : normalized;\r\n\r\n        // 1-to-many commandID mapping to key binding\r\n        if (!_commandMap[commandID]) {\r\n            _commandMap[commandID] = [];\r\n        }\r\n\r\n        result = {\r\n            key                 : normalized,\r\n            displayKey          : normalizedDisplay,\r\n            explicitPlatform    : explicitPlatform\r\n        };\r\n\r\n        _commandMap[commandID].push(result);\r\n\r\n        // 1-to-1 key binding to commandID\r\n        _keyMap[normalized] = {\r\n            commandID           : commandID,\r\n            key                 : normalized,\r\n            displayKey          : normalizedDisplay,\r\n            explicitPlatform    : explicitPlatform\r\n        };\r\n\r\n        // notify listeners\r\n        command = CommandManager.get(commandID);\r\n\r\n        if (command) {\r\n            $(command).triggerHandler("keyBindingAdded", [result]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a copy of the keymap\r\n     * @returns {!Object.<string, {commandID: string, key: string, displayKey: string}>}\r\n     */\r\n    function getKeymap() {\r\n        return $.extend({}, _keyMap);\r\n    }\r\n\r\n    /**\r\n     * Process the keybinding for the current key.\r\n     *\r\n     * @param {string} A key-description string.\r\n     * @return {boolean} true if the key was processed, false otherwise\r\n     */\r\n    function _handleKey(key) {\r\n        if (_enabled && _keyMap[key]) {\r\n            // The execute() function returns a promise because some commands are async.\r\n            // Generally, commands decide whether they can run or not synchronously,\r\n            // and reject immediately, so we can test for that synchronously.\r\n            var promise = CommandManager.execute(_keyMap[key].commandID);\r\n            return (promise.state() !== "rejected");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // TODO (issue #414): Replace this temporary fix with a more robust solution to handle focus and modality\r\n    /**\r\n     * Enable or disable key bindings. Clients such as dialogs may wish to disable\r\n     * global key bindings temporarily.\r\n     *\r\n     * @param {string} A key-description string.\r\n     * @return {boolean} true if the key was processed, false otherwise\r\n     */\r\n    function setEnabled(value) {\r\n        _enabled = value;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     *\r\n     * Sort objects by platform property. Objects with a platform property come\r\n     * before objects without a platform property.\r\n     */\r\n    function _sortByPlatform(a, b) {\r\n        var a1 = (a.platform) ? 1 : 0,\r\n            b1 = (b.platform) ? 1 : 0;\r\n        return b1 - a1;\r\n    }\r\n\r\n    /**\r\n     * Add one or more key bindings to a particular Command.\r\n     *\r\n     * @param {!string | Command} command - A command ID or command object\r\n     * @param {?({key: string, displayKey: string} | Array.<{key: string, displayKey: string, platform: string}>)} keyBindings\r\n     *     a single key binding or an array of keybindings. Example:\r\n     *     "Shift-Cmd-F". Mac and Win key equivalents are automatically\r\n     *     mapped to each other. Use displayKey property to display a different\r\n     *     string (e.g. "CMD+" instead of "CMD=").\r\n     * @param {?string} platform - the target OS of the keyBindings either\r\n     *     "mac", "win" or "linux". If undefined, all platforms not explicitly\r\n     *     defined will use the key binding.\r\n     * @return {{key: string, displayKey:String}|Array.<{key: string, displayKey:String}>}\r\n     *     Returns record(s) for valid key binding(s)\r\n     */\r\n    function addBinding(command, keyBindings, platform) {\r\n        var commandID           = "",\r\n            results;\r\n\r\n        if (!command) {\r\n            console.error("addBinding(): missing required parameter: command");\r\n            return;\r\n        }\r\n\r\n        if (!keyBindings) { return; }\r\n\r\n        if (typeof (command) === "string") {\r\n            commandID = command;\r\n        } else {\r\n            commandID = command.getID();\r\n        }\r\n\r\n        if (Array.isArray(keyBindings)) {\r\n            var keyBinding;\r\n            results = [];\r\n\r\n            // process platform-specific bindings first\r\n            keyBindings.sort(_sortByPlatform);\r\n\r\n            keyBindings.forEach(function addSingleBinding(keyBindingRequest) {\r\n                // attempt to add keybinding\r\n                keyBinding = _addBinding(commandID, keyBindingRequest, keyBindingRequest.platform);\r\n\r\n                if (keyBinding) {\r\n                    results.push(keyBinding);\r\n                }\r\n            });\r\n        } else {\r\n            results = _addBinding(commandID, keyBindings, platform);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Retrieve key bindings currently associated with a command\r\n     *\r\n     * @param {!string | Command} command - A command ID or command object\r\n     * @return {!Array.<{{key: string, displayKey: string}}>} An array of associated key bindings.\r\n     */\r\n    function getKeyBindings(command) {\r\n        var bindings    = [],\r\n            commandID   = "";\r\n\r\n        if (!command) {\r\n            console.error("getKeyBindings(): missing required parameter: command");\r\n            return [];\r\n        }\r\n\r\n        if (typeof (command) === "string") {\r\n            commandID = command;\r\n        } else {\r\n            commandID = command.getID();\r\n        }\r\n\r\n        bindings = _commandMap[commandID];\r\n        return bindings || [];\r\n    }\r\n\r\n    /**\r\n     * Adds default key bindings when commands are registered to CommandManager\r\n     * @param {$.Event} event jQuery event\r\n     * @param {Command} command Newly registered command\r\n     */\r\n    function _handleCommandRegistered(event, command) {\r\n        var commandId   = command.getID(),\r\n            defaults    = KeyboardPrefs[commandId];\r\n        if (defaults) {\r\n            addBinding(commandId, defaults);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a global keydown hook that gets first crack at keydown events\r\n     * before standard keybindings do. This is intended for use by modal or\r\n     * semi-modal UI elements like dialogs or the code hint list that should\r\n     * execute before normal command bindings are run.\r\n     *\r\n     * The hook is passed one parameter, the original keyboard event. If the\r\n     * hook handles the event (or wants to block other global hooks from\r\n     * handling the event), it should return true. Note that this will *only*\r\n     * stop other global hooks and KeyBindingManager from handling the\r\n     * event; to prevent further event propagation, you will need to call\r\n     * stopPropagation(), stopImmediatePropagation(), and/or preventDefault()\r\n     * as usual.\r\n     *\r\n     * Multiple keydown hooks can be registered, and are executed in order,\r\n     * most-recently-added first.\r\n     *\r\n     * (We have to have a special API for this because (1) handlers are normally\r\n     * called in least-recently-added order, and we want most-recently-added;\r\n     * (2) native DOM events don\'t have a way for us to find out if\r\n     * stopImmediatePropagation()/stopPropagation() has been called on the\r\n     * event, so we have to have some other way for one of the hooks to\r\n     * indicate that it wants to block the other hooks from running.)\r\n     *\r\n     * @param {function(Event): boolean} hook The global hook to add.\r\n     */\r\n    function addGlobalKeydownHook(hook) {\r\n        _globalKeydownHooks.push(hook);\r\n    }\r\n\r\n    /**\r\n     * Removes a global keydown hook added by `addGlobalKeydownHook`.\r\n     * Does not need to be the most recently added hook.\r\n     *\r\n     * @param {function(Event): boolean} hook The global hook to remove.\r\n     */\r\n    function removeGlobalKeydownHook(hook) {\r\n        var index = _globalKeydownHooks.indexOf(hook);\r\n        if (index !== -1) {\r\n            _globalKeydownHooks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function _inModalDialog() {\r\n        return $(".modal.instance").length > 0;\r\n    }\r\n\r\n    function _inEditMode() {\r\n        return (document.activeElement.nodeName === "TEXTAREA" ||\r\n                document.activeElement.nodeName === "INPUT");\r\n    }\r\n\r\n    function _isEditKey(event) {\r\n        return ((event.ctrlKey && event.which === KeyEvent.DOM_VK_C) ||\r\n                (event.ctrlKey && event.which === KeyEvent.DOM_VK_X) ||\r\n                (event.ctrlKey && event.which === KeyEvent.DOM_VK_V) ||\r\n                (event.ctrlKey && event.which === KeyEvent.DOM_VK_Z) ||\r\n                (event.ctrlKey && event.which === KeyEvent.DOM_VK_Y) ||\r\n                (event.which === KeyEvent.DOM_VK_DELETE) ||\r\n                (event.which === KeyEvent.DOM_VK_BACK_SPACE));\r\n    }\r\n\r\n    /**\r\n     * Handles a given keydown event, checking global hooks first before\r\n     * deciding to handle it ourselves.\r\n     * @param {Event} The keydown event to handle.\r\n     */\r\n    function _handleKeyEvent(event) {\r\n        // ONLY FOR LINUX: Allow Ctrl+C/X/V/Z/Y and Delete for Input/TextArea or Modal Dialog\r\n        if (app.platform === "linux" && (_inModalDialog() || (_inEditMode() && _isEditKey(event)))) {\r\n            // Allow default browser\'s actions\r\n        } else {\r\n            var i, handled = false;\r\n            for (i = _globalKeydownHooks.length - 1; i >= 0; i--) {\r\n                if (_globalKeydownHooks[i](event)) {\r\n                    handled = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!handled && _handleKey(_translateKeyboardEvent(event))) {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        // Install keydown event listener.\r\n        window.document.body.addEventListener(\r\n            "keydown",\r\n            _handleKeyEvent,\r\n            true\r\n        );\r\n\r\n        exports.useWindowsCompatibleBindings = (global.app.platform !== "mac") &&\r\n            (global.app.platform !== "win");\r\n    });\r\n\r\n    $(CommandManager).on("commandRegistered", _handleCommandRegistered);\r\n\r\n    // unit test only\r\n    exports._reset = _reset;\r\n\r\n    // Define public API\r\n    exports.getKeymap = getKeymap;\r\n    exports.setEnabled = setEnabled;\r\n    exports.addBinding = addBinding;\r\n    exports.removeBinding = removeBinding;\r\n    exports.formatKeyDescriptor = formatKeyDescriptor;\r\n    exports.getKeyBindings = getKeyBindings;\r\n    exports.addGlobalKeydownHook = addGlobalKeydownHook;\r\n    exports.removeGlobalKeydownHook = removeGlobalKeydownHook;\r\n\r\n    /**\r\n     * Use windows-specific bindings if no other are found (e.g. Linux).\r\n     * Core Brackets modules that use key bindings should always define at\r\n     * least a generic keybinding that is applied for all platforms. This\r\n     * setting effectively creates a compatibility mode for third party\r\n     * extensions that define explicit key bindings for Windows and Mac, but\r\n     * not Linux.\r\n     */\r\n    exports.useWindowsCompatibleBindings = false;\r\n\r\n    // For unit testing only\r\n    exports._handleKey = _handleKey;\r\n    exports._handleKeyEvent = _handleKeyEvent;\r\n});\r\n\n//# sourceURL=/command/KeyBindingManager.js'),eval('define(\'text!htmlContent/dialog-template.html\',[],function () { return \'<div class="{{dlgClass}} template dialog modal" data-title="{{title}}">\\r\\n    <div class="dialog-body">\\r\\n        <div class="dialog-message">{{{message}}}</div>\\r\\n    </div>\\r\\n    {{#hasButtons}}\\r\\n    <div class="dialog-footer">\\r\\n        {{#buttons}}\\r\\n        <button class="k-button dialog-button {{className}}" data-button-id="{{id}}">{{{text}}}</button>\\r\\n        {{/buttons}}\\r\\n    </div>\\r\\n    {{/hasButtons}}\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/dialog-template.html'),eval('define(\'text!htmlContent/input-dialog.html\',[],function () { return \'<div class="input-dialog dialog modal" data-title="Input">\\r\\n    <div class="dialog-body">\\r\\n        <div class="dialog-message">{{{message}}}</div>\\r\\n        <input type=\\\'text\\\' class=\\\'k-input k-textbox input-box\\\'>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button primary" data-button-id="ok">{{Strings.OK}}</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/input-dialog.html'),eval('define(\'text!htmlContent/text-dialog.html\',[],function () { return \'<div class="text-dialog dialog modal" data-title="Edit Text">\\r\\n    <div class="dialog-body">\\r\\n        <div class="dialog-message">{{{message}}}</div>\\r\\n        <textarea type=\\\'text\\\' class=\\\'k-textbox text-box primary\\\'>{{{text}}}</textarea>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button" data-button-id="ok">{{Strings.OK}}</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/text-dialog.html'),eval('define(\'text!htmlContent/select-radio-dialog.html\',[],function () { return \'<div class="select-radio-dialog dialog modal" data-title="Select One">\\r\\n    <div class="dialog-body">\\r\\n        <div class="dialog-message">{{{message}}}</div>\\r\\n        <form class=\\\'select-options-form\\\'>\\r\\n            {{#options}}\\r\\n            <label class="k-radio-button">\\r\\n                <input type="radio" name="select-option" value="{{value}}" {{#checked}}checked{{/checked}}>\\r\\n                <div class="k-radio-button__checkmark"></div>\\r\\n                {{text}}\\r\\n            </label>\\r\\n            <br>\\r\\n            {{/options}}\\r\\n        </form>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button primary" data-button-id="ok">{{Strings.OK}}</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/select-radio-dialog.html'),eval('define(\'text!htmlContent/select-dropdown-dialog.html\',[],function () { return \'<div class="select-radio-dialog dialog modal" data-title="Select One">\\r\\n    <div class="dialog-body">\\r\\n        <div class="dialog-message">{{{message}}}</div>\\r\\n        <label class="k-select">\\r\\n            <select class="select-options">\\r\\n                {{#options}}\\r\\n                <option value=\\\'{{value}}\\\'>{{text}}</option>\\r\\n                {{/options}}\\r\\n            </select>\\r\\n        </label>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button primary" data-button-id="ok">{{Strings.OK}}</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/select-dropdown-dialog.html'),eval('define(\'text!htmlContent/color-dialog.html\',[],function () { return \'<div class="color-dialog dialog modal" data-title="Color">\\r\\n    <div class="dialog-body">\\r\\n        <table>\\r\\n            <tr>\\r\\n                <td><div class="color-picker"></div></td>\\r\\n                <td><div class="color-palette"></div></td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button primary" data-button-id="ok">{{Strings.OK}}</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/color-dialog.html'),eval('define(\'text!htmlContent/font-dialog.html\',[],function () { return \'<div class="font-dialog dialog modal" data-title="Font">\\r\\n    <div class="dialog-body">\\r\\n        <table>\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <div class="item-label">Face:</div>\\r\\n                    <label class="font-face k-combo">\\r\\n                        <input type="text" style="width: 100%;">\\r\\n                        <select tabindex="-1">\\r\\n                            {{#faces}}\\r\\n                            <option value="{{value}}">{{text}}</option>\\r\\n                            {{/faces}}\\r\\n                        </select>\\r\\n                    </label>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class="item-label">Size:</div>\\r\\n                    <label class="font-size k-combo">\\r\\n                        <input type="text" style="width: 100%;">\\r\\n                        <select tabindex="-1">\\r\\n                            {{#sizes}}\\r\\n                            <option value=\\\'{{.}}\\\'>{{.}}</option>\\r\\n                            {{/sizes}}\\r\\n                        </select>\\r\\n                    </label>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class="item-label">Color:</div>\\r\\n                    <input class="font-color" type="color">\\r\\n                </td>\\r\\n            </tr>\\r\\n        </table>\\r\\n        <table>\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <div class="item-label">Preview:</div>\\r\\n                    <div class=\\\'font-preview\\\'>AaBb123</div>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class="color-palette"></div>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button primary" data-button-id="ok">{{Strings.OK}}</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/font-dialog.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo, app, Mustache */\r\n\r\ndefine(\'dialogs/Dialogs\',[\'require\',\'exports\',\'module\',\'core/Graphics\',\'utils/KeyEvent\',\'command/KeyBindingManager\',\'strings\',\'text!htmlContent/dialog-template.html\',\'text!htmlContent/input-dialog.html\',\'text!htmlContent/text-dialog.html\',\'text!htmlContent/select-radio-dialog.html\',\'text!htmlContent/select-dropdown-dialog.html\',\'text!htmlContent/color-dialog.html\',\'text!htmlContent/font-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Graphics          = require("core/Graphics"),\r\n        KeyEvent          = require("utils/KeyEvent"),\r\n        KeyBindingManager = require("command/KeyBindingManager"),\r\n        Strings           = require("strings");\r\n\r\n    /**\r\n     * Dialog HTML Templates\r\n     * @private\r\n     */\r\n    var dialogTemplate               = require("text!htmlContent/dialog-template.html"),\r\n        inputDialogTemplate          = require("text!htmlContent/input-dialog.html"),\r\n        textDialogTemplate           = require("text!htmlContent/text-dialog.html"),\r\n        selectRadioDialogTemplate    = require("text!htmlContent/select-radio-dialog.html"),\r\n        selectDropdownDialogTemplate = require("text!htmlContent/select-dropdown-dialog.html"),\r\n        colorDialogTemplate          = require("text!htmlContent/color-dialog.html"),\r\n        fontDialogTemplate           = require("text!htmlContent/font-dialog.html");\r\n\r\n    /**\r\n     * Dialog Modal Results\r\n     * @const\r\n     */\r\n    var DIALOG_BTN_OK       = \'ok\',\r\n        DIALOG_BTN_CANCEL   = \'cancel\',\r\n        DIALOG_BTN_SAVE     = \'save\',\r\n        DIALOG_BTN_DONTSAVE = \'dontsave\',\r\n        DIALOG_CANCELED     = "_canceled";\r\n\r\n    /**\r\n     * Dialog Buttons Class Names\r\n     * @const {string}\r\n     */\r\n    var DIALOG_BTN_CLASS_PRIMARY    = "primary",\r\n        DIALOG_BTN_CLASS_NORMAL     = "",\r\n        DIALOG_BTN_CLASS_LEFT       = "left";\r\n\r\n    /**\r\n     * @private\r\n     * Dismises a modal dialog\r\n     * @param {$.Element} $dlg\r\n     * @param {string} buttonId\r\n     */\r\n    function _dismissDialog($dlg, buttonId) {\r\n        $dlg.data("buttonId", buttonId);\r\n        $dlg.data("kendoWindow").close();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * If autoDismiss is true, then dismisses the dialog. Otherwise just raises an event that the\r\n     * given button was clicked.\r\n     * @param {$.Element} $dlg The dialog element to be dismissed.\r\n     * @param {string} buttonId The ID of the button that was clicked.\r\n     * @param {boolean} autoDismiss Whether to autodismiss the dialog on a button click.\r\n     */\r\n    function _processButton($dlg, buttonId, autoDismiss) {\r\n        if (autoDismiss) {\r\n            _dismissDialog($dlg, buttonId);\r\n        } else {\r\n            $dlg.triggerHandler("buttonClick", buttonId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Handles the use of Tab so that it stays inside the Dialog\r\n     * @param {$.Event} event\r\n     * @param {$.Element} $dlg\r\n     */\r\n    function _handleTab(event, $dlg) {\r\n        var $inputs = $(":input:enabled, a", $dlg).filter(":visible");\r\n\r\n        if ($(event.target).closest($dlg).length) {\r\n            // If it\'s the first or last tabbable element, focus the last/first element\r\n            if ((!event.shiftKey && event.target === $inputs[$inputs.length - 1]) ||\r\n                    (event.shiftKey && event.target === $inputs[0])) {\r\n                $inputs.filter(event.shiftKey ? ":last" : ":first").focus();\r\n                event.preventDefault();\r\n\r\n            // If there is no element to focus, don\'t let it focus outside of the dialog\r\n            } else if (!$inputs.length) {\r\n                event.preventDefault();\r\n            }\r\n\r\n        // If the focus left the dialog, focus the first element in the dialog\r\n        } else {\r\n            $inputs.first().focus();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Returns true if the modal dialog has a button with the given ID\r\n     * @param {$.Element} $dlg\r\n     * @param {string} buttonId\r\n     * @return {boolean}\r\n     */\r\n    function _hasButton($dlg, buttonId) {\r\n        return ($dlg.find("[data-button-id=\'" + buttonId + "\']").length > 0);\r\n    }\r\n\r\n    /**\r\n     * Handles the keyDown event for the dialogs\r\n     * @param {$.Event} e\r\n     * @param {boolean} autoDismiss\r\n     * @return {boolean}\r\n     */\r\n    var _keydownHook = function (e, autoDismiss) {\r\n        var $primaryBtn     = this.find(".primary"),\r\n            buttonId        = null,\r\n            which           = String.fromCharCode(e.which),\r\n            $focusedElement = this.find(".dialog-button:focus, a:focus");\r\n\r\n        // There might be a textfield in the dialog\'s UI; don\'t want to mistake normal typing for dialog dismissal\r\n        var inTextArea    = (e.target.tagName === "TEXTAREA" || (e.target.tagName === "INPUT" && e.target.className.indexOf("use-enter-key") > -1)),\r\n            inTypingField = inTextArea || ($(e.target).filter(":text, :password").length > 0);\r\n\r\n        if (e.which === KeyEvent.DOM_VK_TAB) {\r\n            _handleTab(e, this);\r\n        } else if (e.which === KeyEvent.DOM_VK_ESCAPE) {\r\n            buttonId = DIALOG_BTN_CANCEL;\r\n        } else if (e.which === KeyEvent.DOM_VK_RETURN && (!inTextArea || e.ctrlKey)) {\r\n            // Enter key in single-line text input always dismisses; in text area, only Ctrl+Enter dismisses\r\n            // Click primary\r\n            $primaryBtn.click();\r\n        } else if (e.which === KeyEvent.DOM_VK_SPACE) {\r\n            // Space bar on focused button or link\r\n            $focusedElement.click();\r\n        } else {\r\n            // CMD+D Don\'t Save\r\n            if (e.metaKey && (which === "D")) {\r\n                if (_hasButton(this, DIALOG_BTN_DONTSAVE)) {\r\n                    buttonId = DIALOG_BTN_DONTSAVE;\r\n                }\r\n            // FIXME (issue #418) CMD+. Cancel swallowed by native shell\r\n            } else if (e.metaKey && (e.which === KeyEvent.DOM_VK_PERIOD)) {\r\n                buttonId = DIALOG_BTN_CANCEL;\r\n            // \'N\' Don\'t Save\r\n            } else if (which === "N" && !inTypingField) {\r\n                if (_hasButton(this, DIALOG_BTN_DONTSAVE)) {\r\n                    buttonId = DIALOG_BTN_DONTSAVE;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (buttonId) {\r\n            _processButton(this, buttonId, autoDismiss);\r\n        }\r\n\r\n        // Stop any other global hooks from processing the event (but\r\n        // allow it to continue bubbling if we haven\'t otherwise stopped it).\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * @constructor\r\n     * @private\r\n     *\r\n     * @param {$.Element} $dlg The dialog jQuery element\r\n     * @param {$.Promise} promise A promise that will be resolved with the ID of the clicked button when the dialog\r\n     *     is dismissed. Never rejected.\r\n     */\r\n    function Dialog($dlg, promise) {\r\n        this._$dlg    = $dlg;\r\n        this._promise = promise;\r\n    }\r\n\r\n    /** @type {$.Element} The dialog jQuery element */\r\n    Dialog.prototype.getElement = function () {\r\n        return this._$dlg;\r\n    };\r\n\r\n    /** @type {$.Promise} The dialog promise */\r\n    Dialog.prototype.getPromise = function () {\r\n        return this._promise;\r\n    };\r\n\r\n    /**\r\n     * Closes the dialog if is visible\r\n     */\r\n    Dialog.prototype.close = function () {\r\n        _dismissDialog(this._$dlg, DIALOG_BTN_CANCEL);\r\n    };\r\n\r\n    /**\r\n     * Adds a done callback to the dialog promise\r\n     */\r\n    Dialog.prototype.done = function (callback) {\r\n        this._promise.done(callback);\r\n    };\r\n\r\n\r\n    /**\r\n     * Show Modal Dialog using Template\r\n     * @param {string} template\r\n     * @param {boolean} autoDismiss\r\n     * @param {function($.Element)} beforeClosing\r\n     * @return {Dialog}\r\n     */\r\n    function showModalDialogUsingTemplate(template, autoDismiss, beforeClosing) {\r\n        if (autoDismiss === undefined) {\r\n            autoDismiss = true;\r\n        }\r\n\r\n        var result  = $.Deferred(),\r\n            promise = result.promise(),\r\n            dialog,\r\n            $dlg;\r\n\r\n        $dlg = $(template);\r\n        $dlg.addClass("instance");\r\n        $(window.document.body).append($dlg);\r\n\r\n        var keydownHook = function (e) {\r\n            return _keydownHook.call($dlg, e, autoDismiss);\r\n        };\r\n\r\n        // Build kendo modal window\r\n        $dlg.kendoWindow({\r\n            title: $dlg.data("title"),\r\n            modal: true,\r\n            resizable: false,\r\n            pinned: true,\r\n            close: function () {\r\n                // Call before closing\r\n                if (beforeClosing) {\r\n                    beforeClosing($dlg);\r\n                }\r\n\r\n                // Set button Id\r\n                var buttonId = $dlg.data("buttonId");\r\n                if (!buttonId) {\r\n                    buttonId = DIALOG_BTN_CANCEL;\r\n                }\r\n\r\n                // Dialog\'s return value\r\n                var value = $dlg.data("returnValue");\r\n\r\n                // Remove from DOM\r\n                this.destroy();\r\n\r\n                // Remove our global keydown handler.\r\n                KeyBindingManager.removeGlobalKeydownHook(keydownHook);\r\n\r\n                // Call promise\r\n                _.defer(function () {\r\n                    result.resolve(buttonId, value);\r\n                });\r\n            }\r\n        });\r\n\r\n        // Open dialog at screen center\r\n        dialog = $dlg.data("kendoWindow");\r\n        dialog.center();\r\n\r\n        // Click handler for buttons\r\n        $dlg.one("click", ".dialog-button", function (e) {\r\n            _processButton($dlg, $(this).data("button-id"), autoDismiss);\r\n        });\r\n\r\n        // Set focus to the default button\r\n        var primaryBtn = $dlg.find(".primary");\r\n        if (primaryBtn) {\r\n            primaryBtn.focus();\r\n        }\r\n\r\n        // Push our global keydown handler onto the global stack of handlers.\r\n        KeyBindingManager.addGlobalKeydownHook(keydownHook);\r\n\r\n        return (new Dialog($dlg, promise));\r\n    }\r\n\r\n    /**\r\n     * Show typical modal dialog\r\n     *\r\n     * @param {string} dlgClass\r\n     * @param {string} title\r\n     * @param {string} message\r\n     * @param {Array.<{id:string, text:string, className:string}>} buttons\r\n     * @param {boolean} autoDismiss\r\n     * @return {Dialog}\r\n     */\r\n    function showModalDialog(dlgClass, title, message, buttons, autoDismiss) {\r\n        var templateVars = {\r\n            dlgClass: dlgClass,\r\n            title:    title   || false,\r\n            message:  message || "",\r\n            buttons:  buttons || [{ id: DIALOG_BTN_OK, text: Strings.OK, className: DIALOG_BTN_CLASS_PRIMARY }],\r\n            hasButtons: true\r\n        };\r\n        if (templateVars.buttons.length === 0) {\r\n            templateVars.hasButtons = false;\r\n        }\r\n        var template = Mustache.render(dialogTemplate, templateVars);\r\n        return showModalDialogUsingTemplate(template, autoDismiss);\r\n    }\r\n\r\n    /**\r\n     * Immediately closes any dialog instances with the given class. The dialog callback for each instance will\r\n     * be called with the special buttonId DIALOG_CANCELED (note: callback is run asynchronously).\r\n     * @param {string} dlgClass The class name identifier for the dialog.\r\n     * @param {string=} buttonId The button id to use when closing the dialog. Defaults to DIALOG_CANCELED\r\n     */\r\n    function cancelModalDialogIfOpen(dlgClass, buttonId) {\r\n        $("." + dlgClass + ".instance").each(function () {\r\n            if ($(this).is(":visible")) {   // Bootstrap breaks if try to hide dialog that\'s already hidden\r\n                _dismissDialog($(this), buttonId || DIALOG_CANCELED);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Show Save Confirmation Dialog\r\n     * @param {string} filename\r\n     * @return {Dialog}\r\n     */\r\n    function showSaveConfirmDialog(filename) {\r\n        var message = "Do you want to save the changes you made";\r\n        if (filename) {\r\n            message += " in<br>" + filename + "?";\r\n        } else {\r\n            message += "?";\r\n        }\r\n        return showModalDialog(\r\n            "save-change-dialog",\r\n            "Save Changes",\r\n            message,\r\n            [\r\n                { id: DIALOG_BTN_DONTSAVE, text: Strings.DONTSAVE, className: DIALOG_BTN_CLASS_LEFT },\r\n                { id: DIALOG_BTN_SAVE,     text: Strings.SAVE,     className: DIALOG_BTN_CLASS_PRIMARY },\r\n                { id: DIALOG_BTN_CANCEL,   text: Strings.CANCEL }\r\n            ]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Show Confirm Dialog\r\n     *\r\n     * @param {string} message\r\n     * @return {Dialog}\r\n     */\r\n    function showConfirmDialog(message) {\r\n        return showModalDialog(\r\n            "confirm-dialog",\r\n            "Confirmation",\r\n            message,\r\n            [\r\n                { id: DIALOG_BTN_OK,     text: Strings.OK, className: DIALOG_BTN_CLASS_PRIMARY },\r\n                { id: DIALOG_BTN_CANCEL, text: Strings.CANCEL }\r\n            ]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Show Error Dialog\r\n     * @param {string} message\r\n     * @return {Dialog}\r\n     */\r\n    function showErrorDialog(message) {\r\n        return showModalDialog("error-dialog", "Error", message);\r\n    }\r\n\r\n    /**\r\n     * Show Alert Dialog\r\n     * @param {string} message\r\n     * @return {Dialog}\r\n     */\r\n    function showAlertDialog(message) {\r\n        return showModalDialog("alert-dialog", "Alert", message);\r\n    }\r\n\r\n    /**\r\n     * Show Information Dialog\r\n     * @param {string} message\r\n     * @return {Dialog}\r\n     */\r\n    function showInfoDialog(message) {\r\n        return showModalDialog("information-dialog", "Information", message);\r\n    }\r\n\r\n    /**\r\n     * Show Input Dialog\r\n     *\r\n     * @param {string} message\r\n     * @return {Dialog}\r\n     */\r\n    function showInputDialog(message, initialValue) {\r\n        var context = {\r\n            Strings: Strings,\r\n            message: message\r\n        };\r\n        var dialog = showModalDialogUsingTemplate(Mustache.render(inputDialogTemplate, context), true, function ($dlg) {\r\n            var val = $dlg.find(".input-box").val();\r\n            $dlg.data("returnValue", val);\r\n        });\r\n        var $dlg = dialog.getElement(),\r\n            $input = $dlg.find(".input-box");\r\n\r\n        if (initialValue) {\r\n            $input.val(initialValue);\r\n            $input.select();\r\n        }\r\n\r\n        // Focus on input\r\n        $input.focus();\r\n\r\n        // Keydown Event\r\n        // TODO: This is temporal implementation.\r\n        // Please refer to KeyBindingManager.js of Brackets\' implementation\r\n        $input.keydown(function (event) {\r\n            switch (event.which) {\r\n            case KeyEvent.DOM_VK_RETURN:\r\n                $dlg.find(".primary").click();\r\n                break;\r\n            }\r\n        });\r\n\r\n        return dialog;\r\n    }\r\n\r\n    /**\r\n     * Show Text Dialog (Multiline Text)\r\n     * @param {string} message\r\n     * @param {string} text initial text\r\n     * @return {Dialog}\r\n     */\r\n    function showTextDialog(message, text) {\r\n        var context = {\r\n            Strings: Strings,\r\n            message: message,\r\n            text: text\r\n        };\r\n        var dialog = showModalDialogUsingTemplate(Mustache.render(textDialogTemplate, context), true, function ($dlg) {\r\n            var val = $dlg.find(".text-box").val();\r\n            $dlg.data("returnValue", val);\r\n        });\r\n        return dialog;\r\n    }\r\n\r\n    /**\r\n     * Show Select Dialog (Radio-type)\r\n     *\r\n     * @param {string} message\r\n     * @param {Array.<{text:string, value:string}>} items\r\n     * @return {Dialog}\r\n     */\r\n    function showSelectRadioDialog(message, options) {\r\n        var context = {\r\n            Strings: Strings,\r\n            message: message,\r\n            options: options\r\n        };\r\n        var dialog = showModalDialogUsingTemplate(Mustache.render(selectRadioDialogTemplate, context), true, function ($dlg) {\r\n            var val = $("input[name=select-option]:checked", $dlg).val();\r\n            $dlg.data("returnValue", val);\r\n        });\r\n        return dialog;\r\n    }\r\n\r\n    /**\r\n     * Show Select Dialog (Dropdown-type)\r\n     *\r\n     * @param {string} message\r\n     * @param {Array.<{text:string, value:string}>} items\r\n     * @return {Dialog}\r\n     */\r\n    function showSelectDropdownDialog(message, options) {\r\n        var context = {\r\n            Strings: Strings,\r\n            message: message,\r\n            options: options\r\n        };\r\n        var dialog = showModalDialogUsingTemplate(Mustache.render(selectDropdownDialogTemplate, context), true, function ($dlg) {\r\n            var $dropdown = $dlg.data("dropdown");\r\n            $dlg.data("returnValue", $dropdown.val());\r\n        });\r\n        // Setup Dropdown Widget\r\n        var $dlg = dialog.getElement(),\r\n            $dropdown = $dlg.find(".select-options");\r\n        $dlg.data("dropdown", $dropdown);\r\n        return dialog;\r\n    }\r\n\r\n    /**\r\n     * Show Color Dialog\r\n     *\r\n     * @param {string} color initial color\r\n     * @return {Dialog}\r\n     */\r\n    function showColorDialog(color) {\r\n        var context = { Strings: Strings };\r\n        var dialog = showModalDialogUsingTemplate(Mustache.render(colorDialogTemplate, context), true, function ($dlg) {\r\n            var colorPicker = $dlg.data("colorPicker");\r\n            $dlg.data("returnValue", colorPicker.value());\r\n        });\r\n        var $dlg = dialog.getElement(),\r\n            $picker = $dlg.find(".color-picker"),\r\n            $palette = $dlg.find(".color-palette"),\r\n            colorPicker;\r\n        // Setup Color Picker\r\n        $picker.kendoFlatColorPicker();\r\n        colorPicker = $picker.data("kendoFlatColorPicker");\r\n        colorPicker.value(color);\r\n        $dlg.data("colorPicker", colorPicker);\r\n        // Setup Color Palette\r\n        $palette.kendoColorPalette({\r\n            columns: 16,\r\n            tileSize: 8,\r\n            palette: Graphics.DEFAULT_COLOR_PALETTE,\r\n            change: function (e) {\r\n                colorPicker.value(e.value);\r\n            }\r\n        });\r\n        return dialog;\r\n    }\r\n\r\n    /**\r\n     * Show Font Dialog\r\n     *\r\n     * @param {Graphics.Font} font Initial font\r\n     * @return {Dialog}\r\n     */\r\n    function showFontDialog(font) {\r\n        var context = {\r\n            Strings: Strings,\r\n            faces: app.config.defaultFonts,\r\n            sizes: [ 8, 9, 10, 11, 12, 13, 15, 16, 18, 20, 22 ]\r\n        };\r\n\r\n        var dialog = showModalDialogUsingTemplate(Mustache.render(fontDialogTemplate, context), true, function ($dlg) {\r\n            var font = {\r\n                face: $dlg.data("fontFace").val(),\r\n                size: $dlg.data("fontSize").val(),\r\n                color: $dlg.data("fontColor").value()\r\n            };\r\n            $dlg.data("returnValue", font);\r\n        });\r\n\r\n        var $dlg = dialog.getElement(),\r\n            $fontFaceEdit   = $dlg.find(".font-face > input"),\r\n            $fontFaceSelect = $dlg.find(".font-face > select"),\r\n            $fontSizeEdit   = $dlg.find(".font-size > input"),\r\n            $fontSizeSelect = $dlg.find(".font-size > select"),\r\n            $fontColor = $dlg.find(".font-color"),\r\n            $colorPalette = $dlg.find(".color-palette"),\r\n            $fontPreview = $dlg.find(".font-preview");\r\n\r\n        // Setup Font Face\r\n        $fontFaceEdit.change(function () {\r\n            $fontPreview.css("font-family", $fontFaceEdit.val());\r\n        });\r\n        $fontFaceSelect.change(function () {\r\n            $fontFaceEdit.val($fontFaceSelect.val());\r\n            $fontFaceEdit.change();\r\n        });\r\n        $dlg.data("fontFace", $fontFaceEdit);\r\n\r\n        // Setup Font Size\r\n        $fontSizeEdit.change(function () {\r\n            if (_.isNumber(parseInt($fontSizeEdit.val()))) {\r\n                $fontPreview.css("font-size", $fontSizeEdit.val() + "px");\r\n            }\r\n        });\r\n        $fontSizeSelect.change(function () {\r\n            $fontSizeEdit.val($fontSizeSelect.val());\r\n            $fontSizeEdit.change();\r\n        });\r\n        $dlg.data("fontSize", $fontSizeEdit);\r\n\r\n        // Setup Font Color\r\n        $fontColor.kendoColorPicker({\r\n            change: function (e) {\r\n                $fontPreview.css("color", e.value);\r\n            }\r\n        });\r\n        $dlg.data("fontColor", $fontColor.data("kendoColorPicker"));\r\n\r\n        // Setup Color Palette\r\n        $colorPalette.kendoColorPalette({\r\n            columns: 16,\r\n            tileSize: 8,\r\n            palette: Graphics.DEFAULT_COLOR_PALETTE,\r\n            change: function (e) {\r\n                $fontColor.data("kendoColorPicker").value(e.value);\r\n                $fontPreview.css("color", e.value);\r\n            }\r\n        });\r\n\r\n        // Set initial font\r\n        if (font.face !== null) {\r\n            $fontFaceEdit.val(font.face);\r\n            $fontFaceSelect.val(font.face);\r\n        } else {\r\n            $fontFaceEdit.prop("placeholder", "—");\r\n            $fontFaceEdit.val("");\r\n            $fontFaceSelect.val(null);\r\n        }\r\n\r\n        if (_.isNumber(font.size)) {\r\n            $fontSizeEdit.val(font.size);\r\n            $fontSizeSelect.val(font.size);\r\n        } else {\r\n            $fontSizeEdit.prop("placeholder", "—");\r\n            $fontSizeEdit.val("");\r\n            $fontSizeSelect.val(null);\r\n        }\r\n\r\n        if (font.color) {\r\n            $fontColor.data("kendoColorPicker").value(font.color);\r\n        }\r\n\r\n        // Update Preview\r\n        function updatePreview() {\r\n            var face = $fontFaceEdit.val();\r\n            var size = $fontSizeEdit.val();\r\n            var color = $fontColor.data("kendoColorPicker").value();\r\n            $fontPreview.css("font-family", face);\r\n            $fontPreview.css("font-size", size + "px");\r\n            $fontPreview.css("color", color);\r\n        }\r\n        updatePreview();\r\n        return dialog;\r\n    }\r\n\r\n    /**\r\n     * Show Simple Dialog\r\n     * @param {string} message\r\n     * @return {Dialog}\r\n     */\r\n    function showSimpleDialog(message) {\r\n        return showModalDialog(\r\n            "simple-dialog",\r\n            false,\r\n            message,\r\n            []\r\n        );\r\n    }\r\n\r\n    // Public API\r\n\r\n    exports.DIALOG_BTN_OK            = DIALOG_BTN_OK;\r\n    exports.DIALOG_BTN_CANCEL        = DIALOG_BTN_CANCEL;\r\n    exports.DIALOG_BTN_SAVE          = DIALOG_BTN_SAVE;\r\n    exports.DIALOG_BTN_DONTSAVE      = DIALOG_BTN_DONTSAVE;\r\n\r\n    exports.DIALOG_BTN_CLASS_PRIMARY     = DIALOG_BTN_CLASS_PRIMARY;\r\n    exports.DIALOG_BTN_CLASS_NORMAL      = DIALOG_BTN_CLASS_NORMAL;\r\n    exports.DIALOG_BTN_CLASS_LEFT        = DIALOG_BTN_CLASS_LEFT;\r\n\r\n    exports.showModalDialogUsingTemplate = showModalDialogUsingTemplate;\r\n    exports.showModalDialog              = showModalDialog;\r\n    exports.cancelModalDialogIfOpen      = cancelModalDialogIfOpen;\r\n\r\n    exports.showSaveConfirmDialog        = showSaveConfirmDialog;\r\n    exports.showConfirmDialog            = showConfirmDialog;\r\n    exports.showErrorDialog              = showErrorDialog;\r\n    exports.showAlertDialog              = showAlertDialog;\r\n    exports.showInfoDialog               = showInfoDialog;\r\n    exports.showInputDialog              = showInputDialog;\r\n    exports.showTextDialog               = showTextDialog;\r\n    exports.showSelectRadioDialog        = showSelectRadioDialog;\r\n    exports.showSelectDropdownDialog     = showSelectDropdownDialog;\r\n    exports.showColorDialog              = showColorDialog;\r\n    exports.showFontDialog               = showFontDialog;\r\n    exports.showSimpleDialog             = showSimpleDialog;\r\n\r\n});\r\n\n//# sourceURL=/dialogs/Dialogs.js'),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, $, window */\r\n\r\ndefine(\'utils/ViewUtils\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var SCROLL_SHADOW_HEIGHT = 5;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var _resizeHandlers = [];\r\n\r\n    /**\r\n     * Positions shadow background elements to indicate vertical scrolling.\r\n     * @param {!DOMElement} $displayElement the DOMElement that displays the shadow\r\n     * @param {!Object} $scrollElement the object that is scrolled\r\n     * @param {!DOMElement} $shadowTop div .scroller-shadow.top\r\n     * @param {!DOMElement} $shadowBottom div .scroller-shadow.bottom\r\n     * @param {boolean} isPositionFixed When using absolute position, top remains at 0.\r\n     */\r\n    function _updateScrollerShadow($displayElement, $scrollElement, $shadowTop, $shadowBottom, isPositionFixed) {\r\n        var offsetTop           = 0,\r\n            scrollElement       = $scrollElement.get(0),\r\n            scrollTop           = scrollElement.scrollTop,\r\n            topShadowOffset     = Math.min(scrollTop - SCROLL_SHADOW_HEIGHT, 0),\r\n            displayElementWidth = $displayElement.width();\r\n\r\n        if ($shadowTop) {\r\n            $shadowTop.css("background-position", "0px " + topShadowOffset + "px");\r\n\r\n            if (isPositionFixed) {\r\n                offsetTop = $displayElement.offset().top;\r\n                $shadowTop.css("top", offsetTop);\r\n            }\r\n\r\n            if (isPositionFixed) {\r\n                $shadowTop.css("width", displayElementWidth);\r\n            }\r\n        }\r\n\r\n        if ($shadowBottom) {\r\n            var clientHeight        = scrollElement.clientHeight,\r\n                outerHeight         = $displayElement.outerHeight(),\r\n                scrollHeight        = scrollElement.scrollHeight,\r\n                bottomOffset        = outerHeight - clientHeight,\r\n                bottomShadowOffset  = SCROLL_SHADOW_HEIGHT; // outside of shadow div viewport\r\n\r\n            if (scrollHeight > clientHeight) {\r\n                bottomShadowOffset -= Math.min(SCROLL_SHADOW_HEIGHT, (scrollHeight - (scrollTop + clientHeight)));\r\n            }\r\n\r\n            $shadowBottom.css("background-position", "0px " + bottomShadowOffset + "px");\r\n            $shadowBottom.css("top", offsetTop + outerHeight - SCROLL_SHADOW_HEIGHT);\r\n            $shadowBottom.css("width", displayElementWidth);\r\n        }\r\n    }\r\n\r\n    function getOrCreateShadow($displayElement, position, isPositionFixed) {\r\n        var $findShadow = $displayElement.find(".scroller-shadow." + position);\r\n\r\n        if ($findShadow.length === 0) {\r\n            $findShadow = $(window.document.createElement("div")).addClass("scroller-shadow " + position);\r\n            $displayElement.append($findShadow);\r\n        }\r\n\r\n        if (!isPositionFixed) {\r\n            // position is fixed by default\r\n            $findShadow.css("position", "absolute");\r\n            $findShadow.css(position, "0");\r\n        }\r\n\r\n        return $findShadow;\r\n    }\r\n\r\n    /**\r\n     * Installs event handlers for updatng shadow background elements to indicate vertical scrolling.\r\n     * @param {!DOMElement} displayElement the DOMElement that displays the shadow. Must fire\r\n     *  "contentChanged" events when the element is resized or repositioned.\r\n     * @param {?Object} scrollElement the object that is scrolled. Must fire "scroll" events\r\n     *  when the element is scrolled. If null, the displayElement is used.\r\n     * @param {?boolean} showBottom optionally show the bottom shadow\r\n     */\r\n    function addScrollerShadow(displayElement, scrollElement, showBottom) {\r\n        // use fixed positioning when the display and scroll elements are the same\r\n        var isPositionFixed = false;\r\n\r\n        if (!scrollElement) {\r\n            scrollElement = displayElement;\r\n            isPositionFixed = true;\r\n        }\r\n\r\n        // update shadows when the scrolling element is scrolled\r\n        var $displayElement = $(displayElement),\r\n            $scrollElement = $(scrollElement);\r\n\r\n        var $shadowTop = getOrCreateShadow($displayElement, "top", isPositionFixed);\r\n        var $shadowBottom = (showBottom) ? getOrCreateShadow($displayElement, "bottom", isPositionFixed) : null;\r\n\r\n        var doUpdate = function () {\r\n            _updateScrollerShadow($displayElement, $scrollElement, $shadowTop, $shadowBottom, isPositionFixed);\r\n        };\r\n\r\n        $scrollElement.on("scroll.scroller-shadow", doUpdate);\r\n        $displayElement.on("contentChanged.scroller-shadow", doUpdate);\r\n\r\n        // update immediately\r\n        doUpdate();\r\n    }\r\n\r\n    /**\r\n     * Remove scroller-shadow effect.\r\n     * @param {!DOMElement} displayElement the DOMElement that displays the shadow\r\n     * @param {?Object} scrollElement the object that is scrolled\r\n     */\r\n    function removeScrollerShadow(displayElement, scrollElement) {\r\n        if (!scrollElement) {\r\n            scrollElement = displayElement;\r\n        }\r\n\r\n        var $displayElement = $(displayElement),\r\n            $scrollElement = $(scrollElement);\r\n\r\n        // remove scrollerShadow elements from DOM\r\n        $displayElement.find(".scroller-shadow.top").remove();\r\n        $displayElement.find(".scroller-shadow.bottom").remove();\r\n\r\n        // remove event handlers\r\n        $scrollElement.off("scroll.scroller-shadow");\r\n        $displayElement.off("contentChanged.scroller-shadow");\r\n    }\r\n\r\n    /**\r\n     * Utility function to replace jQuery.toggleClass when used with the second argument, which needs to be a true boolean for jQuery\r\n     * @param {!jQueryObject} $domElement The jQueryObject to toggle the Class on\r\n     * @param {!string} className Class name or names (separated by spaces) to toggle\r\n     * @param {!boolean} addClass A truthy value to add the class and a falsy value to remove the class\r\n     */\r\n    function toggleClass($domElement, className, addClass) {\r\n        if (addClass) {\r\n            $domElement.addClass(className);\r\n        } else {\r\n            $domElement.removeClass(className);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Within a scrolling DOMElement, creates and positions a styled selection\r\n     * div to align a single selected list item from a ul list element.\r\n     *\r\n     * Assumptions:\r\n     * - scrollerElement is a child of the #sidebar div\r\n     * - ul list element fires a "selectionChanged" event after the\r\n     *   selectedClassName is assigned to a new list item\r\n     *\r\n     * @param {!DOMElement} scrollElement A DOMElement containing a ul list element\r\n     * @param {!string} selectedClassName A CSS class name on at most one list item in the contained list\r\n     */\r\n    function sidebarList($scrollerElement, selectedClassName, leafClassName) {\r\n        var $listElement = $scrollerElement.find("ul"),\r\n            $selectionMarker,\r\n            $selectionTriangle,\r\n            $sidebar = $("#sidebar"),\r\n            showTriangle = true;\r\n\r\n        // build selectionMarker and position absolute within the scroller\r\n        $selectionMarker = $(window.document.createElement("div")).addClass("sidebar-selection");\r\n        $scrollerElement.prepend($selectionMarker);\r\n\r\n        // enable scrolling\r\n        $scrollerElement.css("overflow", "auto");\r\n\r\n        // use relative postioning for clipping the selectionMarker within the scrollElement\r\n        $scrollerElement.css("position", "relative");\r\n\r\n        // build selectionTriangle and position fixed to the window\r\n        $selectionTriangle = $(window.document.createElement("div")).addClass("sidebar-selection-triangle");\r\n\r\n        $scrollerElement.append($selectionTriangle);\r\n\r\n        selectedClassName = "." + (selectedClassName || "selected");\r\n\r\n        var updateSelectionTriangle = function () {\r\n            var selectionMarkerHeight = $selectionMarker.height(),\r\n                selectionMarkerOffset = $selectionMarker.offset(),  // offset relative to *document*\r\n                scrollerOffset = $scrollerElement.offset(),\r\n                triangleHeight = $selectionTriangle.outerHeight(),\r\n                scrollerTop = scrollerOffset.top,\r\n                scrollerBottom = scrollerTop + $scrollerElement.outerHeight(),\r\n                scrollerLeft = scrollerOffset.left,\r\n                triangleTop = selectionMarkerOffset.top;\r\n\r\n            $selectionTriangle.css("top", triangleTop);\r\n            $selectionTriangle.css("left", $sidebar.width() - $selectionTriangle.outerWidth());\r\n            toggleClass($selectionTriangle, "triangle-visible", showTriangle);\r\n\r\n            var triangleClipOffsetYBy = Math.floor((selectionMarkerHeight - triangleHeight) / 2),\r\n                triangleBottom = triangleTop + triangleHeight + triangleClipOffsetYBy;\r\n\r\n            if (triangleTop < scrollerTop || triangleBottom > scrollerBottom) {\r\n                $selectionTriangle.css("clip", "rect(" + Math.max(scrollerTop - triangleTop - triangleClipOffsetYBy, 0) + "px, auto, " +\r\n                                           (triangleHeight - Math.max(triangleBottom - scrollerBottom, 0)) + "px, auto)");\r\n            } else {\r\n                $selectionTriangle.css("clip", "");\r\n            }\r\n        };\r\n\r\n        var updateSelectionMarker = function (event, reveal) {\r\n            // find the selected list item\r\n            var $listItem = $listElement.find(selectedClassName).closest("li");\r\n\r\n            if (leafClassName) {\r\n                showTriangle = $listItem.hasClass(leafClassName);\r\n            }\r\n\r\n            // always hide selection visuals first to force layout (issue #719)\r\n            $selectionTriangle.hide();\r\n            $selectionMarker.hide();\r\n\r\n            if ($listItem.length === 1) {\r\n                // list item position is relative to scroller\r\n                var selectionMarkerTop = $listItem.offset().top - $scrollerElement.offset().top + $scrollerElement.get(0).scrollTop;\r\n\r\n                // force selection width to match scroller\r\n                $selectionMarker.width($scrollerElement.get(0).scrollWidth);\r\n\r\n                // move the selectionMarker position to align with the list item\r\n                $selectionMarker.css("top", selectionMarkerTop);\r\n                $selectionMarker.show();\r\n\r\n                updateSelectionTriangle();\r\n                $selectionTriangle.show();\r\n\r\n                // fully scroll to the selectionMarker if it\'s not initially in the viewport\r\n                var scrollerElement = $scrollerElement.get(0),\r\n                    scrollerHeight = scrollerElement.clientHeight,\r\n                    selectionMarkerHeight = $selectionMarker.height(),\r\n                    selectionMarkerBottom = selectionMarkerTop + selectionMarkerHeight,\r\n                    currentScrollBottom = scrollerElement.scrollTop + scrollerHeight;\r\n\r\n                // update scrollTop to reveal the selected list item\r\n                if (reveal) {\r\n                    if (selectionMarkerTop >= currentScrollBottom) {\r\n                        $listItem.get(0).scrollIntoView(false);\r\n                    } else if (selectionMarkerBottom <= scrollerElement.scrollTop) {\r\n                        $listItem.get(0).scrollIntoView(true);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        $listElement.on("selectionChanged", updateSelectionMarker);\r\n        $scrollerElement.on("scroll", updateSelectionTriangle);\r\n        $scrollerElement.on("selectionRedraw", updateSelectionTriangle);\r\n\r\n        // update immediately\r\n        updateSelectionMarker();\r\n\r\n        // update clipping when the window resizes\r\n        _resizeHandlers.push(updateSelectionTriangle);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function _handleResize() {\r\n        _resizeHandlers.forEach(function (f) {\r\n            f.apply();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determine how much of an element rect is clipped in view.\r\n     *\r\n     * @param {!DOMElement} $view - A jQuery scrolling container\r\n     * @param {!{top: number, left: number, height: number, width: number}}\r\n     *          elementRect - rectangle of element\'s default position/size\r\n     * @return {{top: number, right: number, bottom: number, left: number}}\r\n     *          amount element rect is clipped in each direction\r\n     */\r\n    function getElementClipSize($view, elementRect) {\r\n        var delta,\r\n            clip = { top: 0, right: 0, bottom: 0, left: 0 },\r\n            viewOffset = $view.offset() || { top: 0, left: 0},\r\n            viewScroller = $view.get(0);\r\n\r\n        // Check if element extends below viewport\r\n        delta = (elementRect.top + elementRect.height) - (viewOffset.top + $view.height());\r\n        if (delta > 0) {\r\n            clip.bottom = delta;\r\n        }\r\n\r\n        // Check if element extends above viewport\r\n        delta = viewOffset.top - elementRect.top;\r\n        if (delta > 0) {\r\n            clip.top = delta;\r\n        }\r\n\r\n        // Check if element extends to the left of viewport\r\n        delta = viewOffset.left - elementRect.left;\r\n        if (delta > 0) {\r\n            clip.left = delta;\r\n        }\r\n\r\n        // Check if element extends to the right of viewport\r\n        delta = (elementRect.left + elementRect.width) - (viewOffset.left + $view.width());\r\n        if (delta > 0) {\r\n            clip.right = delta;\r\n        }\r\n\r\n        return clip;\r\n    }\r\n\r\n    /**\r\n     * Within a scrolling DOMElement, if necessary, scroll element into viewport.\r\n     *\r\n     * To Perform the minimum amount of scrolling necessary, cases should be handled as follows:\r\n     * - element already completely in view : no scrolling\r\n     * - element above    viewport          : scroll view so element is at top\r\n     * - element left of  viewport          : scroll view so element is at left\r\n     * - element below    viewport          : scroll view so element is at bottom\r\n     * - element right of viewport          : scroll view so element is at right\r\n     *\r\n     * Assumptions:\r\n     * - $view is a scrolling container\r\n     *\r\n     * @param {!DOMElement} $view - A jQuery scrolling container\r\n     * @param {!DOMElement} $element - A jQuery element\r\n     * @param {?boolean} scrollHorizontal - whether to also scroll horizontally\r\n     */\r\n    function scrollElementIntoView($view, $element, scrollHorizontal) {\r\n        var viewOffset = $view.offset(),\r\n            viewScroller = $view.get(0),\r\n            element = $element.get(0),\r\n            elementOffset = $element.offset();\r\n\r\n        // scroll minimum amount\r\n        var elementRect = {\r\n                top:    elementOffset.top,\r\n                left:   elementOffset.left,\r\n                height: $element.height(),\r\n                width:  $element.width()\r\n            },\r\n            clip = getElementClipSize($view, elementRect);\r\n\r\n        if (clip.bottom > 0) {\r\n            // below viewport\r\n            $view.scrollTop($view.scrollTop() + clip.bottom);\r\n        } else if (clip.top > 0) {\r\n            // above viewport\r\n            $view.scrollTop($view.scrollTop() - clip.top);\r\n        }\r\n\r\n        if (scrollHorizontal) {\r\n            if (clip.left > 0) {\r\n                $view.scrollLeft($view.scrollLeft() - clip.left);\r\n            } else if (clip.right > 0) {\r\n                $view.scrollLeft($view.scrollLeft() + clip.right);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * HTML formats a file entry name  for display in the sidebar.\r\n     * @param {!File} entry File entry to display\r\n     * @return {string} HTML formatted string\r\n     */\r\n    function getFileEntryDisplay(entry) {\r\n        var name = entry.name,\r\n            i = name.lastIndexOf(".");\r\n\r\n        if (i >= 0) {\r\n            // Escape all HTML-sensitive characters in filename.\r\n            name = _.escape(name.substring(0, i)) + "<span class=\'extension\'>" + _.escape(name.substring(i)) + "</span>";\r\n        } else {\r\n            name = _.escape(name);\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Determine the minimum directory path to distinguish duplicate file names\r\n     * for each file in list.\r\n     *\r\n     * @param {Array.<File>} files - list of Files with the same filename\r\n     * @return {Array.<string>} directory paths to match list of files\r\n     */\r\n    function getDirNamesForDuplicateFiles(files) {\r\n        // Must have at least two files in list for this to make sense\r\n        if (files.length <= 1) {\r\n            return [];\r\n        }\r\n\r\n        // First collect paths from the list of files and fill map with them\r\n        var map = {}, filePaths = [], displayPaths = [];\r\n        files.forEach(function (file, index) {\r\n            var fp = file.fullPath.split("/");\r\n            fp.pop(); // Remove the filename itself\r\n            displayPaths[index] = fp.pop();\r\n            filePaths[index] = fp;\r\n\r\n            if (!map[displayPaths[index]]) {\r\n                map[displayPaths[index]] = [index];\r\n            } else {\r\n                map[displayPaths[index]].push(index);\r\n            }\r\n        });\r\n\r\n        // This function is used to loop through map and resolve duplicate names\r\n        var processMap = function (map) {\r\n            var didSomething = false;\r\n            _.forEach(map, function (arr, key) {\r\n                // length > 1 means we have duplicates that need to be resolved\r\n                if (arr.length > 1) {\r\n                    arr.forEach(function (index) {\r\n                        if (filePaths[index].length !== 0) {\r\n                            displayPaths[index] = filePaths[index].pop() + "/" + displayPaths[index];\r\n                            didSomething = true;\r\n\r\n                            if (!map[displayPaths[index]]) {\r\n                                map[displayPaths[index]] = [index];\r\n                            } else {\r\n                                map[displayPaths[index]].push(index);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                delete map[key];\r\n            });\r\n            return didSomething;\r\n        };\r\n\r\n        var repeat;\r\n        do {\r\n            repeat = processMap(map);\r\n        } while (repeat);\r\n\r\n        return displayPaths;\r\n    }\r\n\r\n    // handle all resize handlers in a single listener\r\n    $(window).resize(_handleResize);\r\n\r\n    // Define public API\r\n    exports.SCROLL_SHADOW_HEIGHT         = SCROLL_SHADOW_HEIGHT;\r\n    exports.addScrollerShadow            = addScrollerShadow;\r\n    exports.removeScrollerShadow         = removeScrollerShadow;\r\n    exports.sidebarList                  = sidebarList;\r\n    exports.scrollElementIntoView        = scrollElementIntoView;\r\n    exports.getElementClipSize           = getElementClipSize;\r\n    exports.getFileEntryDisplay          = getFileEntryDisplay;\r\n    exports.toggleClass                  = toggleClass;\r\n    exports.getDirNamesForDuplicateFiles = getDirNamesForDuplicateFiles;\r\n});\r\n\n//# sourceURL=/utils/ViewUtils.js'),eval('define(\'text!htmlContent/element-picker-dialog.html\',[],function () { return \'<div class="element-picker dialog modal" data-title="{{title}}">\\r\\n\\r\\n    <div class="quick-search-wrapper"style="position: absolute; margin: 0; left: 15px; right: 15px; top: 4px;">\\r\\n        <input class="quick-search use-enter-key" type="search" title="Quick Search">\\r\\n    </div>\\r\\n\\r\\n    <div class="dialog-body no-padding">\\r\\n        <div class="treeview-wrapper">\\r\\n            <div class="treeview"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <div class="left" style="text-align: left;">\\r\\n            <label class="k-checkbox left">\\r\\n                <input class="unspecified" type="checkbox">\\r\\n                <div class="k-checkbox__checkmark"></div>\\r\\n                <span style="padding-left: 7px;">Do not specify</span>\\r\\n            </label>\\r\\n        </div>\\r\\n        <button class="k-button dialog-button primary" data-button-id="ok">{{Strings.OK}}</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/element-picker-dialog.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo, Mustache */\r\n\r\n\r\n// TODO: 키보드 처리 (ESC = Cancel, Enter = OK)\r\n// TODO: getChildren, getText, getIcon, getNode는 ModelExplorer와 중복 코드임. (중복제거요망)\r\n\r\n/**\r\n * Element Picker Dialog\r\n */\r\ndefine(\'dialogs/ElementPickerDialog\',[\'require\',\'exports\',\'module\',\'core/Repository\',\'engine/ProjectManager\',\'strings\',\'dialogs/Dialogs\',\'utils/ViewUtils\',\'text!htmlContent/element-picker-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Repository     = require("core/Repository"),\r\n        ProjectManager = require("engine/ProjectManager"),\r\n        Strings        = require("strings"),\r\n        Dialogs        = require("dialogs/Dialogs"),\r\n        ViewUtils      = require("utils/ViewUtils");\r\n\r\n    var dialogTemplate = require("text!htmlContent/element-picker-dialog.html");\r\n\r\n    /**\r\n     * DataSource for TreeView\r\n     * @private\r\n     * @type {kendo.data.HierarchicalDataSource}\r\n     */\r\n    var _dataSource = null;\r\n\r\n    /**\r\n     * JQuery for Tree Wrapper\r\n     * @private\r\n     * @type {JQuery}\r\n     */\r\n    var $treeWrapper = null;\r\n\r\n    /**\r\n     * JQuery for Tree\r\n     * @private\r\n     * @type {JQuery}\r\n     */\r\n    var $tree = null;\r\n\r\n    /**\r\n     * KendoTreeView object\r\n     * @private\r\n     * @type {kendo.ui.TreeView}\r\n     */\r\n    var _tree = null;\r\n\r\n    /**\r\n     * JQuery for Unspecified Checkbox\r\n     * @private\r\n     * @type {JQuery}\r\n     */\r\n    var $unspecified = null;\r\n\r\n    /**\r\n     * Selected element\r\n     * @private\r\n     * @type {Element}\r\n     */\r\n    var _selectedElement = null;\r\n\r\n    /**\r\n     * Setup TreeView\r\n     * @private\r\n     */\r\n    function _setupTree() {\r\n        // DataSource for TreeView\r\n        _dataSource = new kendo.data.HierarchicalDataSource({\r\n            transport: {\r\n                read: function (options) {\r\n                    var nodes = [];\r\n                    var id = options.data._id;\r\n                    var elem = Repository.get(id);\r\n                    if (elem) {\r\n                        var elems = _sort(_getChildren(elem));\r\n                        _.each(elems, function (elem) {\r\n                            var node = _makeNode(elem);\r\n                            nodes.push(node);\r\n                        });\r\n                    } else {\r\n                        var node = _makeNode(ProjectManager.getProject());\r\n                        nodes.push(node);\r\n                    }\r\n                    options.success(nodes);\r\n                }\r\n            },\r\n            schema: {\r\n                model: {\r\n                    id: "_id",\r\n                    hasChildren: "hasChildren"\r\n                }\r\n            }\r\n        });\r\n\r\n        // Setup TreeView\r\n        _tree = $tree.kendoTreeView({\r\n            dataSource: _dataSource,\r\n            dataSpriteCssClassField: "sprite",\r\n            dataTextField: "text",\r\n            select: function (e) {\r\n                var item = this.dataItem(e.node);\r\n                var elem = Repository.get(item._id);\r\n                if (elem) {\r\n                    _selectedElement = elem;\r\n                    $unspecified.attr("checked", false);\r\n                }\r\n            }\r\n        }).data("kendoTreeView");\r\n    }\r\n\r\n    /**\r\n     * Return JSON object for tree node for a given element.\r\n     * @private\r\n     * @param {Core.Element} elem\r\n     * @return {{_id: string, text: string, sprite: string, hasChildren: boolean}}\r\n     */\r\n    function _makeNode(elem) {\r\n        return {\r\n            _id: elem._id,\r\n            text: elem.getNodeText(),\r\n            sprite: elem.getNodeIcon(elem),\r\n            hasChildren: (elem.getChildNodes().length > 0),\r\n            _name: elem.name,\r\n            _namespace: elem._parent ? elem._parent.name || "" : ""\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Return child elements.\r\n     * @private\r\n     * @param {Element} elem\r\n     * @return {Array.<Element>}\r\n     */\r\n    function _getChildren(elem) {\r\n        return elem.getChildNodes();\r\n    }\r\n\r\n    /**\r\n     * Sort elements.\r\n     * @private\r\n     * @param {Array.<Element>} elements\r\n     * @return {Array.<Element>} - 정렬된 요소들의 배열\r\n     */\r\n    function _sort(elements) {\r\n        return _.sortBy(elements, function (child, idx) {\r\n            return child.getOrdering(idx);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get a tree node of an element.\r\n     * @private\r\n     * @param {Element} elem\r\n     * @return {}\r\n     */\r\n    function _getNode(elem) {\r\n        var item = _dataSource.get(elem._id);\r\n        if (item && item.uid) {\r\n            var node = _tree.findByUid(item.uid);\r\n            return node;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Expand a tree node\r\n     *\r\n     * @param {Core.Model} elem Element to be expanded\r\n     * @param {?boolean} expandAllParents Whether expand all parents or not\r\n     */\r\n    function expand(elem, expandAllParents) {\r\n        if (elem) {\r\n            // Expand all parents\r\n            if ((expandAllParents === true) && elem._parent && elem._parent._id) {\r\n                expand(elem._parent, expandAllParents);\r\n            }\r\n            // Expand current node\r\n            var node = _getNode(elem);\r\n            if (node) {\r\n                _tree.expand(node);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select an element\r\n     *\r\n     * @param {Core.Model} elem Element to be selected\r\n     * @param {?boolean} scrollTo Whether scroll to the element or not\r\n     */\r\n    function select(elem, scrollTo) {\r\n        if (elem) {\r\n            expand(elem._parent, true);\r\n            var node = _getNode(elem);\r\n            if (node) {\r\n                _tree.select(node);\r\n                // Scroll to node\r\n                if (scrollTo === true) {\r\n                    $treeWrapper.animate({\r\n                        scrollTop: node.offset().top - $treeWrapper.offset().top + $treeWrapper.scrollTop()\r\n                    }, 500);\r\n                }\r\n                $(exports).triggerHandler(\'selected\', [elem]);\r\n            }\r\n        } else {\r\n            _tree.select($());\r\n        }\r\n    }\r\n\r\n\r\n    function _setupQuickSearch($dlg) {\r\n        var searchDataSource =  new kendo.data.DataSource({\r\n            transport: {\r\n                read: function (options) {\r\n                    if (options.data.filter && options.data.filter.filters.length > 0) {\r\n                        var keyword = options.data.filter.filters[0].value;\r\n                        var results = Repository.search(keyword);\r\n                        options.success(_.map(results, _makeNode));\r\n                    } else {\r\n                        options.success([]);\r\n                    }\r\n                }\r\n            },\r\n            serverFiltering: true\r\n        });\r\n\r\n        $dlg.find(".quick-search").kendoAutoComplete({\r\n            dataTextField: "text",\r\n            minLength: 1,\r\n            filter: "contains",\r\n            select: function(e) {\r\n                var item = this.dataItem(e.item.index());\r\n                var elem = Repository.get(item._id);\r\n                if (elem) {\r\n                    _selectedElement = elem;\r\n                    $unspecified.attr("checked", false);\r\n                    select(elem, true);\r\n                }\r\n            },\r\n            template: "<div style=\'white-space: nowrap\'>" +\r\n                "<span class=\'k-sprite #:data.sprite#\'></span>" +\r\n                "<span style=\'margin-left: 5px\'>#:data.text#</span>" +\r\n                "#if (data._namespace.length > 0) {# <span style=\'margin-left: 5px; font-size: 11px; color: rgb(139,139,139);\'> — #:data._namespace#</span> #}#<div>",\r\n            dataSource: searchDataSource\r\n        });\r\n\r\n        $dlg.find(".quick-search").focus();\r\n    }\r\n\r\n    /**\r\n     * Show Element Picker Dialog\r\n     *\r\n     * @param {string} title Title of the dialog\r\n     * @param {?Element} selected Initial selected element when the dialog is shown\r\n     * @param {?constructor} type Type of selectable element\r\n     * @return {$.Promise}\r\n     */\r\n    function showDialog(title, selected, type) {\r\n        var context = {\r\n            Strings: Strings,\r\n            title: title\r\n        };\r\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(dialogTemplate, context), true, function ($dlg) {\r\n            if ((type !== null) && _.isObject(_selectedElement) && !(_selectedElement instanceof type)) {\r\n                $dlg.data("buttonId", Dialogs.DIALOG_BTN_CANCEL);\r\n                $dlg.data("returnValue", _selectedElement);\r\n                _.defer(function () {\r\n                    Dialogs.showAlertDialog("Selected element (" + _selectedElement.name + ") is not an instance of " + type.name);\r\n                });\r\n            } else {\r\n                $dlg.data("returnValue", _selectedElement);\r\n            }\r\n        });\r\n\r\n        var $dlg = dialog.getElement();\r\n        $unspecified = $dlg.find(".unspecified");\r\n        $treeWrapper = $dlg.find(".treeview-wrapper");\r\n        $tree = $dlg.find(".treeview");\r\n\r\n        var $wrapper = $dlg.find(".treeview-wrapper");\r\n        ViewUtils.addScrollerShadow($wrapper, null, true);\r\n\r\n        _setupTree();\r\n\r\n        // Expand the root node\r\n        var item = _dataSource.get(ProjectManager.getProject()._id);\r\n        var node = _tree.findByUid(item.uid);\r\n        _tree.expand(node);\r\n\r\n        // Setup Unspecified Checkbox\r\n        $unspecified.change(function () {\r\n            var checked = $unspecified.is(":checked");\r\n            if (checked) {\r\n                _tree.select($()); // clear selection\r\n                _selectedElement = null;\r\n            }\r\n        });\r\n\r\n        // Initial selection\r\n        if (selected) {\r\n            _selectedElement = selected;\r\n            select(_selectedElement, true);\r\n        } else {\r\n            _selectedElement = null;\r\n            $unspecified.attr("checked", true);\r\n        }\r\n\r\n        // Setup Quick Search Widget\r\n        _setupQuickSearch($dlg);\r\n\r\n        return dialog;\r\n    }\r\n\r\n    // Public API\r\n    exports.showDialog = showDialog;\r\n\r\n});\r\n\n//# sourceURL=/dialogs/ElementPickerDialog.js'),eval("define('text!htmlContent/toast-template.html',[],function () { return '<div class=\"toast-item\">#=message#</div>\\r\\n\\r\\n';});\n\n//# sourceURL=/text!htmlContent/toast-template.html"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell */\r\n\r\n/**\r\n * Toast\r\n */\r\ndefine(\'ui/Toast\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'text!htmlContent/toast-template.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit       = require("utils/AppInit"),\r\n        toastTemplate = require("text!htmlContent/toast-template.html");\r\n\r\n    var toast;\r\n\r\n    /**\r\n     * Show information toast.\r\n     *\r\n     * @param {string} message\r\n     */\r\n    function info(message) {\r\n        toast.show({message: message}, "info");\r\n    }\r\n\r\n    /**\r\n     * Show warning toast.\r\n     *\r\n     * @param {string} message\r\n     */\r\n    function warning(message) {\r\n        toast.show({message: message}, "warning");\r\n    }\r\n\r\n    /**\r\n     * Show error toast.\r\n     *\r\n     * @param {string} message\r\n     */\r\n    function error(message) {\r\n        toast.show({message: message}, "error");\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        toast = $("#toast").kendoNotification({\r\n            position: { pinned: true },\r\n            appendTo: "#toast-holder",\r\n            autoHideAfter: 5000,\r\n            stacking: "up",\r\n            templates: [\r\n                { type: "info",    template: toastTemplate },\r\n                { type: "warning", template: toastTemplate },\r\n                { type: "error",   template: toastTemplate }\r\n            ]\r\n        }).data("kendoNotification");\r\n    });\r\n\r\n    exports.info    = info;\r\n    exports.warning = warning;\r\n    exports.error   = error;\r\n\r\n});\r\n\n//# sourceURL=/ui/Toast.js'),eval("/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, $, window */\r\n\r\n/**\r\n * Utilities for working with Deferred, Promise, and other asynchronous processes.\r\n */\r\ndefine('utils/Async',['require','exports','module'],function (require, exports, module) {\r\n    \"use strict\";\r\n    \r\n    // Further ideas for Async utilities...\r\n    //  - Utilities for blocking UI until a Promise completes?\r\n    //  - A \"SuperDeferred\" could feature some very useful enhancements:\r\n    //     - API for cancellation (non guaranteed, best attempt)\r\n    //     - Easier way to add a timeout clause (withTimeout() wrapper below is more verbose)\r\n    //     - Encapsulate the task kickoff code so you can start it later, e.g. superDeferred.start()\r\n    //  - Deferred/Promise are unable to do anything akin to a 'finally' block. It'd be nice if we\r\n    //    could harvest exceptions across all steps of an async process and pipe them to a handler,\r\n    //    so that we don't leave UI-blocking overlays up forever, etc. But this is hard: we'd have\r\n    //    wrap every async callback (including low-level native ones that don't use [Super]Deferred)\r\n    //    to catch exceptions, and then understand which Deferred(s) the code *would* have resolved/\r\n    //    rejected had it run to completion.\r\n    \r\n\r\n    /**\r\n     * Executes a series of tasks in parallel, returning a \"master\" Promise that is resolved once\r\n     * all the tasks have resolved. If one or more tasks fail, behavior depends on the failFast\r\n     * flag:\r\n     *   - If true, the master Promise is rejected as soon as the first task fails. The remaining\r\n     *     tasks continue to completion in the background.\r\n     *   - If false, the master Promise is rejected after all tasks have completed.\r\n     *\r\n     * If nothing fails:          (M = master promise; 1-4 = tasks; d = done; F = fail)\r\n     *  M  ------------d\r\n     *  1 >---d        .\r\n     *  2 >------d     .\r\n     *  3 >---------d  .\r\n     *  4 >------------d\r\n     *\r\n     * With failFast = false:\r\n     *  M  ------------F\r\n     *  1 >---d     .  .\r\n     *  2 >------d  .  .\r\n     *  3 >---------F  .\r\n     *  4 >------------d\r\n     *\r\n     * With failFast = true: -- equivalent to $.when()\r\n     *  M  ---------F\r\n     *  1 >---d     .\r\n     *  2 >------d  .\r\n     *  3 >---------F\r\n     *  4 >------------d   (#4 continues even though master Promise has failed)\r\n     * (Note: if tasks finish synchronously, the behavior is more like failFast=false because you\r\n     * won't get a chance to respond to the master Promise until after all items have been processed)\r\n     *\r\n     * To perform task-specific work after an individual task completes, attach handlers to each\r\n     * Promise before beginProcessItem() returns it.\r\n     *\r\n     * Note: don't use this if individual tasks (or their done/fail handlers) could ever show a user-\r\n     * visible dialog: because they run in parallel, you could show multiple dialogs atop each other.\r\n     *\r\n     * @param {!Array.<*>} items\r\n     * @param {!function(*, number):Promise} beginProcessItem\r\n     * @param {!boolean} failFast\r\n     * @return {$.Promise}\r\n     */\r\n    function doInParallel(items, beginProcessItem, failFast) {\r\n        var promises = [];\r\n        var masterDeferred = new $.Deferred();\r\n        \r\n        if (items.length === 0) {\r\n            masterDeferred.resolve();\r\n            \r\n        } else {\r\n            var numCompleted = 0;\r\n            var hasFailed = false;\r\n            \r\n            items.forEach(function (item, i) {\r\n                var itemPromise = beginProcessItem(item, i);\r\n                promises.push(itemPromise);\r\n                \r\n                itemPromise.fail(function () {\r\n                    if (failFast) {\r\n                        masterDeferred.reject();\r\n                    } else {\r\n                        hasFailed = true;\r\n                    }\r\n                });\r\n                itemPromise.always(function () {\r\n                    numCompleted++;\r\n                    if (numCompleted === items.length) {\r\n                        if (hasFailed) {\r\n                            masterDeferred.reject();\r\n                        } else {\r\n                            masterDeferred.resolve();\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            \r\n        }\r\n        \r\n        return masterDeferred.promise();\r\n    }\r\n    \r\n    /**\r\n     * Executes a series of tasks in serial (task N does not begin until task N-1 has completed).\r\n     * Returns a \"master\" Promise that is resolved once all the tasks have resolved. If one or more\r\n     * tasks fail, behavior depends on the failAndStopFast flag:\r\n     *   - If true, the master Promise is rejected as soon as the first task fails. The remaining\r\n     *     tasks are never started (the serial sequence is stopped).\r\n     *   - If false, the master Promise is rejected after all tasks have completed.\r\n     *\r\n     * If nothing fails:\r\n     *  M  ------------d\r\n     *  1 >---d        .\r\n     *  2     >--d     .\r\n     *  3        >--d  .\r\n     *  4           >--d\r\n     *\r\n     * With failAndStopFast = false:\r\n     *  M  ------------F\r\n     *  1 >---d     .  .\r\n     *  2     >--d  .  .\r\n     *  3        >--F  .\r\n     *  4           >--d\r\n     *\r\n     * With failAndStopFast = true:\r\n     *  M  ---------F\r\n     *  1 >---d     .\r\n     *  2     >--d  .\r\n     *  3        >--F\r\n     *  4          (#4 never runs)\r\n     *\r\n     * To perform task-specific work after an individual task completes, attach handlers to each\r\n     * Promise before beginProcessItem() returns it.\r\n     * \r\n     * @param {!Array.<*>} items\r\n     * @param {!function(*, number):Promise} beginProcessItem\r\n     * @param {!boolean} failAndStopFast\r\n     * @return {$.Promise}\r\n     */\r\n    function doSequentially(items, beginProcessItem, failAndStopFast) {\r\n\r\n        var masterDeferred = new $.Deferred(),\r\n            hasFailed = false;\r\n        \r\n        function doItem(i) {\r\n            if (i >= items.length) {\r\n                if (hasFailed) {\r\n                    masterDeferred.reject();\r\n                } else {\r\n                    masterDeferred.resolve();\r\n                }\r\n                return;\r\n            }\r\n            \r\n            var itemPromise = beginProcessItem(items[i], i);\r\n            \r\n            itemPromise.done(function () {\r\n                doItem(i + 1);\r\n            });\r\n            itemPromise.fail(function () {\r\n                if (failAndStopFast) {\r\n                    masterDeferred.reject();\r\n                    // note: we do NOT process any further items in this case\r\n                } else {\r\n                    hasFailed = true;\r\n                    doItem(i + 1);\r\n                }\r\n            });\r\n        }\r\n        \r\n        doItem(0);\r\n        \r\n        return masterDeferred.promise();\r\n    }\r\n    \r\n    /**\r\n     * Executes a series of synchronous tasks sequentially spread over time-slices less than maxBlockingTime.\r\n     * Processing yields by idleTime between time-slices.\r\n     * \r\n     * @param {!Array.<*>} items\r\n     * @param {!function(*, number)} fnProcessItem  Function that synchronously processes one item\r\n     * @param {number=} maxBlockingTime\r\n     * @param {number=} idleTime\r\n     * @return {$.Promise}\r\n     */\r\n    function doSequentiallyInBackground(items, fnProcessItem, maxBlockingTime, idleTime) {\r\n        \r\n        maxBlockingTime = maxBlockingTime || 15;\r\n        idleTime = idleTime || 30;\r\n        \r\n        var sliceStartTime = (new Date()).getTime();\r\n        \r\n        return doSequentially(items, function (item, i) {\r\n            var result = new $.Deferred();\r\n            \r\n            // process the next item\r\n            fnProcessItem(item, i);\r\n            \r\n            // if we've exhausted our maxBlockingTime\r\n            if ((new Date()).getTime() - sliceStartTime >= maxBlockingTime) {\r\n                //yield\r\n                window.setTimeout(function () {\r\n                    sliceStartTime = (new Date()).getTime();\r\n                    result.resolve();\r\n                }, idleTime);\r\n            } else {\r\n                //continue processing\r\n                result.resolve();\r\n            }\r\n\r\n            return result;\r\n        }, false);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Executes a series of tasks in parallel, saving up error info from any that fail along the way.\r\n     * Returns a Promise that is only resolved/rejected once all tasks are complete. This is\r\n     * essentially a wrapper around doInParallel(..., false).\r\n     *\r\n     * If one or more tasks failed, the entire \"master\" promise is rejected at the end - with one\r\n     * argument: an array objects, one per failed task. Each error object contains:\r\n     *  - item -- the entry in items whose task failed\r\n     *  - error -- the first argument passed to the fail() handler when the task failed\r\n     *\r\n     * @param {!Array.<*>} items\r\n     * @param {!function(*, number):Promise} beginProcessItem\r\n     * @return {$.Promise}\r\n     */\r\n    function doInParallel_aggregateErrors(items, beginProcessItem) {\r\n        var errors = [];\r\n        \r\n        var masterDeferred = new $.Deferred();\r\n        \r\n        var parallelResult = doInParallel(\r\n            items,\r\n            function (item, i) {\r\n                var itemResult = beginProcessItem(item, i);\r\n                itemResult.fail(function (error) {\r\n                    errors.push({ item: item, error: error });\r\n                });\r\n                return itemResult;\r\n            },\r\n            false\r\n        );\r\n        \r\n        parallelResult\r\n            .done(function () {\r\n                masterDeferred.resolve();\r\n            })\r\n            .fail(function () {\r\n                masterDeferred.reject(errors);\r\n            });\r\n        \r\n        return masterDeferred.promise();\r\n    }\r\n        \r\n    /** Value passed to fail() handlers that have been triggered due to withTimeout()'s timeout */\r\n    var ERROR_TIMEOUT = {};\r\n    \r\n    /**\r\n     * Adds timeout-driven failure to a Promise: returns a new Promise that is resolved/rejected when\r\n     * the given original Promise is resolved/rejected, OR is rejected after the given delay - whichever\r\n     * happens first.\r\n     * \r\n     * If the original Promise is resolved/rejected first, done()/fail() handlers receive arguments\r\n     * piped from the original Promise. If the timeout occurs first instead, fail() is called with the\r\n     * token Async.ERROR_TIMEOUT.\r\n     * \r\n     * @param {$.Promise} promise\r\n     * @param {number} timeout\r\n     * @return {$.Promise}\r\n     */\r\n    function withTimeout(promise, timeout) {\r\n        var wrapper = new $.Deferred();\r\n        \r\n        var timer = window.setTimeout(function () {\r\n            wrapper.reject(ERROR_TIMEOUT);\r\n        }, timeout);\r\n        promise.always(function () {\r\n            window.clearTimeout(timer);\r\n        });\r\n        \r\n        // If the wrapper was already rejected due to timeout, the Promise's calls to resolve/reject\r\n        // won't do anything\r\n        promise.then(wrapper.resolve, wrapper.reject);\r\n        \r\n        return wrapper.promise();\r\n    }\r\n    \r\n    /**\r\n     * Allows waiting for all the promises to be either resolved or rejected.\r\n     * Unlike $.when(), it does not call .fail() or .always() handlers on first\r\n     * reject. The caller should take all the precaution to make sure all the\r\n     * promises passed to this function are completed to avoid blocking.\r\n     * \r\n     * If failOnReject is set to true, promise returned by the function will be\r\n     * rejected if at least one of the promises was rejected. The default value\r\n     * is false, which will cause the call to this function to be always\r\n     * successfully resolved.\r\n     * \r\n     * If timeout is specified, the promise will be rejected on timeout as per\r\n     * Async.withTimeout.\r\n     * \r\n     * @param {!Array.<$.Promise>} promises Array of promises to wait for\r\n     * @param {boolean=} failOnReject       Whether to reject or not if one of the promises has been rejected.\r\n     * @param {number=} timeout             Number of milliseconds to wait until rejecting the promise\r\n     * \r\n     * @return {$.Promise} Promise which will be completed once al the \r\n     * \r\n     */\r\n    function waitForAll(promises, failOnReject, timeout) {\r\n        var masterDeferred = new $.Deferred(),\r\n            count = 0,\r\n            sawRejects = false;\r\n        \r\n        if (!promises || promises.length === 0) {\r\n            masterDeferred.resolve();\r\n            return masterDeferred.promise();\r\n        }\r\n        \r\n        // set defaults if needed\r\n        failOnReject = (failOnReject === undefined) ? false : true;\r\n        \r\n        if (timeout !== undefined) {\r\n            withTimeout(masterDeferred, timeout);\r\n        }\r\n        \r\n        promises.forEach(function (promise) {\r\n            promise\r\n                .fail(function (err) {\r\n                    sawRejects = true;\r\n                })\r\n                .always(function () {\r\n                    count++;\r\n                    if (count === promises.length) {\r\n                        if (failOnReject && sawRejects) {\r\n                            masterDeferred.reject();\r\n                        } else {\r\n                            masterDeferred.resolve();\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n        \r\n        return masterDeferred.promise();\r\n    }\r\n    \r\n    /**\r\n     * Chains a series of synchronous and asynchronous (jQuery promise-returning) functions \r\n     * together, using the result of each successive function as the argument(s) to the next. \r\n     * A promise is returned that resolves with the result of the final call if all calls \r\n     * resolve or return normally. Otherwise, if any of the functions reject or throw, the \r\n     * computation is halted immediately and the promise is rejected with this halting error.\r\n     * \r\n     * @param {Array.<function(*)>} functions Functions to be chained\r\n     * @param {?Array} args Arguments to call the first function with\r\n     * @return {jQuery.Promise} A promise that resolves with the result of the final call, or\r\n     *      rejects with the first error.\r\n     */\r\n    function chain(functions, args) {\r\n        var deferred = $.Deferred();\r\n        \r\n        function chainHelper(index, args) {\r\n            if (functions.length === index) {\r\n                deferred.resolveWith(null, args);\r\n            } else {\r\n                var nextFunction = functions[index++];\r\n                try {\r\n                    var responseOrPromise = nextFunction.apply(null, args);\r\n                    if (responseOrPromise.hasOwnProperty(\"done\") &&\r\n                            responseOrPromise.hasOwnProperty(\"fail\")) {\r\n                        responseOrPromise.done(function () {\r\n                            chainHelper(index, arguments);\r\n                        });\r\n                        responseOrPromise.fail(function () {\r\n                            deferred.rejectWith(null, arguments);\r\n                        });\r\n                    } else {\r\n                        chainHelper(index, [responseOrPromise]);\r\n                    }\r\n                } catch (e) {\r\n                    deferred.reject(e);\r\n                }\r\n            }\r\n        }\r\n        \r\n        chainHelper(0, args || []);\r\n        \r\n        return deferred.promise();\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * Creates a queue of async operations that will be executed sequentially. Operations can be added to the\r\n     * queue at any time. If the queue is empty and nothing is currently executing when an operation is added, \r\n     * it will execute immediately. Otherwise, it will execute when the last operation currently in the queue \r\n     * has finished.\r\n     */\r\n    function PromiseQueue() {\r\n    }\r\n    \r\n    /**\r\n     * @private\r\n     * @type {Array.<function(): $.Promise>}\r\n     * The queue of operations to execute sequentially. Note that even if this array is empty, there might\r\n     * still be an operation we need to wait on; that operation's promise is stored in _curPromise.\r\n     */\r\n    PromiseQueue.prototype._queue = [];\r\n    \r\n    /**\r\n     * @private\r\n     * @type {$.Promise}\r\n     * The promise we're currently waiting on, or null if there's nothing currently executing.\r\n     */\r\n    PromiseQueue.prototype._curPromise = null;\r\n    \r\n    /**\r\n     * @type {number} The number of queued promises.\r\n     */\r\n    Object.defineProperties(PromiseQueue.prototype, {\r\n        \"length\": {\r\n            get: function () { return this._queue.length; },\r\n            set: function () { throw new Error(\"Cannot set length\"); }\r\n        }\r\n    });\r\n    \r\n    /**\r\n     * Adds an operation to the queue. If nothing is currently executing, it will execute immediately (and\r\n     * the next operation added to the queue will wait for it to complete). Otherwise, it will wait until\r\n     * the last operation in the queue (or the currently executing operation if nothing is in the queue) is\r\n     * finished. The operation must return a promise that will be resolved or rejected when it's finished;\r\n     * the queue will continue with the next operation regardless of whether the current operation's promise\r\n     * is resolved or rejected.\r\n     * @param {function(): $.Promise} op The operation to add to the queue.\r\n     */\r\n    PromiseQueue.prototype.add = function (op) {\r\n        this._queue.push(op);\r\n\r\n        // If something is currently executing, then _doNext() will get called when it's done. If nothing\r\n        // is executing (in which case the queue should have been empty), we need to call _doNext() to kickstart\r\n        // the queue.\r\n        if (!this._curPromise) {\r\n            this._doNext();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Removes all pending promises from the queue.\r\n     */\r\n    PromiseQueue.prototype.removeAll = function () {\r\n        this._queue = [];\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Pulls the next operation off the queue and executes it.\r\n     */\r\n    PromiseQueue.prototype._doNext = function () {\r\n        var self = this;\r\n        if (this._queue.length) {\r\n            var op = this._queue.shift();\r\n            this._curPromise = op();\r\n            this._curPromise.done(function () {\r\n                self._curPromise = null;\r\n                self._doNext();\r\n            });\r\n        }\r\n    };\r\n    \r\n    // Define public API\r\n    exports.doInParallel   = doInParallel;\r\n    exports.doSequentially = doSequentially;\r\n    exports.doSequentiallyInBackground   = doSequentiallyInBackground;\r\n    exports.doInParallel_aggregateErrors = doInParallel_aggregateErrors;\r\n    exports.withTimeout    = withTimeout;\r\n    exports.waitForAll     = waitForAll;\r\n    exports.ERROR_TIMEOUT  = ERROR_TIMEOUT;\r\n    exports.chain          = chain;\r\n    exports.PromiseQueue   = PromiseQueue;\r\n});\r\n\n//# sourceURL=/utils/Async.js"),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, window */\r\n\r\ndefine(\'utils/UrlParams\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    // var _ = require("thirdparty/lodash");\r\n    \r\n    /**\r\n     * Convert between URL querystring and name/value pairs. Decodes and encodes URL parameters.\r\n     */\r\n    function UrlParams() {\r\n        this._store = {};\r\n    }\r\n    \r\n    /**\r\n     * Parse the window location by default. Optionally specify a URL to parse.\r\n     * @param {string} url\r\n     */\r\n    UrlParams.prototype.parse = function (url) {\r\n        var queryString = "",\r\n            urlParams,\r\n            p,\r\n            self = this;\r\n        \r\n        self._store = {};\r\n        \r\n        if (!url) {\r\n            queryString = window.document.location.search.substring(1);\r\n        } else if (url.indexOf("?") !== -1) {\r\n            queryString = url.substring(url.indexOf("?") + 1);\r\n        }\r\n        \r\n        queryString = queryString.trimRight();\r\n        \r\n        if (queryString) {\r\n            urlParams = queryString.split("&");\r\n            \r\n            urlParams.forEach(function (param) {\r\n                p = param.split("=");\r\n                p[1] = p[1] || "";\r\n                self._store[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);\r\n            });\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Store a name/value string pair\r\n     * @param {!string} name\r\n     * @param {!string} value\r\n     */\r\n    UrlParams.prototype.put = function (name, value) {\r\n        this._store[name] = value;\r\n    };\r\n    \r\n    /**\r\n     * Retrieve a value by name\r\n     * @param {!string} name\r\n     * @return {string}\r\n     */\r\n    UrlParams.prototype.get = function (name) {\r\n        return this._store[name];\r\n    };\r\n    \r\n    /**\r\n     * Remove a name/value string pair\r\n     * @param {!string} name\r\n     */\r\n    UrlParams.prototype.remove = function (name) {\r\n        delete this._store[name];\r\n    };\r\n    \r\n    /**\r\n     * Returns true if the parameter list is empty, else returns false.\r\n     * @return {boolean}\r\n     */\r\n    UrlParams.prototype.isEmpty = function (name) {\r\n        return _.isEmpty(this._store);\r\n    };\r\n    \r\n    /**\r\n     * Encode name/value pairs as URI components.\r\n     * @return {string}\r\n     */\r\n    UrlParams.prototype.toString = function () {\r\n        var strs = [],\r\n            self = this;\r\n        \r\n        _.forEach(self._store, function (value, key) {\r\n            strs.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));\r\n        });\r\n        \r\n        return strs.join("&");\r\n    };\r\n    \r\n    // Define public API\r\n    exports.UrlParams = UrlParams;\r\n});\n//# sourceURL=/utils/UrlParams.js'),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, $, brackets, window */\r\n\r\n/**\r\n * ExtensionLoader searches the filesystem for extensions, then creates a new context for each one and loads it.\r\n * This module dispatches the following events:\r\n *      "load" - when an extension is successfully loaded. The second argument is the file path to the\r\n *          extension root.\r\n *      "loadFailed" - when an extension load is unsuccessful. The second argument is the file path to the\r\n *          extension root.\r\n */\r\n\r\ndefine(\'utils/ExtensionLoader\',[\'require\',\'exports\',\'module\',\'utils/Initializer\',\'filesystem/FileSystem\',\'file/FileUtils\',\'utils/Async\',\'utils/UrlParams\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    require("utils/Initializer");\r\n\r\n    var // _           = require("thirdparty/lodash"),\r\n        FileSystem  = require("filesystem/FileSystem"),\r\n        FileUtils   = require("file/FileUtils"),\r\n        Async       = require("utils/Async"),\r\n        UrlParams   = require("utils/UrlParams").UrlParams;\r\n\r\n    // default async initExtension timeout\r\n    var INIT_EXTENSION_TIMEOUT = 10000;\r\n\r\n    var _init       = false,\r\n        _extensions = {},\r\n        _initExtensionTimeout = INIT_EXTENSION_TIMEOUT,\r\n        /** @type {Object<string, Object>}  Stores require.js contexts of extensions */\r\n        contexts    = {},\r\n        srcPath     = FileUtils.getNativeDirectoryPath();\r\n\r\n    // The native directory path ends with either "test" or "src". We need "src" to\r\n    // load the text and i18n modules.\r\n    srcPath = srcPath.replace(/\\/test$/, "/src"); // convert from "test" to "src"\r\n\r\n    var globalConfig = {\r\n            "text" : srcPath + "/thirdparty/text/text"\r\n            /* "i18n" : srcPath + "/thirdparty/i18n/i18n" */\r\n        };\r\n\r\n    /**\r\n     * Returns the full path of the default user extensions directory. This is in the users\r\n     * application support directory, which is typically\r\n     * /Users/<user>/Application Support/StarUML/extensions/user on the mac, and\r\n     * C:\\Users\\<user>\\AppData\\Roaming\\StarUML\\extensions\\user on windows.\r\n     */\r\n    function getUserExtensionPath() {\r\n        if (appshell.app.getApplicationSupportDirectory) {\r\n            return appshell.app.getApplicationSupportDirectory() + "/extensions/user";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the require.js require context used to load an extension\r\n     *\r\n     * @param {!string} name, used to identify the extension\r\n     * @return {!Object} A require.js require object used to load the extension, or undefined if\r\n     * there is no require object with that name\r\n     */\r\n    function getRequireContextForExtension(name) {\r\n        return contexts[name];\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Get timeout value for rejecting an extension\'s async initExtension promise.\r\n     * @return {number} Timeout in milliseconds\r\n     */\r\n    function _getInitExtensionTimeout() {\r\n        return _initExtensionTimeout;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Set timeout for rejecting an extension\'s async initExtension promise.\r\n     * @param {number} value Timeout in milliseconds\r\n     */\r\n    function _setInitExtensionTimeout(value) {\r\n        _initExtensionTimeout = value;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Loads optional requirejs-config.json file for an extension\r\n     * @param {Object} baseConfig\r\n     * @return {$.Promise}\r\n     */\r\n    function _mergeConfig(baseConfig) {\r\n        var deferred = new $.Deferred(),\r\n            extensionConfigFile = FileSystem.getFileForPath(baseConfig.baseUrl + "/requirejs-config.json");\r\n\r\n        // Optional JSON config for require.js\r\n        FileUtils.readAsText(extensionConfigFile).done(function (text) {\r\n            try {\r\n                var extensionConfig = JSON.parse(text);\r\n\r\n                // baseConfig.paths properties will override any extension config paths\r\n                _.extend(extensionConfig.paths, baseConfig.paths);\r\n\r\n                // Overwrite baseUrl, context, locale (paths is already merged above)\r\n                _.extend(extensionConfig, _.omit(baseConfig, "paths"));\r\n\r\n                deferred.resolve(extensionConfig);\r\n            } catch (err) {\r\n                // Failed to parse requirejs-config.json\r\n                deferred.reject("failed to parse requirejs-config.json");\r\n            }\r\n        }).fail(function () {\r\n            // If requirejs-config.json isn\'t specified, resolve with the baseConfig only\r\n            deferred.resolve(baseConfig);\r\n        });\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    /**\r\n     * Loads the extension that lives at baseUrl into its own Require.js context\r\n     *\r\n     * @param {!string} name, used to identify the extension\r\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\r\n     * @param {!string} entryPoint, name of the main js file to load\r\n     * @return {!$.Promise} A promise object that is resolved when the extension is loaded, or rejected\r\n     *              if the extension fails to load or throws an exception immediately when loaded.\r\n     *              (Note: if extension contains a JS syntax error, promise is resolved not rejected).\r\n     */\r\n    function loadExtension(name, config, entryPoint) {\r\n        var extensionConfig = {\r\n            context: name,\r\n            baseUrl: config.baseUrl,\r\n            /* FIXME (issue #1087): can we pass this from the global require context instead of hardcoding twice? */\r\n            paths: globalConfig,\r\n            locale: app.getLocale()\r\n        };\r\n\r\n        // Read optional requirejs-config.json\r\n        var promise = _mergeConfig(extensionConfig).then(function (mergedConfig) {\r\n            // Create new RequireJS context and load extension entry point\r\n            var extensionRequire = app.libRequire.config(mergedConfig),\r\n                extensionRequireDeferred = new $.Deferred();\r\n\r\n            contexts[name] = extensionRequire;\r\n            extensionRequire([entryPoint], extensionRequireDeferred.resolve, extensionRequireDeferred.reject);\r\n\r\n            return extensionRequireDeferred.promise();\r\n        }).then(function (module) {\r\n            // Extension loaded normally\r\n            var initPromise;\r\n\r\n            _extensions[name] = module;\r\n\r\n            // Optional sync/async initExtension\r\n            if (module && module.initExtension && (typeof module.initExtension === "function")) {\r\n                // optional async extension init\r\n                try {\r\n                    initPromise = Async.withTimeout(module.initExtension(), _getInitExtensionTimeout());\r\n                } catch (err) {\r\n                    // Synchronous error while initializing extension\r\n                    console.error("[Extension] Error -- error thrown during initExtension for " + name + ": " + err);\r\n                    return new $.Deferred().reject(err).promise();\r\n                }\r\n\r\n                // initExtension may be synchronous and may not return a promise\r\n                if (initPromise) {\r\n                    // WARNING: These calls to initPromise.fail() and initPromise.then(),\r\n                    // could also result in a runtime error if initPromise is not a valid\r\n                    // promise. Currently, the promise is wrapped via Async.withTimeout(),\r\n                    // so the call is safe as-is.\r\n                    initPromise.fail(function (err) {\r\n                        if (err === Async.ERROR_TIMEOUT) {\r\n                            console.error("[Extension] Error -- timeout during initExtension for " + name);\r\n                        } else {\r\n                            console.error("[Extension] Error -- failed initExtension for " + name + (err ? ": " + err : ""));\r\n                        }\r\n                    });\r\n\r\n                    return initPromise;\r\n                }\r\n            }\r\n        }, function errback(err) {\r\n            // Extension failed to load during the initial require() call\r\n            console.error("[Extension] failed to load " + config.baseUrl + " " + err);\r\n            if (err.requireType === "define") {\r\n                // This type has a useful stack (exception thrown by ext code or info on bad getModule() call)\r\n                console.log(err.stack);\r\n            }\r\n        }).then(function () {\r\n            $(exports).triggerHandler("load", config.baseUrl);\r\n        }, function (err) {\r\n            $(exports).triggerHandler("loadFailed", config.baseUrl);\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Runs unit tests for the extension that lives at baseUrl into its own Require.js context\r\n     *\r\n     * @param {!string} name, used to identify the extension\r\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\r\n     * @param {!string} entryPoint, name of the main js file to load\r\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\r\n     */\r\n    function testExtension(name, config, entryPoint) {\r\n        var result = new $.Deferred(),\r\n            extensionPath = config.baseUrl + "/" + entryPoint + ".js";\r\n\r\n        FileSystem.resolve(extensionPath, function (err, entry) {\r\n            if (!err && entry.isFile) {\r\n                // unit test file exists\r\n                var extensionRequire = app.libRequire.config({\r\n                    context: name,\r\n                    baseUrl: config.baseUrl,\r\n                    paths: $.extend({}, config.paths, globalConfig)\r\n                });\r\n\r\n                extensionRequire([entryPoint], function () {\r\n                    result.resolve();\r\n                });\r\n            } else {\r\n                result.reject();\r\n            }\r\n        });\r\n\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Loads a file entryPoint from each extension folder within the baseUrl into its own Require.js context\r\n     *\r\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\r\n     *                  each subdirectory is interpreted as an independent extension\r\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension folder\r\n     * @param {!string} entryPoint Module name to load (without .js suffix)\r\n     * @param {function} processExtension\r\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\r\n     */\r\n    function _loadAll(directory, config, entryPoint, processExtension) {\r\n        var result = new $.Deferred();\r\n\r\n        FileSystem.getDirectoryForPath(directory).getContents(function (err, contents) {\r\n            if (!err) {\r\n                var i,\r\n                    extensions = [];\r\n\r\n                for (i = 0; i < contents.length; i++) {\r\n                    if (contents[i].isDirectory) {\r\n                        // FUTURE (JRB): read package.json instead of just using the entrypoint "main".\r\n                        // Also, load sub-extensions defined in package.json.\r\n                        extensions.push(contents[i].name);\r\n                    }\r\n                }\r\n\r\n                if (extensions.length === 0) {\r\n                    result.resolve();\r\n                    return;\r\n                }\r\n\r\n                Async.doInParallel(extensions, function (item) {\r\n                    var extConfig = {\r\n                        baseUrl: config.baseUrl + "/" + item,\r\n                        paths: config.paths\r\n                    };\r\n                    return processExtension(item, extConfig, entryPoint);\r\n                }).always(function () {\r\n                    // Always resolve the promise even if some extensions had errors\r\n                    result.resolve();\r\n                });\r\n            } else {\r\n                console.error("[Extension] Error -- could not read native directory: " + directory);\r\n                result.reject();\r\n            }\r\n        });\r\n\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Loads the extension that lives at baseUrl into its own Require.js context\r\n     *\r\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\r\n     *                  each subdirectory is interpreted as an independent extension\r\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\r\n     */\r\n    function loadAllExtensionsInNativeDirectory(directory) {\r\n        return _loadAll(directory, {baseUrl: directory}, "main", loadExtension);\r\n    }\r\n\r\n    /**\r\n     * Runs unit test for the extension that lives at baseUrl into its own Require.js context\r\n     *\r\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\r\n     *                  each subdirectory is interpreted as an independent extension\r\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\r\n     */\r\n    function testAllExtensionsInNativeDirectory(directory) {\r\n        var bracketsPath = FileUtils.getNativeDirectoryPath(),\r\n            config = {\r\n                baseUrl: directory\r\n            };\r\n\r\n        config.paths = {\r\n            "perf": bracketsPath + "/perf",\r\n            "spec": bracketsPath + "/spec"\r\n        };\r\n\r\n        return _loadAll(directory, config, "unittests", testExtension);\r\n    }\r\n\r\n    /**\r\n     * Load extensions.\r\n     *\r\n     * @param {?Array.<string>} A list containing references to extension source\r\n     *      location. A source location may be either (a) a folder name inside\r\n     *      src/extensions or (b) an absolute path.\r\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\r\n     */\r\n    function init(paths) {\r\n        var params = new UrlParams();\r\n\r\n        if (_init) {\r\n            // Only init once. Return a resolved promise.\r\n            return new $.Deferred().resolve().promise();\r\n        }\r\n\r\n        if (!paths) {\r\n            params.parse();\r\n\r\n            if (params.get("reloadWithoutUserExts") === "true") {\r\n                paths = ["default"];\r\n            } else {\r\n                paths = ["default", "dev", getUserExtensionPath()];\r\n            }\r\n        }\r\n\r\n        // Load extensions before restoring the project\r\n\r\n        // Get a Directory for the user extension directory and create it if it doesn\'t exist.\r\n        // Note that this is an async call and there are no success or failure functions passed\r\n        // in. If the directory *doesn\'t* exist, it will be created. Extension loading may happen\r\n        // before the directory is finished being created, but that is okay, since the extension\r\n        // loading will work correctly without this directory.\r\n        // If the directory *does* exist, nothing else needs to be done. It will be scanned normally\r\n        // during extension loading.\r\n        var extensionPath = getUserExtensionPath();\r\n        FileSystem.getDirectoryForPath(extensionPath).create();\r\n\r\n        // Create the extensions/disabled directory, too.\r\n        var disabledExtensionPath = extensionPath.replace(/\\/user$/, "/disabled");\r\n        FileSystem.getDirectoryForPath(disabledExtensionPath).create();\r\n\r\n        var promise = Async.doSequentially(paths, function (item) {\r\n            var extensionPath = item;\r\n\r\n            // If the item has "/" in it, assume it is a full path. Otherwise, load\r\n            // from our source path + "/extensions/".\r\n            if (item.indexOf("/") === -1) {\r\n                extensionPath = FileUtils.getNativeDirectoryPath() + "/extensions/" + item;\r\n            }\r\n\r\n            return loadAllExtensionsInNativeDirectory(extensionPath);\r\n        }, false);\r\n\r\n        promise.always(function () {\r\n            _init = true;\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    // unit tests\r\n    exports._setInitExtensionTimeout = _setInitExtensionTimeout;\r\n    exports._getInitExtensionTimeout = _getInitExtensionTimeout;\r\n\r\n    // public API\r\n    exports.init = init;\r\n    exports.getUserExtensionPath = getUserExtensionPath;\r\n    exports.getRequireContextForExtension = getRequireContextForExtension;\r\n    exports.loadExtension = loadExtension;\r\n    exports.testExtension = testExtension;\r\n    exports.loadAllExtensionsInNativeDirectory = loadAllExtensionsInNativeDirectory;\r\n    exports.testAllExtensionsInNativeDirectory = testAllExtensionsInNativeDirectory;\r\n});\r\n\n//# sourceURL=/utils/ExtensionLoader.js'),eval(" /*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, $, window, brackets */\r\n\r\ndefine('utils/DragAndDrop',['require','exports','module'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Returns true if the drag and drop items contains valid drop objects.\r\n     * @param {Array.<DataTransferItem>} items Array of items being dragged\r\n     * @return {boolean} True if one or more items can be dropped.\r\n     */\r\n    function isValidDrop(items) {\r\n        var i, len = items.length;\r\n\r\n        for (i = 0; i < len; i++) {\r\n            if (items[i].kind === \"file\") {\r\n                var entry = items[i].webkitGetAsEntry();\r\n\r\n                if (entry.isFile) {\r\n                    // If any files are being dropped, this is a valid drop\r\n                    return true;\r\n                } else if (len === 1) {\r\n                    // If exactly one folder is being dropped, this is a valid drop\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // No valid entries found\r\n        return false;\r\n    }\r\n\r\n    // Export public API\r\n    exports.isValidDrop         = isValidDrop;\r\n\r\n});\n//# sourceURL=/utils/DragAndDrop.js"),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell */\r\ndefine('utils/Constants',['require','exports','module'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    exports.APP_EXT  = \"mdj\";\r\n    exports.FRAG_EXT = \"mfj\";\r\n\r\n});\r\n\n//# sourceURL=/utils/Constants.js"),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, $, brackets, less, PathUtils */\r\n\r\n/**\r\n * ExtensionUtils defines utility methods for implementing extensions.\r\n */\r\ndefine(\'utils/ExtensionUtils\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    /**\r\n     * Appends a <style> tag to the document\'s head.\r\n     *\r\n     * @param {!string} css CSS code to use as the tag\'s content\r\n     * @return {!HTMLStyleElement} The generated HTML node\r\n     **/\r\n    function addEmbeddedStyleSheet(css) {\r\n        return $("<style>").text(css).appendTo("head")[0];\r\n    }\r\n    \r\n    /**\r\n     * Appends a <link> tag to the document\'s head.\r\n     *\r\n     * @param {!string} url URL to a style sheet\r\n     * @param {$.Deferred=} deferred Optionally check for load and error events\r\n     * @return {!HTMLLinkElement} The generated HTML node\r\n     **/\r\n    function addLinkedStyleSheet(url, deferred) {\r\n        var attributes = {\r\n            type: "text/css",\r\n            rel:  "stylesheet",\r\n            href: url\r\n        };\r\n        \r\n        var $link = $("<link/>").attr(attributes);\r\n        \r\n        if (deferred) {\r\n            $link.on(\'load\', deferred.resolve).on(\'error\', deferred.reject);\r\n        }\r\n        \r\n        $link.appendTo("head");\r\n        \r\n        return $link[0];\r\n    }\r\n\r\n    /**\r\n     * Parses LESS code and returns a promise that resolves with plain CSS code.\r\n     *\r\n     * Pass the {@link url} argument to resolve relative URLs contained in the code.\r\n     * Make sure URLs in the code are wrapped in quotes, like so:\r\n     *     background-image: url("image.png");\r\n     *\r\n     * @param {!string} code LESS code to parse\r\n     * @param {?string} url URL to the file containing the code\r\n     * @return {!$.Promise} A promise object that is resolved with CSS code if the LESS code can be parsed\r\n     */\r\n    function parseLessCode(code, url) {\r\n        var result = new $.Deferred(),\r\n            options;\r\n        \r\n        if (url) {\r\n            var dir  = url.slice(0, url.lastIndexOf("/") + 1),\r\n                file = url.slice(dir.length);\r\n            \r\n            options = {\r\n                filename: file,\r\n                paths:    [dir],\r\n                rootpath: dir\r\n            };\r\n\r\n            if (PathUtils.isAbsoluteUrl(url)) {\r\n                options.currentFileInfo = {\r\n                    currentDirectory: dir,\r\n                    entryPath: dir,\r\n                    filename: url,\r\n                    rootFilename: url,\r\n                    rootpath: dir\r\n                };\r\n            }\r\n        }\r\n        \r\n        var parser = new less.Parser(options);\r\n        parser.parse(code, function onParse(err, tree) {\r\n            if (err) {\r\n                result.reject(err);\r\n            } else {\r\n                result.resolve(tree.toCSS());\r\n            }\r\n        });\r\n        \r\n        return result.promise();\r\n    }\r\n    \r\n    /**\r\n     * Returns a path to an extension module.\r\n     *\r\n     * @param {!module} module Module provided by RequireJS\r\n     * @param {?string} path Relative path from the extension folder to a file\r\n     * @return {!string} The path to the module\'s folder\r\n     **/\r\n    function getModulePath(module, path) {\r\n        var modulePath = module.uri.substr(0, module.uri.lastIndexOf("/") + 1);\r\n        if (path) {\r\n            modulePath += path;\r\n        }\r\n        \r\n        return modulePath;\r\n    }\r\n    \r\n    /**\r\n     * Returns a URL to an extension module.\r\n     *\r\n     * @param {!module} module Module provided by RequireJS\r\n     * @param {?string} path Relative path from the extension folder to a file\r\n     * @return {!string} The URL to the module\'s folder\r\n     **/\r\n    function getModuleUrl(module, path) {\r\n        var url = encodeURI(getModulePath(module, path));\r\n        \r\n        // On Windows, $.get() fails if the url is a full pathname. To work around this,\r\n        // prepend "file:///". On the Mac, $.get() works fine if the url is a full pathname,\r\n        // but *doesn\'t* work if it is prepended with "file://". Go figure.\r\n        // However, the prefix "file://localhost" does work.\r\n        if (brackets.platform === "win" && url.indexOf(":") !== -1) {\r\n            url = "file:///" + url;\r\n        }\r\n        \r\n        return url;\r\n    }\r\n    \r\n    /**\r\n     * Performs a GET request using a path relative to an extension module.\r\n     *\r\n     * The resulting URL can be retrieved in the resolve callback by accessing\r\n     * \r\n     * @param {!module} module Module provided by RequireJS\r\n     * @param {!string} path Relative path from the extension folder to a file\r\n     * @return {!$.Promise} A promise object that is resolved with the contents of the requested file\r\n     **/\r\n    function loadFile(module, path) {\r\n        var url     = PathUtils.isAbsoluteUrl(path) ? path : getModuleUrl(module, path),\r\n            promise = $.get(url);\r\n\r\n        return promise;\r\n    }\r\n    \r\n    /**\r\n     * Loads a style sheet (CSS or LESS) relative to the extension module.\r\n     *\r\n     * @param {!module} module Module provided by RequireJS\r\n     * @param {!string} path Relative path from the extension folder to a CSS or LESS file\r\n     * @return {!$.Promise} A promise object that is resolved with an HTML node if the file can be loaded.\r\n     */\r\n    function loadStyleSheet(module, path) {\r\n        var result = new $.Deferred();\r\n\r\n        loadFile(module, path)\r\n            .done(function (content) {\r\n                var url = this.url;\r\n                \r\n                if (url.slice(-5) === ".less") {\r\n                    parseLessCode(content, url)\r\n                        .done(function (css) {\r\n                            result.resolve(addEmbeddedStyleSheet(css));\r\n                        })\r\n                        .fail(result.reject);\r\n                } else {\r\n                    var deferred = new $.Deferred(),\r\n                        link = addLinkedStyleSheet(url, deferred);\r\n                    \r\n                    deferred\r\n                        .done(function () {\r\n                            result.resolve(link);\r\n                        })\r\n                        .fail(result.reject);\r\n                }\r\n            })\r\n            .fail(result.reject);\r\n        \r\n        return result.promise();\r\n    }\r\n    \r\n    exports.addEmbeddedStyleSheet = addEmbeddedStyleSheet;\r\n    exports.addLinkedStyleSheet   = addLinkedStyleSheet;\r\n    exports.parseLessCode         = parseLessCode;\r\n    exports.getModulePath         = getModulePath;\r\n    exports.getModuleUrl          = getModuleUrl;\r\n    exports.loadFile              = loadFile;\r\n    exports.loadStyleSheet        = loadStyleSheet;\r\n});\r\n\n//# sourceURL=/utils/ExtensionUtils.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, browser: true */\r\n/*global $, _, define, kendo, app, C2S */\r\n\r\ndefine(\'metadata-json/MetadataJson\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Repository\',\'engine/ProjectManager\',\'core/PreferenceManager\',\'utils/NodeDomain\',\'file/FileUtils\',\'filesystem/FileSystem\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit           = require("utils/AppInit"),\r\n        Repository        = require("core/Repository"),\r\n        ProjectManager    = require("engine/ProjectManager"),\r\n        PreferenceManager = require("core/PreferenceManager"),\r\n        NodeDomain        = require("utils/NodeDomain"),\r\n        FileUtils         = require("file/FileUtils"),\r\n        FileSystem        = require("filesystem/FileSystem");\r\n\r\n    // MetadataJson Domain\r\n    var domainPath = FileUtils.getNativeDirectoryPath() + "/" + FileUtils.getNativeModuleDirectoryPath(module) + "/node/MetadataJsonDomain";\r\n    var MetadataJsonDomain = new NodeDomain("MetadataJson", domainPath);\r\n\r\n    /**\r\n     * Validate a metadata file (.mdj)\r\n     * @param {string} fullPath\r\n     * @return {$.Promise}\r\n     */\r\n    function validate(fullPath) {\r\n        if (PreferenceManager.get("validation.validateModel")) {\r\n            return MetadataJsonDomain.exec("validate", fullPath);\r\n        } else {\r\n            return $.Deferred().resolve().promise();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Export diagram(s) to a PDF file\r\n     * @param {string} fullPath Model file (.mdj) to be exported\r\n     * @param {Array.<Diagram>} diagrams Array of diagram\'s id to be exported\r\n     * @param {string} filename Filename for an exported PDF\r\n     * @param {{layout:string, size:string, showName:boolean}} options\r\n     * @return {$.Promise}\r\n     */\r\n    function exportToPDF(fullPath, diagrams, filename, options) {\r\n        var ids = _.map(diagrams, function (d) { return d._id; });\r\n        return MetadataJsonDomain.exec("exportToPDF", fullPath, ids, filename, options);\r\n    }\r\n\r\n    /**\r\n     * Export project to HTML documents\r\n     * @param {string} fullPath Model file (.mdj) to be exported\r\n     * @param {string} targetDir Path for an exported HTML files\r\n     * @return {$.Promise}\r\n     */\r\n    function exportToHTML(fullPath, targetDir) {\r\n        return MetadataJsonDomain.exec("exportToHTML", fullPath, targetDir);\r\n    }\r\n\r\n    /**\r\n     * Register font\r\n     * @param {strong} path Path name containing .ttf font files and font.json\r\n     */\r\n    function registerFont(path) {\r\n        return MetadataJsonDomain.exec("registerFont", path);\r\n    }\r\n\r\n    exports.validate     = validate;\r\n    exports.exportToPDF  = exportToPDF;\r\n    exports.exportToHTML = exportToHTML;\r\n    exports.registerFont = registerFont;\r\n\r\n});\r\n\n//# sourceURL=/metadata-json/MetadataJson.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global require, define, $, _, app, document, appshell, Mustache*/\r\n\r\ndefine('utils/FontManager',['require','exports','module','file/FileUtils','filesystem/FileSystem','utils/ExtensionUtils','utils/Async','metadata-json/MetadataJson'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var FileUtils      = require(\"file/FileUtils\"),\r\n        FileSystem     = require(\"filesystem/FileSystem\"),\r\n        ExtensionUtils = require(\"utils/ExtensionUtils\"),\r\n        Async          = require(\"utils/Async\"),\r\n        MetadataJson   = require(\"metadata-json/MetadataJson\");\r\n\r\n    \r\n    function loadFont(dir) {\r\n        var result = new $.Deferred();\r\n        var file = FileSystem.getFileForPath(dir + '/font.json');\r\n        FileUtils.readAsText(file)\r\n            .done(function (data) {\r\n                MetadataJson.registerFont(dir);\r\n                var fontArray = JSON.parse(data);\r\n                _.each(fontArray, function (font) {\r\n                    if (font.name !== \"default\") {\r\n                        font.dir = dir;\r\n                        var template =\r\n                            \"@font-face { font-family: '{{name}}'; src: url('{{{dir}}}/{{regular}}'); font-weight: normal; font-style: normal;}\" +\r\n                            \"@font-face { font-family: '{{name}}'; src: url('{{{dir}}}/{{italic}}'); font-weight: normal; font-style: italic;}\" +\r\n                            \"@font-face { font-family: '{{name}}'; src: url('{{{dir}}}/{{bold}}'); font-weight: bold; font-style: normal;}\" +\r\n                            \"@font-face { font-family: '{{name}}'; src: url('{{{dir}}}/{{boldItalic}}'); font-weight: bold; font-style: italic;}\";\r\n                        var css = Mustache.render(template, font);\r\n                        ExtensionUtils.addEmbeddedStyleSheet(css);\r\n                        if (!Array.isArray(app.config.defaultFonts)) {\r\n                            app.config.defaultFonts = [];\r\n                        }\r\n                        app.config.defaultFonts.push({ value: font.name, text: font.name });\r\n                    }\r\n                });\r\n            \r\n                // Sort fonts\r\n                var _sorted = _.sortBy(app.config.defaultFonts, function (f) { return f.value; });\r\n                app.config.defaultFonts = _sorted;\r\n                result.resolve();\r\n            })\r\n            .fail(function (err) {\r\n                result.reject(err);\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n    function loadDefaultFonts() {\r\n        var result = new $.Deferred();\r\n        var fontPath = FileUtils.getNativeDirectoryPath() + \"/styles/fonts\";\r\n        appshell.fs.readdir(fontPath, function (err, files) {\r\n            if (!err) {\r\n                Async.doSequentially(\r\n                    files,\r\n                    function (dir) {\r\n                        var _result = new $.Deferred();\r\n                        var path = fontPath + '/' + dir;\r\n                        appshell.fs.stat(path, function (err, stats) {\r\n                            if (!err) {\r\n                                if (stats.isDirectory()) {\r\n                                    loadFont(path).then(_result.resolve, _result.reject);\r\n                                } else {\r\n                                    _result.resolve();\r\n                                }\r\n                            } else {\r\n                                _result.reject(err);\r\n                            }\r\n                        });\r\n                        return _result.promise();\r\n                    },\r\n                    false\r\n                ).then(result.resolve, result.reject);\r\n            } else {\r\n                result.reject(err);\r\n            }\r\n        });\r\n        return result.promise();\r\n    }\r\n    \r\n    exports.loadFont = loadFont;\r\n    exports.loadDefaultFonts = loadDefaultFonts;\r\n    \r\n});\r\n\n//# sourceURL=/utils/FontManager.js"),eval('define(\'text!htmlContent/main-view.html\',[],function () { return \'<!-- Splash Screen -->\\r\\n<div class="splash-screen"></div>\\r\\n\\r\\n<!-- Menu Bar (collapsed when nativeMenus) -->\\r\\n<ul id="menu-bar"></ul>\\r\\n\\r\\n<!-- Main View -->\\r\\n<div class="main-view">\\r\\n\\r\\n    <div id="sidebar" class="sidebar panel quiet-scrollbars horz-resizable right-resizer collapsible" data-minsize="0" data-forcesize=".content">\\r\\n\\r\\n        <!-- Working Diagrams -->\\r\\n        <div id="working-diagrams" class="working-diagrams"></div>\\r\\n\\r\\n        <!-- Toolbox -->\\r\\n        <div id="toolbox" class="vert-resizable top-resizer collapsible" data-minsize="60" data-forcesize=".working-diagrams">\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div class="content">\\r\\n\\r\\n        <div class="content-holder">\\r\\n\\r\\n            <!-- Diagram Editor -->\\r\\n            <div id="diagram-area-wrapper" style="position: relative">\\r\\n                <div id="diagram-area">\\r\\n                    <canvas id="diagram-canvas" tabindex="0" style="outline: none;"></canvas>\\r\\n                    <canvas id="hidden-canvas"></canvas>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!-- Bottom Panels are created here -->\\r\\n        </div>\\r\\n\\r\\n        <!-- Toolbar -->\\r\\n        <div id="toolbar">\\r\\n            <div class="buttons">\\r\\n                <a id="toolbar-extension-manager" href="#" title="Extension Manager"></a>\\r\\n            </div>\\r\\n            <div class="bottom-buttons">\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Toast Holder -->\\r\\n        <div id="toast-holder"></div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div id="navigator" class="navigator panel quiet-scrollbars horz-resizable left-resizer collapsible" data-minsize="0" data-forcesize=".content">\\r\\n\\r\\n        <!-- Model Explorer -->\\r\\n        <div id="model-explorer" class="model-explorer"></div>\\r\\n\\r\\n        <!-- Editor -->\\r\\n        <div id="editors" class="vert-resizable top-resizer collapsible" data-minsize="60" data-forcesize=".model-explorer"></div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<!-- Status Bar -->\\r\\n<div id="statusbar" class="statusbar"></div>\\r\\n\\r\\n<div id="toast" style="display: none"></div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/main-view.html'),eval("define('text!htmlContent/windows-stylesheet.html',[],function () { return '<style type=\"text/css\">\\r\\n    ::-webkit-scrollbar {\\r\\n        background: transparent;\\r\\n        width: 6px;\\r\\n        height: 6px;\\r\\n    }\\r\\n\\r\\n    ::-webkit-scrollbar-corner {\\r\\n        background: transparent;\\r\\n    }\\r\\n\\r\\n    ::-webkit-scrollbar-track {\\r\\n        padding: 2px;\\r\\n    }\\r\\n    \\r\\n    ::-webkit-scrollbar-thumb:vertical {\\r\\n        background-color: #262626;\\r\\n    }\\r\\n\\r\\n    ::-webkit-scrollbar-thumb:horizontal {\\r\\n        background-color: #262626;\\r\\n    }\\r\\n</style>';});\n\n//# sourceURL=/text!htmlContent/windows-stylesheet.html"),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, $, window */\r\n\r\n/**\r\n * Resizer is a Module utility to inject resizing capabilities to any element\r\n * inside Brackets.\r\n *\r\n * On initialization, Resizer discovers all nodes tagged as "vert-resizable"\r\n * and "horz-resizable" to add the resizer handler. Additionally, "top-resizer",\r\n * "bottom-resizer", "left-resizer" and "right-resizer" classes control the\r\n * position of the resizer on the element.\r\n *\r\n * An element can be made resizable at any time using the `makeResizable()` API.\r\n * Panel sizes are saved via preferences and restored when the DOM node becomes resizable\r\n * again in a subsequent launch.\r\n *\r\n * The resizable elements trigger a panelResizeStart, panelResizeUpdate and panelResizeEnd\r\n * event that can be used to create performance optimizations (such as hiding/showing elements\r\n * while resizing), custom layout logic, etc. See makeResizable() for details on the events.\r\n *\r\n * A resizable element can be collapsed/expanded using the `show`, `hide` and `toggle` APIs or\r\n * via user action. This triggers panelCollapsed/panelExpanded events - see makeResizable().\r\n */\r\ndefine(\'utils/Resizer\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/PreferenceManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var DIRECTION_VERTICAL = "vert";\r\n    var DIRECTION_HORIZONTAL = "horz";\r\n\r\n    var POSITION_TOP = "top";\r\n    var POSITION_BOTTOM = "bottom";\r\n    var POSITION_LEFT = "left";\r\n    var POSITION_RIGHT = "right";\r\n\r\n    // Minimum size (height or width) for autodiscovered resizable panels\r\n    var DEFAULT_MIN_SIZE = 100;\r\n\r\n    // Load dependent modules\r\n    var AppInit           = require("utils/AppInit"),\r\n        PreferenceManager = require("core/PreferenceManager");\r\n\r\n    var $mainView;\r\n\r\n    var isResizing = false;\r\n\r\n    /**\r\n     * Shows a resizable element.\r\n     * @param {DOMNode} element Html element to show if possible\r\n     */\r\n    function show(element) {\r\n        var showFunc = $(element).data("show");\r\n        if (showFunc) {\r\n            showFunc.apply(element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hides a resizable element.\r\n     * @param {DOMNode} element Html element to hide if possible\r\n     */\r\n    function hide(element) {\r\n        var hideFunc = $(element).data("hide");\r\n        if (hideFunc) {\r\n            hideFunc.apply(element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes the visibility state of a resizable element. The toggle\r\n     * functionality is added when an element is made resizable.\r\n     * @param {DOMNode} element Html element to toggle\r\n     */\r\n    function toggle(element) {\r\n        if ($(element).is(":visible")) {\r\n            hide(element);\r\n        } else {\r\n            show(element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the visibility state of a resizable element.\r\n     * @param {DOMNode} element Html element to toggle\r\n     * @return {boolean} true if element is visible, false if it is not visible\r\n     */\r\n    function isVisible(element) {\r\n        return $(element).is(":visible");\r\n    }\r\n\r\n    /**\r\n     * Adds resizing capabilities to a given html element.\r\n     *\r\n     * Resizing can be configured in two directions:\r\n     *  - Vertical ("vert"): Resizes the height of the element\r\n     *  - Horizontal ("horz"): Resizes the width of the element\r\n     *\r\n     * Resizer handlers can be positioned on the element at:\r\n     *  - Top ("top") or bottom ("bottom") for vertical resizing\r\n     *  - Left ("left") or right ("right") for horizontal resizing\r\n     *\r\n     * A resizable element triggers the following events while resizing:\r\n     *  - panelResizeStart: When the resize starts. Passed the new size.\r\n     *  - panelResizeUpdate: When the resize gets updated. Passed the new size.\r\n     *  - panelResizeEnd: When the resize ends. Passed the final size.\r\n     *  - panelCollapsed: When the panel gets collapsed (or hidden). Passed the last size\r\n     *      before collapse. May occur without any resize events.\r\n     *  - panelExpanded: When the panel gets expanded (or shown). Passed the initial size.\r\n     *      May occur without any resize events.\r\n     *\r\n     * @param {!DOMNode} element DOM element which should be made resizable.\r\n     * @param {!string} direction Direction of the resize action: one of the DIRECTION_* constants.\r\n     * @param {!string} position Which side of the element can be dragged: one of the POSITION_* constants\r\n     *                          (TOP/BOTTOM for vertical resizing or LEFT/RIGHT for horizontal).\r\n     * @param {?number} minSize Minimum size (width or height) of the element\'s outer dimensions, including\r\n     *                          border & padding. Defaults to DEFAULT_MIN_SIZE.\r\n     * @param {?boolean} collapsible Indicates the panel is collapsible on double click on the\r\n     *                          resizer. Defaults to false.\r\n     * @param {?string} forceSize CSS selector indicating element whose \'left,right,top,bottom\' should be locked to\r\n     *                          the resizable element\'s size (useful for siblings laid out to the right of\r\n     *                          the element). Must lie in element\'s parent\'s subtree.\r\n     * @param {?boolean} createdByPanelManager For internal use only\r\n     */\r\n    function makeResizable(element, direction, position, minSize, collapsible, forceSize, createdByPanelManager) {\r\n\r\n        var $resizer            = $(\'<div class="\' + direction + \'-resizer"></div>\'),\r\n            $element            = $(element),\r\n            $parent             = $element.parent(),\r\n            $resizableElement   = $($element.find(".resizable-content:first")[0]),\r\n            $body               = $(window.document.body),\r\n            elementID           = $element.attr("id"),\r\n            elementPrefs        = PreferenceManager.getViewState(elementID) || {},\r\n            animationRequest    = null,\r\n            directionProperty   = direction === DIRECTION_HORIZONTAL ? "clientX" : "clientY",\r\n            directionIncrement  = (position === POSITION_TOP || position === POSITION_LEFT) ? 1 : -1,\r\n            elementSizeFunction = direction === DIRECTION_HORIZONTAL ? $element.width : $element.height,\r\n            resizerCSSPosition  = direction === DIRECTION_HORIZONTAL ? "left" : "top",\r\n            contentSizeFunction = direction === DIRECTION_HORIZONTAL ? $resizableElement.width : $resizableElement.height;\r\n\r\n        if (minSize === undefined) {\r\n            minSize = DEFAULT_MIN_SIZE;\r\n        }\r\n\r\n        collapsible = collapsible || false;\r\n\r\n        // For left-resizer\r\n        if (position === POSITION_LEFT) {\r\n            resizerCSSPosition = "right";\r\n        }\r\n\r\n        $element.prepend($resizer);\r\n\r\n        // Important so min/max sizes behave predictably\r\n        $element.css("box-sizing", "border-box");\r\n\r\n        // Detect legacy cases where panels in the editor area are created without using PanelManager APIs\r\n        if ($parent[0] && $parent.is(".content") && !createdByPanelManager) {\r\n            console.warn("Deprecated: resizable panels should be created via PanelManager.createBottomPanel(). Using Resizer directly will stop working in the future. \\nElement:", element);\r\n            $(exports).triggerHandler("deprecatedPanelAdded", [$element]);\r\n        }\r\n\r\n        function adjustSibling(size) {\r\n            if (forceSize !== undefined) {\r\n                var forceCSS = "left"; // default\r\n                switch (position) {\r\n                case POSITION_LEFT:\r\n                    forceCSS = "right";\r\n                    break;\r\n                case POSITION_RIGHT:\r\n                    forceCSS = "left";\r\n                    break;\r\n                case POSITION_TOP:\r\n                    forceCSS = "bottom";\r\n                    break;\r\n                case POSITION_BOTTOM:\r\n                    forceCSS = "top";\r\n                    break;\r\n                }\r\n                $(forceSize, $parent).css(forceCSS, size);\r\n            }\r\n        }\r\n\r\n        function resizeElement(elementSize, contentSize) {\r\n            elementSizeFunction.apply($element, [elementSize]);\r\n\r\n            if ($resizableElement.length) {\r\n                contentSizeFunction.apply($resizableElement, [contentSize]);\r\n            }\r\n        }\r\n\r\n        $element.data("show", function () {\r\n            var elementOffset   = $element.offset(),\r\n                elementSize     = elementSizeFunction.apply($element) || elementPrefs.size,\r\n                contentSize     = contentSizeFunction.apply($resizableElement) || elementPrefs.contentSize,\r\n                resizerSize     = elementSizeFunction.apply($resizer);\r\n\r\n            // Resize the element before showing it again. If the panel was collapsed by dragging\r\n            // the resizer, the size of the element should be 0, so we restore size in preferences\r\n            resizeElement(elementSize, contentSize);\r\n\r\n            $element.show();\r\n            elementPrefs.visible = true;\r\n\r\n            if (collapsible) {\r\n                $element.prepend($resizer);\r\n\r\n                if (position === POSITION_TOP) {\r\n                    $resizer.css(resizerCSSPosition, "");\r\n                } else if (position === POSITION_LEFT) {\r\n                    $resizer.css(resizerCSSPosition, elementSize);\r\n                } else if (position === POSITION_RIGHT) {\r\n                    $resizer.css(resizerCSSPosition, elementOffset[resizerCSSPosition] + elementSize);\r\n                }\r\n            }\r\n\r\n            adjustSibling(elementSize);\r\n\r\n            $element.trigger("panelExpanded", [elementSize]);\r\n            PreferenceManager.setViewState(elementID, elementPrefs, null, isResizing);\r\n        });\r\n\r\n        $element.data("hide", function () {\r\n            var elementOffset   = $element.offset(),\r\n                elementSize     = elementSizeFunction.apply($element),\r\n                resizerSize     = elementSizeFunction.apply($resizer);\r\n\r\n            $element.hide();\r\n            elementPrefs.visible = false;\r\n            if (collapsible) {\r\n                $resizer.insertBefore($element);\r\n                if (position === POSITION_RIGHT || position === POSITION_LEFT) {\r\n                    $resizer.css(resizerCSSPosition, 0);\r\n                } else if (position === POSITION_TOP) {\r\n                    $resizer.css(resizerCSSPosition, elementOffset[resizerCSSPosition] + elementSize - resizerSize);\r\n                }\r\n            }\r\n\r\n            adjustSibling(0);\r\n\r\n            $element.trigger("panelCollapsed", [elementSize]);\r\n            PreferenceManager.setViewState(elementID, elementPrefs, null, isResizing);\r\n        });\r\n\r\n        // If the resizer is positioned right or bottom of the panel, we need to listen to\r\n        // reposition it if the element size changes externally\r\n        function repositionResizer(elementSize) {\r\n            var resizerPosition = elementSize || 1;\r\n            if (position === POSITION_RIGHT || position === POSITION_LEFT || position === POSITION_BOTTOM) {\r\n                $resizer.css(resizerCSSPosition, resizerPosition);\r\n            }\r\n        }\r\n\r\n        $resizer.on("mousedown", function (e) {\r\n            var $resizeShield   = $("<div class=\'resizing-container " + direction + "-resizing\' />"),\r\n                startPosition   = e[directionProperty],\r\n                startSize       = $element.is(":visible") ? elementSizeFunction.apply($element) : 0,\r\n                newSize         = startSize,\r\n                previousSize    = startSize,\r\n                baseSize        = 0,\r\n                resizeStarted   = false;\r\n\r\n            isResizing = true;\r\n            $body.append($resizeShield);\r\n\r\n            if ($resizableElement.length) {\r\n                $element.children().not(".horz-resizer, .vert-resizer, .resizable-content").each(function (index, child) {\r\n                    if (direction === DIRECTION_HORIZONTAL) {\r\n                        baseSize += $(child).outerWidth();\r\n                    } else {\r\n                        baseSize += $(child).outerHeight();\r\n                    }\r\n                });\r\n            }\r\n\r\n            function doRedraw() {\r\n                // only run this if the mouse is down so we don\'t constantly loop even\r\n                // after we\'re done resizing.\r\n                if (!isResizing) {\r\n                    return;\r\n                }\r\n\r\n                // Check for real size changes to avoid unnecessary resizing and events\r\n                if (newSize !== previousSize) {\r\n                    previousSize = newSize;\r\n\r\n                    if ($element.is(":visible")) {\r\n                        if (newSize < 10) {\r\n                            toggle($element);\r\n                            elementSizeFunction.apply($element, [0]);\r\n                        } else {\r\n                            // Trigger resizeStarted just before the first successful resize update\r\n                            if (!resizeStarted) {\r\n                                resizeStarted = true;\r\n                                $element.trigger("panelResizeStart", newSize);\r\n                            }\r\n\r\n                            // Resize the main element to the new size. If there is a content element,\r\n                            // its size is the new size minus the size of the non-resizable elements\r\n                            resizeElement(newSize, (newSize - baseSize));\r\n                            adjustSibling(newSize);\r\n\r\n                            $element.trigger("panelResizeUpdate", [newSize]);\r\n                        }\r\n                    } else if (newSize > 10) {\r\n                        elementSizeFunction.apply($element, [newSize]);\r\n                        toggle($element);\r\n\r\n                        // Trigger resizeStarted after expanding the element if it was previously collapsed\r\n                        if (!resizeStarted) {\r\n                            resizeStarted = true;\r\n                            $element.trigger("panelResizeStart", newSize);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                animationRequest = window.requestAnimationFrame(doRedraw);\r\n            }\r\n\r\n            function onMouseMove(e) {\r\n                // calculate newSize adding to startSize the difference\r\n                // between starting and current position, capped at minSize\r\n                newSize = Math.max(startSize + directionIncrement * (startPosition - e[directionProperty]), minSize);\r\n\r\n                // respect max size if one provided (e.g. by PanelManager)\r\n                var maxSize = $element.data("maxsize");\r\n                if (maxSize !== undefined) {\r\n                    newSize = Math.min(newSize, maxSize);\r\n                }\r\n\r\n                // don\'t let larger than parent size\r\n                var parentSize = elementSizeFunction.apply($element.parent());\r\n                if (parentSize) {\r\n                    newSize = Math.min(newSize, parentSize);\r\n                }\r\n\r\n                e.preventDefault();\r\n\r\n                if (animationRequest === null) {\r\n                    animationRequest = window.requestAnimationFrame(doRedraw);\r\n                }\r\n            }\r\n\r\n            $(window.document).on("mousemove", onMouseMove);\r\n\r\n            // If the element is marked as collapsible, check for double click\r\n            // to toggle the element visibility\r\n            if (collapsible) {\r\n                $resizeShield.on("mousedown", function (e) {\r\n                    $(window.document).off("mousemove", onMouseMove);\r\n                    $resizeShield.off("mousedown");\r\n                    $resizeShield.remove();\r\n                    animationRequest = null;\r\n                    toggle($element);\r\n                });\r\n            }\r\n\r\n            function endResize(e) {\r\n                if (isResizing) {\r\n\r\n                    var elementSize    = elementSizeFunction.apply($element);\r\n                    if ($element.is(":visible")) {\r\n                        elementPrefs.size = elementSize;\r\n                        if ($resizableElement.length) {\r\n                            elementPrefs.contentSize = contentSizeFunction.apply($resizableElement);\r\n                        }\r\n                        PreferenceManager.setViewState(elementID, elementPrefs);\r\n                        repositionResizer(elementSize);\r\n                    }\r\n\r\n                    isResizing = false;\r\n\r\n                    if (resizeStarted) {\r\n                        $element.trigger("panelResizeEnd", [elementSize]);\r\n                    }\r\n\r\n                    // We wait 300ms to remove the resizer container to capture a mousedown\r\n                    // on the container that would account for double click\r\n                    window.setTimeout(function () {\r\n                        $(window.document).off("mousemove", onMouseMove);\r\n                        $resizeShield.off("mousedown");\r\n                        $resizeShield.remove();\r\n                        animationRequest = null;\r\n                    }, 300);\r\n                }\r\n            }\r\n\r\n            $(window.document).one("mouseup", endResize);\r\n\r\n            e.preventDefault();\r\n        });\r\n\r\n        // Panel preferences initialization\r\n        if (elementPrefs) {\r\n\r\n            if (elementPrefs.size !== undefined) {\r\n                elementSizeFunction.apply($element, [elementPrefs.size]);\r\n            }\r\n\r\n            if (elementPrefs.contentSize !== undefined) {\r\n                contentSizeFunction.apply($resizableElement, [elementPrefs.contentSize]);\r\n            }\r\n\r\n            if (elementPrefs.visible !== undefined && !elementPrefs.visible) {\r\n                hide($element);\r\n            } else {\r\n                adjustSibling(elementSizeFunction.apply($element));\r\n                repositionResizer(elementSizeFunction.apply($element));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Scan DOM for horz-resizable and vert-resizable classes and make them resizable\r\n    AppInit.htmlReady(function () {\r\n        var minSize = DEFAULT_MIN_SIZE;\r\n\r\n        $mainView = $(".main-view");\r\n\r\n        $(".vert-resizable").each(function (index, element) {\r\n\r\n            if ($(element).data().minsize !== undefined) {\r\n                minSize = $(element).data().minsize;\r\n            }\r\n\r\n            if ($(element).hasClass("top-resizer")) {\r\n                makeResizable(element, DIRECTION_VERTICAL, POSITION_TOP, minSize, $(element).hasClass("collapsible"), $(element).data().forcesize);\r\n            }\r\n\r\n            if ($(element).hasClass("bottom-resizer")) {\r\n                makeResizable(element, DIRECTION_VERTICAL, POSITION_BOTTOM, minSize, $(element).hasClass("collapsible"), $(element).data().forcesize);\r\n            }\r\n        });\r\n\r\n        $(".horz-resizable").each(function (index, element) {\r\n\r\n            if ($(element).data().minsize !== undefined) {\r\n                minSize = $(element).data().minsize;\r\n            }\r\n\r\n            if ($(element).hasClass("left-resizer")) {\r\n                makeResizable(element, DIRECTION_HORIZONTAL, POSITION_LEFT, minSize, $(element).hasClass("collapsible"), $(element).data().forcesize);\r\n            }\r\n\r\n            if ($(element).hasClass("right-resizer")) {\r\n                makeResizable(element, DIRECTION_HORIZONTAL, POSITION_RIGHT, minSize, $(element).hasClass("collapsible"), $(element).data().forcesize);\r\n            }\r\n        });\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * Examine each preference key for migration of any panel state.\r\n     *\r\n     * @param {string} key The key of the preference to be examined\r\n     *      for migration of panel states.\r\n     * @return {?string} - the scope to which the preference is to be migrated\r\n     */\r\n    function _isPanelPreferences(key) {\r\n        if (key) {\r\n            return "user";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    exports.makeResizable   = makeResizable;\r\n    exports.toggle          = toggle;\r\n    exports.show            = show;\r\n    exports.hide            = hide;\r\n    exports.isVisible       = isVisible;\r\n\r\n    //Resizer Constants\r\n    exports.DIRECTION_VERTICAL   = DIRECTION_VERTICAL;\r\n    exports.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\r\n    exports.POSITION_TOP         = POSITION_TOP;\r\n    exports.POSITION_RIGHT       = POSITION_RIGHT;\r\n});\r\n\n//# sourceURL=/utils/Resizer.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, window, $, brackets */\r\n\r\n/**\r\n * Manages layout of panels surrounding the editor area, and size of the editor area (but not its contents).\r\n *\r\n * Updates panel sizes when the window is resized. Maintains the max resizing limits for panels, based on\r\n * currently available window size.\r\n *\r\n * Events:\r\n *    - editorAreaResize -- When editor-holder\'s size changes for any reason (including panel show/hide\r\n *              panel resize, or the window resize).\r\n *              The 2nd arg is the new editor-holder height.\r\n *              The 3rd arg is a refreshHint flag for internal EditorManager use.\r\n */\r\ndefine(\'utils/PanelManager\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'utils/Resizer\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit                 = require("utils/AppInit"),\r\n        Resizer                 = require("utils/Resizer");\r\n\r\n\r\n    /** @type {jQueryObject} The ".content" vertical stack (editor + all header/footer panels) */\r\n    var $windowContent;\r\n\r\n    /** @type {jQueryObject} The "#editor-holder": has only one visible child, the current CodeMirror\r\n        instance (or the no-editor placeholder) */\r\n    var $editorHolder;\r\n\r\n    /** @type {boolean} Have we already started listening for the end of the ongoing window resize? */\r\n    var windowResizing = false;\r\n\r\n\r\n    /**\r\n     * Calculates the available height for the full-size Editor (or the no-editor placeholder),\r\n     * accounting for the current size of all visible panels, toolbar, & status bar.\r\n     * @return {number}\r\n     */\r\n    function calcEditorHeight() {\r\n        var availableHt = $windowContent.height();\r\n\r\n        $editorHolder.siblings().each(function (i, elem) {\r\n            var $elem = $(elem);\r\n            if ($elem.css("display") !== "none" && $elem.css("position") !== "absolute") {\r\n                availableHt -= $elem.outerHeight();\r\n            }\r\n        });\r\n\r\n        // Clip value to 0 (it could be negative if a panel wants more space than we have)\r\n        return Math.max(availableHt, 0);\r\n    }\r\n\r\n    /** Updates panel resize limits to disallow making panels big enough to shrink editor area below 0 */\r\n    function updateResizeLimits() {\r\n        var editorAreaHeight = $editorHolder.height();\r\n\r\n        $editorHolder.siblings().each(function (i, elem) {\r\n            var $elem = $(elem);\r\n            if ($elem.css("display") === "none") {\r\n                $elem.data("maxsize", editorAreaHeight);\r\n            } else {\r\n                $elem.data("maxsize", editorAreaHeight + $elem.outerHeight());\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates a new size for editor-holder and resizes it accordingly, then and dispatches the "editorAreaResize"\r\n     * event. (The editors within are resized by EditorManager, in response to that event).\r\n     *\r\n     * @param {string=} refreshHint  One of "skip", "force", or undefined. See EditorManager docs.\r\n     */\r\n    function triggerEditorResize(refreshHint) {\r\n        // Find how much space is left for the editor\r\n        var editorAreaHeight = calcEditorHeight();\r\n\r\n        $editorHolder.height(editorAreaHeight);  // affects size of "not-editor" placeholder as well\r\n\r\n        // Resize editor to fill the space\r\n        $(exports).trigger("editorAreaResize", [editorAreaHeight, refreshHint]);\r\n    }\r\n\r\n\r\n    /** Trigger editor area resize whenever the window is resized */\r\n    function handleWindowResize() {\r\n        // These are not initialized in Jasmine Spec Runner window until a test\r\n        // is run that creates a mock document.\r\n        if (!$windowContent || !$editorHolder) {\r\n            return;\r\n        }\r\n\r\n        // Immediately adjust editor\'s height, but skip the refresh since CodeMirror will call refresh()\r\n        // itself when it sees the window resize event\r\n        // triggerEditorResize("skip");\r\n\r\n        // FIXME (issue #4564) Workaround https://github.com/marijnh/CodeMirror/issues/1787\r\n        triggerEditorResize();\r\n\r\n        if (!windowResizing) {\r\n            windowResizing = true;\r\n\r\n            // We don\'t need any fancy debouncing here - we just need to react before the user can start\r\n            // resizing any panels at the new window size. So just listen for first mousemove once the\r\n            // window resize releases mouse capture.\r\n            $(window.document).one("mousemove", function () {\r\n                windowResizing = false;\r\n                updateResizeLimits();\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Trigger editor area resize whenever the given panel is shown/hidden/resized */\r\n    function listenToResize($panel) {\r\n        // Update editor height when shown/hidden, & continuously as panel is resized\r\n        $panel.on("panelCollapsed panelExpanded panelResizeUpdate", function () {\r\n            triggerEditorResize();\r\n        });\r\n        // Update max size of sibling panels when shown/hidden, & at *end* of resize gesture\r\n        $panel.on("panelCollapsed panelExpanded panelResizeEnd", function () {\r\n            updateResizeLimits();\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Represents a panel below the editor area (a child of ".content").\r\n     *\r\n     * @param {!jQueryObject} $panel  The entire panel, including any chrome, already in the DOM.\r\n     * @param {number=} minSize  Minimum height of panel in px.\r\n     */\r\n    function Panel($panel, minSize) {\r\n        this.$panel = $panel;\r\n\r\n        Resizer.makeResizable($panel[0], Resizer.DIRECTION_VERTICAL, Resizer.POSITION_TOP, minSize, false, undefined, true);\r\n        listenToResize($panel);\r\n    }\r\n\r\n    /** @type {jQueryObject} */\r\n    Panel.prototype.$panel = null;\r\n\r\n    Panel.prototype.isVisible = function () {\r\n        return this.$panel.is(":visible");\r\n    };\r\n\r\n    Panel.prototype.show = function () {\r\n        Resizer.show(this.$panel[0]);\r\n    };\r\n    Panel.prototype.hide = function () {\r\n        Resizer.hide(this.$panel[0]);\r\n    };\r\n\r\n    Panel.prototype.setVisible = function (visible) {\r\n        if (visible) {\r\n            Resizer.show(this.$panel[0]);\r\n        } else {\r\n            Resizer.hide(this.$panel[0]);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Creates a new panel beneath the editor area and above the status bar footer. Panel is initially invisible.\r\n     *\r\n     * @param {!string} id  Unique id for this panel. Use package-style naming, e.g. "myextension.feature.panelname"\r\n     * @param {!jQueryObject} $panel  DOM content to use as the panel. Need not be in the document yet.\r\n     * @param {number=} minSize  Minimum height of panel in px.\r\n     * @return {!Panel}\r\n     */\r\n    function createBottomPanel(id, $panel, minSize) {\r\n        $panel.insertAfter("#diagram-area-wrapper");\r\n        $panel.hide();\r\n        updateResizeLimits();  // initialize panel\'s max size\r\n\r\n        return new Panel($panel, minSize);\r\n    }\r\n\r\n\r\n    /**\r\n     * Used by EditorManager to notify us of layout changes our normal panel/window listeners wouldn\'t detect.\r\n     * For internal use only: most code should call EditorManager.resizeEditor().\r\n     */\r\n    function _notifyLayoutChange(refreshHint) {\r\n        triggerEditorResize(refreshHint);\r\n        updateResizeLimits();\r\n    }\r\n\r\n\r\n    // Attach to key parts of the overall UI, once created\r\n    AppInit.htmlReady(function () {\r\n        $windowContent = $(".content");\r\n        $editorHolder = $("#diagram-area-wrapper");\r\n\r\n        // Sidebar is a special case: it isn\'t a Panel, and is not created dynamically. Need to explicitly\r\n        // listen for resize here.\r\n        listenToResize($("#sidebar"));\r\n        listenToResize($("#navigator"));\r\n        listenToResize($("#toolbar"));\r\n        listenToResize($("#statusbar"));\r\n    });\r\n\r\n    // Unit test only: allow passing in mock DOM notes, e.g. for use with SpecRunnerUtils.createMockEditor()\r\n    function _setMockDOM($mockWindowContent, $mockEditorHolder) {\r\n        $windowContent = $mockWindowContent;\r\n        $editorHolder = $mockEditorHolder;\r\n    }\r\n\r\n    // If someone adds a panel in the .content stack the old way, make sure we still listen for resize/show/hide\r\n    // (Resizer emits a deprecation warning for us - no need to log anything here)\r\n    $(Resizer).on("deprecatedPanelAdded", function (event, $panel) {\r\n        listenToResize($panel);\r\n    });\r\n\r\n    // Add this as a capture handler so we\'re guaranteed to run it before the editor does its own\r\n    // refresh on resize.\r\n    window.addEventListener("resize", handleWindowResize, true);\r\n\r\n\r\n    // Define public API\r\n    exports.createBottomPanel    = createBottomPanel;\r\n    exports._notifyLayoutChange  = _notifyLayoutChange;\r\n    exports._setMockDOM          = _setMockDOM;\r\n});\r\n\n//# sourceURL=/utils/PanelManager.js'),eval('define(\'text!htmlContent/preference-dialog.html\',[],function () { return \'<div class="preference-dialog dialog modal" data-title="Preferences">\\r\\n    <div class="dialog-body no-padding">\\r\\n        <div class="schema-section">\\r\\n            <div class="listview"></div>\\r\\n        </div>\\r\\n        <div class="item-section">\\r\\n            <table class="grid small"></table>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button primary" data-button-id="close">{{Strings.CLOSE}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/preference-dialog.html'),eval("define('text!htmlContent/preference-dialog-section.html',[],function () { return '<tr>\\r\\n    <td colspan=\"2\">\\r\\n        <div class=\"preference-section\">{{text}}</div>\\r\\n    </td>\\r\\n</tr>';});\n\n//# sourceURL=/text!htmlContent/preference-dialog-section.html"),eval('define(\'text!htmlContent/preference-dialog-restore.html\',[],function () { return \'<tr>\\r\\n    <td colspan="2" style="text-align: left; font-size: 13px;">\\r\\n        <div class="preference-section" style="margin-bottom: 1em;">{{text}}</div>\\r\\n        <button class="k-button">Restore Default Settings</button>\\r\\n    </td>\\r\\n</tr>\';});\n\n//# sourceURL=/text!htmlContent/preference-dialog-restore.html'),eval("define('text!htmlContent/preference-dialog-item-string.html',[],function () { return '<tr>\\r\\n    <td>\\r\\n        <input data-id=\\'{{key}}\\' type=\\'text\\' class=\\'widget k-input k-textbox small\\' value=\\'{{value}}\\'>\\r\\n    </td>\\r\\n    <td>\\r\\n        <div class=\"name\">{{text}}</div>\\r\\n        <div class=\"description\">{{description}}</div>\\r\\n    </td>\\r\\n</tr>\\r\\n';});\n\n//# sourceURL=/text!htmlContent/preference-dialog-item-string.html"),eval('define(\'text!htmlContent/preference-dialog-item-combo.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <label data-id="{{key}}" class="widget k-combo small" style="width: {{width}};">\\r\\n            <input type="text" value="{{value}}">\\r\\n            <select>\\r\\n                {{#options}}\\r\\n                <option value="{{value}}">{{text}}</option>\\r\\n                {{/options}}\\r\\n            </select>\\r\\n        </label>\\r\\n    </td>\\r\\n    <td>\\r\\n        <div class="name">{{text}}</div>\\r\\n        <div class="description">{{description}}</div>\\r\\n    </td>\\r\\n</tr>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/preference-dialog-item-combo.html'),eval('define(\'text!htmlContent/preference-dialog-item-check.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <div class="widget" style="text-align: left; float: right;">\\r\\n            <label class="k-switch small">\\r\\n                <input data-id=\\\'{{key}}\\\' type="checkbox" class="k-switch__input" {{#value}}checked{{/value}}>\\r\\n                <div class="k-switch__toggle"></div>\\r\\n            </label>\\r\\n        </div>\\r\\n    </td>\\r\\n    <td>\\r\\n        <div class="name">{{text}}</div>\\r\\n        <div class="description">{{description}}</div>\\r\\n    </td>\\r\\n</tr>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/preference-dialog-item-check.html'),eval('define(\'text!htmlContent/preference-dialog-item-color.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        {{#defaultButton}}\\r\\n            <button class="k-button small defaultButton">{{defaultButton.text}}</button>\\r\\n        {{/defaultButton}}\\r\\n        <input data-id="{{key}}" type="color" class="widget">\\r\\n    </td>\\r\\n    <td>\\r\\n        <div class="name">{{text}}</div>\\r\\n        <div class="description">{{description}}</div>\\r\\n    </td>\\r\\n</tr>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/preference-dialog-item-color.html'),eval("define('text!htmlContent/preference-dialog-item-number.html',[],function () { return '<tr>\\r\\n    <td>\\r\\n        <input data-id=\\'{{key}}\\' type=\\'text\\' class=\\'widget k-input k-textbox small\\' value=\\'{{value}}\\' style=\"width: {{width}}\">\\r\\n    </td>\\r\\n    <td>\\r\\n        <div class=\"name\">{{text}}</div>\\r\\n        <div class=\"description\">{{description}}</div>\\r\\n    </td>\\r\\n</tr>\\r\\n';});\n\n//# sourceURL=/text!htmlContent/preference-dialog-item-number.html"),eval('define(\'text!htmlContent/preference-dialog-item-dropdown.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <label class="k-select small">\\r\\n            <select data-id="{{key}}" class="widget">\\r\\n            {{#options}}<option value="{{value}}">{{text}}</option>{{/options}}\\r\\n            </select>\\r\\n        </label>\\r\\n    </td>\\r\\n    <td>\\r\\n        <div class="name">{{text}}</div>\\r\\n        <div class="description">{{description}}</div>\\r\\n    </td>\\r\\n</tr>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/preference-dialog-item-dropdown.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo */\r\n\r\n\r\n// TODO: 키보드 처리 (ESC = Cancel, Enter = OK)\r\n// TODO: getChildren, getText, getIcon, getNode는 ModelExplorer와 중복 코드임. (중복제거요망)\r\n\r\ndefine(\'preference/PreferenceDialog\',[\'require\',\'exports\',\'module\',\'utils/Helper\',\'core/PreferenceManager\',\'strings\',\'dialogs/Dialogs\',\'text!htmlContent/preference-dialog.html\',\'text!htmlContent/preference-dialog-section.html\',\'text!htmlContent/preference-dialog-restore.html\',\'text!htmlContent/preference-dialog-item-string.html\',\'text!htmlContent/preference-dialog-item-combo.html\',\'text!htmlContent/preference-dialog-item-check.html\',\'text!htmlContent/preference-dialog-item-color.html\',\'text!htmlContent/preference-dialog-item-number.html\',\'text!htmlContent/preference-dialog-item-dropdown.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Helper               = require("utils/Helper"),\r\n        PreferenceManager    = require("core/PreferenceManager"),\r\n        Strings              = require("strings"),\r\n        Dialogs              = require("dialogs/Dialogs"),\r\n        dialogTemplate       = require("text!htmlContent/preference-dialog.html"),\r\n        sectionTemplate      = require("text!htmlContent/preference-dialog-section.html"),\r\n        restoreTemplate      = require("text!htmlContent/preference-dialog-restore.html"),\r\n        stringItemTemplate   = require("text!htmlContent/preference-dialog-item-string.html"),\r\n        comboItemTemplate    = require("text!htmlContent/preference-dialog-item-combo.html"),\r\n        checkItemTemplate    = require("text!htmlContent/preference-dialog-item-check.html"),\r\n        colorItemTemplate    = require("text!htmlContent/preference-dialog-item-color.html"),\r\n        numberItemTemplate   = require("text!htmlContent/preference-dialog-item-number.html"),\r\n        dropdownItemTemplate = require("text!htmlContent/preference-dialog-item-dropdown.html");\r\n\r\n    var $itemGrid = null;\r\n\r\n\r\n    function renderSection(item) {\r\n        $itemGrid.append(Mustache.render(sectionTemplate, item));\r\n    }\r\n\r\n    function renderStringItem(item) {\r\n        var $item = $(Mustache.render(stringItemTemplate, item)),\r\n            $edit = $item.find("input");\r\n\r\n        $itemGrid.append($item);\r\n\r\n        $edit.change(function () {\r\n            PreferenceManager.set(item.key, $edit.val());\r\n        });\r\n    }\r\n\r\n    function renderCheckItem(item) {\r\n        var $item = $(Mustache.render(checkItemTemplate, item)),\r\n            $check = $item.find("input");\r\n\r\n        $itemGrid.append($item);\r\n\r\n        $check.change(function () {\r\n            PreferenceManager.set(item.key, $check.is(":checked"));\r\n        });\r\n    }\r\n\r\n    function renderNumberItem(item) {\r\n        if (!item.width) {\r\n            item.width = "4em";\r\n        }\r\n\r\n        var $item = $(Mustache.render(numberItemTemplate, item)),\r\n            $edit = $item.find("input");\r\n\r\n        $itemGrid.append($item);\r\n\r\n        $edit.change(function () {\r\n            var val = parseInt($edit.val());\r\n            if (_.isNumber(val)) {\r\n                PreferenceManager.set(item.key, val);\r\n            }\r\n        });\r\n    }\r\n\r\n    function renderComboItem(item) {\r\n        item.width = (_.max(_.map(item.options, function (x) { return x.text.length; })) + 2.5) + "em";\r\n\r\n        var $item   = $(Mustache.render(comboItemTemplate, item)),\r\n            $edit   = $item.find(".k-combo > input"),\r\n            $select = $item.find(".k-combo > select");\r\n\r\n        $itemGrid.append($item);\r\n\r\n        $edit.change(function () {\r\n            var val = $edit.val();\r\n            if (_.isString(val) && _.isNumber(item.default)) {\r\n                val = parseInt(val);\r\n            }\r\n            PreferenceManager.set(item.key, val);\r\n        });\r\n\r\n        $select.val(item.value);\r\n        $select.change(function () {\r\n            $edit.val($select.val());\r\n            $edit.change();\r\n        });\r\n        // (for Windows) To prevent immediate collapse of dropdown in comboBox.\r\n        $select.click(function (e) {\r\n            $select.focus();\r\n            e.stopPropagation();\r\n            return false;\r\n        });\r\n\r\n    }\r\n\r\n    function renderDropdownItem(item) {\r\n        var $item     = $(Mustache.render(dropdownItemTemplate, item)),\r\n            $dropdown = $item.find("select");\r\n\r\n        $itemGrid.append($item);\r\n\r\n        $dropdown.val(item.value);\r\n        $dropdown.change(function () {\r\n            var val = $dropdown.val();\r\n            if (item.default && _.isNumber(item.default)) {\r\n                val = parseInt($dropdown.val());\r\n            }\r\n            PreferenceManager.set(item.key, val);\r\n        });\r\n    }\r\n\r\n    function renderColorItem(item) {\r\n        var $item  = $(Mustache.render(colorItemTemplate, item)),\r\n            $color = $item.find("input[type=\'color\']");\r\n\r\n        $itemGrid.append($item);\r\n\r\n        $color.kendoColorPicker({\r\n            change: function (e) {\r\n                PreferenceManager.set(item.key, e.value);\r\n            }\r\n        });\r\n        var colorPicker = $color.data("kendoColorPicker");\r\n        colorPicker.value(item.value);\r\n\r\n        if (item.defaultButton) {\r\n            var $defaultButton = $item.find("button.defaultButton");\r\n            $defaultButton.click(function () {\r\n                colorPicker.value(null);\r\n                PreferenceManager.set(item.key, null);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    function renderRestoreDefaultSettings(schemaId) {\r\n        var $item   = $(Mustache.render(restoreTemplate, {})),\r\n            $button = $item.find("button");\r\n\r\n        $itemGrid.append($item);\r\n\r\n        $button.click(function () {\r\n            var schema = PreferenceManager.getSchema(schemaId);\r\n            var key, item;\r\n            for (key in schema) {\r\n                if (schema.hasOwnProperty(key)) {\r\n                    item = schema[key];\r\n                    if (typeof item.default !== "undefined") {\r\n                        PreferenceManager.set(key, item.default);\r\n                    }\r\n                }\r\n            }\r\n            _.defer(function () {\r\n                renderSchema(schemaId, schema);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render Preference Schema\r\n     */\r\n    function renderSchema(id, schema) {\r\n        $itemGrid.empty();\r\n\r\n        var key, item;\r\n        for (key in schema) {\r\n            if (schema.hasOwnProperty(key)) {\r\n                item = schema[key];\r\n                item.key = key;\r\n                item.value = PreferenceManager.get(key);\r\n\r\n                switch (item.type) {\r\n                case "Section":\r\n                    renderSection(item);\r\n                    break;\r\n                case "String":\r\n                    renderStringItem(item);\r\n                    break;\r\n                case "Check":\r\n                    renderCheckItem(item);\r\n                    break;\r\n                case "Number":\r\n                    renderNumberItem(item);\r\n                    break;\r\n                case "Combo":\r\n                    renderComboItem(item);\r\n                    break;\r\n                case "Dropdown":\r\n                    renderDropdownItem(item);\r\n                    break;\r\n                case "Color":\r\n                    renderColorItem(item);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        renderRestoreDefaultSettings(id);\r\n    }\r\n\r\n    function showDialog(preferenceId) {\r\n        var context = {\r\n            Strings: Strings\r\n        };\r\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(dialogTemplate, context), true, function ($dlg) {\r\n\r\n        });\r\n\r\n        var $dlg = dialog.getElement(),\r\n            $schemaList = $dlg.find(".schema-section .listview");\r\n\r\n        // Item Container\r\n        $itemGrid = $dlg.find(".item-section .grid");\r\n\r\n        // Preference Schema ListView\r\n        var _data = [];\r\n        _.forEach(PreferenceManager.getSchemaIds(), function (id) {\r\n            _data.push({\r\n                id: id,\r\n                text: PreferenceManager.getSchemaName(id)\r\n            });\r\n        });\r\n\r\n        var dataSource = new kendo.data.DataSource({ data: _data });\r\n        $schemaList.kendoListView({\r\n            dataSource: dataSource,\r\n            selectable: true,\r\n            template: "<div>#:text#</div>",\r\n            change: function () {\r\n                var data = dataSource.view(),\r\n                    item = data[this.select().index()],\r\n                    schema = PreferenceManager.getSchema(item.id);\r\n                renderSchema(item.id, schema);\r\n            }\r\n        });\r\n        var schemaListView = $schemaList.data("kendoListView");\r\n\r\n        schemaListView.select(schemaListView.element.children().first());\r\n\r\n        // Show Specific Preference for a given preferenceId\r\n        if (preferenceId) {\r\n            var i, len, data = dataSource.view();\r\n            for (i = 0, len = data.length; i < len; i++) {\r\n                if (data[i].id === preferenceId) {\r\n                    schemaListView.select(schemaListView.element.children()[i]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return dialog;\r\n    }\r\n\r\n    // Public API\r\n    exports.showDialog = showDialog;\r\n\r\n});\r\n\n//# sourceURL=/preference/PreferenceDialog.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, loopfunc: true */\r\n/*global define, $, _, window, appshell */\r\n\r\ndefine('engine/ClipboardManager',['require','exports','module','core/Global','utils/Helper','core/Core','core/Repository'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var _global    = require(\"core/Global\").global,\r\n        Helper     = require(\"utils/Helper\"),\r\n        Core       = require(\"core/Core\"),\r\n        Repository = require(\"core/Repository\");\r\n\r\n    /**\r\n     * Clipboard Data Kinds\r\n     * @const\r\n     */\r\n    var DK_MODEL = 'model',\r\n        DK_VIEWS = 'views';\r\n\r\n    /**\r\n     * Clipboard Data\r\n     */\r\n    var _clipboard = {\r\n        kind: null,   // data kind\r\n        type: null,   // type of element in clipboard\r\n        data: null\r\n    };\r\n\r\n    /**\r\n     * Replace all ids of elem and it's descendants\r\n     *\r\n     * @private\r\n     */\r\n    function _replaceIds(idMap, elem) {\r\n        elem.traverse(function (e) {\r\n            var oldId = e._id;\r\n            var newId = Helper.generateGuid();\r\n            idMap[oldId] = newId;\r\n            e._id = newId;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resolve all refernces of elem\r\n     *\r\n     * @private\r\n     */\r\n    function _resolveRefs(idMap, elem) {\r\n        for (var name in elem) {\r\n            var val = elem[name];\r\n            if (val && val.$ref) {\r\n                if (_.has(idMap, val.$ref)) {\r\n                    elem[name] = idMap[val.$ref];\r\n                } else {\r\n                    elem[name] = Repository.get(val.$ref);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set (Copy) Model to Clipboard\r\n     *\r\n     * Copy Context\r\n     * - id : parent's id\r\n     * - type : parent's type\r\n     * - field : parent's array or reference field containing the copied model\r\n     *\r\n     * @param {Core.Model} model\r\n     */\r\n    function setModel(model) {\r\n        var writer = new Core.Writer();\r\n        model.save(writer);\r\n        // Set Clipboard Data\r\n        _clipboard = {\r\n            kind: DK_MODEL,\r\n            type: model.getClassName(),\r\n            data: writer.current\r\n        };\r\n        // Set Copy Context\r\n        if (model._parent) {\r\n            _clipboard.context = {\r\n                id: model._parent._id,\r\n                type: model._parent.getClassName(),\r\n                field: model.getParentField()\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set Views to Clipboard\r\n     *\r\n     * @param {Array.<Core.View>} views\r\n     */\r\n    function setViews(views) {\r\n        var writer = new Core.Writer();\r\n        writer.writeObjArray(\"data\", views);\r\n        // Set Clipboard Data\r\n        _clipboard = {\r\n            kind: DK_VIEWS,\r\n            type: null,\r\n            data: writer.current.data\r\n        };\r\n        // Set Copy Context\r\n        if ((views.length > 0) && (views[0].getDiagram())) {\r\n            var diagram = views[0].getDiagram();\r\n            _clipboard.context = {\r\n                id: diagram._id,\r\n                type: diagram.getClassName()\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Model from Clipboard\r\n     * (All elements are cloned from Clipboard)\r\n     *\r\n     * @return {Core.Model}\r\n     */\r\n    function getModel() {\r\n        if (_clipboard !== null && _clipboard.kind === DK_MODEL && _clipboard.data) {\r\n            var reader = new Core.Reader(_clipboard, _global.type),\r\n                model  = reader.readObj(\"data\");\r\n            // resolve all references\r\n            for (var id in reader.idMap) {\r\n                var obj = reader.idMap[id];\r\n                _resolveRefs(reader.idMap, obj);\r\n            }\r\n            // replace all ids\r\n            var replaceMap  = {};\r\n            _replaceIds(replaceMap, model);\r\n            return model;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get Views from Clipboard\r\n     *\r\n     * @return {Array.<Core.View>}\r\n     */\r\n    function getViews() {\r\n        if (_clipboard !== null && _clipboard.kind === DK_VIEWS && _clipboard.data) {\r\n            var reader = new Core.Reader(_clipboard, _global.type),\r\n                views  = reader.readObjArray(\"data\");\r\n            // resolve all references\r\n            for (var id in reader.idMap) {\r\n                var obj = reader.idMap[id];\r\n                _resolveRefs(reader.idMap, obj);\r\n            }\r\n            // replace all ids\r\n            var replaceMap  = {};\r\n            for (var i = 0; i < views.length; i++) {\r\n                _replaceIds(replaceMap, views[i]);\r\n            }\r\n            return views;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get Kind of Clipboard Data\r\n     *\r\n     * @return {Array.<Core.View>}\r\n     */\r\n    function getKind() {\r\n        return _clipboard.kind;\r\n    }\r\n\r\n    /**\r\n     * Get Type of Element in Clipboard\r\n     *\r\n     * @return {string}\r\n     */\r\n    function getElementType() {\r\n        return _clipboard.type;\r\n    }\r\n\r\n    /**\r\n     * Get Copy Context in Clipboard\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function getCopyContext() {\r\n        return _clipboard.context;\r\n    }\r\n\r\n\r\n    exports.DK_MODEL = DK_MODEL;\r\n    exports.DK_VIEWS = DK_VIEWS;\r\n\r\n    // Public API\r\n    exports.setModel       = setModel;\r\n    exports.setViews       = setViews;\r\n    exports.getModel       = getModel;\r\n    exports.getViews       = getViews;\r\n    exports.getKind        = getKind;\r\n    exports.getElementType = getElementType;\r\n    exports.getCopyContext = getCopyContext;\r\n\r\n});\r\n\n//# sourceURL=/engine/ClipboardManager.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n// TODO: Close all other ContextMenus when a particular ContextMenu. This should be implemented in ContextMenuManager.\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, document, appshell, Mustache, ContextMenuItem */\r\n\r\n/**\r\n * ContextMenuManager\r\n */\r\ndefine(\'menu/ContextMenuManager\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Global\',\'utils/Helper\',\'command/CommandManager\',\'command/KeyBindingManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit           = require("utils/AppInit"),\r\n        global            = require("core/Global").global,\r\n        Helper            = require("utils/Helper"),\r\n        CommandManager    = require("command/CommandManager"),\r\n        KeyBindingManager = require("command/KeyBindingManager");\r\n\r\n    /**\r\n     * Insertion position constants\r\n     * Used by addMenuItem() to specify the relative position of a newly created menu object\r\n     * @enum {string}\r\n     */\r\n    var BEFORE           = "before",\r\n        AFTER            = "after",\r\n        FIRST            = "first",\r\n        LAST             = "last",\r\n        FIRST_IN_SECTION = "firstInSection",\r\n        LAST_IN_SECTION  = "lastInSection";\r\n\r\n    /**\r\n     * Maps ContextMenu id\'s to ContextMenu objects\r\n     * @type {Object.<string, ContextMenu>}\r\n     * @private\r\n     */\r\n    var contextMenuMap = {};\r\n\r\n    /**\r\n     * Return a new divider id\r\n     * @return {string}\r\n     */\r\n    var _menuDividerIDCount = 1;\r\n    function _getNextMenuItemDividerID() {\r\n        return "staruml-contextMenuDivider-" + _menuDividerIDCount++;\r\n    }\r\n\r\n    /**\r\n     * ContextMenuEntry\r\n     * @constructor\r\n     */\r\n    function ContextMenuEntry(id, contextMenu, dataItem) {\r\n        this.id = id;\r\n        this.contextMenu = contextMenu;\r\n        this.dataItem = dataItem;\r\n    }\r\n\r\n    /**\r\n     * Add dataItem to a specific position\r\n     * @private\r\n     */\r\n    ContextMenuEntry.prototype._addToPosition = function (dataItem, position, relativeId) {\r\n        var relativeItem,\r\n            relativeItemIdx;\r\n\r\n        if (!_.isArray(this.dataItem.items)) {\r\n            this.dataItem.items = [];\r\n        }\r\n\r\n        if (relativeId) {\r\n            relativeItem = _.find(\r\n                this.dataItem.items,\r\n                function (item) {\r\n                    return item.data === relativeId;\r\n                }\r\n            );\r\n            relativeItemIdx = _.indexOf(this.dataItem.items, relativeItem);\r\n        }\r\n        switch (position) {\r\n        case FIRST:\r\n            this.dataItem.items.unshift(dataItem);\r\n            break;\r\n        case LAST:\r\n            this.dataItem.items.push(dataItem);\r\n            break;\r\n        case BEFORE:\r\n            this.dataItem.items.splice(relativeItemIdx, 0, dataItem);\r\n            break;\r\n        case AFTER:\r\n            this.dataItem.items.splice(relativeItemIdx + 1, 0, dataItem);\r\n            break;\r\n        case FIRST_IN_SECTION:\r\n            // TODO: Support FIRST_IN_SECTION\r\n            break;\r\n        case LAST_IN_SECTION:\r\n            // TODO: Support LAST_IN_SECTION\r\n            break;\r\n        default:\r\n            this.dataItem.items.push(dataItem);\r\n            break;\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Add ContextMenu Item\r\n     * @param {string | Command} command\r\n     * @param {?} keyBindings\r\n     * @param {string} position\r\n     * @param {string} relativeId\r\n     * @return {ContextMenuItem}\r\n     */\r\n    ContextMenuEntry.prototype.addMenuItem = function (command, iconClass, keyBindings, position, relativeId) {\r\n        var menuId = this.id,\r\n            menuItem,\r\n            id,\r\n            name,\r\n            commandID,\r\n            relativeItem,\r\n            relativeItemIdx;\r\n\r\n        if (!command) {\r\n            console.error("ContextMenu.addMenuItem(): missing required parameters: command");\r\n            return null;\r\n        }\r\n\r\n        if (typeof (command) === "string") {\r\n            commandID = command;\r\n            command = CommandManager.get(commandID);\r\n            if (!command) {\r\n                console.error("ContextMenu.addMenuItem(): commandID not found: " + commandID);\r\n                return null;\r\n            }\r\n            name = command.getName();\r\n        } else {\r\n            commandID = command.getID();\r\n            name = command.getName();\r\n        }\r\n\r\n        id = commandID;\r\n        if (this.contextMenu.menuItemMap[id]) {\r\n            console.error("ContextMenuItem added with same id of existing ContextMenuItem: " + id + " of ContextMenu: " + menuId);\r\n            return null;\r\n        }\r\n\r\n        // Create ContextMenuItem\r\n        var dataItem = {\r\n            text: name,\r\n            data: id,\r\n            spriteCssClass: iconClass\r\n        };\r\n\r\n        // Set KeyBinding Display\r\n        var bindings = KeyBindingManager.getKeyBindings(commandID),\r\n            binding,\r\n            bindingStr = "",\r\n            displayStr = "";\r\n        if (bindings && bindings.length > 0) {\r\n            binding = bindings[bindings.length - 1];\r\n            bindingStr = binding.displayKey || binding.key;\r\n        }\r\n        if (bindingStr.length > 0) {\r\n            displayStr = KeyBindingManager.formatKeyDescriptor(bindingStr);\r\n        }\r\n        if (displayStr.length > 0) {\r\n            var s = "<span style=\'margin-right: {{margin}}em;\'></span><span style=\'position: absolute; right: 0; margin-right: 1.2em;\'>{{key}}</span>";\r\n            dataItem.text += Mustache.render(s, { margin: displayStr.length / 2, key: displayStr});\r\n            dataItem.encoded = false;\r\n        }\r\n\r\n        menuItem = new ContextMenuItem(id, command, this.contextMenu, dataItem, false);\r\n        this.contextMenu.menuItemMap[id] = menuItem;\r\n        this._addToPosition(dataItem, position, relativeId);\r\n\r\n        return menuItem;\r\n    };\r\n\r\n\r\n    /**\r\n     * Add Divider\r\n     * @param {string} position\r\n     * @param {string} relativeId\r\n     * @return {ContextMenuItem}\r\n     */\r\n    ContextMenuEntry.prototype.addMenuDivider = function (position, relativeId) {\r\n        var id,\r\n            menuItem;\r\n\r\n        var dataItem = {\r\n            data: id,\r\n            text: "<hr size=\'0px\'>",\r\n            encoded: false,\r\n            enabled: false,\r\n            cssClass: "k-menu-separator"\r\n        };\r\n\r\n        id = _getNextMenuItemDividerID();\r\n        menuItem = new ContextMenuItem(id, null, this.contextMenu, dataItem, true);\r\n        this.contextMenu.menuItemMap[id] = menuItem;\r\n        this._addToPosition(dataItem, position, relativeId);\r\n\r\n        return menuItem;\r\n    };\r\n\r\n    /**\r\n     * ContextMenu\r\n     * @constructor\r\n     * @param {string} id\r\n     */\r\n    function ContextMenu(id, anchor, $contextMenu) {\r\n        this.anchor = anchor;\r\n        this.$contextMenu = $contextMenu;\r\n        this._kendoObject = null;\r\n        this.menuItemMap = {};\r\n        ContextMenuEntry.call(this, id, this, {});\r\n    }\r\n    ContextMenu.prototype = Object.create(ContextMenuEntry.prototype);\r\n    ContextMenu.prototype.constructor = ContextMenu;\r\n    ContextMenu.prototype.parentClass = ContextMenuEntry.prototype;\r\n\r\n    /**\r\n     * Initialize ContextMenu items.\r\n     * For all items, assign this.$element and add data-id attribute, and delete data-data attribute.\r\n     */\r\n    ContextMenu.prototype._initializeMenuItems = function () {\r\n        // Find <LI> element and assign it to ContextMenuItem.$element.\r\n        var $allItems = $("li.k-item[role=menuitem]", this.$contextMenu);\r\n        var self = this;\r\n        $allItems.each(function () {\r\n            var $item = $(this),\r\n                data = $item.data("data");\r\n            if (data) {\r\n                var menuItemId = JSON.parse(data);\r\n                var menuItem = self.menuItemMap[menuItemId];\r\n                menuItem.$element = $item;\r\n            }\r\n        });\r\n\r\n        // Close all other ContextMenus when a particular ContextMenu popup.\r\n        $(this.anchor).bind(\'contextmenu\', function () {\r\n            var id;\r\n            for (id in contextMenuMap) {\r\n                if (contextMenuMap.hasOwnProperty(id)) {\r\n                    if (id !== self.id) {\r\n                        contextMenuMap[id].close();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Select handler\r\n     */\r\n    ContextMenu.prototype._selected = function (e) {\r\n        var menuId = JSON.parse(e.item.dataset.data);\r\n\r\n        // Execute Command\r\n        CommandManager.execute(menuId);\r\n\r\n        // Hide remained sub-context menu\r\n        $("div.k-animation-container", this.$contextMenu).hide();\r\n        $(".k-state-active", this.$contextMenu).removeClass("k-state-active");\r\n        $(".k-state-border-down", this.$contextMenu).removeClass("k-state-border-down");\r\n    };\r\n\r\n    /**\r\n     * Close ContextMenu\r\n     */\r\n    ContextMenu.prototype.close = function () {\r\n        if (this._kendoObject) {\r\n            this._kendoObject.hide();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get Menu Item\r\n     * @param {string} id\r\n     * @return {ContextMenuItem}\r\n     */\r\n    ContextMenu.prototype.getMenuItem = function (id) {\r\n        return this.menuItemMap[id];\r\n    };\r\n\r\n    /**\r\n     * ContextMenuItem Object\r\n     * @constructor\r\n     */\r\n    function ContextMenuItem(id, command, contextMenu, dataItem, isDivider) {\r\n        ContextMenuEntry.call(this, id, contextMenu, dataItem);\r\n        this.isDivider = isDivider;\r\n        if (!this.isDivider) {\r\n            // Bind event handlers\r\n            this._enabledChanged = this._enabledChanged.bind(this);\r\n            this._checkedChanged = this._checkedChanged.bind(this);\r\n            this._visibleChanged = this._visibleChanged.bind(this);\r\n            this._nameChanged = this._nameChanged.bind(this);\r\n            this._keyBindingAdded = this._keyBindingAdded.bind(this);\r\n            this._keyBindingRemoved = this._keyBindingRemoved.bind(this);\r\n            this._command = command;\r\n            $(this._command)\r\n                .on("enabledStateChange", this._enabledChanged)\r\n                .on("checkedStateChange", this._checkedChanged)\r\n                .on("visibleStateChange", this._visibleChanged)\r\n                .on("nameChange", this._nameChanged)\r\n                .on("keyBindingAdded", this._keyBindingAdded)\r\n                .on("keyBindingRemoved", this._keyBindingRemoved);\r\n        }\r\n    }\r\n    ContextMenuItem.prototype = Object.create(ContextMenuEntry.prototype);\r\n    ContextMenuItem.prototype.constructor = ContextMenuItem;\r\n    ContextMenuItem.prototype.parentClass = ContextMenuEntry.prototype;\r\n\r\n    /**\r\n     * Synchronizes MenuItem checked state with underlying Command checked state\r\n     */\r\n    ContextMenuItem.prototype._checkedChanged = function () {\r\n        if (this.$element) {\r\n            var $inside = $("span.k-link", this.$element),\r\n                $checkIcon = $inside.children("span.k-i-tick"),\r\n                checked = !!this._command.getChecked();\r\n            if (checked) {\r\n                if ($checkIcon.length === 0) {\r\n                    $inside.prepend("<span class=\'k-icon k-i-tick\'></span>");\r\n                }\r\n            } else {\r\n                $checkIcon.remove();\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Synchronizes MenuItem enabled state with underlying Command enabled state\r\n     */\r\n    ContextMenuItem.prototype._enabledChanged = function () {\r\n        if (this.$element) {\r\n            var enabled = !!this._command.getEnabled();\r\n            this.$element.toggleClass("k-state-disabled", !enabled);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Synchronizes MenuItem visible state with underlying Command visible state\r\n     */\r\n    ContextMenuItem.prototype._visibleChanged = function () {\r\n        if (this.$element) {\r\n            var visible = !!this._command.getVisible();\r\n            this.$element.toggle(visible);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Synchronizes MenuItem name with underlying Command name\r\n     */\r\n    ContextMenuItem.prototype._nameChanged = function () {\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Updates MenuItem DOM with a keyboard shortcut label\r\n     */\r\n    ContextMenuItem.prototype._keyBindingAdded = function (event, keyBinding) {\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Updates MenuItem DOM to remove keyboard shortcut label\r\n     */\r\n    ContextMenuItem.prototype._keyBindingRemoved = function (event, keyBinding) {\r\n    };\r\n\r\n\r\n    /**\r\n     * Add ContextMenu\r\n     * @param {string} id Unique identifier for ContextMenu.\r\n     * @param {string} anchor JQuery selector string where context menu will be applied.\r\n     * @return {ContextMenu} ContextMenu Object\r\n     */\r\n    function addContextMenu(id, anchor) {\r\n        var contextMenu,\r\n            $contextMenu;\r\n\r\n        // Insert ContextMenu Holder DIV to Body DOM.\r\n        $contextMenu = $(Mustache.render("<ul data-id=\'{{id}}\'/>", { id: id }));\r\n        $(document.body).append($contextMenu);\r\n\r\n        // Register to ContextMenuMap\r\n        contextMenu = new ContextMenu(id, anchor, $contextMenu);\r\n        contextMenuMap[id] = contextMenu;\r\n\r\n        return contextMenu;\r\n    }\r\n\r\n    /**\r\n     * Remove ContextMenu\r\n     * @param {string} id Unique identifier for ContextMenu.\r\n     */\r\n    function removeContextMenu(id) {\r\n        delete contextMenuMap[id];\r\n    }\r\n\r\n    /**\r\n     * Get ContextMenu Object\r\n     * @param {string} id Unique identifier for ContextMenu.\r\n     * @return {ContextMenu} ContextMenu Object\r\n     */\r\n    function getContextMenu(id) {\r\n        return contextMenuMap[id];\r\n    }\r\n\r\n    /**\r\n     * Return All ContextMenu Objects\r\n     * @return {Array.<ContextMenu>} Array of all ContextMenu Objects.\r\n     */\r\n    function getAllContextMenus() {\r\n        return _.values(contextMenuMap);\r\n    }\r\n\r\n    AppInit.appReady(function () {\r\n        // Setup all contextMenu with KendoMenuEx\r\n        var id,\r\n            contextMenu;\r\n        for (id in contextMenuMap) {\r\n            if (contextMenuMap.hasOwnProperty(id)) {\r\n                contextMenu = contextMenuMap[id];\r\n\r\n                if (!contextMenu.dataItem.items) {\r\n                    console.error("Setup ContextMenu: No MenuItems of ContextMenu: " + contextMenu.id);\r\n                } else {\r\n\r\n                    // Setup KendoMenuEx Object\r\n                    contextMenu._kendoObject = contextMenu.$contextMenu.kendoMenuEx({\r\n                        animation: false,\r\n                        delay: 120,\r\n                        dataSource: contextMenu.dataItem.items,\r\n                        anchor: contextMenu.anchor,\r\n                        select: contextMenu._selected\r\n                    }).data("kendoMenuEx");\r\n\r\n                    // Initialize ContextMenu Object\r\n                    contextMenu._initializeMenuItems();\r\n\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    exports.BEFORE           = BEFORE;\r\n    exports.AFTER            = AFTER;\r\n    exports.LAST             = LAST;\r\n    exports.FIRST            = FIRST;\r\n    exports.FIRST_IN_SECTION = FIRST_IN_SECTION;\r\n    exports.LAST_IN_SECTION  = LAST_IN_SECTION;\r\n\r\n    exports.addContextMenu     = addContextMenu;\r\n    exports.removeContextMenu  = removeContextMenu;\r\n    exports.getContextMenu     = getContextMenu;\r\n    exports.getAllContextMenus = getAllContextMenus;\r\n\r\n});\r\n\n//# sourceURL=/menu/ContextMenuManager.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, app */\r\n\r\ndefine(\'preference/DefaultPreferences\',[\'require\',\'exports\',\'module\',\'core/Global\',\'utils/Initializer\',\'utils/AppInit\',\'core/Core\',\'core/PreferenceManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var _global           = require("core/Global").global,\r\n        Initializer       = require("utils/Initializer"),\r\n        AppInit           = require("utils/AppInit"),\r\n        Core              = require("core/Core"),\r\n        PreferenceManager = require("core/PreferenceManager");\r\n\r\n    var generalPreferences = {\r\n        "view": {\r\n            text: "Default View Style",\r\n            type: "Section"\r\n        },\r\n        "view.font": {\r\n            text: "Font Face",\r\n            description: "Default font face of view elements.",\r\n            type: "Combo",\r\n            options: app.config.defaultFonts,\r\n            default: "Arial"\r\n        },\r\n        "view.fontSize": {\r\n            text: "Font Size",\r\n            description: "Default font size of view elements.",\r\n            type: "Combo",\r\n            options: [\r\n                { value: 8,  text: "8"  },\r\n                { value: 9,  text: "9"  },\r\n                { value: 10, text: "10" },\r\n                { value: 11, text: "11" },\r\n                { value: 12, text: "12" },\r\n                { value: 13, text: "13" },\r\n                { value: 14, text: "14" },\r\n                { value: 16, text: "16" },\r\n                { value: 20, text: "20" },\r\n                { value: 24, text: "24" },\r\n                { value: 28, text: "28" },\r\n                { value: 32, text: "32" }\r\n            ],\r\n            default: 13\r\n        },\r\n        "view.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Default fill color of view elements.",\r\n            type: "Color",\r\n            default: "#ffffff"\r\n        },\r\n        "view.lineColor": {\r\n            text: "Line Color",\r\n            description: "Default line color of view elements.",\r\n            type: "Color",\r\n            default: "#000000"\r\n        },\r\n        "view.fontColor": {\r\n            text: "Font Color",\r\n            description: "Default font color of view elements.",\r\n            type: "Color",\r\n            default: "#000000"\r\n        },\r\n        "view.lineStyle": {\r\n            text: "Line Style",\r\n            description: "Default line style of edge-type view elements.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: Core.LS_RECTILINEAR, text: "Rectilinear" },\r\n                { value: Core.LS_OBLIQUE,     text: "Oblique" },\r\n                { value: Core.LS_ROUNDRECT,   text: "Rounded Rectilinear" },\r\n                { value: Core.LS_CURVE,       text: "Curve" }\r\n            ],\r\n            default: Core.LS_OBLIQUE\r\n        },\r\n        "view.showShadow": {\r\n            text: "Show Shadow",\r\n            description: "Default showing shadow of view elements.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "diagramEditor": {\r\n            text: "DiagramEditor",\r\n            type: "Section"\r\n        },\r\n        "diagramEditor.showGrid": {\r\n            text: "Show Grid",\r\n            description: "Show grid on diagram editor.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "diagramEditor.gridSize": {\r\n            text: "Grid Size",\r\n            description: "Default size (width and height) of grid.",\r\n            type: "Combo",\r\n            options: [\r\n                { value: 2,  text: "2"  },\r\n                { value: 4,  text: "4"  },\r\n                { value: 6,  text: "6" },\r\n                { value: 8,  text: "8" },\r\n                { value: 10, text: "10" },\r\n                { value: 12, text: "12" },\r\n                { value: 14, text: "14" },\r\n                { value: 16, text: "16" },\r\n                { value: 18, text: "18" },\r\n                { value: 20, text: "20" }\r\n            ],\r\n            default: 8\r\n        },\r\n        "validation": {\r\n            text: "Validation",\r\n            type: "Section"\r\n        },\r\n        "validation.validateModel": {\r\n            text: "Validate Model",\r\n            description: "Validate model asynchronously when opening or saving files.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "checkUpdate": {\r\n            text: "Check Updates",\r\n            type: "Section"\r\n        },\r\n        "checkUpdate.showUpdateDialog": {\r\n            text: "Show Update Dialog",\r\n            description: "Show update dialog when application start.",\r\n            type: "Check",\r\n            default: true\r\n        }\r\n    };\r\n\r\n    AppInit.htmlReady(function () {\r\n        PreferenceManager.register("general", "General", generalPreferences);\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/preference/DefaultPreferences.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, document, appshell */\r\n\r\ndefine(\r\n    /**\r\n     * Editor\r\n     * @exports core/Editor\r\n     */\r\n    'diagrams/Editor',['require','exports','module','core/Graphics','core/Graphics','core/Graphics','core/Graphics','core/Graphics','core/Graphics','core/Graphics','core/Graphics','core/Graphics','core/Toolkit','core/Core','core/Core','core/Core','core/Core','core/Core','core/Core','core/Core','core/Core'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var Point             = require(\"core/Graphics\").Point,\r\n        Rect              = require(\"core/Graphics\").Rect,\r\n        Color             = require(\"core/Graphics\").Color,\r\n        Font              = require(\"core/Graphics\").Font,\r\n        ZoomFactor        = require(\"core/Graphics\").ZoomFactor,\r\n        GridFactor        = require(\"core/Graphics\").GridFactor,\r\n        Points            = require(\"core/Graphics\").Points,\r\n        Coord             = require(\"core/Graphics\").Coord,\r\n        Canvas            = require(\"core/Graphics\").Canvas,\r\n        Toolkit           = require(\"core/Toolkit\"),\r\n        Core              = require(\"core/Core\"),\r\n        NodeView          = require(\"core/Core\").NodeView,\r\n        EdgeView          = require(\"core/Core\").EdgeView,\r\n        LabelView         = require(\"core/Core\").LabelView,\r\n        ParasiticView     = require(\"core/Core\").ParasiticView,\r\n        NodeParasiticView = require(\"core/Core\").NodeParasiticView,\r\n        EdgeParasiticView = require(\"core/Core\").EdgeParasiticView,\r\n        EdgeLabelView     = require(\"core/Core\").EdgeLabelView;\r\n\r\n    var DEFAULT_CANVAS_WIDTH  = 4000,\r\n        DEFAULT_CANVAS_HEIGHT = 3000;\r\n\r\n    // Reduce Max-size Canvas (to avoid Crashes in Windows)\r\n    if (window.devicePixelRatio && window.devicePixelRatio > 1) {\r\n        DEFAULT_CANVAS_WIDTH  = 2700;\r\n        DEFAULT_CANVAS_HEIGHT = 2000;\r\n    }\r\n\r\n    var CURSOR_DEFAULT     = 'default',\r\n        CURSOR_CROSSHAIR   = 'crosshair',\r\n        CURSOR_TEXT        = 'text',\r\n        CURSOR_WAIT        = 'wait',\r\n        CURSOR_SW_RESIZE   = 'sw-resize',\r\n        CURSOR_SE_RESIZE   = 'se-resize',\r\n        CURSOR_NW_RESIZE   = 'nw-resize',\r\n        CURSOR_NE_RESIZE   = 'ne-resize',\r\n        CURSOR_N_RESIZE    = 'n-resize',\r\n        CURSOR_S_RESIZE    = 's-resize',\r\n        CURSOR_W_RESIZE    = 'w-resize',\r\n        CURSOR_E_RESIZE    = 'e-resize',\r\n        CURSOR_NESW_RESIZE = 'nesw-resize',\r\n        CURSOR_NWSE_RESIZE = 'nwse-resize',\r\n        CURSOR_NS_RESIZE   = 'ns-resize',\r\n        CURSOR_EW_RESIZE   = 'ew-resize',\r\n        CURSOR_HAND        = 'pointer',\r\n        CURSOR_MOVE        = 'move';\r\n\r\n    /**\r\n     * @constructor\r\n     *\r\n     * MouseEvent\r\n     */\r\n    function MouseEvent(x, y, button, count, shiftDown, altDown, ctrlDown) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.button = button;\r\n        this.count = count;\r\n        this.shiftDown = shiftDown;\r\n        this.altDown = altDown;\r\n        this.ctrlDown = ctrlDown;\r\n        this.leftButtonDown = false;\r\n    }\r\n\r\n    /* MouseEvent Constants */\r\n    MouseEvent.BUTTON1 = 0;\r\n    MouseEvent.BUTTON2 = 1;\r\n    MouseEvent.BUTTON3 = 2;\r\n\r\n    /**\r\n     * @constructor\r\n     *\r\n     * Handler\r\n     */\r\n    function Handler() {\r\n        this.handlerName = null;\r\n        this.containerView = null;\r\n    }\r\n\r\n    /**\r\n     * mouseDown\r\n     * @abstract\r\n     * @param {Editor} editor\r\n     * @param {Canvas} canvas\r\n     * @param {Event} e\r\n     */\r\n    Handler.prototype.mouseDown = function (editor, canvas, e) {};\r\n\r\n    /**\r\n     * mouseUp\r\n     * @abstract\r\n     * @param {Editor} editor\r\n     * @param {Canvas} canvas\r\n     * @param {Event} e\r\n     */\r\n    Handler.prototype.mouseUp = function (editor, canvas, e) {};\r\n\r\n    /**\r\n     * mouseUp\r\n     * @abstract\r\n     * @param {Editor} editor\r\n     * @param {Canvas} canvas\r\n     * @param {Event} e\r\n     */\r\n    Handler.prototype.mouseMove = function (editor, canvas, e) {};\r\n\r\n    /**\r\n     * ManipulatorBinder\r\n     */\r\n    function ManipulatorBinder(selectHandler) {\r\n        this.nodeManipulator = new NodeManipulator();\r\n        this.edgeManipulator = new EdgeManipulator();\r\n        this.parasiticManipulator = new ParasiticManipulator();\r\n    }\r\n\r\n    /**\r\n     * bind\r\n     */\r\n    ManipulatorBinder.prototype.bind = function (view) {\r\n        if (view instanceof ParasiticView) {\r\n            return this.parasiticManipulator;\r\n        } else if (view instanceof NodeView) {\r\n            return this.nodeManipulator;\r\n        } else if (view instanceof EdgeView) {\r\n            return this.edgeManipulator;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * ManipulatorBinder\r\n     */\r\n    function ManipulatableNotifier() {\r\n        // nothing to do.\r\n    }\r\n\r\n    ManipulatableNotifier.prototype.mouseMove = function (editor, canvas, e) {\r\n        if (editor.diagram.selectedViews.length !== 1) {\r\n            editor.setCursor(CURSOR_DEFAULT);\r\n            return;\r\n        }\r\n        var z = new Point(e.x, e.y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, GridFactor.NO_GRID, z);\r\n        var v = editor.diagram.selectedViews[0];\r\n        var p = new Point(e.x, e.y);\r\n\r\n        if (v instanceof NodeView) {\r\n            var zr = v.getBoundingBox(canvas);\r\n            Coord.coordTransform2(canvas.zoomFactor, GridFactor.NO_GRID, zr);\r\n            var mx = (zr.x1 + zr.x2) / 2,\r\n                my = (zr.y1 + zr.y2) / 2;\r\n            var b = true;\r\n            var selectionType = Toolkit.CT_ELSE;\r\n            if ((v.sizable === Core.SZ_NONE) || (v.autoResize === true)) {\r\n                selectionType = Toolkit.CT_ELSE;\r\n                b = false;\r\n            }\r\n            if ((b === true) && ((v.sizable === Core.SZ_FREE) || (v.sizable === Core.SZ_RATIO))) {\r\n                if (Coord.equalPt2(new Point(zr.x1 - Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE, zr.y1 - Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE), p, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE)) {\r\n                    selectionType = Toolkit.CT_LT;\r\n                    b = false;\r\n                } else if (Coord.equalPt2(new Point(zr.x2 + Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE, zr.y1 - Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE), p, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE)) {\r\n                    selectionType = Toolkit.CT_RT;\r\n                    b = false;\r\n                } else if (Coord.equalPt2(new Point(zr.x1 - Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE, zr.y2 + Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE), p, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE)) {\r\n                    selectionType = Toolkit.CT_LB;\r\n                    b = false;\r\n                } else if (Coord.equalPt2(new Point(zr.x2 + Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE, zr.y2 + Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE), p, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE)) {\r\n                    selectionType = Toolkit.CT_RB;\r\n                    b = false;\r\n                }\r\n            }\r\n            if ((b === true) && ((v.sizable === Core.SZ_FREE) || (v.sizable === Core.SZ_VERT))) {\r\n                if (Coord.equalPt2(new Point(mx, zr.y1 - Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE), p, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE)) {\r\n                    selectionType = Toolkit.CT_MT;\r\n                    b = false;\r\n                } else if (Coord.equalPt2(new Point(mx, zr.y2 + Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE), p, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE)) {\r\n                    selectionType = Toolkit.CT_MB;\r\n                    b = false;\r\n                }\r\n            }\r\n            if ((b === true) && ((v.sizable === Core.SZ_FREE) || (v.sizable === Core.SZ_HORZ))) {\r\n                if (Coord.equalPt2(new Point(zr.x1 - Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE, my), p, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE)) {\r\n                    selectionType = Toolkit.CT_LM;\r\n                    b = false;\r\n                } else if (Coord.equalPt2(new Point(zr.x2 + Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE, my), p, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE)) {\r\n                    selectionType = Toolkit.CT_RM;\r\n                    b = false;\r\n                }\r\n            }\r\n            if (b === true) {\r\n                selectionType = Toolkit.CT_ELSE;\r\n            }\r\n            switch (selectionType) {\r\n            case Toolkit.CT_LT:\r\n            case Toolkit.CT_RB:\r\n                editor.setCursor(CURSOR_NWSE_RESIZE);\r\n                break;\r\n            case Toolkit.CT_RT:\r\n            case Toolkit.CT_LB:\r\n                editor.setCursor(CURSOR_NESW_RESIZE);\r\n                break;\r\n            case Toolkit.CT_MT:\r\n            case Toolkit.CT_MB:\r\n                editor.setCursor(CURSOR_NS_RESIZE);\r\n                break;\r\n            case Toolkit.CT_LM:\r\n            case Toolkit.CT_RM:\r\n                editor.setCursor(CURSOR_EW_RESIZE);\r\n                break;\r\n            case Toolkit.CT_AREA:\r\n                editor.setCursor(CURSOR_MOVE);\r\n                break;\r\n            case Toolkit.CT_ELSE:\r\n                editor.setCursor(CURSOR_DEFAULT);\r\n                break;\r\n            }\r\n        } else if (v instanceof EdgeView) {\r\n            var zp1 = v.points.getPoint(0).copy(),\r\n                zp2 = v.points.getPoint(v.points.count() - 1).copy();\r\n            Coord.coordTransform(canvas.zoomFactor, GridFactor.NO_GRID, zp1);\r\n            Coord.coordTransform(canvas.zoomFactor, GridFactor.NO_GRID, zp2);\r\n            if (Coord.equalPt2(zp1, p, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE)) {\r\n                editor.setCursor(CURSOR_HAND);\r\n            } else if (Coord.equalPt2(zp2, p, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE)) {\r\n                editor.setCursor(CURSOR_HAND);\r\n            } else {\r\n                editor.setCursor(CURSOR_DEFAULT);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * ContainmentHandlingProxy\r\n     */\r\n    function ContainmentHandlingProxy() {\r\n        this.containerView = null;\r\n        this.activated = true;\r\n    }\r\n\r\n    ContainmentHandlingProxy.prototype.canBeContainedAt = function (view, targetView) {\r\n        if ((view === null) || (targetView === null) || (view.model === null) || (targetView.model === null)) {\r\n            return false;\r\n        }\r\n        return targetView.canContainView(view) && targetView.model.canContain(view.model);\r\n    };\r\n\r\n    ContainmentHandlingProxy.prototype.canBeContainedAt2 = function (viewSet, targetView) {\r\n        for (var i = 0, len = viewSet.length; i < len; i++) {\r\n            if (!this.canBeContainedAt(viewSet[i], targetView)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    ContainmentHandlingProxy.prototype.beginHandling = function (editor) {\r\n        this.containerView = null;\r\n        this.activated = true;\r\n    };\r\n\r\n    ContainmentHandlingProxy.prototype.mouseMoveHandling = function (editor, canvas, view, targetView) {\r\n        if ((!this.activated) || (view === null)) {\r\n            return;\r\n        }\r\n        if (this.containerView !== null) {\r\n            editor.eraseContainingBox(this.containerView);\r\n        }\r\n        if (targetView === null) {\r\n            this.containerView = null;\r\n        } else if (this.canBeContainedAt(view, targetView)) {\r\n            this.containerView = targetView;\r\n        } else {\r\n            this.containerView = view.containerView;\r\n        }\r\n        if (this.containerView !== null) {\r\n            editor.drawContainingBox(this.containerView);\r\n        }\r\n    };\r\n\r\n    ContainmentHandlingProxy.prototype.mouseMoveHandling2 = function (editor, canvas, viewSet, targetView) {\r\n        if ((!this.activated) || (viewSet.length === 0)) {\r\n            return;\r\n        }\r\n        if (this.containerView !== null) {\r\n            editor.eraseContainingBox(this.containerView);\r\n        }\r\n        if (this.targetView === null) {\r\n            this.containerView = null;\r\n        } else if (this.canBeContainedAt2(viewSet, targetView)) {\r\n            this.containerView = targetView;\r\n        } else {\r\n            this.containerView = viewSet[0].containerView;\r\n        }\r\n        if (this.containerView !== null) {\r\n            editor.drawContainingBox(this.containerView);\r\n        }\r\n    };\r\n\r\n    ContainmentHandlingProxy.prototype.mouseUpHandling = function (editor, canvas) {\r\n        if (!this.activated) {\r\n            return;\r\n        }\r\n        if (this.containerView !== null) {\r\n            editor.eraseContainingBox(this.containerView);\r\n        }\r\n    };\r\n\r\n    ContainmentHandlingProxy.prototype.endHandling = function (editor) {\r\n        this.activated = false;\r\n        this.containerView = null;\r\n    };\r\n\r\n    /**\r\n     * SelectHandler Constants\r\n     * @const\r\n     */\r\n    var SM_NONE        = 0,\r\n        SM_SELECT_AREA = 1,\r\n        SM_INDIVIDUAL  = 2,\r\n        SM_ADDITIONAL  = 3,\r\n        SM_GROUPING    = 4;\r\n\r\n    /**\r\n     * @constructor\r\n     *\r\n     * SelectHandler\r\n     */\r\n    function SelectHandler() {\r\n        Handler.apply(this, arguments);\r\n        this.mode = SM_NONE;\r\n        this.f1 = new Point(0, 0);\r\n        this.f2 = new Point(0, 0);\r\n        this.g1 = new Point(0, 0);\r\n        this.g2 = new Point(0, 0);\r\n        this.manipulatorBinder = new ManipulatorBinder(this);\r\n        this.manipulatableNotifier = new ManipulatableNotifier();\r\n        this.manipulator = null;\r\n        this.dragged = false;\r\n        this.doubleClicked = false;\r\n        this.boundingBox = new Rect(0, 0, 0, 0);\r\n        this.view = null;\r\n    }\r\n    // SelectHandler inherits Handler\r\n    SelectHandler.prototype = Object.create(Handler.prototype);\r\n    SelectHandler.prototype.constructor = SelectHandler;\r\n\r\n    /**\r\n     * hasTheSameContainerView\r\n     */\r\n    SelectHandler.prototype.hasTheSameContainerView = function (viewSet) {\r\n        if (viewSet.length > 1) {\r\n            var c = viewSet[0].containerView;\r\n            for (var i = 1, len = viewSet.length; i < len; i++) {\r\n                if (viewSet[i].containerView != c) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * isPointInSelectionLine\r\n     */\r\n    SelectHandler.prototype.isPointInSelectionLine = function (canvas, view, x, y) {\r\n        if (view === null) {\r\n            return false;\r\n        }\r\n        if (!view.selected) {\r\n            return false;\r\n        }\r\n        var z = new Point(x, y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, GridFactor.NO_GRID, z);\r\n        if ((view instanceof NodeView) && (view.sizable !== Core.SZ_NONE)) {\r\n            var zr = view.getBoundingBox(canvas);\r\n            Coord.coordTransform2(canvas.zoomFactor, GridFactor.NO_GRID, zr);\r\n            if ((!Coord.ptInRect(x, y, zr)) && view.containsPoint(canvas, z.x, z.y)) {\r\n                return true;\r\n            }\r\n        } else if (view instanceof EdgeView) {\r\n            return view.containsPoint(canvas, z.x, z.y);\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * mouseDown\r\n     *\r\n     * (Notice) Choice of coordinates in PSelectHandler\r\n     * -------------------------------------------------\r\n     * 1. Seleting behavior\r\n     *    - Zoom only applied coordinate\r\n     *    - Use FX1, FY1, FX2, FY2 variable\r\n     * 2. Moving behavior with multiple selected views\r\n     *    - Zoom and grid applied coordinate\r\n     *    - Use GX1, GY1, GX2, GY2 variable\r\n     * 3. Manipulating bevaior with one selected view\r\n     *    - Propagate coordinate to PManipulator as it is\r\n     *    - Convert in PManipulator or it's subclasses\r\n     *\r\n     * @override\r\n     */\r\n    SelectHandler.prototype.mouseDown = function (editor, canvas, e) {\r\n        // ZoomFactor only applied coordinates.\r\n        var x = e.x,\r\n            y = e.y,\r\n            z = new Point(x, y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, GridFactor.NO_GRID, z);\r\n        // ZoomFactor and GridFactor applied coordinates\r\n        var b = new Point(x, y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, canvas.gridFactor, b);\r\n        this.f1.setPoint2(z);\r\n        this.f2.setPoint2(z);\r\n        this.g1.setPoint2(b);\r\n        this.g2.setPoint2(b);\r\n        this.dragged = false;\r\n        this.doubleClicked = false;\r\n        if (editor.diagram.selectedViews.length === 1 && this.isPointInSelectionLine(canvas, editor.diagram.selectedViews[0], x, y)) {\r\n            this.view = editor.diagram.selectedViews[0];\r\n        } else {\r\n            this.view = editor.diagram.getViewAt(canvas, z.x, z.y);\r\n        }\r\n        if (e.button === MouseEvent.BUTTON1) {\r\n            // Area selection mode\r\n            if (this.view === null) {\r\n                this.mode = SM_SELECT_AREA;\r\n                editor.drawRubberband(this.f1.x, this.f1.y, this.f2.x, this.f2.y);\r\n            // Not Area selection mode\r\n            } else {\r\n                // View selection/deselection\r\n                if (e.shiftDown) {\r\n                    // Shift + Mouse Left button down\r\n                    if (this.view.selected) {\r\n                        editor.deselectView(this.view);\r\n                    } else {\r\n                        editor.selectAdditionalView(this.view);\r\n                    }\r\n                } else {\r\n                    // Only mouse left button down\r\n                    if (!this.view.selected) {\r\n                        editor.selectView(this.view);\r\n                    }\r\n                }\r\n                // Selected view(s) modifying mode\r\n                if (editor.diagram.selectedViews.length > 0 && e.shiftDown) {\r\n                    this.mode = SM_ADDITIONAL;\r\n                } else if (editor.diagram.selectedViews.length === 1) {\r\n                    // One view selected\r\n                    this.mode = SM_INDIVIDUAL;\r\n                    if (e.count === 2) {\r\n                        this.doubleClicked = true;\r\n                    }\r\n                    this.manipulator = this.manipulatorBinder.bind(this.view);\r\n                    // propagate mouse down event to suitable manipulator\r\n                    if (this.manipulator !== null) {\r\n                        this.manipulator.mouseDown(editor, canvas, this.view, e);\r\n                    }\r\n                    // Intermin code (Refactoring needed)\r\n                    if (this.manipulator instanceof NodeManipulator) {\r\n                        if (this.view.containerChangeable && (this.manipulator.selectedPtType == Toolkit.CT_ELSE)) {\r\n                            editor.containmentHandlingProxy.beginHandling(editor);\r\n                        }\r\n                    }\r\n                } else if (editor.diagram.selectedViews.length > 1) {\r\n                    this.mode = SM_GROUPING;\r\n                    // Multiple views selected\r\n                    this.boundingBox = editor.diagram.getSelectedBoundingBox(canvas);\r\n                    var vs = [];\r\n                    for (var i = 0, len = editor.diagram.selectedViews.length; i < len; i++) {\r\n                        vs.push(editor.diagram.selectedViews[i]);\r\n                    }\r\n                    if (this.hasTheSameContainerView(vs)) {\r\n                        editor.containmentHandlingProxy.beginHandling(editor);\r\n                    }\r\n                } else {\r\n                    // no selected view\r\n                    this.mode = SM_NONE;\r\n                }\r\n            }\r\n        } else if (e.button === MouseEvent.BUTTON3) {\r\n            if (this.view === null) {\r\n                editor.diagram.deselectAll();\r\n                editor.selectArea(this.f1.x, this.f1.y, this.f2.x, this.f2.y);\r\n            } else if (!this.view.selected) {\r\n                editor.selectView(this.view);\r\n            }\r\n            this.mode = SM_NONE;\r\n        }\r\n        if (this.containerView !== null) { this.containerView = null; }\r\n    };\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    SelectHandler.prototype.mouseMove = function (editor, canvas, e) {\r\n        var b, dx, dy, x, y, z, v;\r\n        // if not mouse left button downed then exit\r\n\r\n        if (e.leftButtonDown !== true) {\r\n            this.manipulatableNotifier.mouseMove(editor, canvas, e);\r\n            return;\r\n        }\r\n\r\n        // ZoomFactor only applied coordinates\r\n        x = e.x;\r\n        y = e.y;\r\n        z = new Point(x, y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, GridFactor.NO_GRID, z);\r\n        // ZoomFactor and GridFactor applied coordinates\r\n        b = new Point(x, y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, canvas.gridFactor, b);\r\n\r\n        // Area selected mode\r\n        if (this.mode === SM_SELECT_AREA) {\r\n            // Erase exist bounding box\r\n            editor.eraseRubberband(this.f1.x, this.f1.y, this.f2.x, this.f2.y);\r\n            this.f2.setPoint2(z);\r\n            // Correct selection area not to stray from canvas\r\n            if (this.f2.x < 0) {\r\n                this.f2.x = 0.0;\r\n            }\r\n            if (this.f2.x > editor.diagramWidth) {\r\n                this.f2.x = editor.diagramWidth;\r\n            }\r\n            if (this.f2.y < 0) {\r\n                this.f2.y = 0.0;\r\n            }\r\n            if (this.f2.y > editor.diagramHeight) {\r\n                this.f2.x = editor.diagramHeight;\r\n            }\r\n            // Draw new bounding box\r\n            editor.drawRubberband(this.f1.x, this.f1.y, this.f2.x, this.f2.y);\r\n        } else {\r\n            // Multiple views selected mode\r\n            if (this.mode === SM_GROUPING) {\r\n\r\n                // View at (z.x, z.y) should be included to make backup for rubberbands\r\n                // Rubberband를 그리기 전에 Backup이 결정되므로, 반드시 manipulator.moveMove가 호출되기 전에\r\n                // Backup View들이 결정되어야만 한다.\r\n                v = editor.diagram.getViewAt(canvas, z.x, z.y);\r\n                if (v !== null) {\r\n                    editor.addBackupView(v);\r\n                }\r\n\r\n                dx = b.x - this.g2.x;\r\n                dy = b.y - this.g2.y;\r\n                this.g2.setPoint2(b);\r\n                if (this.dragged) {\r\n                    // Erase existing bounding box\r\n                    editor.eraseRubberband(this.boundingBox.x1, this.boundingBox.y1, this.boundingBox.x2, this.boundingBox.y2);\r\n                } else {\r\n                    // at starting of drag\r\n                    this.dragged = true;\r\n                }\r\n                // Move bounding box and draw it\r\n                this.boundingBox.x1 = this.boundingBox.x1 + dx;\r\n                this.boundingBox.y1 = this.boundingBox.y1 + dy;\r\n                this.boundingBox.x2 = this.boundingBox.x2 + dx;\r\n                this.boundingBox.y2 = this.boundingBox.y2 + dy;\r\n\r\n                // Correct bounding box not to stray from canvas\r\n                if (this.boundingBox.x1 < 0) {\r\n                    this.g2.x = b.x - this.boundingBox.x1;\r\n                    this.boundingBox.x2 = this.boundingBox.x2 - this.boundingBox.x1;\r\n                    this.boundingBox.x1 = 0;\r\n                }\r\n                if (this.boundingBox.x2 > editor.diagramWidth) {\r\n                    this.g2.x = this.b.x - (this.boundingBox.x2 - editor.diagramWidth);\r\n                    this.boundingBox.x1 = editor.diagramWidth - (this.boundingBox.x2 - this.boundingBox.x1);\r\n                    this.boundingBox.x2 = editor.diagramWidth;\r\n                }\r\n                if (this.boundingBox.y1 < 0) {\r\n                    this.g2.y = b.y - this.boundingBox.y1;\r\n                    this.boundingBox.y2 = this.boundingBox.y2 - this.boundingBox.y1;\r\n                    this.boundingBox.y1 = 0;\r\n                }\r\n                if (this.boundingBox.y2 > editor.diagramHeight) {\r\n                    this.g2.y = b.y - (this.boundingBox.y2 - editor.diagramHeight);\r\n                    this.boundingBox.y1 = editor.diagramHeight - (this.boundingBox.y2 - this.boundingBox.y1);\r\n                    this.boundingBox.y2 = editor.diagramHeight;\r\n                }\r\n                editor.drawRubberband(this.boundingBox.x1, this.boundingBox.y1, this.boundingBox.x2, this.boundingBox.y2);\r\n\r\n                // Test containment relation (Refactoring needed)\r\n                var vs = [];\r\n                for (var i = 0, len = editor.diagram.selectedViews.length; i < len; i++) {\r\n                    vs.push(editor.diagram.selectedViews[i]);\r\n                }\r\n                editor.containmentHandlingProxy.mouseMoveHandling2(editor, canvas, vs, v);\r\n\r\n            // Single view selected mode\r\n            } else if (this.mode === SM_INDIVIDUAL) {\r\n                // View at (z.x, z.y) should be included to make backup for rubberbands\r\n                // Rubberband를 그리기 전에 Backup이 결정되므로, 반드시 manipulator.moveMove가 호출되기 전에\r\n                // Backup View들이 결정되어야만 한다.\r\n                v = editor.diagram.getViewAt(canvas, z.x, z.y);\r\n                if (v !== null) {\r\n                    editor.addBackupView(v);\r\n                }\r\n\r\n                // propagate mouse move event to suitable manipulator\r\n                // [Notice] Each manipulator must translate coordinates.\r\n                if (this.manipulator !== null) {\r\n                    this.manipulator.mouseMove(editor, canvas, this.view, e);\r\n                }\r\n\r\n                // Test containment relation (Refactoring needed)\r\n                if (this.manipulator instanceof NodeManipulator) {\r\n                    if (this.view.containerChangeable && (this.manipulator.selectedPtType === Toolkit.CT_ELSE) && ((this.manipulator.f1.x !== this.manipulator.f2.x) || (this.manipulator.f1.y !== this.manipulator.f2.y))) {\r\n                        editor.containmentHandlingProxy.mouseMoveHandling(editor, canvas, this.view, v);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    SelectHandler.prototype.mouseUp = function (editor, canvas, e) {\r\n        var z = new Point(e.x, e.y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, GridFactor.NO_GRID, z);\r\n        // Area selected mode\r\n        if (this.mode === SM_SELECT_AREA) {\r\n            // Erase existing bounding box\r\n            editor.eraseRubberband(this.f1.x, this.f1.y, this.f2.x, this.f2.y);\r\n            Coord.normalizeRect2(this.f1, this.f2);\r\n            if (!e.shiftDown) { editor.diagram.deselectAll(); }\r\n            editor.selectArea(this.f1.x, this.f1.y, this.f2.x, this.f2.y);\r\n        // Multiple views selected mode\r\n        } else if (this.mode === SM_GROUPING) {\r\n            if (this.dragged) {\r\n                // Erase existing bounding box\r\n                editor.eraseRubberband(this.boundingBox.x1, this.boundingBox.y1, this.boundingBox.x2, this.boundingBox.y2);\r\n            } else if (!e.shiftDown) {\r\n                editor.selectView(this.view);\r\n            }\r\n            editor.containmentHandlingProxy.mouseUpHandling(editor, canvas);\r\n            // Selected views moved\r\n            if (this.g2.x !== this.g1.x || this.g2.y !== this.g1.y) {\r\n                if (editor.containmentHandlingProxy.activated && editor.diagram.selectedViews[0].containerView != editor.containmentHandlingProxy.containerView) {\r\n                    editor.changeSelectedViewsContainer(this.g2.x - this.g1.x, this.g2.y - this.g1.y, editor.containmentHandlingProxy.containerView);\r\n                } else {\r\n                    editor.moveSelectedViews(this.g2.x - this.g1.x, this.g2.y - this.g1.y);\r\n                }\r\n            }\r\n            editor.containmentHandlingProxy.endHandling(editor);\r\n        // Single view selected mode\r\n        } else if (this.mode === SM_INDIVIDUAL) {\r\n            // Test containment relation (Refactoring needed)\r\n            if (this.manipulator instanceof NodeManipulator) {\r\n                if (this.manipulator.selectedPtType == Toolkit.CT_ELSE) {\r\n                    editor.containmentHandlingProxy.mouseUpHandling(editor, canvas);\r\n                }\r\n            }\r\n\r\n            // Propagate mouse up event to suitable manipulator\r\n            if (this.manipulator !== null) {\r\n                this.manipulator.mouseUp(editor, canvas, this.view, e);\r\n            }\r\n            if (editor.containmentHandlingProxy.activated) {\r\n                editor.containmentHandlingProxy.endHandling(editor);\r\n            }\r\n            if (this.doubleClicked) {\r\n                // CAUTION! This event is not occurred. double click event is triggered by canvas.\r\n                editor.viewDoubleClicked(this.view, z.x, z.y);\r\n            }\r\n            this.doubleClicked = false;\r\n        }\r\n        editor.clearBackupViews();\r\n        this.mode = SM_NONE;\r\n    };\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    function CreateHandler(id, skeletonKind, callback) {\r\n        this.id = id;\r\n        this.skeletonKind = skeletonKind;\r\n        this.callback = callback;\r\n        this.leftPressed = false;\r\n        this.f1 = new Point(0, 0);\r\n        this.f2 = new Point(0, 0);\r\n    }\r\n\r\n    // CreateHandler inhertis Handler\r\n    CreateHandler.prototype = Object.create(Handler.prototype);\r\n    CreateHandler.prototype.constructor = CreateHandler;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    CreateHandler.prototype.mouseDown = function (editor, canvas, e) {\r\n        if (e.button === MouseEvent.BUTTON1) {\r\n            this.leftPressed = true;\r\n            var b = new Point(e.x, e.y);\r\n            Coord.coordRevTransform(canvas.zoomFactor, canvas.gridFactor, b);\r\n            this.f1.setPoint2(b);\r\n            this.f2.setPoint2(b);\r\n            editor.drawRubberband(this.f1.x, this.f1.y, this.f2.x, this.f2.y, this.skeletonKind, true);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    CreateHandler.prototype.mouseMove = function (editor, canvas, e) {\r\n        var z = new Point(e.x, e.y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, GridFactor.NO_GRID, z);\r\n        var b = new Point(e.x, e.y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, canvas.gridFactor, b);\r\n        if (this.leftPressed) {\r\n            editor.eraseRubberband(this.f1.x, this.f1.y, this.f2.x, this.f2.y, this.skeletonKind, true);\r\n            switch (this.skeletonKind) {\r\n            case 'rect':\r\n                this.f2.setPoint2(b);\r\n                break;\r\n            case 'line':\r\n                this.f2.setPoint2(z);\r\n                break;\r\n            case 'point':\r\n                this.f2.setPoint2(z);\r\n            }\r\n            if (this.f2.x < 0) {\r\n                this.f2.x = 0;\r\n            }\r\n            if (this.f2.x > editor.diagramWidth) {\r\n                this.f2.x = editor.diagramWidth;\r\n            }\r\n            if (this.f2.y < 0) {\r\n                this.f2.y = 0;\r\n            }\r\n            if (this.f2.y > editor.diagramHeight) {\r\n                this.f2.y = editor.diagramHeight;\r\n            }\r\n            editor.drawRubberband(this.f1.x, this.f1.y, this.f2.x, this.f2.y, this.skeletonKind, true);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    CreateHandler.prototype.mouseUp = function (editor, canvas, e) {\r\n        if (e.button === MouseEvent.BUTTON1) {\r\n            this.leftPressed = false;\r\n            editor.eraseRubberband(this.f1.x, this.f1.y, this.f2.x, this.f2.y, this.skeletonKind, true);\r\n            if (this.callback !== null) {\r\n                this.callback(this.id, editor, this.f1.x, this.f1.y, this.f2.x, this.f2.y);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * @constructor\r\n     *\r\n     * Manipulator\r\n     */\r\n    function Manipulator() {\r\n        this.dragged = false;\r\n        this.f1 = null;\r\n        this.f2 = null;\r\n    }\r\n\r\n    /** @abstract */\r\n    Manipulator.prototype.beginManipulate = function (editor, canvas, view, x, y) {};\r\n\r\n    /** @abstract */\r\n    Manipulator.prototype.drawSkeleton = function (editor, canvas) {};\r\n\r\n    /** @abstract */\r\n    Manipulator.prototype.eraseSkeleton = function (editor, canvas) {};\r\n\r\n    /** @abstract */\r\n    Manipulator.prototype.moveSkeleton = function (editor, canvas, view, delta) {};\r\n\r\n    /** @abstract */\r\n    Manipulator.prototype.endManipulate = function (editor, canvas, view, dx, dy) {};\r\n\r\n    /**\r\n     *\r\n     */\r\n    Manipulator.prototype.mouseDown = function (editor, canvas, view, e) {\r\n        var x, y, z;\r\n        x = e.x;\r\n        y = e.y;\r\n        this.beginManipulate(editor, canvas, view, x, y);\r\n        this.dragged = false;\r\n        z = new Point(x, y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, GridFactor.NO_GRID, z);\r\n        this.f1 = z.copy();\r\n        this.f2 = z.copy();\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    Manipulator.prototype.mouseUp = function (editor, canvas, view, e) {\r\n        if (this.dragged) {\r\n            this.eraseSkeleton(editor, canvas);\r\n        }\r\n        this.endManipulate(editor, canvas, view, this.f2.x - this.f1.x, this.f2.y - this.f1.y);\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    Manipulator.prototype.mouseMove = function (editor, canvas, view, e) {\r\n        var delta, z;\r\n        z = new Point(e.x, e.y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, GridFactor.NO_GRID, z);\r\n        delta = new Point(z.x - this.f2.x, z.y - this.f2.y);\r\n        if (this.dragged) {\r\n            this.eraseSkeleton(editor, canvas);\r\n        } else {\r\n            if ((delta.x !== 0) || (delta.y !== 0)) {\r\n                this.dragged = true;\r\n            }\r\n        }\r\n        this.moveSkeleton(editor, canvas, view, delta);\r\n        this.f2.x = this.f2.x + delta.x;\r\n        this.f2.y = this.f2.y + delta.y;\r\n        if (this.dragged) {\r\n            this.drawSkeleton(editor, canvas);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    function NodeManipulator() {\r\n        Manipulator.apply(this, arguments);\r\n        this.minX = 0;\r\n        this.minY = 0;\r\n        this.movable = Core.MM_FREE;\r\n        this.sizable = Core.SZ_FREE;\r\n        this.left = 0;\r\n        this.top = 0;\r\n        this.right = 0;\r\n        this.bottom = 0;\r\n        this.minRect = null;\r\n        this.originRect = null;\r\n        this.ratio = 0;\r\n        this.selectedPtType = 0;\r\n    }\r\n\r\n    // NodeManipulator inherits Manipulator\r\n    NodeManipulator.prototype = Object.create(Manipulator.prototype);\r\n    NodeManipulator.prototype.constructor = NodeManipulator;\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.gridFitX = function (canvas, x) {\r\n        return x - (x % canvas.gridFactor.width);\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.gridFitY = function (canvas, y) {\r\n        return y - (y % canvas.gridFactor.height);\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.resizeSkeletonLeft = function (canvas, delta) {\r\n        var _ref;\r\n        if ((this.left + delta.x) >= this.minRect.x1) {\r\n            delta.x = this.minRect.x1 - this.left;\r\n            this.left = this.minRect.x1;\r\n        } else if ((this.originRect.x1 <= (_ref = this.left + delta.x) && _ref <= (this.gridFitX(canvas, this.originRect.x1) + canvas.gridFactor.width))) {\r\n            delta.x = this.originRect.x1 - this.left;\r\n            this.left = this.originRect.x1;\r\n        } else {\r\n            delta.x = delta.x - ((this.left + delta.x) - this.gridFitX(canvas, this.left + delta.x));\r\n            this.left = this.gridFitX(canvas, this.left + delta.x);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.resizeSkeletonRight = function (canvas, delta) {\r\n        var _ref;\r\n        if ((this.right + delta.x) <= this.minRect.x2 || this.gridFitX(canvas, this.right + delta.x) <= this.minRect.x2) {\r\n            delta.x = this.minRect.x2 - this.right;\r\n            this.right = this.minRect.x2;\r\n        } else if ((this.originRect.x2 <= (_ref = this.right + delta.x) && _ref <= (this.gridFitX(canvas, this.originRect.x2) + canvas.gridFactor.width))) {\r\n            delta.x = this.originRect.x2 - this.right;\r\n            this.right = this.originRect.x2;\r\n        } else {\r\n            delta.x = delta.x - ((this.right + delta.x) - this.gridFitX(canvas, this.right + delta.x));\r\n            this.right = this.gridFitX(canvas, this.right + delta.x);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.resizeSkeletonTop = function (canvas, delta) {\r\n        var _ref;\r\n        if ((this.top + delta.y) >= this.minRect.y1) {\r\n            delta.y = this.minRect.y1 - this.top;\r\n            this.top = this.minRect.y1;\r\n        } else if ((this.originRect.y1 <= (_ref = this.top + delta.y) && _ref <= this.gridFitY(canvas, this.originRect.y1) + canvas.gridFactor.height)) {\r\n            delta.y = this.originRect.y1 - this.top;\r\n            this.top = this.originRect.y1;\r\n        } else {\r\n            delta.y = delta.y - ((this.top + delta.y) - this.gridFitY(canvas, this.top + delta.y));\r\n            this.top = this.gridFitY(canvas, this.top + delta.y);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.resizeSkeletonBottom = function (canvas, delta) {\r\n        var _ref;\r\n        if ((this.bottom + delta.y) <= this.minRect.y1 || this.gridFitY(canvas, this.bottom + delta.y) <= this.minRect.y2) {\r\n            delta.y = this.minRect.y2 - this.bottom;\r\n            this.bottom = this.minRect.y2;\r\n        } else if ((this.originRect.y2 <= (_ref = this.bottom + delta.y) && _ref <= this.gridFitY(canvas, this.originRect.y2) + canvas.gridFactor.height)) {\r\n            delta.y = this.originRect.y2 - this.bottom;\r\n            this.bottom = this.originRect.y2;\r\n        } else {\r\n            delta.y = delta.y - ((this.bottom + delta.y) - this.gridFitY(canvas, this.bottom + delta.y));\r\n            this.bottom = this.gridFitY(canvas, this.bottom + delta.y);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.moveSkeletonHorz = function (canvas, delta) {\r\n        var _ref;\r\n        if ((this.originRect.x1 <= (_ref = this.left + delta.x) && _ref <= this.gridFitX(canvas, this.originRect.x1) + canvas.gridFactor.width)) {\r\n            delta.x = this.originRect.x1 - this.left;\r\n            this.left = this.originRect.x1;\r\n            this.right = this.originRect.x2;\r\n        } else {\r\n            delta.x = delta.x - ((this.left + delta.x) - this.gridFitX(canvas, this.left + delta.x));\r\n            this.left = this.gridFitX(canvas, this.left + delta.x);\r\n            this.right = this.left + (this.originRect.x2 - this.originRect.x1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.moveSkeletonVert = function (canvas, delta) {\r\n        var _ref;\r\n        if ((this.originRect.y1 <= (_ref = this.top + delta.y) && _ref <= this.gridFitY(canvas, this.originRect.y1) + canvas.gridFactor.height)) {\r\n            delta.y = this.originRect.y1 - this.top;\r\n            this.top = this.originRect.y1;\r\n            this.bottom = this.originRect.y2;\r\n        } else {\r\n            delta.y = delta.y - ((this.top + delta.y) - this.gridFitY(canvas, this.top + delta.y));\r\n            this.top = this.gridFitY(canvas, this.top + delta.y);\r\n            this.bottom = this.top + (this.originRect.y2 - this.originRect.y1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.restrictNode = function (rect) {\r\n        if (this.selectedPtType === Toolkit.CT_ELSE) {\r\n            if (this.left < rect.x1) {\r\n                this.right = this.right + rect.x1 - this.left;\r\n                this.left = rect.x1;\r\n            } else if (this.right > rect.x2) {\r\n                this.left = this.left + rect.x2 - this.right;\r\n                this.right = rect.x2;\r\n            }\r\n            if (this.top < rect.y1) {\r\n                this.bottom = this.bottom + rect.y1 - this.top;\r\n                this.top = rect.y1;\r\n            } else if (this.bottom > rect.y2) {\r\n                this.top = this.top + rect.y2 - this.bottom;\r\n                this.bottom = rect.y2;\r\n            }\r\n        } else {\r\n            if (this.left < rect.x1) {\r\n                this.left = rect.x1;\r\n            }\r\n            if (this.right > rect.x2) {\r\n                this.right = rect.x2;\r\n            }\r\n            if (this.top < rect.y1) {\r\n                this.top = rect.y1;\r\n            }\r\n            if (this.bottom > rect.y2) {\r\n                this.bottom = rect.y2;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.getPermittedRegion = function (editor, canvas, view) {\r\n        return new Rect(0, 0, editor.diagramWidth, editor.diagramHeight);\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.beginManipulate = function (editor, canvas, view, x, y) {\r\n        var HHS, SW, middleX, middleY, p, r, z, zr;\r\n        this.minX = view.minWidth;\r\n        this.minY = view.minHeight;\r\n        if (view.autoResize) {\r\n            this.sizable = Core.SZ_NONE;\r\n        } else {\r\n            this.sizable = view.sizable;\r\n        }\r\n        this.movable = view.movable;\r\n\r\n        // ZoomFactor only applied coordinates.\r\n        z = new Point(x, y);\r\n        Coord.coordTransform(canvas.zoomFactor, GridFactor.NO_GRID, z);\r\n\r\n        r = view.getBoundingBox(canvas);\r\n        this.originRect = r.copy();\r\n        this.left = r.x1;\r\n        this.top = r.y1;\r\n        this.right = r.x2;\r\n        this.bottom = r.y2;\r\n\r\n        if (this.sizable === Core.SZ_RATIO) {\r\n            this.ratio = (r.x2 - r.x1) / (r.y2 - r.y1);\r\n        }\r\n\r\n        p = new Point(x, y);\r\n        zr = r.copy();\r\n        Coord.coordTransform2(canvas.zoomFactor, GridFactor.NO_GRID, zr);\r\n        middleX = (zr.x1 + zr.x2) / 2;\r\n        middleY = (zr.y1 + zr.y2) / 2;\r\n\r\n        this.selectedPtType = Toolkit.CT_ELSE;\r\n        /*\r\n        SW = Toolkit.DEFAULT_SELECTIONLINE_WIDTH;\r\n        if (this.movable !== Core.MM_NONE && Coord.ptInRect2(p, new Rect(zr.x1 - SW, zr.y1 - SW, zr.x2 + SW, zr.y2 + SW))) {\r\n            this.selectedPtType = Toolkit.CT_AREA;\r\n        }\r\n        */\r\n        HHS = Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE;\r\n        switch (this.sizable) {\r\n        case Core.SZ_NONE:\r\n            this.selectedPtType = Toolkit.CT_ELSE;\r\n            break;\r\n        case Core.SZ_FREE:\r\n        case Core.SZ_RATIO:\r\n            if (Coord.equalPt2(new Point(zr.x1 - HHS, zr.y1 - HHS), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_LT;\r\n            } else if (Coord.equalPt2(new Point(zr.x2 + HHS, zr.y1 - HHS), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_RT;\r\n            } else if (Coord.equalPt2(new Point(zr.x1 - HHS, zr.y2 + HHS), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_LB;\r\n            } else if (Coord.equalPt2(new Point(zr.x2 + HHS, zr.y2 + HHS), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_RB;\r\n            } else if (Coord.equalPt2(new Point(zr.x1 - HHS, middleY), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_LM;\r\n            } else if (Coord.equalPt2(new Point(zr.x2 + HHS, middleY), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_RM;\r\n            } else if (Coord.equalPt2(new Point(middleX, zr.y1 - HHS), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_MT;\r\n            } else if (Coord.equalPt2(new Point(middleX, zr.y2 + HHS), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_MB;\r\n            }\r\n            break;\r\n        case Core.SZ_HORZ:\r\n            if (Coord.equalPt2(new Point(zr.x1 - HHS, middleY), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_LM;\r\n            } else if (Coord.equalPt2(new Point(zr.x2 + HHS, middleY), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_RM;\r\n            }\r\n            break;\r\n        case Core.SZ_VERT:\r\n            if (Coord.equalPt2(new Point(middleX, zr.y1 - HHS), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_MT;\r\n            } else if (Coord.equalPt2(new Point(middleX, zr.y2 + HHS), p, HHS)) {\r\n                this.selectedPtType = Toolkit.CT_MB;\r\n            }\r\n        }\r\n        switch (this.selectedPtType) {\r\n        case Toolkit.CT_AREA:\r\n            break;\r\n        case Toolkit.CT_LT:\r\n        case Toolkit.CT_MT:\r\n        case Toolkit.CT_LM:\r\n            this.minRect = new Rect(this.right - this.minX + 1, this.bottom - this.minY + 1, this.right, this.bottom);\r\n            break;\r\n        case Toolkit.CT_RB:\r\n        case Toolkit.CT_MB:\r\n        case Toolkit.CT_RM:\r\n            this.minRect = new Rect(this.left, this.top, this.left + this.minX - 1, this.top + this.minY - 1);\r\n            break;\r\n        case Toolkit.CT_RT:\r\n            this.minRect = new Rect(this.left, this.bottom - this.minY + 1, this.left + this.minX - 1, this.bottom);\r\n            break;\r\n        case Toolkit.CT_LB:\r\n            this.minRect = new Rect(this.right - this.minX + 1, this.top, this.right, this.top + this.minY - 1);\r\n        }\r\n        switch (this.selectedPtType) {\r\n        case Toolkit.CT_LT:\r\n        case Toolkit.CT_RB:\r\n            editor.setCursor(CURSOR_NWSE_RESIZE);\r\n            break;\r\n        case Toolkit.CT_RT:\r\n        case Toolkit.CT_LB:\r\n            editor.setCursor(CURSOR_NESW_RESIZE);\r\n            break;\r\n        case Toolkit.CT_MT:\r\n        case Toolkit.CT_MB:\r\n            editor.setCursor(CURSOR_NS_RESIZE);\r\n            break;\r\n        case Toolkit.CT_LM:\r\n        case Toolkit.CT_RM:\r\n            editor.setCursor(CURSOR_EW_RESIZE);\r\n            break;\r\n        case Toolkit.CT_AREA:\r\n            editor.setCursor(CURSOR_MOVE);\r\n            break;\r\n        case Toolkit.CT_ELSE:\r\n            editor.setCursor(CURSOR_DEFAULT);\r\n            break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.drawSkeleton = function (editor, canvas) {\r\n        if (this.movable !== Core.MM_NONE || this.sizable !== Core.SZ_NONE) {\r\n            return editor.drawRubberband(this.left, this.top, this.right, this.bottom);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.eraseSkeleton = function (editor, canvas) {\r\n        if (this.movable !== Core.MM_NONE || this.sizable !== Core.SZ_NONE) {\r\n            return editor.eraseRubberband(this.left, this.top, this.right, this.bottom);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.moveSkeleton = function (editor, canvas, view, delta) {\r\n        var horzSizable, vertSizable, _ref, _ref1;\r\n        horzSizable = (_ref = this.sizable) === Core.SZ_HORZ || _ref === Core.SZ_RATIO || _ref === Core.SZ_FREE;\r\n        vertSizable = (_ref1 = this.sizable) === Core.SZ_VERT || _ref1 === Core.SZ_RATIO || _ref1 === Core.SZ_FREE;\r\n        switch (this.selectedPtType) {\r\n        case Toolkit.CT_LT:\r\n            if (horzSizable) {\r\n                this.resizeSkeletonLeft(canvas, delta);\r\n            }\r\n            if (vertSizable) {\r\n                this.resizeSkeletonTop(canvas, delta);\r\n            }\r\n            break;\r\n        case Toolkit.CT_RT:\r\n            if (horzSizable) {\r\n                this.resizeSkeletonRight(canvas, delta);\r\n            }\r\n            if (vertSizable) {\r\n                this.resizeSkeletonTop(canvas, delta);\r\n            }\r\n            break;\r\n        case Toolkit.CT_LB:\r\n            if (horzSizable) {\r\n                this.resizeSkeletonLeft(canvas, delta);\r\n            }\r\n            if (vertSizable) {\r\n                this.resizeSkeletonBottom(canvas, delta);\r\n            }\r\n            break;\r\n        case Toolkit.CT_RB:\r\n            if (horzSizable) {\r\n                this.resizeSkeletonRight(canvas, delta);\r\n            }\r\n            if (vertSizable) {\r\n                this.resizeSkeletonBottom(canvas, delta);\r\n            }\r\n            break;\r\n        case Toolkit.CT_LM:\r\n            if (horzSizable) {\r\n                this.resizeSkeletonLeft(canvas, delta);\r\n            }\r\n            break;\r\n        case Toolkit.CT_RM:\r\n            if (horzSizable) {\r\n                this.resizeSkeletonRight(canvas, delta);\r\n            }\r\n            break;\r\n        case Toolkit.CT_MT:\r\n            if (vertSizable) {\r\n                this.resizeSkeletonTop(canvas, delta);\r\n            }\r\n            break;\r\n        case Toolkit.CT_MB:\r\n            if (vertSizable) {\r\n                this.resizeSkeletonBottom(canvas, delta);\r\n            }\r\n            break;\r\n        case Toolkit.CT_AREA:\r\n        case Toolkit.CT_ELSE:\r\n            switch (this.movable) {\r\n            case Core.MM_HORZ:\r\n                this.moveSkeletonHorz(canvas, delta);\r\n                break;\r\n            case Core.MM_VERT:\r\n                this.moveSkeletonVert(canvas, delta);\r\n                break;\r\n            case Core.MM_FREE:\r\n                this.moveSkeletonHorz(canvas, delta);\r\n                this.moveSkeletonVert(canvas, delta);\r\n            }\r\n        }\r\n        return this.restrictNode(this.getPermittedRegion(editor, canvas, view));\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    NodeManipulator.prototype.endManipulate = function (editor, canvas, view, dx, dy) {\r\n        if (this.movable !== Core.MM_NONE || this.sizable !== Core.SZ_NONE) {\r\n            this.restrictNode(this.getPermittedRegion(editor, canvas, view));\r\n            if (this.selectedPtType === Toolkit.CT_ELSE || this.selectedPtType === Toolkit.CT_AREA) {\r\n                var r = view.getBoundingBox(canvas);\r\n                dx = this.left - r.x1;\r\n                dy = this.top - r.y1;\r\n                var c = editor.containmentHandlingProxy.containerView;\r\n                if (view.containerChangeable && view.containerView !== c) {\r\n                    switch (this.movable) {\r\n                    case Core.MM_HORZ:\r\n                        if (dx !== 0) {\r\n                            editor.changeViewContainer(view, dx, 0, c);\r\n                        }\r\n                        break;\r\n                    case Core.MM_VERT:\r\n                        if (dy !== 0) {\r\n                            editor.changeViewContainer(view, 0, dy, c);\r\n                        }\r\n                        break;\r\n                    case Core.MM_FREE:\r\n                        if (dx !== 0 || dy !== 0) {\r\n                            editor.changeViewContainer(view, dx, dy, c);\r\n                        }\r\n                    }\r\n                } else {\r\n                    switch (this.movable) {\r\n                    case Core.MM_HORZ:\r\n                        if (dx !== 0) {\r\n                            editor.moveView(view, dx, 0, c);\r\n                        }\r\n                        break;\r\n                    case Core.MM_VERT:\r\n                        if (dy !== 0) {\r\n                            editor.moveView(view, 0, dy, c);\r\n                        }\r\n                        break;\r\n                    case Core.MM_FREE:\r\n                        if (dx !== 0 || dy !== 0) {\r\n                            editor.moveView(view, dx, dy, c);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                editor.resizeNode(view, this.left, this.top, this.right, this.bottom);\r\n            }\r\n        }\r\n        editor.setCursor(CURSOR_DEFAULT);\r\n    };\r\n\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    function EdgeManipulator() {\r\n        Manipulator.apply(this, arguments);\r\n        this.points = new Points();\r\n        this.originPoints = new Points();\r\n        this.style = 0;\r\n        this.selectedIndex = 0;\r\n        this.edgeSelectLocation = 0;\r\n    }\r\n\r\n    // EdgeManipulator inherits Manipulator\r\n    EdgeManipulator.prototype = Object.create(Manipulator.prototype);\r\n    EdgeManipulator.prototype.constructor = EdgeManipulator;\r\n\r\n    /** EdgeManipulator Constants */\r\n    EdgeManipulator.SL_TAIL = 0;\r\n    EdgeManipulator.SL_HEAD = 1;\r\n    EdgeManipulator.SL_LINE = 2;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    EdgeManipulator.prototype.beginManipulate = function (editor, canvas, view, x, y) {\r\n        var l, z;\r\n        z = new Point(x, y);\r\n        Coord.coordRevTransform(canvas.zoomFactor, GridFactor.NO_GRID, z);\r\n        l = view;\r\n        this.points.assign(l.points);\r\n        this.style = l.lineStyle;\r\n        if (this.style === Core.LS_RECTILINEAR || this.style === Core.LS_ROUNDRECT) {\r\n            this.selectedIndex = l.selectedPoint(canvas, z);\r\n            if (this.selectedIndex === 0) {\r\n                this.edgeSelectLocation = EdgeManipulator.SL_TAIL;\r\n            } else if (this.selectedIndex === (this.points.count() - 1)) {\r\n                this.edgeSelectLocation = EdgeManipulator.SL_HEAD;\r\n            } else {\r\n                this.edgeSelectLocation = EdgeManipulator.SL_LINE;\r\n                if (this.selectedIndex === -1) {\r\n                    this.selectedIndex = l.containedIndex(canvas, z);\r\n                }\r\n            }\r\n        } else {\r\n            this.selectedIndex = l.selectedPoint(canvas, z);\r\n            if (this.selectedIndex !== 0) {\r\n                this.points.setPoint(0, Coord.getCenter(l.tail.getBoundingBox(canvas)));\r\n            }\r\n            if (this.selectedIndex !== (this.points.count() - 1)) {\r\n                this.points.setPoint(this.points.count() - 1, Coord.getCenter(l.head.getBoundingBox(canvas)));\r\n            }\r\n            if (this.selectedIndex === -1) {\r\n                this.selectedIndex = l.containedIndex(canvas, z);\r\n                this.selectedIndex++;\r\n                this.points.insert(this.selectedIndex, z);\r\n            }\r\n            if (this.selectedIndex === 0) {\r\n                this.edgeSelectLocation = EdgeManipulator.SL_TAIL;\r\n            } else if (this.selectedIndex === (this.points.count() - 1)) {\r\n                this.edgeSelectLocation = EdgeManipulator.SL_HEAD;\r\n            } else {\r\n                this.edgeSelectLocation = EdgeManipulator.SL_LINE;\r\n            }\r\n            if (this.edgeSelectLocation === EdgeManipulator.SL_LINE) {\r\n                editor.setCursor(CURSOR_DEFAULT);\r\n            } else {\r\n                editor.setCursor(CURSOR_HAND);\r\n            }\r\n        }\r\n        this.originPoints.assign(this.points);\r\n    };\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    EdgeManipulator.prototype.endManipulate = function (editor, canvas, view, dx, dy) {\r\n        if ((dx !== 0) || (dy !== 0)) {\r\n            if (this.style === Core.LS_RECTILINEAR || this.style === Core.LS_ROUNDRECT) {\r\n                this.points.reduceOrthoLine();\r\n            } else {\r\n                this.points.reduceLine();\r\n            }\r\n            if (this.edgeSelectLocation === EdgeManipulator.SL_LINE) {\r\n                editor.modifyEdge(view, this.points);\r\n            } else {\r\n                // edgeSelectLocation == SL_HEAD or SL_TAIL\r\n                var v = editor.diagram.getViewAt(canvas, this.points.getPoint(this.selectedIndex).x, this.points.getPoint(this.selectedIndex).y, true);\r\n                var oldPart = null;\r\n                if (this.edgeSelectLocation === EdgeManipulator.SL_TAIL) {\r\n                    oldPart = view.tail;\r\n                } else { // SL_HEAD\r\n                    oldPart = view.head;\r\n                }\r\n                if (v !== null) {\r\n                    if (v === oldPart) {\r\n                        editor.modifyEdge(view, this.points);\r\n                    } else {\r\n                        editor.reconnectEdge(view, this.points, v, this.edgeSelectLocation === EdgeManipulator.SL_TAIL);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return editor.setCursor(CURSOR_DEFAULT);\r\n    };\r\n\r\n    /**\r\n     * Fit x coordinate to grid\r\n     * @param {Canvas} canvas\r\n     * @param {number} y\r\n     */\r\n    EdgeManipulator.prototype.gridFitX = function (canvas, x) {\r\n        return x - (x % canvas.gridFactor.width);\r\n    };\r\n\r\n    /**\r\n     * Fit y coordinate to grid\r\n     * @param {Canvas} canvas\r\n     * @param {number} y\r\n     */\r\n    EdgeManipulator.prototype.gridFitY = function (canvas, y) {\r\n        return y - (y % canvas.gridFactor.height);\r\n    };\r\n\r\n    /**\r\n     * Put point bounds on canvas\r\n     * @param {Editor} editor\r\n     * @param {Point} p\r\n     */\r\n    EdgeManipulator.prototype.putPointBoundsOnCanvas = function (editor, p) {\r\n        if (p.x < 0) {\r\n            p.x = 0;\r\n        } else if (p.x > editor.diagramWidth) {\r\n            p.x = editor.diagramWidth;\r\n        }\r\n        if (p.y < 0) {\r\n            p.y = 0;\r\n        } else if (p.y > editor.diagramHeight) {\r\n            p.y = editor.diagramHeight;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {Editor} editor\r\n     * @param {Canvas} canvas\r\n     * @param {View} view\r\n     * @param {number} delta\r\n     * @override\r\n     */\r\n    EdgeManipulator.prototype.moveSkeleton = function (editor, canvas, view, delta) {\r\n        var op, op1, op2, p, p1, p2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;\r\n        if (this.style === Core.LS_RECTILINEAR || this.style === Core.LS_ROUNDRECT) {\r\n            // Get points at end of the selected line\r\n            p1 = this.points.getPoint(this.selectedIndex).copy();\r\n            if (this.edgeSelectLocation === EdgeManipulator.SL_HEAD) {\r\n                p2 = this.points.getPoint(this.selectedIndex - 1).copy();\r\n            } else {\r\n                p2 = this.points.getPoint(this.selectedIndex + 1).copy();\r\n            }\r\n            op1 = this.originPoints.getPoint(this.selectedIndex).copy();\r\n            if (this.edgeSelectLocation === EdgeManipulator.SL_HEAD) {\r\n                op2 = this.originPoints.getPoint(this.selectedIndex - 1).copy();\r\n            } else {\r\n                op2 = this.originPoints.getPoint(this.selectedIndex + 1).copy();\r\n            }\r\n\r\n            // if move front-end or rear-end point\r\n            if (this.edgeSelectLocation === EdgeManipulator.SL_TAIL || this.edgeSelectLocation === EdgeManipulator.SL_HEAD) {\r\n                if ((p1.x + delta.x >= op1.x) && (p1.x + delta.x <= this.gridFitX(canvas, op1.x) + canvas.gridFactor.width)) {\r\n                    delta.x = op1.x - p1.x;\r\n                    p1.x = op1.x;\r\n                } else {\r\n                    delta.x = delta.x - ((p1.x + delta.x) - this.gridFitX(canvas, p1.x + delta.x));\r\n                    p1.x = this.gridFitX(canvas, p1.x + delta.x);\r\n                }\r\n                if ((p1.y + delta.y >= op1.y) && (p1.y + delta.y <= this.gridFitY(canvas, op1.y) + canvas.gridFactor.height)) {\r\n                    delta.y = op1.y - p1.y;\r\n                    p1.y = op1.y;\r\n                } else {\r\n                    delta.y = delta.y - ((p1.y + delta.y) - this.gridFitY(canvas, p1.y + delta.y));\r\n                    p1.y = this.gridFitY(canvas, p1.y + delta.y);\r\n                }\r\n                if (op1.x === op2.x) {\r\n                    p2.x = p1.x;\r\n                }\r\n                if (op1.y === op2.y) {\r\n                    p2.y = p1.y;\r\n                }\r\n\r\n            // if move line\r\n            } else {\r\n\r\n                // if vertical line selected, move skeleton\r\n                if (p1.x === p2.x) {\r\n                    if ((op1.x <= (_ref2 = p1.x + delta.x) && _ref2 <= this.gridFitX(canvas, op1.x) + canvas.gridFactor.width)) {\r\n                        delta.x = op1.x - p1.x;\r\n                        p1.x = op1.x;\r\n                    } else {\r\n                        delta.x = delta.x - ((p1.x + delta.x) - this.gridFitX(canvas, p1.x + delta.x));\r\n                        p1.x = this.gridFitX(canvas, p1.x + delta.x);\r\n                    }\r\n                    p2.x = p1.x;\r\n\r\n                // if horizontal line selected, move skeleton\r\n                } else if (p1.y === p2.y) {\r\n                    if ((op1.y <= (_ref3 = p1.y + delta.y) && _ref3 <= this.gridFitY(canvas, op1.y) + canvas.gridFactor.height)) {\r\n                        delta.y = op1.y - p1.y;\r\n                        p1.y = op1.y;\r\n                    } else {\r\n                        delta.y = delta.y - ((p1.y + delta.y) - this.gridFitY(canvas, p1.y + delta.y));\r\n                        p1.y = this.gridFitY(canvas, p1.y + delta.y);\r\n                    }\r\n                    p2.y = p1.y;\r\n                }\r\n            }\r\n\r\n            if ((this.edgeSelectLocation === EdgeManipulator.SL_LINE && this.selectedIndex === 0) || (this.edgeSelectLocation === EdgeManipulator.SL_HEAD && this.points.count() === 2)) {\r\n                this.points.insert(0, this.points.getPoint(0).copy());\r\n                this.originPoints.insert(0, this.points.getPoint(0).copy());\r\n                this.selectedIndex++;\r\n            } else if ((this.edgeSelectLocation === EdgeManipulator.SL_LINE && this.selectedIndex === (this.points.count() - 2)) || (this.edgeSelectLocation === EdgeManipulator.SL_TAIL && this.points.count() === 2)) {\r\n                this.points.insert(this.selectedIndex + 1, this.points.getPoint(this.selectedIndex + 1).copy());\r\n                this.originPoints.insert(this.selectedIndex + 1, this.points.getPoint(this.selectedIndex + 1).copy());\r\n            }\r\n\r\n            // Modify points not to stray from Canvas\r\n            this.putPointBoundsOnCanvas(editor, p1);\r\n            this.putPointBoundsOnCanvas(editor, p2);\r\n\r\n            // Re-assign selected points to modified.\r\n            this.points.getPoint(this.selectedIndex).setPoint2(p1);\r\n            if (this.edgeSelectLocation === EdgeManipulator.SL_HEAD) {\r\n                this.points.getPoint(this.selectedIndex - 1).setPoint2(p2);\r\n            } else {\r\n                this.points.getPoint(this.selectedIndex + 1).setPoint2(p2);\r\n            }\r\n\r\n        } else { // LS_OBLIQUE\r\n            // Get selected point\r\n            p = this.points.getPoint(this.selectedIndex).copy();\r\n            op = this.originPoints.getPoint(this.selectedIndex).copy();\r\n\r\n            // Move skeleton\r\n            if ((op.x <= (_ref4 = p.x + delta.x) && _ref4 <= this.gridFitX(canvas, op.x) + canvas.gridFactor.width)) {\r\n                delta.x = op.x - p.x;\r\n                p.x = op.x;\r\n            } else {\r\n                delta.x = delta.x - ((p.x + delta.x) - this.gridFitX(canvas, p.x + delta.x));\r\n                p.x = this.gridFitX(canvas, p.x + delta.x);\r\n            }\r\n            if ((op.y <= (_ref5 = p.y + delta.y) && _ref5 <= this.gridFitY(canvas, op.y) + canvas.gridFactor.height)) {\r\n                delta.y = op.y - p.y;\r\n                p.y = op.y;\r\n            } else {\r\n                delta.y = delta.y - ((p.y + delta.y) - this.gridFitY(canvas, p.y + delta.y));\r\n                p.y = this.gridFitY(canvas, p.y + delta.y);\r\n            }\r\n\r\n            // Modify point not to stray from Canvas\r\n            this.putPointBoundsOnCanvas(editor, p);\r\n\r\n            // Re-assign selected point to modified.\r\n            this.points.setPoint(this.selectedIndex, p);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    EdgeManipulator.prototype.drawSkeleton = function (editor, canvas) {\r\n        return editor.drawRubberlines(this.points);\r\n    };\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    EdgeManipulator.prototype.eraseSkeleton = function (editor, canvas) {\r\n        return editor.eraseRubberlines(this.points);\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    function ParasiticManipulator() {\r\n        NodeManipulator.apply(this, arguments);\r\n    }\r\n\r\n    // ParasiticManipulator inhertis NodeManipulator\r\n    ParasiticManipulator.prototype = Object.create(NodeManipulator.prototype);\r\n    ParasiticManipulator.prototype.constructor = ParasiticManipulator;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    ParasiticManipulator.prototype.endManipulate = function (editor, canvas, view, dx, dy) {\r\n        var ad, edge, midPointIndex, node, p1, p2;\r\n        if (dx === 0 && dy === 0) {\r\n            return;\r\n        }\r\n        if (this.selectedPtType === Toolkit.CT_ELSE) {\r\n            if (view instanceof NodeParasiticView) {\r\n                node = view.hostNode;\r\n                if (node === null) {\r\n                    node = view._parent;\r\n                }\r\n                p1 = new Point(Math.floor((node.left + node.getRight()) / 2), Math.floor((node.top + node.getBottom()) / 2));\r\n                p2 = p1.copy();\r\n            } else if (view instanceof EdgeParasiticView) {\r\n                edge = view.hostEdge;\r\n                if (edge === null) {\r\n                    edge = view._parent;\r\n                }\r\n                switch (view.edgePosition) {\r\n                case Core.EP_HEAD:\r\n                    p1 = edge.points.getPoint(edge.points.count() - 1).copy();\r\n                    p2 = edge.points.getPoint(edge.points.count() - 2).copy();\r\n                    break;\r\n                case Core.EP_TAIL:\r\n                    p1 = edge.points.getPoint(0).copy();\r\n                    p2 = edge.points.getPoint(1).copy();\r\n                    break;\r\n                case Core.EP_MIDDLE:\r\n                    midPointIndex = Math.floor(edge.points.count() / 2);\r\n                    if ((edge.points.count() % 2) === 0) {\r\n                        midPointIndex--;\r\n                    }\r\n                    p1 = edge.points.getPoint(midPointIndex).copy();\r\n                    p2 = edge.points.getPoint(midPointIndex + 1).copy();\r\n                    if ((edge.points.count() % 2) === 0) {\r\n                        p1.x = Math.floor((p1.x + p2.x) / 2);\r\n                        p1.y = Math.floor((p1.y + p2.y) / 2);\r\n                    }\r\n                }\r\n            }\r\n            var pr = new Rect(p1.x, p1.y, p2.x, p2.y),\r\n                pp = new Point(Math.floor((this.left + this.right) / 2), Math.floor((this.top + this.bottom) / 2));\r\n            ad = Coord.getPolar(pr, pp);\r\n            if (editor !== null) {\r\n                editor.moveParasiticView(view, ad.alpha, ad.distance);\r\n            }\r\n        } else {\r\n            NodeManipulator.prototype.endManipulate.call(this, editor, canvas, view, dx, dy);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 다이어그램 편집기\r\n     *\r\n     * This class dispatches theses events:\r\n     *     - selectionChanged:      (views)\r\n     *     - mouseDown:\r\n     *     - viewDoubleClicked:     (view, x, y)\r\n     *     - viewMoved:             (views, dx, dy)\r\n     *     - parasiticViewMoved:    (view, alpha, distance)\r\n     *     - containerViewChanged:  (views, dx, dy, containerView)\r\n     *     - nodeResized:           (node, left, top, right, bottom)\r\n     *     - edgeModified:          (edge, points)\r\n     *     - edgeReconnected:       (edge, points, newParticipant, isTailSide)\r\n     *\r\n     * @constructor\r\n     */\r\n    function Editor(config) {\r\n        var self = this;\r\n        this.config = config;\r\n        this.canvasId = config.canvasId;\r\n        this.canvasElement = document.getElementById(this.canvasId);\r\n        this.canvas = new Canvas();\r\n        this.canvas.context = this.canvasElement.getContext(\"2d\");\r\n        this.canvas.gridFactor = new GridFactor(4.0, 4.0);\r\n        this.canvas.zoomFactor = new ZoomFactor(1.0, 1.0);\r\n        this.canvasElement.width = DEFAULT_CANVAS_WIDTH;\r\n        this.canvasElement.height = DEFAULT_CANVAS_HEIGHT;\r\n        this.showGrid = true;\r\n        this.backgroundColor = Color.WHITE;\r\n        this.containmentHandlingProxy = new ContainmentHandlingProxy();\r\n        this.diagram = null;\r\n        this.backupViews = [];\r\n        this.backup = null;\r\n        this.backupX = 0;\r\n        this.backupY = 0;\r\n        // Setup for High-DPI (Retina) Display\r\n        if (window.devicePixelRatio) {\r\n            var w = this.canvasElement.width,\r\n                h = this.canvasElement.height;\r\n            this.canvas.ratio = window.devicePixelRatio;\r\n            this.canvasElement.width = w * this.canvas.ratio;\r\n            this.canvasElement.height = h * this.canvas.ratio;\r\n            this.canvasElement.style.width = w + \"px\";\r\n            this.canvasElement.style.height = h + \"px\";\r\n        }\r\n\r\n        // To check mouse left button down in mouse move event.\r\n        this.leftButtonDown = false;\r\n        this.tweakMouseMoveEvent = function (e) {\r\n            // Check from jQuery UI for IE versions < 9\r\n            // if ($.browser.msie && !e.button && !(document.documentMode >= 9)) {\r\n            //     leftButtonDown = false;\r\n            // }\r\n            // If left button is not set, set which to 0\r\n            // This indicates no buttons pressed\r\n            if(e.which === 1 && !self.leftButtonDown) e.which = 0;\r\n        };\r\n\r\n        this.canvasElement.onmouseup = function (e) {\r\n            if (e.which === 1) self.leftButtonDown = false;\r\n            var p = Editor.getMousePos(self.canvasElement, e);\r\n            var evt = new MouseEvent(p.x, p.y, e.button, 1, e.shiftKey, e.altKey, e.ctrlKey);\r\n            if (self.activeHandler !== null) {\r\n                self.activeHandler.mouseUp(self, self.canvas, evt);\r\n            }\r\n            self.mouseDown(evt);\r\n        };\r\n        this.canvasElement.onmousedown = function (e) {\r\n            if (e.which === 1) self.leftButtonDown = true;\r\n            var p = Editor.getMousePos(self.canvasElement, e);\r\n            var evt = new MouseEvent(p.x, p.y, e.button, 1, e.shiftKey, e.altKey, e.ctrlKey);\r\n            if (self.activeHandler !== null) {\r\n                self.activeHandler.mouseDown(self, self.canvas, evt);\r\n            }\r\n        };\r\n        this.canvasElement.onmousemove = function (e) {\r\n            self.tweakMouseMoveEvent(e);\r\n            var p = Editor.getMousePos(self.canvasElement, e);\r\n            var evt = new MouseEvent(p.x, p.y, e.button, 1, e.shiftKey, e.altKey, e.ctrlKey);\r\n            evt.leftButtonDown = self.leftButtonDown;\r\n            if (self.activeHandler) {\r\n                self.activeHandler.mouseMove(self, self.canvas, evt);\r\n            }\r\n        };\r\n        this.canvasElement.ondblclick = function (e) {\r\n            var p = Editor.getMousePos(self.canvasElement, e);\r\n            Coord.coordRevTransform(self.canvas.zoomFactor, GridFactor.NO_GRID, p);\r\n            if (self.diagram) {\r\n                var view = self.diagram.getViewAt(self.canvas, p.x, p.y);\r\n                if (view) {\r\n                    self.viewDoubleClicked(view, p.x, p.y);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    Editor.getMousePos = function (ce, e) {\r\n        var cr = ce.getBoundingClientRect();\r\n        var p = new Point(e.clientX - cr.left, e.clientY - cr.top);\r\n        return p;\r\n    };\r\n\r\n    Editor.prototype.setEnabled = function (enabled) {\r\n        this.canvasElement.style.display = (enabled ? \"\" : \"none\");\r\n    };\r\n\r\n    Editor.prototype.getEnabled = function () {\r\n        return (this.canvasElement.style.display !== \"none\");\r\n    };\r\n\r\n    /**\r\n     * 현재 편집중인 다이어그램 리턴\r\n     *\r\n     * @return {Diagram}\r\n     */\r\n    Editor.prototype.getDiagram = function () {\r\n        return this.diagram;\r\n    };\r\n\r\n    /**\r\n     * 다이어그램 편집 영역의 너비를 설정\r\n     *\r\n     * @param {number} width\r\n     */\r\n    Editor.prototype.setDiagramWidth = function (width) {\r\n        this.canvasElement.width = width;\r\n    };\r\n\r\n    /**\r\n     * 다이어그램 편집 영역의 너비를 리턴\r\n     *\r\n     * @return {number}\r\n     */\r\n    Editor.prototype.getDiagramWidth = function () {\r\n        return this.canvasElement.width;\r\n    };\r\n\r\n    /**\r\n     * 다이어그램 편집 영역의 높이를 설정\r\n     *\r\n     * @param {number} height\r\n     */\r\n    Editor.prototype.setDiagramHeight = function (height) {\r\n        this.canvasElement.height = height;\r\n    };\r\n\r\n    /**\r\n     * 다이어그램 편집 영역의 높이를 리턴\r\n     *\r\n     * @return {number}\r\n     */\r\n    Editor.prototype.getDiagramHeight = function () {\r\n        return this.canvasElement.height;\r\n    };\r\n\r\n    /**\r\n     * 줌 팩터를 리턴\r\n     *\r\n     * @return {ZoomFactor}\r\n     */\r\n    Editor.prototype.getZoomFactor = function () {\r\n        return this.canvas.zoomFactor;\r\n    };\r\n\r\n    /**\r\n     * 그리드 팩터를 리턴\r\n     *\r\n     * @return {GridFactor}\r\n     */\r\n    Editor.prototype.getGridFactor = function () {\r\n        return this.canvas.gridFactor;\r\n    };\r\n\r\n    Editor.prototype.clearBackupViews = function () {\r\n        this.backupViews = [];\r\n    };\r\n\r\n    Editor.prototype.addBackupView = function (view) {\r\n        if (!_.contains(this.backupViews, view)) {\r\n            this.backupViews.push(view);\r\n        }\r\n    };\r\n\r\n    Editor.prototype.drawBackground = function (g) {\r\n        g.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);\r\n        if (this.showGrid) {\r\n            var w  = this.canvas.gridFactor.width * 2 * this.canvas.ratio,\r\n                h  = this.canvas.gridFactor.height * 2 * this.canvas.ratio,\r\n                wc = Math.floor(this.getDiagramWidth() / w),\r\n                hc = Math.floor(this.getDiagramHeight() / h),\r\n                i;\r\n            g.beginPath();\r\n            g.strokeStyle = \"#f5f5f5\";\r\n            for (i = 0; i < wc; i++) {\r\n                g.moveTo(i * w + 0.5, 0);\r\n                g.lineTo(i * w + 0.5, this.canvasElement.height);\r\n            }\r\n            for (i = 0; i < hc; i++) {\r\n                g.moveTo(0, i * h + 0.5);\r\n                g.lineTo(this.canvasElement.width, i * h + 0.5);\r\n            }\r\n            g.stroke();\r\n        }\r\n    };\r\n\r\n    Editor.prototype.drawRubberband = function (x1, y1, x2, y2, kind, showEnds) {\r\n        if (kind === null) {\r\n            kind = \"rect\";\r\n        }\r\n        if (showEnds === null) {\r\n            showEnds = false;\r\n        }\r\n        var rect = new Rect(x1, y1, x2, y2);\r\n        Coord.normalizeRect(rect);\r\n\r\n        // Backup area should include backup views.\r\n        for (var i = 0, len = this.backupViews.length; i < len; i++) {\r\n            var v = this.backupViews[i];\r\n            var vr = v.getBoundingBox();\r\n            Coord.normalizeRect(vr);\r\n            rect.union(vr);\r\n        }\r\n\r\n        rect.expand(20);\r\n        Coord.coordTransform2(this.canvas.zoomFactor, GridFactor.NO_GRID, rect);\r\n\r\n        // for Retina\r\n        rect.x1 = rect.x1 * this.canvas.ratio;\r\n        rect.y1 = rect.y1 * this.canvas.ratio;\r\n        rect.x2 = rect.x2 * this.canvas.ratio;\r\n        rect.y2 = rect.y2 * this.canvas.ratio;\r\n\r\n        this.backupX = rect.x1;\r\n        this.backupY = rect.y1;\r\n        this.backup = this.canvas.context.getImageData(rect.x1, rect.y1, rect.getWidth(), rect.getHeight());\r\n        Toolkit.drawRange(this.canvas, x1, y1, x2, y2, kind, showEnds);\r\n    };\r\n\r\n    Editor.prototype.eraseRubberband = function (x1, y1, x2, y2, kind, showEnds) {\r\n        if (kind === null) {\r\n            kind = \"rect\";\r\n        }\r\n        if (showEnds === null) {\r\n            showEnds = false;\r\n        }\r\n        if (this.backup !== null) {\r\n            this.canvas.context.putImageData(this.backup, this.backupX, this.backupY);\r\n        }\r\n    };\r\n\r\n    Editor.prototype.drawContainingBox = function (view) {\r\n        view.drawContainingBox(this.canvas);\r\n    };\r\n\r\n    Editor.prototype.eraseContainingBox = function (view) {\r\n        view.eraseContainingBox(this.canvas);\r\n    };\r\n\r\n    Editor.prototype.drawRubberlines = function (points) {\r\n        var rect = points.getBoundingRect();\r\n        Coord.normalizeRect(rect);\r\n        rect.expand(20);\r\n        Coord.coordTransform2(this.canvas.zoomFactor, GridFactor.NO_GRID, rect);\r\n\r\n        // for Retina\r\n        rect.x1 = rect.x1 * this.canvas.ratio;\r\n        rect.y1 = rect.y1 * this.canvas.ratio;\r\n        rect.x2 = rect.x2 * this.canvas.ratio;\r\n        rect.y2 = rect.y2 * this.canvas.ratio;\r\n\r\n        this.backupX = rect.x1;\r\n        this.backupY = rect.y1;\r\n        this.backup = this.canvas.context.getImageData(rect.x1, rect.y1, rect.getWidth(), rect.getHeight());\r\n        Toolkit.drawDottedLine(this.canvas, points);\r\n    };\r\n\r\n    Editor.prototype.eraseRubberlines = function (points) {\r\n        if (this.backup !== null) {\r\n            this.canvas.context.putImageData(this.backup, this.backupX, this.backupY);\r\n        }\r\n    };\r\n\r\n    Editor.prototype.browseDiagram = function (diagram) {\r\n        this.diagram = diagram;\r\n        this.repaint();\r\n    };\r\n\r\n    Editor.prototype.repaint = function () {\r\n        if (this.diagram) {\r\n            this.drawBackground(this.canvas.context);\r\n            this.diagram.drawDiagram(this.canvas);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} cursor\r\n     */\r\n    Editor.prototype.setCursor = function (cursor) {\r\n        document.body.style.cursor = cursor;\r\n    };\r\n\r\n    Editor.prototype.selectView = function (view) {\r\n        if (this.diagram) {\r\n            this.diagram.deselectAll();\r\n            this.diagram.selectView(view);\r\n            this.repaint();\r\n            $(this).triggerHandler('selectionChanged', [this.diagram.selectedViews]);\r\n        }\r\n    };\r\n\r\n    Editor.prototype.deselectView = function (view) {\r\n        if (this.diagram) {\r\n            this.diagram.deselectView(view);\r\n            this.repaint();\r\n            $(this).triggerHandler('selectionChanged', [this.diagram.selectedViews]);\r\n        }\r\n    };\r\n\r\n    Editor.prototype.selectAdditionalView = function (view) {\r\n        if (this.diagram) {\r\n            this.diagram.selectView(view);\r\n            this.repaint();\r\n            $(this).triggerHandler('selectionChanged', [this.diagram.selectedViews]);\r\n        }\r\n    };\r\n\r\n    Editor.prototype.selectArea = function (x1, y1, x2, y2) {\r\n        if (this.diagram) {\r\n            this.diagram.deselectAll();\r\n            this.diagram.selectArea(this.canvas, x1, y1, x2, y2);\r\n            this.repaint();\r\n            $(this).triggerHandler('selectionChanged', [this.diagram.selectedViews]);\r\n        }\r\n    };\r\n\r\n    Editor.prototype.selectAll = function () {\r\n        if (this.diagram) {\r\n            this.diagram.selectAll();\r\n            this.repaint();\r\n            $(this).triggerHandler('selectionChanged', [this.diagram.selectedViews]);\r\n        }\r\n    };\r\n\r\n    Editor.prototype.deselectAll = function () {\r\n        if (this.diagram) {\r\n            this.diagram.deselectAll();\r\n            this.repaint();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {Point} point (x, y) of screen.\r\n     * @return {Point} - point on the canvas\r\n     */\r\n    Editor.prototype.convertPosition = function (point) {\r\n        var $canvas = $(\"#\" + this.canvasId);\r\n        var offset = $canvas.offset();\r\n        var p = new Point(point.x - offset.left, point.y - offset.top);\r\n        Coord.coordRevTransform(this.canvas.zoomFactor, GridFactor.NO_GRID, p);\r\n        return p;\r\n    };\r\n\r\n    Editor.prototype.mouseDown = function (event) {\r\n        $(this).triggerHandler('mouseDown', [event]);\r\n    };\r\n\r\n    Editor.prototype.viewDoubleClicked = function (view, x, y) {\r\n        $(this).triggerHandler('viewDoubleClicked', [view, x, y]);\r\n    };\r\n\r\n    Editor.prototype.moveView = function (view, dx, dy) {\r\n        $(this).triggerHandler('viewMoved',[[view], dx, dy]);\r\n    };\r\n\r\n    Editor.prototype.moveSelectedViews = function (dx, dy) {\r\n        $(this).triggerHandler('viewMoved', [this.diagram.selectedViews, dx, dy]);\r\n    };\r\n\r\n    Editor.prototype.moveParasiticView = function (view, alpha, distance) {\r\n        $(this).triggerHandler('parasiticViewMoved', [view, alpha, distance]);\r\n    };\r\n\r\n    Editor.prototype.changeViewContainer = function (view, dx, dy, containerView) {\r\n        $(this).triggerHandler('containerViewChanged', [[view], dx, dy, containerView]);\r\n    };\r\n\r\n    Editor.prototype.changeSelectedViewsContainer = function (dx, dy, containerView) {\r\n        $(this).triggerHandler('containerViewChanged', [this.diagram.selectedViews, dx, dy, containerView]);\r\n    };\r\n\r\n    Editor.prototype.resizeNode = function (node, left, top, right, bottom) {\r\n        $(this).triggerHandler('nodeResized', [node, left, top, right, bottom]);\r\n    };\r\n\r\n    Editor.prototype.modifyEdge = function (edge, points) {\r\n        $(this).triggerHandler('edgeModified', [edge, points]);\r\n    };\r\n\r\n    Editor.prototype.reconnectEdge = function (edge, points, newParticipant, isTailSide) {\r\n        $(this).triggerHandler('edgeReconnected', [edge, points, newParticipant, isTailSide]);\r\n    };\r\n\r\n    // Define Public API\r\n    exports.Handler                  = Handler;\r\n    exports.ManipulatorBinder        = ManipulatorBinder;\r\n    exports.ManipulatableNotifier    = ManipulatableNotifier;\r\n    exports.ContainmentHandlingProxy = ContainmentHandlingProxy;\r\n    exports.SelectHandler            = SelectHandler;\r\n    exports.CreateHandler            = CreateHandler;\r\n    exports.Manipulator              = Manipulator;\r\n    exports.NodeManipulator          = NodeManipulator;\r\n    exports.EdgeManipulator          = EdgeManipulator;\r\n    exports.ParasiticManipulator     = ParasiticManipulator;\r\n    exports.Editor                   = Editor;\r\n\r\n});\r\n\r\n\n//# sourceURL=/diagrams/Editor.js"),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, meta, appshell, kendo, Mustache, type */\r\n\r\n/**\r\n *\r\n * This module dispatches these events:\r\n *     - workingDiagramAdd:     (diagram)\r\n *     - workingDiagramRemove:  (diagram)\r\n *     - workingDiagramUpdate:  (diagram)\r\n *     - currentDiagramChanged: (editor)\r\n *     - repaint:               (editor)\r\n *     - mouseDown:             (mouseEvent)\r\n *     - selectionChanged:      (views)\r\n *     - viewDoubleClicked:     (view, x, y)\r\n *     - viewMoved:             (views, dx, dy)\r\n *     - parasiticViewMoved:    (view, alpha, distance)\r\n *     - containerViewChanged:  (views, dx, dy, containerView)\r\n *     - nodeResized:           (node, left, top, right, bottom)\r\n *     - edgeModified:          (edge, points)\r\n *     - edgeReconnected:       (edge, points, newParticipant, isTailSide)\r\n */\r\n\r\ndefine('diagrams/DiagramManager',['require','exports','module','core/Global','utils/AppInit','core/Repository','engine/ProjectManager','engine/SelectionManager','command/Commands','command/CommandManager','menu/ContextMenuManager','utils/KeyEvent','core/PreferenceManager','preference/DefaultPreferences','core/Graphics','core/Core','core/Core','diagrams/Editor'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var global             = require(\"core/Global\").global,\r\n        AppInit            = require(\"utils/AppInit\"),\r\n        Repository         = require(\"core/Repository\"),\r\n        ProjectManager     = require(\"engine/ProjectManager\"),\r\n        SelectionManager   = require(\"engine/SelectionManager\"),\r\n        Commands           = require(\"command/Commands\"),\r\n        CommandManager     = require(\"command/CommandManager\"),\r\n        ContextMenuManager = require(\"menu/ContextMenuManager\"),\r\n        KeyEvent           = require(\"utils/KeyEvent\"),\r\n        PreferenceManager  = require(\"core/PreferenceManager\"),\r\n        DefaultPreferences = require(\"preference/DefaultPreferences\"),\r\n        Graphics           = require(\"core/Graphics\"),\r\n        Project            = require(\"core/Core\").Project,\r\n        Diagram            = require(\"core/Core\").Diagram,\r\n        Editor             = require(\"diagrams/Editor\").Editor;\r\n\r\n    /**\r\n     * Working diagrams.\r\n     *\r\n     * @private\r\n     * @type {Array.<Diagram>}\r\n     */\r\n    var _workingDiagrams = [];\r\n\r\n    /**\r\n     * Diagram editor.\r\n     *\r\n     * @private\r\n     * @type {Editor}\r\n     */\r\n    var diagramEditor = null;\r\n\r\n    /**\r\n     * Active handler\r\n     *\r\n     * @private\r\n     * @type {Handler}\r\n     */\r\n    var activeHandler = null;\r\n\r\n\r\n    var _doRepaint = true;\r\n\r\n\r\n    var hiddenEditor = null;\r\n\r\n    var $diagramArea;\r\n\r\n    /**\r\n     * Open diagram and add to working set\r\n     *\r\n     * @param {Diagram} diagram\r\n     */\r\n    function openDiagram(diagram) {\r\n        if (diagram) {\r\n            diagramEditor.diagram = diagram;\r\n            if (!_.contains(_workingDiagrams, diagram)) {\r\n                _workingDiagrams.push(diagram);\r\n                $(exports).triggerHandler(\"workingDiagramAdd\", [diagram]);\r\n                _currentDiagramChangedEvent(diagramEditor.diagram);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the diagram.\r\n     *\r\n     * @param {Diagram} diagram\r\n     */\r\n    function updateDiagram(diagram) {\r\n        if (diagram) {\r\n            $(exports).triggerHandler(\"workingDiagramUpdate\", [diagram]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close the diagram.\r\n     *\r\n     * @param {Diagram} diagram\r\n     */\r\n    function closeDiagram(diagram) {\r\n        if (diagram) {\r\n            var index = _.indexOf(_workingDiagrams, diagram);\r\n            if (index >= 0) {\r\n                // Close the diagram\r\n                _workingDiagrams.remove(diagram);\r\n                $(exports).triggerHandler(\"workingDiagramRemove\", [diagram]);\r\n\r\n                // if current diagram is closing\r\n                if (getCurrentDiagram() === diagram) {\r\n                    if (_workingDiagrams.length === 0) {\r\n                        setCurrentDiagram(null);\r\n                    } else if (_workingDiagrams[index]) {\r\n                        setCurrentDiagram(_workingDiagrams[index]);\r\n                    } else {\r\n                        setCurrentDiagram(_workingDiagrams[0]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return all working diagrams.\r\n     *\r\n     * @return {Array.<Diagram>}\r\n     */\r\n    function getWorkingDiagrams() {\r\n        return _workingDiagrams;\r\n    }\r\n\r\n    /**\r\n     * Save a list of working diagrams of current project.\r\n     */\r\n    function saveWorkingDiagrams() {\r\n        var fullPath = ProjectManager.getFilename();\r\n        if (fullPath) {\r\n            var current  = getCurrentDiagram() ? getCurrentDiagram()._id : null,\r\n                ids      = _.map(_workingDiagrams, function (d) { return d._id; }),\r\n                key      = \"_workingDiagrams.\" + fullPath,\r\n                value    = { current: current, workingSet: ids };\r\n            PreferenceManager.set(key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore a list of working diagrams and current diagram of current project.\r\n     */\r\n    function restoreWorkingDiagrams() {\r\n        var fullPath = ProjectManager.getFilename();\r\n        if (fullPath) {\r\n            var key   = \"_workingDiagrams.\" + fullPath,\r\n                value = PreferenceManager.get(key);\r\n            if (value) {\r\n                if (value.workingSet) {\r\n                    for (var i = 0, len = value.workingSet.length; i < len; i++) {\r\n                        var diagram = Repository.get(value.workingSet[i]);\r\n                        if (diagram) {\r\n                            openDiagram(diagram);\r\n                        }\r\n                    }\r\n                }\r\n                if (value.current) {\r\n                    var current = Repository.get(value.current);\r\n                    if (current) {\r\n                        setCurrentDiagram(current);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close all diagrams except active diagram.\r\n     */\r\n    function closeOthers() {\r\n        var active = getCurrentDiagram();\r\n        if (active) {\r\n            closeAll();\r\n            setCurrentDiagram(active);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close all diagrams\r\n     */\r\n    function closeAll() {\r\n        _workingDiagrams = [];\r\n        $(exports).triggerHandler(\"workingDiagramsClear\");\r\n        setCurrentDiagram(null);\r\n    }\r\n\r\n    /**\r\n     * Set current diagram.\r\n     *\r\n     * @param {Diagram} diagram\r\n     * @param {boolean} skipEvent\r\n     */\r\n    function setCurrentDiagram(diagram, skipEvent) {\r\n        if (diagram) {\r\n            diagramEditor.diagram = diagram;\r\n            diagramEditor.setEnabled(true);\r\n            if (!_.contains(_workingDiagrams, diagram)) {\r\n                openDiagram(diagram);\r\n            }\r\n            __fixDiagramProblem(diagram);\r\n            repaint();\r\n            if (!skipEvent) {\r\n                _currentDiagramChangedEvent(diagramEditor.diagram);\r\n            }\r\n        } else {\r\n            diagramEditor.diagram = null;\r\n            diagramEditor.setEnabled(false);\r\n            _currentDiagramChangedEvent(diagramEditor.diagram);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Return current diagram\r\n     *\r\n     * @return {Editor}\r\n     */\r\n    function getCurrentDiagram() {\r\n        if (diagramEditor && diagramEditor.diagram) {\r\n            return diagramEditor.diagram;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Set next diagram as current diagram\r\n     */\r\n    function nextDiagram() {\r\n        var index = _.indexOf(_workingDiagrams, getCurrentDiagram());\r\n        if (index >= 0 && index < _workingDiagrams.length - 1) {\r\n            setCurrentDiagram(_workingDiagrams[index+1]);\r\n        } else if (index > 0 && index == _workingDiagrams.length - 1) {\r\n            setCurrentDiagram(_workingDiagrams[0]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set previous diagram as current diagram\r\n     */\r\n    function previousDiagram() {\r\n        var index = _.indexOf(_workingDiagrams, getCurrentDiagram());\r\n        if (index > 0 && index < _workingDiagrams.length) {\r\n            setCurrentDiagram(_workingDiagrams[index - 1]);\r\n        } else if (index === 0 && _workingDiagrams.length > 0) {\r\n            setCurrentDiagram(_workingDiagrams[_workingDiagrams.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set an active handler.\r\n     *\r\n     * @param {Handler} handler\r\n     */\r\n    function setActiveHandler(handler) {\r\n        activeHandler = handler;\r\n        diagramEditor.activeHandler = activeHandler;\r\n    }\r\n\r\n    /**\r\n     * Return diagram editor.\r\n     *\r\n     * @return {Editor}\r\n     */\r\n    function getEditor() {\r\n        return diagramEditor;\r\n    }\r\n\r\n    /**\r\n     * Return Hidden Editor which is not shown\r\n     */\r\n    function getHiddenEditor() {\r\n        return hiddenEditor;\r\n    }\r\n\r\n    /**\r\n     * Select all view elements.\r\n     */\r\n    function selectAll() {\r\n        diagramEditor.selectAll();\r\n    }\r\n\r\n    /**\r\n     * Deselect all.\r\n     */\r\n    function deselectAll() {\r\n        diagramEditor.deselectAll();\r\n    }\r\n\r\n    /**\r\n     * Select view in diagram. Open diagram if diagram is not opened and then scroll to the view.\r\n     *\r\n     * @param {View} view\r\n     */\r\n    function selectInDiagram(view) {\r\n        var dgm = view.getDiagram();\r\n        setCurrentDiagram(dgm);\r\n        var center = view.getBoundingBox().getCenter();\r\n        scrollTo(center.x, center.y);\r\n        diagramEditor.deselectAll();\r\n        diagramEditor.selectView(view);\r\n        repaint();\r\n    }\r\n\r\n    function needRepaint(changedElements) {\r\n        var repaintRequired = false;\r\n        if (diagramEditor.diagram) {\r\n            if (Array.isArray(changedElements) && changedElements.length > 0) {\r\n                diagramEditor.diagram.traverse(function (v) {\r\n                    if (_.contains(changedElements, v)) {\r\n                        repaintRequired = true;\r\n                    } else if (v instanceof type.View && _.contains(changedElements, v.model)) {\r\n                        repaintRequired = true;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return repaintRequired;\r\n    }\r\n\r\n    function suspendRepaint() {\r\n        _doRepaint = false;\r\n    }\r\n\r\n    function resumeRepaint() {\r\n        _doRepaint = true;\r\n        repaint();\r\n    }\r\n\r\n    /**\r\n     * Repaint.\r\n     */\r\n    function repaint() {\r\n        if (diagramEditor.diagram && _doRepaint) {\r\n            diagramEditor.repaint();\r\n            $(exports).triggerHandler(\"repaint\", [diagramEditor]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set zoom level\r\n     *\r\n     * @param {number} value Zoom level between 0 and 1.\r\n     */\r\n    function setZoomLevel(value) {\r\n        if (value < 0.1) { value = 0.1; }\r\n        if (value > 3) { value = 3; }\r\n        diagramEditor.canvas.zoomFactor.setScale(value);\r\n        repaint();\r\n    }\r\n\r\n    /**\r\n     * Return zoom level\r\n     *\r\n     * @return {number} Zoom level between 0 and 1.\r\n     */\r\n    function getZoomLevel() {\r\n        return diagramEditor.canvas.zoomFactor.getScale();\r\n    }\r\n\r\n    /**\r\n     * Toggle grid\r\n     */\r\n    function toggleGrid() {\r\n        if (diagramEditor.showGrid) {\r\n            hideGrid();\r\n        } else {\r\n            showGrid();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show grid\r\n     */\r\n    function showGrid() {\r\n        diagramEditor.showGrid = true;\r\n        PreferenceManager.set(\"diagramEditor.showGrid\", isGridVisible());\r\n        CommandManager.get(Commands.VIEW_SHOW_GRID).setChecked(isGridVisible());\r\n        repaint();\r\n    }\r\n\r\n    /**\r\n     * Hide grid\r\n     */\r\n    function hideGrid() {\r\n        diagramEditor.showGrid = false;\r\n        PreferenceManager.set(\"diagramEditor.showGrid\", isGridVisible());\r\n        CommandManager.get(Commands.VIEW_SHOW_GRID).setChecked(isGridVisible());\r\n        repaint();\r\n    }\r\n\r\n    /**\r\n     * Return whether grid is visible.\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    function isGridVisible() {\r\n        return diagramEditor.showGrid;\r\n    }\r\n\r\n    /**\r\n     * Return view size.\r\n     *\r\n     * @param {Point} x is width, y is height.\r\n     */\r\n    function getViewportSize() {\r\n        return new Graphics.Point($diagramArea.width(), $diagramArea.height());\r\n    }\r\n\r\n    /**\r\n     * Scroll diagram area to the given position\r\n     *\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {boolean} animation\r\n     */\r\n    function scrollTo(x, y, animation) {\r\n        var sz = getViewportSize(),\r\n            _x = Math.max(0, Math.floor((x * getZoomLevel()) - (sz.x / 2))),\r\n            _y = Math.max(0, Math.floor((y * getZoomLevel()) - (sz.y / 2)));\r\n\r\n        if (animation === false) {\r\n            $diagramArea.scrollLeft(_x);\r\n            $diagramArea.scrollTop(_y);\r\n        } else {\r\n            $diagramArea.animate({\r\n                scrollLeft: _x,\r\n                scrollTop: _y\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get postion of the scroll bar\r\n     *\r\n     * @return {Graphics.Point}\r\n     */\r\n    function getScrollPosition() {\r\n        return new Graphics.Point($diagramArea.scrollLeft(), $diagramArea.scrollTop());\r\n    }\r\n\r\n    /**\r\n     * Return left, top, right, bottom of diagram area with zoom level\r\n     *\r\n     * @return {Graphics.Rect}\r\n     */\r\n    function getDiagramArea() {\r\n        var zoom = getZoomLevel(),\r\n            scroll = getScrollPosition(),\r\n            size = getViewportSize(),\r\n            x = Math.round(scroll.x / zoom),\r\n            y = Math.round(scroll.y / zoom),\r\n            w = Math.round(size.x / zoom),\r\n            h = Math.round(size.y / zoom);\r\n        return new Graphics.Rect(x, y, x + w, y + h);\r\n    }\r\n\r\n    // TODO: DELETE THIS CODE AFTER ENOUGH TIME (BEGIN)\r\n    // 기존의 잘못된 다이어그램을 수정하기 위한 코드임.\r\n    function __fixDiagramProblem(diagram) {\r\n        if (diagram) {\r\n            // 1) Communication Diagram에서 hostEdge가 null인 UMLCommMessageView를 모두 지움.\r\n            if (diagram instanceof type.UMLCommunicationDiagram) {\r\n                _.each(diagram.ownedViews, function (v) {\r\n                    if (v instanceof type.UMLCommMessageView && v.hostEdge === null) {\r\n                        diagram.removeOwnedView(v);\r\n                    }\r\n                });\r\n            }\r\n\r\n            _.each(diagram.ownedViews, function (v) {\r\n\r\n                // 1) model이 없는 UMLGeneralNodeView, UMLGeneralEdgeView를 모두 삭제.\r\n                if (!v.model && v instanceof type.UMLGeneralNodeView) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (!v.model && v instanceof type.UMLGeneralEdgeView) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n\r\n                // 2) _parent가 없는 View들 모두 삭제\r\n                if (!v._parent) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n\r\n                // 3) head or tail이 없는 EdgeView는 삭제\r\n                if (v instanceof type.EdgeView) {\r\n                    if (!v.head || !v.tail) {\r\n                        diagram.removeOwnedView(v);\r\n                    }\r\n                }\r\n\r\n                // 4) end1.reference or end2.reference가 없는 UndirectedRelationship을 모두 삭제.\r\n                if (v.model instanceof type.UndirectedRelationship) {\r\n                    if (!v.model.end1.reference || !v.model.end2.reference) {\r\n                        var pf1 = v.model.getParentField();\r\n                        if (v.model._parent && pf1) {\r\n                            v.model._parent[pf1].remove(v.model);\r\n                        }\r\n                        diagram.removeOwnedView(v);\r\n                    }\r\n                }\r\n\r\n                // 5) source or target이 없는 DirectedRelationship을 모두 삭제.\r\n                if (v.model instanceof type.DirectedRelationship) {\r\n                    if (!v.model.source || !v.model.target) {\r\n                        var pf2 = v.model.getParentField();\r\n                        if (v.model._parent && pf2) {\r\n                            v.model._parent[pf2].remove(v.model);\r\n                        }\r\n                        diagram.removeOwnedView(v);\r\n                    }\r\n                }\r\n\r\n                // 5) nameLabel, stereotypeLabel, propertyLabel, RoleNameLabel, MultiplicityLabel, PropertyLabel, QualifiersCompartment\r\n                if (v.nameLabel && !Repository.get(v.nameLabel._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (v.stereotypeLabel && !Repository.get(v.stereotypeLabel._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (v.propertyLabel && !Repository.get(v.propertyLabel._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (v.tailRoleNameLabel && !Repository.get(v.tailRoleNameLabel._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (v.tailPropertyLabel && !Repository.get(v.tailPropertyLabel._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (v.tailMultiplicityLabel && !Repository.get(v.tailMultiplicityLabel._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (v.tailQualifiersCompartment && !Repository.get(v.tailQualifiersCompartment._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (v.headRoleNameLabel && !Repository.get(v.headRoleNameLabel._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (v.headPropertyLabel && !Repository.get(v.headPropertyLabel._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (v.headMultiplicityLabel && !Repository.get(v.headMultiplicityLabel._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n                if (v.headQualifiersCompartment && !Repository.get(v.headQualifiersCompartment._id)) {\r\n                    diagram.removeOwnedView(v);\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n    }\r\n    // TODO: DELETE THIS CODE AFTER ENOUGH TIME (END)\r\n\r\n\r\n    /**\r\n     * Setup UI.\r\n     *\r\n     * @private\r\n     */\r\n    function _setupUI() {\r\n        // 다이어그램 편집기 설정하기.\r\n        diagramEditor = new Editor({ canvasId: \"diagram-canvas\" });\r\n        hiddenEditor = new Editor({ canvasId: \"hidden-canvas\"});\r\n        $diagramArea = $(\"#diagram-area\");\r\n\r\n        $(diagramEditor).on('mouseDown', function (event, mouseEvent) {\r\n            $(exports).triggerHandler('mouseDown', [mouseEvent]);\r\n        });\r\n        $(diagramEditor).on('selectionChanged', function (event, views) {\r\n            $(\"#diagram-canvas\").focus();\r\n            _triggerSelectionChangedEvent(views);\r\n        });\r\n        $(diagramEditor).on('viewDoubleClicked', function (event, view, x, y) {\r\n            _triggerDoubleClickedEvent(view, x, y);\r\n        });\r\n        $(diagramEditor).on('viewMoved', function (event, views, dx, dy) {\r\n            _triggerViewMovedEvent(views, dx, dy);\r\n        });\r\n        $(diagramEditor).on('parasiticViewMoved', function (event, view, alpha, distance) {\r\n            $(exports).triggerHandler('parasiticViewMoved', [view, alpha, distance]);\r\n        });\r\n        $(diagramEditor).on('containerViewChanged', function (event, views, dx, dy, containerView) {\r\n            $(exports).triggerHandler('containerViewChanged', [views, dx, dy, containerView]);\r\n        });\r\n        $(diagramEditor).on('nodeResized', function (event, node, left, top, right, bottom) {\r\n            $(exports).triggerHandler('nodeResized', [node, left, top, right, bottom]);\r\n        });\r\n        $(diagramEditor).on('edgeModified', function (event, edge, points) {\r\n            $(exports).triggerHandler('edgeModified', [edge, points]);\r\n        });\r\n        $(diagramEditor).on('edgeReconnected', function (event, edge, points, newParticipant, isTailSide) {\r\n            $(exports).triggerHandler('edgeReconnected', [edge, points, newParticipant, isTailSide]);\r\n        });\r\n    }\r\n\r\n    function _setupKeyBindings() {\r\n        $(\"#diagram-canvas\").keydown(function (e) {\r\n            var dx, dy;\r\n            switch (e.which) {\r\n            case KeyEvent.DOM_VK_BACK_SPACE:\r\n            case KeyEvent.DOM_VK_DELETE:\r\n                CommandManager.execute(Commands.EDIT_DELETE);\r\n                break;\r\n            case KeyEvent.DOM_VK_PLUS:\r\n                if (e.ctrlKey || e.metaKey) {\r\n                }\r\n                break;\r\n            case KeyEvent.DOM_VK_MINUS:\r\n                if (e.ctrlKey || e.metaKey) {\r\n                }\r\n                break;\r\n            case KeyEvent.DOM_VK_RETURN:\r\n                if (diagramEditor && diagramEditor.diagram && diagramEditor.diagram.selectedViews.length > 0) {\r\n                    var v = diagramEditor.diagram.selectedViews[0];\r\n                    if (v instanceof type.NodeView) {\r\n                        _triggerDoubleClickedEvent(v, v.left, v.top);\r\n                    } else if (v instanceof type.EdgeView) {\r\n                        _triggerDoubleClickedEvent(v);\r\n                    }\r\n                }\r\n                break;\r\n            case KeyEvent.DOM_VK_TAB:\r\n                if (diagramEditor && diagramEditor.diagram) {\r\n                    var idx = _.indexOf(diagramEditor.diagram.ownedViews, diagramEditor.diagram.selectedViews[0]);\r\n                    if (idx > -1 && idx < diagramEditor.diagram.ownedViews.length-1) {\r\n                        diagramEditor.diagram.selectedViews = [diagramEditor.diagram.ownedViews[idx+1]];\r\n                        _triggerSelectionChangedEvent([diagramEditor.diagram.ownedViews[idx+1]]);\r\n                        repaint();\r\n                    } else {\r\n                        diagramEditor.diagram.selectedViews = [diagramEditor.diagram.ownedViews[0]];\r\n                        _triggerSelectionChangedEvent([diagramEditor.diagram.ownedViews[0]]);\r\n                        repaint();\r\n                    }\r\n                }\r\n                e.preventDefault();\r\n                break;\r\n            case KeyEvent.DOM_VK_UP:\r\n                if (e.ctrlKey || e.metaKey) {\r\n                    if (diagramEditor && diagramEditor.diagram && diagramEditor.diagram.selectedViews.length > 0) {\r\n                        dy = diagramEditor.canvas.gridFactor.height;\r\n                        _triggerViewMovedEvent(diagramEditor.diagram.selectedViews, 0, -dy);\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n                break;\r\n            case KeyEvent.DOM_VK_DOWN:\r\n                if (e.ctrlKey || e.metaKey) {\r\n                    if (diagramEditor && diagramEditor.diagram && diagramEditor.diagram.selectedViews.length > 0) {\r\n                        dy = diagramEditor.canvas.gridFactor.height;\r\n                        _triggerViewMovedEvent(diagramEditor.diagram.selectedViews, 0, dy);\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n                break;\r\n            case KeyEvent.DOM_VK_LEFT:\r\n                if (e.ctrlKey || e.metaKey) {\r\n                    if (diagramEditor && diagramEditor.diagram && diagramEditor.diagram.selectedViews.length > 0) {\r\n                        dx = diagramEditor.canvas.gridFactor.width;\r\n                        _triggerViewMovedEvent(diagramEditor.diagram.selectedViews, -dx, 0);\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n                break;\r\n            case KeyEvent.DOM_VK_RIGHT:\r\n                if (e.ctrlKey || e.metaKey) {\r\n                    if (diagramEditor && diagramEditor.diagram && diagramEditor.diagram.selectedViews.length > 0) {\r\n                        dx = diagramEditor.canvas.gridFactor.width;\r\n                        _triggerViewMovedEvent(diagramEditor.diagram.selectedViews, dx, 0);\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    function _setupMouseBindings() {\r\n        $(\"#diagram-area\").mousewheel(function (e) {\r\n            if (e.ctrlKey || e.metaKey) {\r\n                e.preventDefault();\r\n                if (e.deltaY < 0) {\r\n                    CommandManager.execute(Commands.VIEW_ZOOM_OUT);\r\n                } else if (e.deltaY > 0) {\r\n                    CommandManager.execute(Commands.VIEW_ZOOM_IN);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function _setupPreferences() {\r\n        $(PreferenceManager).on(\"change\", function (event, key, value) {\r\n            try {\r\n                if (key === \"diagramEditor.showGrid\") {\r\n                    diagramEditor.showGrid = value;\r\n                    CommandManager.get(Commands.VIEW_SHOW_GRID).setChecked(isGridVisible());\r\n                    repaint();\r\n                }\r\n                if (key === \"diagramEditor.gridSize\") {\r\n                    diagramEditor.canvas.gridFactor.height = value;\r\n                    diagramEditor.canvas.gridFactor.width = value;\r\n                    repaint();\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        // read showGird\r\n        diagramEditor.showGrid = PreferenceManager.get(\"diagramEditor.showGrid\");\r\n        CommandManager.get(Commands.VIEW_SHOW_GRID).setChecked(isGridVisible());\r\n\r\n        // read gridSize\r\n        var gridSize = PreferenceManager.get(\"diagramEditor.gridSize\");\r\n        diagramEditor.canvas.gridFactor.height = gridSize;\r\n        diagramEditor.canvas.gridFactor.width = gridSize;\r\n    }\r\n\r\n    /**\r\n     * Current Diagram Changed\r\n     * @event module:diagrams/DiagramManager.currentDiagramChanged\r\n     * @property {Diagram} diagram\r\n     */\r\n    function _currentDiagramChangedEvent(diagram) {\r\n        $(exports).triggerHandler('currentDiagramChanged', [diagram, diagramEditor]);\r\n    }\r\n\r\n    /**\r\n     * Selection Changed\r\n     * @event module:diagrams/DiagramManager.selectionChanged\r\n     * @property {Array.<View>} views\r\n     */\r\n    function _triggerSelectionChangedEvent(views) {\r\n        $(exports).triggerHandler('selectionChanged', [views]);\r\n    }\r\n\r\n    /**\r\n     * Element Double Clicked\r\n     * @event module:diagrams/DiagramManager.viewDoubleClicked\r\n     * @property {View} view\r\n     * @property {number} x\r\n     * @property {number} y\r\n     */\r\n    function _triggerDoubleClickedEvent(view, x, y) {\r\n        $(exports).triggerHandler('viewDoubleClicked', [view, x, y]);\r\n    }\r\n\r\n    /**\r\n     * Views Moved\r\n     * @event module:diagrams/DiagramManager.viewMoved\r\n     * @property {Array.<View>} views\r\n     * @property {number} dx\r\n     * @property {number} dy\r\n     */\r\n    function _triggerViewMovedEvent(views, dx, dy) {\r\n        $(exports).triggerHandler('viewMoved', [views, dx, dy]);\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        _setupUI();\r\n        _setupKeyBindings();\r\n        _setupMouseBindings();\r\n        _setupPreferences();\r\n        setCurrentDiagram(null);\r\n    });\r\n\r\n    exports.openDiagram            = openDiagram;\r\n    exports.updateDiagram          = updateDiagram;\r\n    exports.closeDiagram           = closeDiagram;\r\n    exports.getWorkingDiagrams     = getWorkingDiagrams;\r\n    exports.saveWorkingDiagrams    = saveWorkingDiagrams;\r\n    exports.restoreWorkingDiagrams = restoreWorkingDiagrams;\r\n    exports.closeOthers            = closeOthers;\r\n    exports.closeAll               = closeAll;\r\n    exports.setCurrentDiagram      = setCurrentDiagram;\r\n    exports.getCurrentDiagram      = getCurrentDiagram;\r\n    exports.nextDiagram            = nextDiagram;\r\n    exports.previousDiagram        = previousDiagram;\r\n    exports.setActiveHandler       = setActiveHandler;\r\n    exports.getEditor              = getEditor;\r\n    exports.getHiddenEditor        = getHiddenEditor;\r\n    exports.selectAll              = selectAll;\r\n    exports.deselectAll            = deselectAll;\r\n    exports.selectInDiagram        = selectInDiagram;\r\n    exports.needRepaint            = needRepaint;\r\n    exports.suspendRepaint         = suspendRepaint;\r\n    exports.resumeRepaint          = resumeRepaint;\r\n    exports.repaint                = repaint;\r\n    exports.setZoomLevel           = setZoomLevel;\r\n    exports.getZoomLevel           = getZoomLevel;\r\n    exports.toggleGrid             = toggleGrid;\r\n    exports.showGrid               = showGrid;\r\n    exports.hideGrid               = hideGrid;\r\n    exports.isGridVisible          = isGridVisible;\r\n    exports.getViewportSize        = getViewportSize;\r\n    exports.scrollTo               = scrollTo;\r\n    exports.getScrollPosition      = getScrollPosition;\r\n    exports.getDiagramArea         = getDiagramArea;\r\n\r\n});\r\n\n//# sourceURL=/diagrams/DiagramManager.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, Mustache, type */\r\n\r\n/**\r\n * Factory creates model, view and diagram elements\r\n *\r\n * This module dispatches these events:\r\n * - diagramCreated: (diagram)\r\n * - elementCreated: (model, view)\r\n */\r\ndefine(\'engine/Factory\',[\'require\',\'exports\',\'module\',\'utils/Helper\',\'core/Core\',\'core/OperationBuilder\',\'core/MetaModelManager\',\'core/Repository\',\'engine/Engine\',\'engine/ProjectManager\',\'engine/SelectionManager\',\'dialogs/Dialogs\',\'diagrams/DiagramManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Helper           = require("utils/Helper"),\r\n        Core             = require("core/Core"),\r\n        OperationBuilder = require("core/OperationBuilder"),\r\n        MetaModelManager = require("core/MetaModelManager"),\r\n        Repository       = require("core/Repository"),\r\n        Engine           = require("engine/Engine"),\r\n        ProjectManager   = require("engine/ProjectManager"),\r\n        SelectionManager = require("engine/SelectionManager"),\r\n        Dialogs          = require("dialogs/Dialogs"),\r\n        DiagramManager   = require("diagrams/DiagramManager");\r\n\r\n\r\n    /**\r\n     * Error Messages\r\n     * @private\r\n     */\r\n    var ERR_INVALID_PARENT = "{{.}} cannot be placed here.",\r\n        ERR_INVALID_LINK   = "Invalid connection ({{.}})";\r\n\r\n    /**\r\n     * Map for functions to create diagram.\r\n     *\r\n     * @private\r\n     * @type {Object.<string, Function>}\r\n     */\r\n    var _diagramFn = {};\r\n\r\n    /**\r\n     * Map for functions to create model element.\r\n     *\r\n     * @private\r\n     * @type {Object.<string, Function>}\r\n     */\r\n    var _modelFn = {};\r\n\r\n    /**\r\n     * Map for functions to create both model and view elements.\r\n     *\r\n     * @private\r\n     * @type {Object.<string, Function>}\r\n     */\r\n    var _modelAndViewFn = {};\r\n\r\n    /**\r\n     * Map for default options for createModelAndView.\r\n     *\r\n     * @private\r\n     * @type {Object.<string, Object>}\r\n     */\r\n    var _modelAndViewOptions = {};\r\n\r\n    /**\r\n     * Map for functions to create a view element of a given model element.\r\n     *\r\n     * @private\r\n     * @type {Object.<string, Function>}\r\n     */\r\n    var _viewOfFn = {};\r\n\r\n\r\n    /**\r\n     * Trigger diagram created event\r\n     *\r\n     * @private\r\n     * @param{Diagram} diagram\r\n     */\r\n    function triggerDiagramCreated(diagram) {\r\n        var d = diagram ? Repository.get(diagram._id) : null;\r\n        $(exports).triggerHandler(\'diagramCreated\', [d]);\r\n    }\r\n\r\n    /**\r\n     * Trigger model and view elements created event\r\n     *\r\n     * @private\r\n     * @param{Model} model\r\n     * @param{View} view\r\n     */\r\n    function triggerElementCreated(model, view) {\r\n        var m = model ? Repository.get(model._id) : null,\r\n            v = view ? Repository.get(view._id) : null;\r\n        if (m || v) {\r\n            $(exports).triggerHandler(\'elementCreated\', [m, v]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a diagram\r\n     *\r\n     * @param{string} id\r\n     * @param{Model} parent\r\n     * @param{Object} options\r\n     * @return {Diagram}\r\n     */\r\n    function createDiagram(id, parent, options) {\r\n        var fn = _diagramFn[id];\r\n        if (!fn) {\r\n            console.error("Factory.createDiagram(): No such function of id: " + id);\r\n            return null;\r\n        }\r\n        parent = parent || SelectionManager.getSelected() || ProjectManager.getProject();\r\n        options = options || {};\r\n        options.id = id;\r\n        options.diagramType = options.diagramType || id;\r\n        options.triggerDiagramCreated = triggerDiagramCreated;\r\n        options.triggerElementCreated = triggerElementCreated;\r\n        return fn(parent, options);\r\n    }\r\n\r\n    /**\r\n     * Create a model element\r\n     *\r\n     * @param{string} id\r\n     * @param{Model} parent\r\n     * @param{string} field\r\n     * @param{Object} options\r\n     * @return {Model}\r\n     */\r\n    function createModel(id, parent, field, options) {\r\n        var fn = _modelFn[id];\r\n        if (!fn) {\r\n            console.error("Factory.createModel(): No such function of id: " + id);\r\n            return null;\r\n        }\r\n        parent = parent || SelectionManager.getSelected();\r\n        field = field || "ownedElements";\r\n        options = options || {};\r\n        options.id = id;\r\n        options.modelType = options.modelType || id;\r\n        options.triggerDiagramCreated = triggerDiagramCreated;\r\n        options.triggerElementCreated = triggerElementCreated;\r\n        return fn(parent, field, options);\r\n    }\r\n\r\n    /**\r\n     * Create model and view elements\r\n     *\r\n     * @param{string} id\r\n     * @param{Model} parent\r\n     * @param{Diagram} diagram\r\n     * @param{Object} options\r\n     * @return {View}\r\n     */\r\n    function createModelAndView(id, parent, diagram, options) {\r\n        var fn = _modelAndViewFn[id];\r\n        if (!fn) {\r\n            console.error("Factory.createModelAndView(): No such function of id: " + id);\r\n            return null;\r\n        }\r\n        options = options || {};\r\n        options.id = id;\r\n        options.modelType = options.modelType || id;\r\n        options.viewType = options.viewType || MetaModelManager.getViewTypeOf(options.modelType);\r\n        options.triggerDiagramCreated = triggerDiagramCreated;\r\n        options.triggerElementCreated = triggerElementCreated;\r\n        return fn(parent, diagram, options);\r\n    }\r\n\r\n    /**\r\n     * Create a view element of a given model based on diagram type\r\n     *\r\n     * @param{Model} model\r\n     * @param{Diagram} diagram\r\n     * @param{Object} options\r\n     */\r\n    function createViewOf(model, diagram, options) {\r\n        var fn = _viewOfFn[diagram.getClassName()];\r\n        if (!fn) {\r\n            console.error("Factory.createViewOf(): No function is registered for diagram type: " + diagram.getClassName());\r\n            return null;\r\n        }\r\n        options = options || {};\r\n        options.triggerDiagramCreated = triggerDiagramCreated;\r\n        options.triggerElementCreated = triggerElementCreated;\r\n        return fn(model, diagram, options);\r\n    }\r\n\r\n    /**\r\n     * Return all available Ids for \'createDiagram\' function\r\n     *\r\n     * @return {Array.<string>}\r\n     */\r\n    function getDiagramIds() {\r\n        return _.keys(_diagramFn);\r\n    }\r\n\r\n    /**\r\n     * Return all available Ids for \'createModel\' function\r\n     *\r\n     * @return {Array.<string>}\r\n     */\r\n    function getModelIds() {\r\n        return _.keys(_modelFn);\r\n    }\r\n\r\n    /**\r\n     * Return all available Ids for \'createModelAndView\' function\r\n     *\r\n     * @return {Array.<string>}\r\n     */\r\n    function getModelAndViewIds() {\r\n        return _.keys(_modelAndViewFn);\r\n    }\r\n\r\n    /**\r\n     * Register a function to create diagram.\r\n     *\r\n     * @param{string} id\r\n     * @param{Function} fn\r\n     */\r\n    function registerDiagramFn(id, fn) {\r\n        if (_diagramFn[id]) {\r\n            console.error("Factory.registerDiagramFn(): Already registered id: " + id);\r\n            return;\r\n        }\r\n        _diagramFn[id] = fn;\r\n    }\r\n\r\n    /**\r\n     * Register a function to create a model element.\r\n     *\r\n     * @param{string} id\r\n     * @param{Function} fn\r\n     */\r\n    function registerModelFn(id, fn) {\r\n        if (_modelFn[id]) {\r\n            console.error("Factory.registerModelFn(): Already registered id: " + id);\r\n            return;\r\n        }\r\n        _modelFn[id] = fn;\r\n    }\r\n\r\n    /**\r\n     * Register a function to create both model and view elements.\r\n     *\r\n     * @param{string} id\r\n     * @param{Function} fn\r\n     * @param{Object} defaultOptions\r\n     */\r\n    function registerModelAndViewFn(id, fn, defaultOptions) {\r\n        if (_modelAndViewFn[id]) {\r\n            console.error("Factory.registerModelAndViewFn(): Already registered id: " + id);\r\n            return;\r\n        }\r\n        if (defaultOptions) {\r\n            _modelAndViewOptions[id] = defaultOptions;\r\n        }\r\n        _modelAndViewFn[id] = fn;\r\n    }\r\n\r\n    /**\r\n     * Register a function to create a view element based on diagram type.\r\n     *\r\n     * @param{string} diagramType\r\n     * @param{Function} fn\r\n     */\r\n    function registerViewOfFn(diagramType, fn) {\r\n        if (_viewOfFn[diagramType]) {\r\n            console.error("Factory.registerViewOfFn(): Already registered diagram type: " + diagramType);\r\n            return;\r\n        }\r\n        _viewOfFn[diagramType] = fn;\r\n    }\r\n\r\n\r\n    /**\r\n     * Default precondition for model creation\r\n     * @param{Object} options\r\n     */\r\n    function _defaultModelPrecondition(options) {\r\n        Helper.assert(\r\n            options.parent instanceof type.Model,\r\n            Mustache.render(ERR_INVALID_PARENT, options.modelType)\r\n        );\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Default function to create diagram.\r\n     *\r\n     * @param {Model} parent\r\n     * @param {Object} options Options = { precondition, diagramType, diagramInitializer }\r\n     */\r\n    function defaultDiagramFn(parent, options) {\r\n        var DiagramType        = type[options.diagramType],\r\n            field              = options.field || "ownedElements",\r\n            precondition       = options.precondition || _defaultModelPrecondition,\r\n            diagramInitializer = options.diagramInitializer || null,\r\n            diagram;\r\n\r\n        // Check precondition\r\n        if (precondition) {\r\n            options.parent = parent;\r\n            precondition(options);\r\n        }\r\n\r\n        // Create model element;\r\n        diagram = new DiagramType();\r\n        diagram.name = Core.getNewName(parent[field], diagram.getDisplayClassName());\r\n        if (diagramInitializer) {\r\n            diagramInitializer(diagram);\r\n        }\r\n        Engine.addModel(parent, field, diagram);\r\n\r\n        if (diagram) {\r\n            diagram = Repository.get(diagram._id);\r\n        }\r\n        // Trigger event\r\n        triggerDiagramCreated(diagram);\r\n        return diagram;\r\n    }\r\n\r\n    /**\r\n     * Default function to create model element.\r\n     *\r\n     * @param {Model} parent\r\n     * @param {string} field\r\n     * @param {Object} options Options = { precondition, modelType, field, modelInitializer }\r\n     */\r\n    function defaultModelFn(parent, field, options) {\r\n        var ModelType        = type[options.modelType],\r\n            precondition     = options.precondition || _defaultModelPrecondition,\r\n            modelInitializer = options.modelInitializer || null,\r\n            model;\r\n\r\n        // Check precondition\r\n        if (precondition) {\r\n            options.parent = parent;\r\n            precondition(options);\r\n        }\r\n\r\n        // Create model element;\r\n        model = new ModelType();\r\n        model.name = Core.getNewName(parent[field], model.getDisplayClassName());\r\n        if (modelInitializer) {\r\n            modelInitializer(model);\r\n        }\r\n        Engine.addModel(parent, field, model);\r\n\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        // Trigger event\r\n        triggerElementCreated(model, null);\r\n\r\n        return model;\r\n    }\r\n\r\n    /**\r\n     * Default function to create model and view elements.\r\n     *\r\n     * @param {Model} parent\r\n     * @param {Diagram} diagram\r\n     * @param {Object} options Options = { precondition, modelType, viewType,\r\n     *      field, modelInitializer, viewInitializer, x1, y1, x2, y2, containerView }\r\n     */\r\n    function defaultModelAndViewFn(parent, diagram, options) {\r\n        // Set default options\r\n        if (_modelAndViewOptions[options.id]) {\r\n            _.extend(options, _modelAndViewOptions[options.id]);\r\n        }\r\n\r\n        var ModelType        = type[options.modelType],\r\n            ViewType         = type[options.viewType],\r\n            precondition     = options.precondition || _defaultModelPrecondition,\r\n            field            = options.field || "ownedElements",\r\n            modelInitializer = options.modelInitializer || null,\r\n            viewInitializer  = options.viewInitializer || null,\r\n            x1               = options.x1 || 0,\r\n            y1               = options.y1 || 0,\r\n            x2               = options.x2 || 0,\r\n            y2               = options.y2 || 0,\r\n            containerView    = options.containerView || null,\r\n            model,\r\n            view;\r\n\r\n        // Check precondition\r\n        if (precondition) {\r\n            options.parent = parent;\r\n            options.diagram = diagram;\r\n            precondition(options);\r\n        }\r\n\r\n        // Create model element\r\n        model = new ModelType();\r\n        model.name = Core.getNewName(parent[field], model.getDisplayClassName());\r\n        model._parent = parent;\r\n        if (modelInitializer) {\r\n            modelInitializer(model);\r\n        }\r\n        OperationBuilder.begin("Create " + model.getDisplayClassName());\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, field, model);\r\n\r\n        // Create view element\r\n        view = new ViewType();\r\n        view.initialize(null, x1, y1, x2, y2);\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        if (viewInitializer) {\r\n            viewInitializer(view);\r\n        }\r\n        if (containerView) {\r\n            view.containerView = containerView;\r\n        }\r\n\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", view);\r\n        if (containerView) {\r\n            OperationBuilder.fieldInsert(containerView, "containedViews", view);\r\n        }\r\n\r\n        // Apply operation\r\n        OperationBuilder.end();\r\n        var op = OperationBuilder.getOperation();\r\n        Repository.doOperation(op);\r\n\r\n        // Trigger event\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        triggerElementCreated(model, view);\r\n        return view || model;\r\n    }\r\n\r\n\r\n    /**\r\n     * Default function to create model and view elements of UndirectedRelationship.\r\n     *\r\n     * @param {Model} parent\r\n     * @param {Diagram} diagram\r\n     * @param {Object} options Options = { precondition, modelType, viewType,\r\n     *      field, modelInitializer, viewInitializer, x1, y1, x2, y2, containerView }\r\n     */\r\n    function defaultUndirectedRelationshipFn(parent, diagram, options) {\r\n        // Set default options\r\n        if (_modelAndViewOptions[options.id]) {\r\n            _.extend(options, _modelAndViewOptions[options.id]);\r\n        }\r\n\r\n        var ModelType        = type[options.modelType],\r\n            ViewType         = type[options.viewType],\r\n            precondition     = options.precondition || _defaultModelPrecondition,\r\n            field            = options.field || "ownedElements",\r\n            modelInitializer = options.modelInitializer || null,\r\n            viewInitializer  = options.viewInitializer || null,\r\n            x1               = options.x1 || 0,\r\n            y1               = options.y1 || 0,\r\n            x2               = options.x2 || 0,\r\n            y2               = options.y2 || 0,\r\n            tailView         = options.tailView || null,\r\n            headView         = options.headView || null,\r\n            tailModel        = options.tailModel || null,\r\n            headModel        = options.headModel || null,\r\n            containerView    = options.containerView || null,\r\n            model,\r\n            view;\r\n\r\n        // Check precondition\r\n        if (precondition) {\r\n            options.parent = parent;\r\n            options.diagram = diagram;\r\n            precondition(options);\r\n        }\r\n\r\n        // Create model element\r\n        model = new ModelType();\r\n        model._parent = parent;\r\n        model.end1.reference = tailModel;\r\n        model.end2.reference = headModel;\r\n        if (modelInitializer) {\r\n            modelInitializer(model);\r\n        }\r\n        OperationBuilder.begin("Create " + model.getDisplayClassName());\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, field, model);\r\n\r\n        // Create view element\r\n        view = new ViewType();\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        view.tail = tailView;\r\n        view.head = headView;\r\n        view.initialize(null, x1, y1, x2, y2);\r\n        if (viewInitializer) {\r\n            viewInitializer(view);\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", view);\r\n\r\n        // Apply operation\r\n        OperationBuilder.end();\r\n        var op = OperationBuilder.getOperation();\r\n        Repository.doOperation(op);\r\n\r\n        // Trigger event\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        triggerElementCreated(model, view);\r\n        return view || model;\r\n    }\r\n\r\n\r\n    /**\r\n     * Default function to create model and view elements of DirectedRelationship.\r\n     *\r\n     * @param {Model} parent\r\n     * @param {Diagram} diagram\r\n     * @param {Object} options Options = { precondition, modelType, viewType,\r\n     *      field, modelInitializer, viewInitializer, x1, y1, x2, y2, containerView }\r\n     */\r\n    function defaultDirectedRelationshipFn(parent, diagram, options) {\r\n        // Set default options\r\n        if (_modelAndViewOptions[options.id]) {\r\n            _.extend(options, _modelAndViewOptions[options.id]);\r\n        }\r\n\r\n        var ModelType        = type[options.modelType],\r\n            ViewType         = type[options.viewType],\r\n            precondition     = options.precondition || _defaultModelPrecondition,\r\n            field            = options.field || "ownedElements",\r\n            modelInitializer = options.modelInitializer || null,\r\n            viewInitializer  = options.viewInitializer || null,\r\n            x1               = options.x1 || 0,\r\n            y1               = options.y1 || 0,\r\n            x2               = options.x2 || 0,\r\n            y2               = options.y2 || 0,\r\n            tailView         = options.tailView || null,\r\n            headView         = options.headView || null,\r\n            tailModel        = options.tailModel || null,\r\n            headModel        = options.headModel || null,\r\n            containerView    = options.containerView || null,\r\n            model,\r\n            view;\r\n\r\n        // Check precondition\r\n        if (precondition) {\r\n            options.parent = parent;\r\n            options.diagram = diagram;\r\n            precondition(options);\r\n        }\r\n\r\n        // Create model element\r\n        model = new ModelType();\r\n        model._parent = parent;\r\n        model.source = tailModel;\r\n        model.target = headModel;\r\n        if (modelInitializer) {\r\n            modelInitializer(model);\r\n        }\r\n        OperationBuilder.begin("Create " + model.getDisplayClassName());\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, field, model);\r\n\r\n        // Create view element\r\n        view = new ViewType();\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        view.tail = tailView;\r\n        view.head = headView;\r\n        view.initialize(null, x1, y1, x2, y2);\r\n        if (viewInitializer) {\r\n            viewInitializer(view);\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", view);\r\n\r\n        // Apply operation\r\n        OperationBuilder.end();\r\n        var op = OperationBuilder.getOperation();\r\n        Repository.doOperation(op);\r\n\r\n        // Trigger event\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        triggerElementCreated(model, view);\r\n        return view || model;\r\n    }\r\n\r\n    /**\r\n     * Default function to create view element only.\r\n     *\r\n     * @param {Model} parent\r\n     * @param {Diagram} diagram\r\n     * @param {Object} options Options = { precondition, viewType,\r\n     *      viewInitializer, x1, y1, x2, y2, containerView }\r\n     */\r\n    function defaultViewOnlyFn(parent, diagram, options) {\r\n        // Set default options\r\n        if (_modelAndViewOptions[options.id]) {\r\n            _.extend(options, _modelAndViewOptions[options.id]);\r\n        }\r\n\r\n        var ViewType         = type[options.viewType],\r\n            precondition     = options.precondition || null,\r\n            viewInitializer  = options.viewInitializer || null,\r\n            x1               = options.x1 || 0,\r\n            y1               = options.y1 || 0,\r\n            x2               = options.x2 || 0,\r\n            y2               = options.y2 || 0,\r\n            containerView    = options.containerView || null,\r\n            view;\r\n\r\n        // Check precondition\r\n        if (precondition) {\r\n            options.parent = parent;\r\n            options.diagram = diagram;\r\n            precondition(options);\r\n        }\r\n\r\n        view = new ViewType();\r\n        view.initialize(null, x1, y1, x2, y2);\r\n        if (viewInitializer) {\r\n            viewInitializer(view);\r\n        }\r\n        Engine.addViews(diagram, [view]);\r\n\r\n        // Trigger event\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        triggerElementCreated(null, view);\r\n        return view;\r\n    }\r\n\r\n    /**\r\n     * Default function to create edge view element only.\r\n     *\r\n     * @param {Model} parent\r\n     * @param {Diagram} diagram\r\n     * @param {Object} options Options = { precondition, viewType,\r\n     *      viewInitializer, x1, y1, x2, y2, containerView }\r\n     */\r\n    function defaultEdgeViewOnlyFn(parent, diagram, options) {\r\n        // Set default options\r\n        if (_modelAndViewOptions[options.id]) {\r\n            _.extend(options, _modelAndViewOptions[options.id]);\r\n        }\r\n\r\n        var ViewType         = type[options.viewType],\r\n            precondition     = options.precondition || null,\r\n            viewInitializer  = options.viewInitializer || null,\r\n            x1               = options.x1 || 0,\r\n            y1               = options.y1 || 0,\r\n            x2               = options.x2 || 0,\r\n            y2               = options.y2 || 0,\r\n            tailView         = options.tailView || null,\r\n            headView         = options.headView || null,\r\n            containerView    = options.containerView || null,\r\n            view;\r\n\r\n        // Check precondition\r\n        if (precondition) {\r\n            options.parent = parent;\r\n            options.diagram = diagram;\r\n            precondition(options);\r\n        }\r\n\r\n        // Create view element\r\n        view = new ViewType();\r\n        view.tail = tailView;\r\n        view.head = headView;\r\n        view.initialize(null, x1, y1, x2, y2);\r\n        if (viewInitializer) {\r\n            viewInitializer(view);\r\n        }\r\n        Engine.addViews(diagram, [view]);\r\n\r\n        // Trigger event\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        triggerElementCreated(null, view);\r\n        return view;\r\n    }\r\n\r\n    /**\r\n     * Create a view of a given model with relationship views\r\n     *\r\n     * @param {Editor} editor\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {Model} model\r\n     * @param {View} containerView\r\n     */\r\n    function createViewAndRelationships(editor, x, y, model, containerView) {\r\n        var ViewType = model.getViewType(),\r\n            diagram = editor.diagram,\r\n            view;\r\n        OperationBuilder.begin(\'add view with relations\');\r\n        if (ViewType) {\r\n            view = new ViewType();\r\n            view.model = model;\r\n            view.initialize(null, x, y, x, y);\r\n            view._parent = diagram;\r\n\r\n            // TODO: UML Specific Parts (need to be refactored)\r\n            if (view instanceof type.UMLGeneralNodeView && diagram._parent !== model._parent) {\r\n                view.showNamespace = true;\r\n            }\r\n\r\n            // add the view\r\n            OperationBuilder.insert(view);\r\n            OperationBuilder.fieldInsert(diagram, \'ownedViews\', view);\r\n            if (containerView) {\r\n                OperationBuilder.fieldAssign(view, \'containerView\', containerView);\r\n                OperationBuilder.fieldInsert(containerView, \'containedViews\', view);\r\n            }\r\n\r\n            // TODO: UML Specific Parts (need to be refactored)\r\n            // add ConstraintLinkViews (when creating ConstraintView)\r\n            if (view instanceof type.UMLConstraintView) {\r\n                _.each(diagram.ownedViews, function (v) {\r\n                    if (v.model === view.model._parent) {\r\n                        var linkView = new type.UMLConstraintLinkView();\r\n                        linkView._parent = diagram;\r\n                        linkView.tail = view;\r\n                        linkView.head = v;\r\n                        linkView.initialize(null, linkView.tail.left, linkView.tail.top, linkView.head.left, linkView.head.top);\r\n                        OperationBuilder.insert(linkView);\r\n                        OperationBuilder.fieldInsert(diagram, \'ownedViews\', linkView);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // add relation views\r\n            _.each(Repository.getRelationshipsOf(model), function (rel) {\r\n                var RelViewType = rel.getViewType(),\r\n                    relView;\r\n\r\n                if (RelViewType) {\r\n                    // for Directed Relationships\r\n                    if (rel instanceof type.DirectedRelationship) {\r\n                        _.each(diagram.ownedViews, function (v) {\r\n                            if ((v.model === rel.target) && (model === rel.source)) {\r\n                                relView = new RelViewType();\r\n                                relView._parent = diagram;\r\n                                relView.model = rel;\r\n                                relView.tail = view;\r\n                                relView.head = v;\r\n                                relView.initialize(null, relView.tail.left, relView.tail.top, relView.head.left, relView.head.top);\r\n                                OperationBuilder.insert(relView);\r\n                                OperationBuilder.fieldInsert(diagram, \'ownedViews\', relView);\r\n                            } else if ((v.model === rel.source) && (model === rel.target)) {\r\n                                relView = new RelViewType();\r\n                                relView._parent = diagram;\r\n                                relView.model = rel;\r\n                                relView.tail = v;\r\n                                relView.head = view;\r\n                                relView.initialize(null, relView.tail.left, relView.tail.top, relView.head.left, relView.head.top);\r\n                                OperationBuilder.insert(relView);\r\n                                OperationBuilder.fieldInsert(diagram, \'ownedViews\', relView);\r\n                            }\r\n                        });\r\n\r\n                        // create self-links.\r\n                        if ((rel.source === rel.target) && (rel.source === model)) {\r\n                            relView = new RelViewType();\r\n                            relView._parent = diagram;\r\n                            relView.model = rel;\r\n                            relView.tail = view;\r\n                            relView.head = view;\r\n                            relView.initialize(null, relView.tail.left, relView.tail.top, relView.head.left, relView.head.top);\r\n                            OperationBuilder.insert(relView);\r\n                            OperationBuilder.fieldInsert(diagram, \'ownedViews\', relView);\r\n                        }\r\n\r\n                    // for Undirected Relationships\r\n                    } else if (rel instanceof type.UndirectedRelationship) {\r\n                        _.each(diagram.ownedViews, function (v) {\r\n                            if ((v.model === rel.end2.reference) && (model === rel.end1.reference)) {\r\n                                relView = new RelViewType();\r\n                                relView._parent = diagram;\r\n                                relView.model = rel;\r\n                                relView.tail = view;\r\n                                relView.head = v;\r\n                                relView.initialize(null, relView.tail.left, relView.tail.top, relView.head.left, relView.head.top);\r\n                                OperationBuilder.insert(relView);\r\n                                OperationBuilder.fieldInsert(diagram, \'ownedViews\', relView);\r\n                            } else if ((v.model === rel.end1.reference) && (model === rel.end2.reference)) {\r\n                                relView = new RelViewType();\r\n                                relView._parent = diagram;\r\n                                relView.model = rel;\r\n                                relView.tail = v;\r\n                                relView.head = view;\r\n                                relView.initialize(null, relView.tail.left, relView.tail.top, relView.head.left, relView.head.top);\r\n                                OperationBuilder.insert(relView);\r\n                                OperationBuilder.fieldInsert(diagram, \'ownedViews\', relView);\r\n                            }\r\n                        });\r\n\r\n                        // create self-links.\r\n                        if ((rel.end1.reference === rel.end2.reference) && (rel.end1.reference === model)) {\r\n                            relView = new RelViewType();\r\n                            relView._parent = diagram;\r\n                            relView.model = rel;\r\n                            relView.tail = view;\r\n                            relView.head = view;\r\n                            relView.initialize(null, relView.tail.left, relView.tail.top, relView.head.left, relView.head.top);\r\n                            OperationBuilder.insert(relView);\r\n                            OperationBuilder.fieldInsert(diagram, \'ownedViews\', relView);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            OperationBuilder.end();\r\n            var cmd = OperationBuilder.getOperation();\r\n            Repository.doOperation(cmd);\r\n        }\r\n\r\n        // Trigger event\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        triggerElementCreated(null, view);\r\n        return view;\r\n    }\r\n\r\n    /**\r\n     * Default function to create view of a particular model on a diagram.\r\n     *\r\n     * @param {Model} model\r\n     * @param {Diagram} diagram\r\n     * @param {Object} options\r\n     */\r\n    function defaultViewOnDiagramFn(model, diagram, options) {\r\n        var x             = options.x || 0,\r\n            y             = options.y || 0,\r\n            editor        = options.editor || DiagramManager.getEditor(),\r\n            containerView = options.containerView || null;\r\n\r\n        // Directed Relationships\r\n        if (model instanceof type.DirectedRelationship) {\r\n            var directedView    = diagram.getViewOf(model),\r\n                sourceView = diagram.getViewOf(model.source),\r\n                targetView = diagram.getViewOf(model.target);\r\n            if (directedView) {\r\n                editor.selectView(directedView);\r\n                editor.selectAdditionalView(sourceView);\r\n                editor.selectAdditionalView(targetView);\r\n                Dialogs.showAlertDialog("Relationship View is already existed in this Diagram.");\r\n            } else {\r\n                if (!targetView) {\r\n                    return createViewAndRelationships(editor, x, y, model.target);\r\n                }\r\n                if (!sourceView) {\r\n                    return createViewAndRelationships(editor, x, y + 100, model.source);\r\n                }\r\n                if (targetView && sourceView) {\r\n                    var DirectedViewType = model.getViewType();\r\n                    if (DirectedViewType) {\r\n                        directedView = new DirectedViewType();\r\n                        directedView._parent = diagram;\r\n                        directedView.model = model;\r\n                        directedView.tail = sourceView;\r\n                        directedView.head = targetView;\r\n                        directedView.initialize(null, directedView.tail.left, directedView.tail.top, directedView.head.left, directedView.head.top);\r\n                        Engine.addViews(diagram, [directedView]);\r\n                        if (directedView) {\r\n                            directedView = Repository.get(directedView._id);\r\n                        }\r\n                        editor.selectView(directedView);\r\n                        return directedView;\r\n                    }\r\n                }\r\n            }\r\n\r\n        // Undirected Relationships\r\n        } else if (model instanceof type.UndirectedRelationship) {\r\n            var undirectedView    = diagram.getViewOf(model),\r\n                end1View = diagram.getViewOf(model.end1.reference),\r\n                end2View = diagram.getViewOf(model.end2.reference);\r\n            if (undirectedView) {\r\n                editor.selectView(undirectedView);\r\n                editor.selectAdditionalView(end1View);\r\n                editor.selectAdditionalView(end2View);\r\n                Dialogs.showAlertDialog("Relationship View is already existed in this Diagram.");\r\n            } else {\r\n                if (!end2View) {\r\n                    return createViewAndRelationships(editor, x, y, model.end2.reference);\r\n                }\r\n                if (!end1View) {\r\n                    return createViewAndRelationships(editor, x, y + 100, model.end1.reference);\r\n                }\r\n                if (end1View && end2View) {\r\n                    var UndirectedViewType = model.getViewType();\r\n                    if (UndirectedViewType) {\r\n                        undirectedView = new UndirectedViewType();\r\n                        undirectedView._parent = diagram;\r\n                        undirectedView.model = model;\r\n                        undirectedView.tail = end1View;\r\n                        undirectedView.head = end2View;\r\n                        undirectedView.initialize(null, undirectedView.tail.left, undirectedView.tail.top, undirectedView.head.left, undirectedView.head.top);\r\n                        Engine.addViews(diagram, [undirectedView]);\r\n                        if (undirectedView) {\r\n                            undirectedView = Repository.get(undirectedView._id);\r\n                        }\r\n                        editor.selectView(undirectedView);\r\n                        return undirectedView;\r\n                    }\r\n                }\r\n            }\r\n        } else if (model instanceof type.Diagram) {\r\n            options.x1 = x;\r\n            options.y1 = y;\r\n            options.x2 = x;\r\n            options.y2 = y;\r\n            options.modelInitializer = function (elem) {\r\n                elem.reference = model;\r\n            };\r\n            return createModelAndView("Hyperlink", diagram._parent, diagram, options);\r\n        } else {\r\n            return createViewAndRelationships(editor, x, y, model);\r\n        }\r\n    }\r\n\r\n\r\n    exports.ERR_INVALID_PARENT = ERR_INVALID_PARENT;\r\n    exports.ERR_INVALID_LINK   = ERR_INVALID_LINK;\r\n\r\n    exports.createDiagram          = createDiagram;\r\n    exports.createModel            = createModel;\r\n    exports.createModelAndView     = createModelAndView;\r\n    exports.createViewOf           = createViewOf;\r\n\r\n    exports.getDiagramIds          = getDiagramIds;\r\n    exports.getModelIds            = getModelIds;\r\n    exports.getModelAndViewIds     = getModelAndViewIds;\r\n\r\n    exports.registerDiagramFn      = registerDiagramFn;\r\n    exports.registerModelFn        = registerModelFn;\r\n    exports.registerModelAndViewFn = registerModelAndViewFn;\r\n    exports.registerViewOfFn       = registerViewOfFn;\r\n\r\n    exports.defaultDiagramFn                = defaultDiagramFn;\r\n    exports.defaultModelFn                  = defaultModelFn;\r\n    exports.defaultModelAndViewFn           = defaultModelAndViewFn;\r\n    exports.defaultUndirectedRelationshipFn = defaultUndirectedRelationshipFn;\r\n    exports.defaultDirectedRelationshipFn   = defaultDirectedRelationshipFn;\r\n    exports.defaultViewOnlyFn               = defaultViewOnlyFn;\r\n    exports.defaultEdgeViewOnlyFn           = defaultEdgeViewOnlyFn;\r\n    exports.defaultViewOnDiagramFn          = defaultViewOnDiagramFn;\r\n    exports.createViewAndRelationships      = createViewAndRelationships;\r\n\r\n});\r\n\r\n\n//# sourceURL=/engine/Factory.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, browser: true, nomen: true, regexp: true,\r\nindent: 4, maxerr: 50 */\r\n/*global define, $, brackets, PathUtils */\r\n\r\n/* Functions for working with extension packages */\r\n\r\ndefine(\'extensibility/Package\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'filesystem/FileSystem\',\'file/FileUtils\',\'utils/StringUtils\',\'strings\',\'utils/ExtensionLoader\',\'utils/NodeConnection\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit              = require("utils/AppInit"),\r\n        FileSystem           = require("filesystem/FileSystem"),\r\n        FileUtils            = require("file/FileUtils"),\r\n        StringUtils          = require("utils/StringUtils"),\r\n        Strings              = require("strings"),\r\n        ExtensionLoader      = require("utils/ExtensionLoader"),\r\n        NodeConnection       = require("utils/NodeConnection");\r\n        // PreferencesManager   = require("preferences/PreferencesManager");\r\n\r\n    // PreferencesManager.definePreference("proxy", "string");\r\n\r\n    var Errors = {\r\n        ERROR_LOADING: "ERROR_LOADING",\r\n        MALFORMED_URL: "MALFORMED_URL",\r\n        UNSUPPORTED_PROTOCOL: "UNSUPPORTED_PROTOCOL"\r\n    };\r\n\r\n    var InstallationStatuses = {\r\n        FAILED: "FAILED",\r\n        INSTALLED: "INSTALLED",\r\n        ALREADY_INSTALLED: "ALREADY_INSTALLED",\r\n        SAME_VERSION: "SAME_VERSION",\r\n        OLDER_VERSION: "OLDER_VERSION",\r\n        NEEDS_UPDATE: "NEEDS_UPDATE",\r\n        DISABLED: "DISABLED"\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * @type {NodeConnection}\r\n     * Connects to ExtensionManagerDomain\r\n     */\r\n    var _nodeConnection;\r\n\r\n    /**\r\n     * @private\r\n     * @type{jQuery.Deferred.<NodeConnection>}\r\n     * A deferred which is resolved with a NodeConnection or rejected if\r\n     * we are unable to connect to Node.\r\n     */\r\n    var _nodeConnectionDeferred = $.Deferred();\r\n\r\n    /**\r\n     * @type {number} Used to generate unique download ids\r\n     */\r\n    var _uniqueId = 0;\r\n\r\n    function _extensionManagerCall(callback) {\r\n        if (_nodeConnection.domains.extensionManager) {\r\n            return callback(_nodeConnection.domains.extensionManager);\r\n        } else {\r\n            return new $.Deferred().reject("extensionManager domain is undefined").promise();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * TODO: can this go away now that we never call it directly?\r\n     *\r\n     * Validates the package at the given path. The actual validation is\r\n     * handled by the Node server.\r\n     *\r\n     * The promise is resolved with an object:\r\n     * { errors: Array.<{string}>, metadata: { name:string, version:string, ... } }\r\n     * metadata is pulled straight from package.json and will be undefined\r\n     * if there are errors or null if the extension did not include package.json.\r\n     *\r\n     * @param {string} Absolute path to the package zip file\r\n     * @param {{requirePackageJSON: ?boolean}} validation options\r\n     * @return {$.Promise} A promise that is resolved with information about the package\r\n     */\r\n    function validate(path, options) {\r\n        return _extensionManagerCall(function (extensionManager) {\r\n            var d = new $.Deferred();\r\n\r\n            extensionManager.validate(path, options)\r\n                .done(function (result) {\r\n                    d.resolve({\r\n                        errors: result.errors,\r\n                        metadata: result.metadata\r\n                    });\r\n                })\r\n                .fail(function (error) {\r\n                    d.reject(error);\r\n                });\r\n\r\n            return d.promise();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validates and installs the package at the given path. Validation and\r\n     * installation is handled by the Node process.\r\n     *\r\n     * The extension will be installed into the user\'s extensions directory.\r\n     * If the user already has the extension installed, it will instead go\r\n     * into their disabled extensions directory.\r\n     *\r\n     * The promise is resolved with an object:\r\n     * { errors: Array.<{string}>, metadata: { name:string, version:string, ... },\r\n     * disabledReason:string, installedTo:string, commonPrefix:string }\r\n     * metadata is pulled straight from package.json and is likely to be undefined\r\n     * if there are errors. It is null if there was no package.json.\r\n     *\r\n     * disabledReason is either null or the reason the extension was installed disabled.\r\n     *\r\n     * @param {string} path Absolute path to the package zip file\r\n     * @param {?string} nameHint Hint for the extension folder\'s name (used in favor of\r\n     *          path\'s filename if present, and if no package metadata present).\r\n     * @param {?boolean} _doUpdate private argument used to signal an update\r\n     * @return {$.Promise} A promise that is resolved with information about the package\r\n     *          (which may include errors, in which case the extension was disabled), or\r\n     *          rejected with an error object.\r\n     */\r\n    function install(path, nameHint, _doUpdate) {\r\n        return _extensionManagerCall(function (extensionManager) {\r\n            var d                       = new $.Deferred(),\r\n                destinationDirectory    = ExtensionLoader.getUserExtensionPath(),\r\n                disabledDirectory       = destinationDirectory.replace(/\\/user$/, "/disabled"),\r\n                systemDirectory         = FileUtils.getNativeDirectoryPath() + "/extensions/default/";\r\n\r\n            var operation = _doUpdate ? "update" : "install";\r\n            extensionManager[operation](path, destinationDirectory, {\r\n                disabledDirectory: disabledDirectory,\r\n                systemExtensionDirectory: systemDirectory,\r\n                apiVersion: app.metadata.apiVersion,\r\n                nameHint: nameHint\r\n            })\r\n                .done(function (result) {\r\n                    if (result.installationStatus !== InstallationStatuses.INSTALLED || _doUpdate) {\r\n                        d.resolve(result);\r\n                    } else {\r\n                        // This was a new extension and everything looked fine.\r\n                        // We load it into Brackets right away.\r\n                        ExtensionLoader.loadExtension(result.name, {\r\n                            // On Windows, it looks like Node converts Unix-y paths to backslashy paths.\r\n                            // We need to convert them back.\r\n                            baseUrl: FileUtils.convertWindowsPathToUnixPath(result.installedTo)\r\n                        }, "main").then(function () {\r\n                            d.resolve(result);\r\n                        }, function () {\r\n                            d.reject(Errors.ERROR_LOADING);\r\n                        });\r\n                    }\r\n                })\r\n                .fail(function (error) {\r\n                    d.reject(error);\r\n                });\r\n\r\n            return d.promise();\r\n        });\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Special case handling to make the common case of downloading from GitHub easier; modifies \'urlInfo\' as\r\n     * needed. Converts a bare GitHub repo URL to the corresponding master ZIP URL; or if given a direct\r\n     * master ZIP URL already, sets a nicer download filename (both cases use the repo name).\r\n     *\r\n     * @param {{url:string, parsed:Array.<string>, filenameHint:string}} urlInfo\r\n     */\r\n    function githubURLFilter(urlInfo) {\r\n        if (urlInfo.parsed.hostname === "github.com" || urlInfo.parsed.hostname === "www.github.com") {\r\n            // Is it a URL to the root of a repo? (/user/repo)\r\n            var match = /^\\/[^\\/?]+\\/([^\\/?]+)(\\/?)$/.exec(urlInfo.parsed.pathname);\r\n            if (match) {\r\n                if (!match[2]) {\r\n                    urlInfo.url += "/";\r\n                }\r\n                urlInfo.url += "archive/master.zip";\r\n                urlInfo.filenameHint = match[1] + ".zip";\r\n\r\n            } else {\r\n                // Is it a URL directly to the repo\'s \'master.zip\'? (/user/repo/archive/master.zip)\r\n                match = /^\\/[^\\/?]+\\/([^\\/?]+)\\/archive\\/master.zip$/.exec(urlInfo.parsed.pathname);\r\n                if (match) {\r\n                    urlInfo.filenameHint = match[1] + ".zip";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Downloads from the given URL to a temporary location. On success, resolves with the path of the\r\n     * downloaded file (typically in a temp folder) and a hint for the real filename. On failure, rejects\r\n     * with an error object.\r\n     *\r\n     * @param {string} url URL of the file to be downloaded\r\n     * @param {number} downloadId Unique number to identify this request\r\n     * @return {$.Promise}\r\n     */\r\n    function download(url, downloadId) {\r\n        return _extensionManagerCall(function (extensionManager) {\r\n            var d = new $.Deferred();\r\n\r\n            // Validate URL\r\n            // TODO: PathUtils fails to parse URLs that are missing the protocol part (e.g. starts immediately with "www...")\r\n            var parsed = PathUtils.parseUrl(url);\r\n            if (!parsed.hostname) {  // means PathUtils failed to parse at all\r\n                d.reject(Errors.MALFORMED_URL);\r\n                return d.promise();\r\n            }\r\n            if (parsed.protocol !== "http:" && parsed.protocol !== "https:") {\r\n                d.reject(Errors.UNSUPPORTED_PROTOCOL);\r\n                return d.promise();\r\n            }\r\n\r\n            var urlInfo = { url: url, parsed: parsed, filenameHint: parsed.filename };\r\n            githubURLFilter(urlInfo);\r\n\r\n            // Decide download destination\r\n            var filename = urlInfo.filenameHint;\r\n            filename = filename.replace(/[^a-zA-Z0-9_\\- \\(\\)\\.]/g, "_"); // make sure it\'s a valid filename\r\n            if (!filename) {  // in case of URL ending in "/"\r\n                filename = "extension.zip";\r\n            }\r\n\r\n            // Download the bits (using Node since brackets-shell doesn\'t support binary file IO)\r\n            var r = extensionManager.downloadFile(downloadId, urlInfo.url, undefined/*, PreferencesManager.get("proxy")*/);\r\n            r.done(function (result) {\r\n                d.resolve({ localPath: FileUtils.convertWindowsPathToUnixPath(result), filenameHint: urlInfo.filenameHint });\r\n            }).fail(function (err) {\r\n                d.reject(err);\r\n            });\r\n\r\n            return d.promise();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attempts to synchronously cancel the given pending download. This may not be possible, e.g.\r\n     * if the download has already finished.\r\n     *\r\n     * @param {number} downloadId Identifier previously passed to download()\r\n     */\r\n    function cancelDownload(downloadId) {\r\n        return _extensionManagerCall(function (extensionManager) {\r\n            return extensionManager.abortDownload(downloadId);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * On success, resolves with an extension metadata object; at that point, the extension has already\r\n     * started running in Brackets. On failure (including validation errors), rejects with an error object.\r\n     *\r\n     * An error object consists of either a string error code OR an array where the first entry is the error\r\n     * code and the remaining entries are further info. The error code string is one of either\r\n     * ExtensionsDomain.Errors or Package.Errors. Use formatError() to convert an error object to a friendly,\r\n     * localized error message.\r\n     *\r\n     * The returned cancel() function will *attempt* to cancel installation, but it is not guaranteed to\r\n     * succeed. If cancel() succeeds, the Promise is rejected with a CANCELED error code. If we\'re unable\r\n     * to cancel, the Promise is resolved or rejected normally, as if cancel() had never been called.\r\n     *\r\n     * @return {{promise: $.Promise, cancel: function():boolean}}\r\n     */\r\n    function installFromURL(url) {\r\n        var STATE_DOWNLOADING = 1,\r\n            STATE_INSTALLING = 2,\r\n            STATE_SUCCEEDED = 3,\r\n            STATE_FAILED = 4;\r\n\r\n        var d = new $.Deferred();\r\n        var state = STATE_DOWNLOADING;\r\n\r\n        var downloadId = (_uniqueId++);\r\n        download(url, downloadId)\r\n            .done(function (downloadResult) {\r\n                state = STATE_INSTALLING;\r\n\r\n                install(downloadResult.localPath, downloadResult.filenameHint)\r\n                    .done(function (result) {\r\n                        var installationStatus = result.installationStatus;\r\n                        if (installationStatus === InstallationStatuses.ALREADY_INSTALLED ||\r\n                                installationStatus === InstallationStatuses.NEEDS_UPDATE ||\r\n                                installationStatus === InstallationStatuses.SAME_VERSION ||\r\n                                installationStatus === InstallationStatuses.OLDER_VERSION) {\r\n                            // We don\'t delete the file in this case, because it will be needed\r\n                            // if the user is going to install the update.\r\n                            state = STATE_SUCCEEDED;\r\n                            result.localPath = downloadResult.localPath;\r\n                            d.resolve(result);\r\n                        } else {\r\n                            FileSystem.getFileForPath(downloadResult.localPath).unlink();\r\n                            if (result.errors && result.errors.length > 0) {\r\n                                // Validation errors - for now, only return the first one\r\n                                state = STATE_FAILED;\r\n                                d.reject(result.errors[0]);\r\n                            } else if (result.disabledReason) {\r\n                                // Extension valid but left disabled (wrong API version, extension name collision, etc.)\r\n                                state = STATE_FAILED;\r\n                                d.reject(result.disabledReason);\r\n                            } else {\r\n                                // Success! Extension is now running in Brackets\r\n                                state = STATE_SUCCEEDED;\r\n                                d.resolve(result);\r\n                            }\r\n                        }\r\n                    })\r\n                    .fail(function (err) {\r\n                        // File IO errors, internal error in install()/validate(), or extension startup crashed\r\n                        state = STATE_FAILED;\r\n                        FileSystem.getFileForPath(downloadResult.localPath).unlink();\r\n                        d.reject(err);  // TODO: needs to be err.message ?\r\n                    });\r\n            })\r\n            .fail(function (err) {\r\n                // Download error (the Node-side download code cleans up any partial ZIP file)\r\n                state = STATE_FAILED;\r\n                d.reject(err);\r\n            });\r\n\r\n        return {\r\n            promise: d.promise(),\r\n            cancel: function () {\r\n                if (state === STATE_DOWNLOADING) {\r\n                    // This will trigger download()\'s fail() handler with CANCELED as the err code\r\n                    cancelDownload(downloadId);\r\n                }\r\n                // Else it\'s too late to cancel; we\'ll continue on through the done() chain and emit\r\n                // a success result (calling done() handlers) if all else goes well.\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Converts an error object as returned by install() or installFromURL() into a flattened, localized string.\r\n     * @param {string|Array.<string>} error\r\n     * @return {string}\r\n     */\r\n    function formatError(error) {\r\n        function localize(key) {\r\n            if (Strings[key]) {\r\n                return Strings[key];\r\n            }\r\n            console.log("Unknown installation error", key);\r\n            return Strings.UNKNOWN_ERROR;\r\n        }\r\n\r\n        if (Array.isArray(error)) {\r\n            error[0] = localize(error[0]);\r\n            return StringUtils.format.apply(window, error);\r\n        } else {\r\n            return localize(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the extension at the given path.\r\n     *\r\n     * @param {string} path The absolute path to the extension to remove.\r\n     * @return {$.Promise} A promise that\'s resolved when the extension is removed, or\r\n     *     rejected if there was an error.\r\n     */\r\n    function remove(path) {\r\n        return _extensionManagerCall(function (extensionManager) {\r\n            return extensionManager.remove(path);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Install an extension update located at path.\r\n     * This assumes that the installation was previously attempted\r\n     * and an installationStatus of "ALREADY_INSTALLED", "NEEDS_UPDATE", "SAME_VERSION",\r\n     * or "OLDER_VERSION" was the result.\r\n     *\r\n     * This workflow ensures that there should not generally be validation errors\r\n     * because the first pass at installation the extension looked at the metadata\r\n     * and installed packages.\r\n     *\r\n     * @param {string} path to package file\r\n     * @param {?string} nameHint Hint for the extension folder\'s name (used in favor of\r\n     *          path\'s filename if present, and if no package metadata present).\r\n     * @return {$.Promise} A promise that is resolved when the extension is successfully\r\n     *      installed or rejected if there is a problem.\r\n     */\r\n    function installUpdate(path, nameHint) {\r\n        var d = new $.Deferred();\r\n        install(path, nameHint, true)\r\n            .done(function (result) {\r\n                if (result.installationStatus !== InstallationStatuses.INSTALLED) {\r\n                    d.reject(result.errors);\r\n                } else {\r\n                    d.resolve(result);\r\n                }\r\n            })\r\n            .fail(function (error) {\r\n                d.reject(error);\r\n            })\r\n            .always(function () {\r\n                FileSystem.getFileForPath(path).unlink();\r\n            });\r\n        return d.promise();\r\n    }\r\n\r\n    /**\r\n     * Allows access to the deferred that manages the node connection. This\r\n     * is *only* for unit tests. Messing with this not in testing will\r\n     * potentially break everything.\r\n     *\r\n     * @private\r\n     * @return {jQuery.Deferred} The deferred that manages the node connection\r\n     */\r\n    function _getNodeConnectionDeferred() {\r\n        return _nodeConnectionDeferred;\r\n    }\r\n\r\n    // Initializes node connection\r\n    // TODO: duplicates code from StaticServer\r\n    // TODO: can this be done lazily?\r\n    AppInit.appReady(function () {\r\n        _nodeConnection = new NodeConnection();\r\n        _nodeConnection.connect(true).then(function () {\r\n            var domainPath = FileUtils.getNativeDirectoryPath() + "/" + FileUtils.getNativeModuleDirectoryPath(module) + "/node/ExtensionManagerDomain";\r\n            _nodeConnection.loadDomains(domainPath, true)\r\n                .then(\r\n                    function () {\r\n                        _nodeConnectionDeferred.resolve();\r\n                    },\r\n                    function () { // Failed to connect\r\n                        console.error("[Extensions] Failed to connect to node", arguments);\r\n                        _nodeConnectionDeferred.reject();\r\n                    }\r\n                );\r\n        });\r\n    });\r\n\r\n    // For unit tests only\r\n    exports._getNodeConnectionDeferred = _getNodeConnectionDeferred;\r\n\r\n    exports.installFromURL = installFromURL;\r\n    exports.validate = validate;\r\n    exports.install = install;\r\n    exports.remove = remove;\r\n    exports.installUpdate = installUpdate;\r\n    exports.formatError = formatError;\r\n    exports.InstallationStatuses = InstallationStatuses;\r\n});\r\n\n//# sourceURL=/extensibility/Package.js'),eval(";(function(exports) {\r\n\r\n// export the class if we are in a Node-like system.\r\nif (typeof module === 'object' && module.exports === exports)\r\n  exports = module.exports = SemVer;\r\n\r\n// The debug function is excluded entirely from the minified version.\r\n\r\n// Note: this is the semver.org version of the spec that it implements\r\n// Not necessarily the package version of this code.\r\nexports.SEMVER_SPEC_VERSION = '2.0.0';\r\n\r\n// The actual regexps go on exports.re\r\nvar re = exports.re = [];\r\nvar src = exports.src = [];\r\nvar R = 0;\r\n\r\n// The following Regular Expressions can be used for tokenizing,\r\n// validating, and parsing SemVer version strings.\r\n\r\n// ## Numeric Identifier\r\n// A single `0`, or a non-zero digit followed by zero or more digits.\r\n\r\nvar NUMERICIDENTIFIER = R++;\r\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\r\nvar NUMERICIDENTIFIERLOOSE = R++;\r\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\r\n\r\n\r\n// ## Non-numeric Identifier\r\n// Zero or more digits, followed by a letter or hyphen, and then zero or\r\n// more letters, digits, or hyphens.\r\n\r\nvar NONNUMERICIDENTIFIER = R++;\r\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\r\n\r\n\r\n// ## Main Version\r\n// Three dot-separated numeric identifiers.\r\n\r\nvar MAINVERSION = R++;\r\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\r\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\r\n                   '(' + src[NUMERICIDENTIFIER] + ')';\r\n\r\nvar MAINVERSIONLOOSE = R++;\r\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\r\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\r\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\r\n\r\n// ## Pre-release Version Identifier\r\n// A numeric identifier, or a non-numeric identifier.\r\n\r\nvar PRERELEASEIDENTIFIER = R++;\r\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\r\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';\r\n\r\nvar PRERELEASEIDENTIFIERLOOSE = R++;\r\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\r\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';\r\n\r\n\r\n// ## Pre-release Version\r\n// Hyphen, followed by one or more dot-separated pre-release version\r\n// identifiers.\r\n\r\nvar PRERELEASE = R++;\r\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\r\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\r\n\r\nvar PRERELEASELOOSE = R++;\r\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\r\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\r\n\r\n// ## Build Metadata Identifier\r\n// Any combination of digits, letters, or hyphens.\r\n\r\nvar BUILDIDENTIFIER = R++;\r\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\r\n\r\n// ## Build Metadata\r\n// Plus sign, followed by one or more period-separated build metadata\r\n// identifiers.\r\n\r\nvar BUILD = R++;\r\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\r\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\r\n\r\n\r\n// ## Full Version String\r\n// A main version, followed optionally by a pre-release version and\r\n// build metadata.\r\n\r\n// Note that the only major, minor, patch, and pre-release sections of\r\n// the version string are capturing groups.  The build metadata is not a\r\n// capturing group, because it should not ever be used in version\r\n// comparison.\r\n\r\nvar FULL = R++;\r\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\r\n                src[PRERELEASE] + '?' +\r\n                src[BUILD] + '?';\r\n\r\nsrc[FULL] = '^' + FULLPLAIN + '$';\r\n\r\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\r\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\r\n// common in the npm registry.\r\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\r\n                 src[PRERELEASELOOSE] + '?' +\r\n                 src[BUILD] + '?';\r\n\r\nvar LOOSE = R++;\r\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';\r\n\r\nvar GTLT = R++;\r\nsrc[GTLT] = '((?:<|>)?=?)';\r\n\r\n// Something like \"2.*\" or \"1.2.x\".\r\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\r\n// Only the first item is strictly required.\r\nvar XRANGEIDENTIFIERLOOSE = R++;\r\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\r\nvar XRANGEIDENTIFIER = R++;\r\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\r\n\r\nvar XRANGEPLAIN = R++;\r\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\r\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\r\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\r\n                   '(?:(' + src[PRERELEASE] + ')' +\r\n                   ')?)?)?';\r\n\r\nvar XRANGEPLAINLOOSE = R++;\r\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\r\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\r\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\r\n                        '(?:(' + src[PRERELEASELOOSE] + ')' +\r\n                        ')?)?)?';\r\n\r\n// >=2.x, for example, means >=2.0.0-0\r\n// <1.x would be the same as \"<1.0.0-0\", though.\r\nvar XRANGE = R++;\r\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\r\nvar XRANGELOOSE = R++;\r\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\r\n\r\n// Tilde ranges.\r\n// Meaning is \"reasonably at or greater than\"\r\nvar LONETILDE = R++;\r\nsrc[LONETILDE] = '(?:~>?)';\r\n\r\nvar TILDETRIM = R++;\r\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\r\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\r\nvar tildeTrimReplace = '$1~';\r\n\r\nvar TILDE = R++;\r\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\r\nvar TILDELOOSE = R++;\r\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\r\n\r\n// Caret ranges.\r\n// Meaning is \"at least and backwards compatible with\"\r\nvar LONECARET = R++;\r\nsrc[LONECARET] = '(?:\\\\^)';\r\n\r\nvar CARETTRIM = R++;\r\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\r\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\r\nvar caretTrimReplace = '$1^';\r\n\r\nvar CARET = R++;\r\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\r\nvar CARETLOOSE = R++;\r\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\r\n\r\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\r\nvar COMPARATORLOOSE = R++;\r\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\r\nvar COMPARATOR = R++;\r\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\r\n\r\n\r\n// An expression to strip any whitespace between the gtlt and the thing\r\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\r\nvar COMPARATORTRIM = R++;\r\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\r\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\r\n\r\n// this one has to use the /g flag\r\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\r\nvar comparatorTrimReplace = '$1$2$3';\r\n\r\n\r\n// Something like `1.2.3 - 1.2.4`\r\n// Note that these all use the loose form, because they'll be\r\n// checked against either the strict or loose comparator form\r\n// later.\r\nvar HYPHENRANGE = R++;\r\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\r\n                   '\\\\s+-\\\\s+' +\r\n                   '(' + src[XRANGEPLAIN] + ')' +\r\n                   '\\\\s*$';\r\n\r\nvar HYPHENRANGELOOSE = R++;\r\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\r\n                        '\\\\s+-\\\\s+' +\r\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\r\n                        '\\\\s*$';\r\n\r\n// Star ranges basically just allow anything at all.\r\nvar STAR = R++;\r\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';\r\n\r\n// Compile to actual regexp objects.\r\n// All are flag-free, unless they were created above with a flag.\r\nfor (var i = 0; i < R; i++) {\r\n  ;\r\n  if (!re[i])\r\n    re[i] = new RegExp(src[i]);\r\n}\r\n\r\nexports.parse = parse;\r\nfunction parse(version, loose) {\r\n  var r = loose ? re[LOOSE] : re[FULL];\r\n  return (r.test(version)) ? new SemVer(version, loose) : null;\r\n}\r\n\r\nexports.valid = valid;\r\nfunction valid(version, loose) {\r\n  var v = parse(version, loose);\r\n  return v ? v.version : null;\r\n}\r\n\r\n\r\nexports.clean = clean;\r\nfunction clean(version, loose) {\r\n  var s = parse(version, loose);\r\n  return s ? s.version : null;\r\n}\r\n\r\nexports.SemVer = SemVer;\r\n\r\nfunction SemVer(version, loose) {\r\n  if (version instanceof SemVer) {\r\n    if (version.loose === loose)\r\n      return version;\r\n    else\r\n      version = version.version;\r\n  }\r\n\r\n  if (!(this instanceof SemVer))\r\n    return new SemVer(version, loose);\r\n\r\n  ;\r\n  this.loose = loose;\r\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\r\n\r\n  if (!m)\r\n    throw new TypeError('Invalid Version: ' + version);\r\n\r\n  this.raw = version;\r\n\r\n  // these are actually numbers\r\n  this.major = +m[1];\r\n  this.minor = +m[2];\r\n  this.patch = +m[3];\r\n\r\n  // numberify any prerelease numeric ids\r\n  if (!m[4])\r\n    this.prerelease = [];\r\n  else\r\n    this.prerelease = m[4].split('.').map(function(id) {\r\n      return (/^[0-9]+$/.test(id)) ? +id : id;\r\n    });\r\n\r\n  this.build = m[5] ? m[5].split('.') : [];\r\n  this.format();\r\n}\r\n\r\nSemVer.prototype.format = function() {\r\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\r\n  if (this.prerelease.length)\r\n    this.version += '-' + this.prerelease.join('.');\r\n  return this.version;\r\n};\r\n\r\nSemVer.prototype.inspect = function() {\r\n  return '<SemVer \"' + this + '\">';\r\n};\r\n\r\nSemVer.prototype.toString = function() {\r\n  return this.version;\r\n};\r\n\r\nSemVer.prototype.compare = function(other) {\r\n  ;\r\n  if (!(other instanceof SemVer))\r\n    other = new SemVer(other, this.loose);\r\n\r\n  return this.compareMain(other) || this.comparePre(other);\r\n};\r\n\r\nSemVer.prototype.compareMain = function(other) {\r\n  if (!(other instanceof SemVer))\r\n    other = new SemVer(other, this.loose);\r\n\r\n  return compareIdentifiers(this.major, other.major) ||\r\n         compareIdentifiers(this.minor, other.minor) ||\r\n         compareIdentifiers(this.patch, other.patch);\r\n};\r\n\r\nSemVer.prototype.comparePre = function(other) {\r\n  if (!(other instanceof SemVer))\r\n    other = new SemVer(other, this.loose);\r\n\r\n  // NOT having a prerelease is > having one\r\n  if (this.prerelease.length && !other.prerelease.length)\r\n    return -1;\r\n  else if (!this.prerelease.length && other.prerelease.length)\r\n    return 1;\r\n  else if (!this.prerelease.lenth && !other.prerelease.length)\r\n    return 0;\r\n\r\n  var i = 0;\r\n  do {\r\n    var a = this.prerelease[i];\r\n    var b = other.prerelease[i];\r\n    ;\r\n    if (a === undefined && b === undefined)\r\n      return 0;\r\n    else if (b === undefined)\r\n      return 1;\r\n    else if (a === undefined)\r\n      return -1;\r\n    else if (a === b)\r\n      continue;\r\n    else\r\n      return compareIdentifiers(a, b);\r\n  } while (++i);\r\n};\r\n\r\nSemVer.prototype.inc = function(release) {\r\n  switch (release) {\r\n    case 'major':\r\n      this.major++;\r\n      this.minor = -1;\r\n    case 'minor':\r\n      this.minor++;\r\n      this.patch = -1;\r\n    case 'patch':\r\n      this.patch++;\r\n      this.prerelease = [];\r\n      break;\r\n    case 'prerelease':\r\n      if (this.prerelease.length === 0)\r\n        this.prerelease = [0];\r\n      else {\r\n        var i = this.prerelease.length;\r\n        while (--i >= 0) {\r\n          if (typeof this.prerelease[i] === 'number') {\r\n            this.prerelease[i]++;\r\n            i = -2;\r\n          }\r\n        }\r\n        if (i === -1) // didn't increment anything\r\n          this.prerelease.push(0);\r\n      }\r\n      break;\r\n\r\n    default:\r\n      throw new Error('invalid increment argument: ' + release);\r\n  }\r\n  this.format();\r\n  return this;\r\n};\r\n\r\nexports.inc = inc;\r\nfunction inc(version, release, loose) {\r\n  try {\r\n    return new SemVer(version, loose).inc(release).version;\r\n  } catch (er) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexports.compareIdentifiers = compareIdentifiers;\r\n\r\nvar numeric = /^[0-9]+$/;\r\nfunction compareIdentifiers(a, b) {\r\n  var anum = numeric.test(a);\r\n  var bnum = numeric.test(b);\r\n\r\n  if (anum && bnum) {\r\n    a = +a;\r\n    b = +b;\r\n  }\r\n\r\n  return (anum && !bnum) ? -1 :\r\n         (bnum && !anum) ? 1 :\r\n         a < b ? -1 :\r\n         a > b ? 1 :\r\n         0;\r\n}\r\n\r\nexports.rcompareIdentifiers = rcompareIdentifiers;\r\nfunction rcompareIdentifiers(a, b) {\r\n  return compareIdentifiers(b, a);\r\n}\r\n\r\nexports.compare = compare;\r\nfunction compare(a, b, loose) {\r\n  return new SemVer(a, loose).compare(b);\r\n}\r\n\r\nexports.compareLoose = compareLoose;\r\nfunction compareLoose(a, b) {\r\n  return compare(a, b, true);\r\n}\r\n\r\nexports.rcompare = rcompare;\r\nfunction rcompare(a, b, loose) {\r\n  return compare(b, a, loose);\r\n}\r\n\r\nexports.sort = sort;\r\nfunction sort(list, loose) {\r\n  return list.sort(function(a, b) {\r\n    return exports.compare(a, b, loose);\r\n  });\r\n}\r\n\r\nexports.rsort = rsort;\r\nfunction rsort(list, loose) {\r\n  return list.sort(function(a, b) {\r\n    return exports.rcompare(a, b, loose);\r\n  });\r\n}\r\n\r\nexports.gt = gt;\r\nfunction gt(a, b, loose) {\r\n  return compare(a, b, loose) > 0;\r\n}\r\n\r\nexports.lt = lt;\r\nfunction lt(a, b, loose) {\r\n  return compare(a, b, loose) < 0;\r\n}\r\n\r\nexports.eq = eq;\r\nfunction eq(a, b, loose) {\r\n  return compare(a, b, loose) === 0;\r\n}\r\n\r\nexports.neq = neq;\r\nfunction neq(a, b, loose) {\r\n  return compare(a, b, loose) !== 0;\r\n}\r\n\r\nexports.gte = gte;\r\nfunction gte(a, b, loose) {\r\n  return compare(a, b, loose) >= 0;\r\n}\r\n\r\nexports.lte = lte;\r\nfunction lte(a, b, loose) {\r\n  return compare(a, b, loose) <= 0;\r\n}\r\n\r\nexports.cmp = cmp;\r\nfunction cmp(a, op, b, loose) {\r\n  var ret;\r\n  switch (op) {\r\n    case '===': ret = a === b; break;\r\n    case '!==': ret = a !== b; break;\r\n    case '': case '=': case '==': ret = eq(a, b, loose); break;\r\n    case '!=': ret = neq(a, b, loose); break;\r\n    case '>': ret = gt(a, b, loose); break;\r\n    case '>=': ret = gte(a, b, loose); break;\r\n    case '<': ret = lt(a, b, loose); break;\r\n    case '<=': ret = lte(a, b, loose); break;\r\n    default: throw new TypeError('Invalid operator: ' + op);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexports.Comparator = Comparator;\r\nfunction Comparator(comp, loose) {\r\n  if (comp instanceof Comparator) {\r\n    if (comp.loose === loose)\r\n      return comp;\r\n    else\r\n      comp = comp.value;\r\n  }\r\n\r\n  if (!(this instanceof Comparator))\r\n    return new Comparator(comp, loose);\r\n\r\n  ;\r\n  this.loose = loose;\r\n  this.parse(comp);\r\n\r\n  if (this.semver === ANY)\r\n    this.value = '';\r\n  else\r\n    this.value = this.operator + this.semver.version;\r\n}\r\n\r\nvar ANY = {};\r\nComparator.prototype.parse = function(comp) {\r\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\r\n  var m = comp.match(r);\r\n\r\n  if (!m)\r\n    throw new TypeError('Invalid comparator: ' + comp);\r\n\r\n  this.operator = m[1];\r\n  // if it literally is just '>' or '' then allow anything.\r\n  if (!m[2])\r\n    this.semver = ANY;\r\n  else {\r\n    this.semver = new SemVer(m[2], this.loose);\r\n\r\n    // <1.2.3-rc DOES allow 1.2.3-beta (has prerelease)\r\n    // >=1.2.3 DOES NOT allow 1.2.3-beta\r\n    // <=1.2.3 DOES allow 1.2.3-beta\r\n    // However, <1.2.3 does NOT allow 1.2.3-beta,\r\n    // even though `1.2.3-beta < 1.2.3`\r\n    // The assumption is that the 1.2.3 version has something you\r\n    // *don't* want, so we push the prerelease down to the minimum.\r\n    if (this.operator === '<' && !this.semver.prerelease.length) {\r\n      this.semver.prerelease = ['0'];\r\n      this.semver.format();\r\n    }\r\n  }\r\n};\r\n\r\nComparator.prototype.inspect = function() {\r\n  return '<SemVer Comparator \"' + this + '\">';\r\n};\r\n\r\nComparator.prototype.toString = function() {\r\n  return this.value;\r\n};\r\n\r\nComparator.prototype.test = function(version) {\r\n  ;\r\n  return (this.semver === ANY) ? true :\r\n         cmp(version, this.operator, this.semver, this.loose);\r\n};\r\n\r\n\r\nexports.Range = Range;\r\nfunction Range(range, loose) {\r\n  if ((range instanceof Range) && range.loose === loose)\r\n    return range;\r\n\r\n  if (!(this instanceof Range))\r\n    return new Range(range, loose);\r\n\r\n  this.loose = loose;\r\n\r\n  // First, split based on boolean or ||\r\n  this.raw = range;\r\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\r\n    return this.parseRange(range.trim());\r\n  }, this).filter(function(c) {\r\n    // throw out any that are not relevant for whatever reason\r\n    return c.length;\r\n  });\r\n\r\n  if (!this.set.length) {\r\n    throw new TypeError('Invalid SemVer Range: ' + range);\r\n  }\r\n\r\n  this.format();\r\n}\r\n\r\nRange.prototype.inspect = function() {\r\n  return '<SemVer Range \"' + this.range + '\">';\r\n};\r\n\r\nRange.prototype.format = function() {\r\n  this.range = this.set.map(function(comps) {\r\n    return comps.join(' ').trim();\r\n  }).join('||').trim();\r\n  return this.range;\r\n};\r\n\r\nRange.prototype.toString = function() {\r\n  return this.range;\r\n};\r\n\r\nRange.prototype.parseRange = function(range) {\r\n  var loose = this.loose;\r\n  range = range.trim();\r\n  ;\r\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\r\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\r\n  range = range.replace(hr, hyphenReplace);\r\n  ;\r\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\r\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\r\n  ;\r\n\r\n  // `~ 1.2.3` => `~1.2.3`\r\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);\r\n\r\n  // `^ 1.2.3` => `^1.2.3`\r\n  range = range.replace(re[CARETTRIM], caretTrimReplace);\r\n\r\n  // normalize spaces\r\n  range = range.split(/\\s+/).join(' ');\r\n\r\n  // At this point, the range is completely trimmed and\r\n  // ready to be split into comparators.\r\n\r\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\r\n  var set = range.split(' ').map(function(comp) {\r\n    return parseComparator(comp, loose);\r\n  }).join(' ').split(/\\s+/);\r\n  if (this.loose) {\r\n    // in loose mode, throw out any that are not valid comparators\r\n    set = set.filter(function(comp) {\r\n      return !!comp.match(compRe);\r\n    });\r\n  }\r\n  set = set.map(function(comp) {\r\n    return new Comparator(comp, loose);\r\n  });\r\n\r\n  return set;\r\n};\r\n\r\n// Mostly just for testing and legacy API reasons\r\nexports.toComparators = toComparators;\r\nfunction toComparators(range, loose) {\r\n  return new Range(range, loose).set.map(function(comp) {\r\n    return comp.map(function(c) {\r\n      return c.value;\r\n    }).join(' ').trim().split(' ');\r\n  });\r\n}\r\n\r\n// comprised of xranges, tildes, stars, and gtlt's at this point.\r\n// already replaced the hyphen ranges\r\n// turn into a set of JUST comparators.\r\nfunction parseComparator(comp, loose) {\r\n  ;\r\n  comp = replaceCarets(comp, loose);\r\n  ;\r\n  comp = replaceTildes(comp, loose);\r\n  ;\r\n  comp = replaceXRanges(comp, loose);\r\n  ;\r\n  comp = replaceStars(comp, loose);\r\n  ;\r\n  return comp;\r\n}\r\n\r\nfunction isX(id) {\r\n  return !id || id.toLowerCase() === 'x' || id === '*';\r\n}\r\n\r\n// ~, ~> --> * (any, kinda silly)\r\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\r\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\r\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\r\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\r\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\r\nfunction replaceTildes(comp, loose) {\r\n  return comp.trim().split(/\\s+/).map(function(comp) {\r\n    return replaceTilde(comp, loose);\r\n  }).join(' ');\r\n}\r\n\r\nfunction replaceTilde(comp, loose) {\r\n  var r = loose ? re[TILDELOOSE] : re[TILDE];\r\n  return comp.replace(r, function(_, M, m, p, pr) {\r\n    ;\r\n    var ret;\r\n\r\n    if (isX(M))\r\n      ret = '';\r\n    else if (isX(m))\r\n      ret = '>=' + M + '.0.0-0 <' + (+M + 1) + '.0.0-0';\r\n    else if (isX(p))\r\n      // ~1.2 == >=1.2.0- <1.3.0-\r\n      ret = '>=' + M + '.' + m + '.0-0 <' + M + '.' + (+m + 1) + '.0-0';\r\n    else if (pr) {\r\n      ;\r\n      if (pr.charAt(0) !== '-')\r\n        pr = '-' + pr;\r\n      ret = '>=' + M + '.' + m + '.' + p + pr +\r\n            ' <' + M + '.' + (+m + 1) + '.0-0';\r\n    } else\r\n      // ~1.2.3 == >=1.2.3-0 <1.3.0-0\r\n      ret = '>=' + M + '.' + m + '.' + p + '-0' +\r\n            ' <' + M + '.' + (+m + 1) + '.0-0';\r\n\r\n    ;\r\n    return ret;\r\n  });\r\n}\r\n\r\n// ^ --> * (any, kinda silly)\r\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\r\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\r\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\r\n// ^1.2.3 --> >=1.2.3 <2.0.0\r\n// ^1.2.0 --> >=1.2.0 <2.0.0\r\nfunction replaceCarets(comp, loose) {\r\n  return comp.trim().split(/\\s+/).map(function(comp) {\r\n    return replaceCaret(comp, loose);\r\n  }).join(' ');\r\n}\r\n\r\nfunction replaceCaret(comp, loose) {\r\n  var r = loose ? re[CARETLOOSE] : re[CARET];\r\n  return comp.replace(r, function(_, M, m, p, pr) {\r\n    ;\r\n    var ret;\r\n\r\n    if (isX(M))\r\n      ret = '';\r\n    else if (isX(m))\r\n      ret = '>=' + M + '.0.0-0 <' + (+M + 1) + '.0.0-0';\r\n    else if (isX(p))\r\n      if (M === '0') ret = '>=' + M + '.' + m + '.0-0 <' + M + '.' + (+m + 1) + '.0-0';\r\n      else ret = '>=' + M + '.' + m + '.0-0 <' + (+M + 1) + '.0.0-0';\r\n    else if (pr) {\r\n      ;\r\n      if (pr.charAt(0) !== '-')\r\n        pr = '-' + pr;\r\n      if (M === '0')\r\n        if (m === '0') ret = '=' + M + '.' + m + '.' + p + pr;\r\n        else ret = '>=' + M + '.' + m + '.' + p + pr +\r\n                   ' <' + M + '.' + (+m + 1) + '.0-0';\r\n      else ret = '>=' + M + '.' + m + '.' + p + pr +\r\n                 ' <' + (+M + 1) + '.0.0-0';\r\n    } else\r\n      if (M === '0')\r\n        if (m === '0') ret = '=' + M + '.' + m + '.' + p;\r\n        else ret = '>=' + M + '.' + m + '.' + p + '-0' +\r\n                   ' <' + M + '.' + (+m + 1) + '.0-0';\r\n      else ret = '>=' + M + '.' + m + '.' + p + '-0' +\r\n                 ' <' + (+M + 1) + '.0.0-0';\r\n\r\n    ;\r\n    return ret;\r\n  });\r\n}\r\n\r\nfunction replaceXRanges(comp, loose) {\r\n  ;\r\n  return comp.split(/\\s+/).map(function(comp) {\r\n    return replaceXRange(comp, loose);\r\n  }).join(' ');\r\n}\r\n\r\nfunction replaceXRange(comp, loose) {\r\n  comp = comp.trim();\r\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];\r\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\r\n    ;\r\n    var xM = isX(M);\r\n    var xm = xM || isX(m);\r\n    var xp = xm || isX(p);\r\n    var anyX = xp;\r\n\r\n    if (gtlt === '=' && anyX)\r\n      gtlt = '';\r\n\r\n    if (gtlt && anyX) {\r\n      // replace X with 0, and then append the -0 min-prerelease\r\n      if (xM)\r\n        M = 0;\r\n      if (xm)\r\n        m = 0;\r\n      if (xp)\r\n        p = 0;\r\n\r\n      if (gtlt === '>') {\r\n        // >1 => >=2.0.0-0\r\n        // >1.2 => >=1.3.0-0\r\n        // >1.2.3 => >= 1.2.4-0\r\n        gtlt = '>=';\r\n        if (xM) {\r\n          // no change\r\n        } else if (xm) {\r\n          M = +M + 1;\r\n          m = 0;\r\n          p = 0;\r\n        } else if (xp) {\r\n          m = +m + 1;\r\n          p = 0;\r\n        }\r\n      }\r\n\r\n\r\n      ret = gtlt + M + '.' + m + '.' + p + '-0';\r\n    } else if (xM) {\r\n      // allow any\r\n      ret = '*';\r\n    } else if (xm) {\r\n      // append '-0' onto the version, otherwise\r\n      // '1.x.x' matches '2.0.0-beta', since the tag\r\n      // *lowers* the version value\r\n      ret = '>=' + M + '.0.0-0 <' + (+M + 1) + '.0.0-0';\r\n    } else if (xp) {\r\n      ret = '>=' + M + '.' + m + '.0-0 <' + M + '.' + (+m + 1) + '.0-0';\r\n    }\r\n\r\n    ;\r\n\r\n    return ret;\r\n  });\r\n}\r\n\r\n// Because * is AND-ed with everything else in the comparator,\r\n// and '' means \"any version\", just remove the *s entirely.\r\nfunction replaceStars(comp, loose) {\r\n  ;\r\n  // Looseness is ignored here.  star is always as loose as it gets!\r\n  return comp.trim().replace(re[STAR], '');\r\n}\r\n\r\n// This function is passed to string.replace(re[HYPHENRANGE])\r\n// M, m, patch, prerelease, build\r\n// 1.2 - 3.4.5 => >=1.2.0-0 <=3.4.5\r\n// 1.2.3 - 3.4 => >=1.2.0-0 <3.5.0-0 Any 3.4.x will do\r\n// 1.2 - 3.4 => >=1.2.0-0 <3.5.0-0\r\nfunction hyphenReplace($0,\r\n                       from, fM, fm, fp, fpr, fb,\r\n                       to, tM, tm, tp, tpr, tb) {\r\n\r\n  if (isX(fM))\r\n    from = '';\r\n  else if (isX(fm))\r\n    from = '>=' + fM + '.0.0-0';\r\n  else if (isX(fp))\r\n    from = '>=' + fM + '.' + fm + '.0-0';\r\n  else\r\n    from = '>=' + from;\r\n\r\n  if (isX(tM))\r\n    to = '';\r\n  else if (isX(tm))\r\n    to = '<' + (+tM + 1) + '.0.0-0';\r\n  else if (isX(tp))\r\n    to = '<' + tM + '.' + (+tm + 1) + '.0-0';\r\n  else if (tpr)\r\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\r\n  else\r\n    to = '<=' + to;\r\n\r\n  return (from + ' ' + to).trim();\r\n}\r\n\r\n\r\n// if ANY of the sets match ALL of its comparators, then pass\r\nRange.prototype.test = function(version) {\r\n  if (!version)\r\n    return false;\r\n  for (var i = 0; i < this.set.length; i++) {\r\n    if (testSet(this.set[i], version))\r\n      return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nfunction testSet(set, version) {\r\n  for (var i = 0; i < set.length; i++) {\r\n    if (!set[i].test(version))\r\n      return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexports.satisfies = satisfies;\r\nfunction satisfies(version, range, loose) {\r\n  try {\r\n    range = new Range(range, loose);\r\n  } catch (er) {\r\n    return false;\r\n  }\r\n  return range.test(version);\r\n}\r\n\r\nexports.maxSatisfying = maxSatisfying;\r\nfunction maxSatisfying(versions, range, loose) {\r\n  return versions.filter(function(version) {\r\n    return satisfies(version, range, loose);\r\n  }).sort(function(a, b) {\r\n    return rcompare(a, b, loose);\r\n  })[0] || null;\r\n}\r\n\r\nexports.validRange = validRange;\r\nfunction validRange(range, loose) {\r\n  try {\r\n    // Return '*' instead of '' so that truthiness works.\r\n    // This will throw if it's invalid anyway\r\n    return new Range(range, loose).range || '*';\r\n  } catch (er) {\r\n    return null;\r\n  }\r\n}\r\n\r\n// Use the define() function if we're in AMD land\r\nif (typeof define === 'function' && define.amd)\r\n  define('extensibility/node/node_modules/semver/semver.browser',exports);\r\n\r\n})(\r\n  typeof exports === 'object' ? exports :\r\n  typeof define === 'function' && define.amd ? {} :\r\n  semver = {}\r\n);\r\n\n//# sourceURL=/extensibility/node/node_modules/semver/semver.browser.js"),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\r\n/*global define, window, $, brackets, semver */\r\n/*unittests: ExtensionManager*/\r\n\r\n/**\r\n * The ExtensionManager fetches/caches the extension registry and provides\r\n * information about the status of installed extensions. ExtensionManager raises the\r\n * following events:\r\n *     statusChange - indicates that an extension has been installed/uninstalled or\r\n *         its status has otherwise changed. Second parameter is the id of the\r\n *         extension.\r\n *     registryUpdate - indicates that an existing extension was synchronized\r\n *         with new data from the registry.\r\n */\r\n\r\ndefine(\'extensibility/ExtensionManager\',[\'require\',\'exports\',\'module\',\'file/FileUtils\',\'extensibility/Package\',\'utils/Async\',\'utils/ExtensionLoader\',\'filesystem/FileSystem\',\'strings\',\'utils/StringUtils\',\'extensibility/node/node_modules/semver/semver.browser\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var FileUtils        = require("file/FileUtils"),\r\n        Package          = require("extensibility/Package"),\r\n        Async            = require("utils/Async"),\r\n        ExtensionLoader  = require("utils/ExtensionLoader"),\r\n        FileSystem       = require("filesystem/FileSystem"),\r\n        Strings          = require("strings"),\r\n        StringUtils      = require("utils/StringUtils");\r\n\r\n    // semver.browser is an AMD-compatible module\r\n    var semver = require("extensibility/node/node_modules/semver/semver.browser");\r\n\r\n    /**\r\n     * Extension status constants.\r\n     */\r\n    var ENABLED      = "enabled",\r\n        START_FAILED = "startFailed";\r\n\r\n    /**\r\n     * Extension location constants.\r\n     */\r\n    var LOCATION_DEFAULT = "default",\r\n        LOCATION_DEV     = "dev",\r\n        LOCATION_USER    = "user",\r\n        LOCATION_UNKNOWN = "unknown";\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object.<string, {metadata: Object, path: string, status: string}>}\r\n     * The set of all known extensions, both from the registry and locally installed.\r\n     * The keys are either "name" from package.json (for extensions that have package metadata)\r\n     * or the last segment of local file paths (for installed legacy extensions\r\n     * with no package metadata). The fields of each record are:\r\n     *     registryInfo: object containing the info for this id from the main registry (containing metadata, owner,\r\n     *         and versions). This will be null for legacy extensions.\r\n     *     installInfo: object containing the info for a locally-installed extension:\r\n     *         metadata: the package metadata loaded from the local package.json, or null if it\'s a legacy extension.\r\n     *             This will be different from registryInfo.metadata if there\'s a newer version in the registry.\r\n     *         path: the local path to the extension folder on disk\r\n     *         locationType: general type of installation; one of the LOCATION_* constants above\r\n     *         status: the current status, one of the status constants above\r\n     */\r\n    var extensions = {};\r\n\r\n    /**\r\n     * Requested changes to the installed extensions.\r\n     */\r\n    var _idsToRemove = [],\r\n        _idsToUpdate = [];\r\n\r\n    /**\r\n     * @private\r\n     * Synchronizes the information between the public registry and the installed\r\n     * extensions. Specifically, this makes the `owner` available in each and sets\r\n     * an `updateAvailable` flag.\r\n     *\r\n     * @param {string} id of the extension to synchronize\r\n     */\r\n    function synchronizeEntry(id) {\r\n        var entry = extensions[id];\r\n\r\n        // Do nothing if we only have one set of data\r\n        if (!entry || !entry.installInfo || !entry.registryInfo) {\r\n            return;\r\n        }\r\n\r\n        entry.installInfo.owner = entry.registryInfo.owner;\r\n        if (entry.installInfo.metadata && entry.installInfo.metadata.version && semver.lt(entry.installInfo.metadata.version, entry.registryInfo.metadata.version)) {\r\n            // Note: available update may still be incompatible; we check for this when rendering the Update button in ExtensionManagerView._renderItem()\r\n            entry.registryInfo.updateAvailable = true;\r\n            entry.installInfo.updateAvailable = true;\r\n        } else {\r\n            entry.installInfo.updateAvailable = false;\r\n            entry.registryInfo.updateAvailable = false;\r\n        }\r\n\r\n        $(exports).triggerHandler("registryUpdate", [id]);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Sets our data. For unit testing only.\r\n     */\r\n    function _setExtensions(newExtensions) {\r\n        exports.extensions = extensions = newExtensions;\r\n        Object.keys(extensions).forEach(function (id) {\r\n            synchronizeEntry(id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Clears out our existing data. For unit testing only.\r\n     */\r\n    function _reset() {\r\n        exports.extensions = extensions = {};\r\n        _idsToRemove = [];\r\n        _idsToUpdate = [];\r\n    }\r\n\r\n    /**\r\n     * Downloads the registry of Brackets extensions and stores the information in our\r\n     * extension info.\r\n     *\r\n     * @return {$.Promise} a promise that\'s resolved with the registry JSON data\r\n     * or rejected if the server can\'t be reached.\r\n     */\r\n    function downloadRegistry() {\r\n        var result = new $.Deferred();\r\n        $.ajax({\r\n            url: app.config.extension_registry,\r\n            dataType: "json",\r\n            cache: false\r\n        })\r\n            .done(function (data) {\r\n                Object.keys(data).forEach(function (id) {\r\n                    if (!extensions[id]) {\r\n                        extensions[id] = {};\r\n                    }\r\n                    extensions[id].registryInfo = data[id];\r\n                    synchronizeEntry(id);\r\n                });\r\n                result.resolve();\r\n            })\r\n            .fail(function () {\r\n                result.reject();\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Loads the package.json file in the given extension folder.\r\n     * @param {string} folder The extension folder.\r\n     * @return {$.Promise} A promise object that is resolved with the parsed contents of the package.json file,\r\n     *     or rejected if there is no package.json or the contents are not valid JSON.\r\n     */\r\n    function _loadPackageJson(folder) {\r\n        var file = FileSystem.getFileForPath(folder + "/package.json"),\r\n            result = new $.Deferred();\r\n        FileUtils.readAsText(file)\r\n            .done(function (text) {\r\n                try {\r\n                    var json = JSON.parse(text);\r\n                    result.resolve(json);\r\n                } catch (e) {\r\n                    result.reject();\r\n                }\r\n            })\r\n            .fail(function () {\r\n                result.reject();\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * When an extension is loaded, fetches the package.json and stores the extension in our map.\r\n     * @param {$.Event} e The event object\r\n     * @param {string} path The local path of the loaded extension\'s folder.\r\n     */\r\n    function _handleExtensionLoad(e, path) {\r\n        function setData(id, metadata) {\r\n            var locationType,\r\n                userExtensionPath = ExtensionLoader.getUserExtensionPath();\r\n            if (path.indexOf(userExtensionPath) === 0) {\r\n                locationType = LOCATION_USER;\r\n            } else {\r\n                var segments = path.split("/"), parent;\r\n                if (segments.length > 2) {\r\n                    parent = segments[segments.length - 2];\r\n                }\r\n                if (parent === "dev") {\r\n                    locationType = LOCATION_DEV;\r\n                } else if (parent === "default") {\r\n                    locationType = LOCATION_DEFAULT;\r\n                } else {\r\n                    locationType = LOCATION_UNKNOWN;\r\n                }\r\n            }\r\n            if (!extensions[id]) {\r\n                extensions[id] = {};\r\n            }\r\n            extensions[id].installInfo = {\r\n                metadata: metadata,\r\n                path: path,\r\n                locationType: locationType,\r\n                status: (e.type === "loadFailed" ? START_FAILED : ENABLED)\r\n            };\r\n            synchronizeEntry(id);\r\n            $(exports).triggerHandler("statusChange", [id]);\r\n        }\r\n\r\n        _loadPackageJson(path)\r\n            .done(function (metadata) {\r\n                setData(metadata.name, metadata);\r\n            })\r\n            .fail(function () {\r\n                // If there\'s no package.json, this is a legacy extension. It was successfully loaded,\r\n                // but we don\'t have an official ID or metadata for it, so we just create an id and\r\n                // "title" for it (which is the last segment of its pathname)\r\n                // and record that it\'s enabled.\r\n                var match = path.match(/\\/([^\\/]+)$/),\r\n                    name = (match && match[1]) || path,\r\n                    metadata = { name: name, title: name };\r\n                setData(name, metadata);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Determines if the given versions[] entry is compatible with the given Brackets API version, and if not\r\n     * specifies why.\r\n     * @param {Object} extVersion\r\n     * @param {string} apiVersion\r\n     * @return {{isCompatible: boolean, requiresNewer: ?boolean, compatibleVersion: ?string}}\r\n     */\r\n    function getCompatibilityInfoForVersion(extVersion, apiVersion) {\r\n        var requiredVersion = (extVersion.staruml || (extVersion.engines && extVersion.engines.staruml)),\r\n            result = {};\r\n        result.isCompatible = !requiredVersion || semver.satisfies(apiVersion, requiredVersion);\r\n        if (result.isCompatible) {\r\n            result.compatibleVersion = extVersion.version;\r\n        } else {\r\n            // Find out reason for incompatibility\r\n            if (requiredVersion.charAt(0) === \'<\') {\r\n                result.requiresNewer = false;\r\n            } else if (requiredVersion.charAt(0) === \'>\') {\r\n                result.requiresNewer = true;\r\n            } else if (requiredVersion.charAt(0) === "~") {\r\n                var compareVersion = requiredVersion.slice(1);\r\n                // Need to add .0s to this style of range in order to compare (since valid version\r\n                // numbers must have major/minor/patch).\r\n                if (compareVersion.match(/^[0-9]+$/)) {\r\n                    compareVersion += ".0.0";\r\n                } else if (compareVersion.match(/^[0-9]+\\.[0-9]+$/)) {\r\n                    compareVersion += ".0";\r\n                }\r\n                result.requiresNewer = semver.lt(apiVersion, compareVersion);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Finds the newest version of the entry that is compatible with the given Brackets API version, if any.\r\n     * @param {Object} entry The registry entry to check.\r\n     * @param {string} apiVersion The Brackets API version to check against.\r\n     * @return {{isCompatible: boolean, requiresNewer: ?boolean, compatibleVersion: ?string, isLatestVersion: boolean}}\r\n     *      Result contains an "isCompatible" member saying whether it\'s compatible. If compatible, "compatibleVersion"\r\n     *      specifies the newest version that is compatible and "isLatestVersion" indicates if this is the absolute\r\n     *      latest version of the extension or not. If !isCompatible or !isLatestVersion, "requiresNewer" says whether\r\n     *      the latest version is incompatible due to requiring a newer (vs. older) version of Brackets.\r\n     */\r\n    function getCompatibilityInfo(entry, apiVersion) {\r\n        if (!entry.versions) {\r\n            var fallback = getCompatibilityInfoForVersion(entry.metadata, apiVersion);\r\n            if (fallback.isCompatible) {\r\n                fallback.isLatestVersion = true;\r\n            }\r\n            return fallback;\r\n        }\r\n\r\n        var i = entry.versions.length - 1,\r\n            latestInfo = getCompatibilityInfoForVersion(entry.versions[i], apiVersion);\r\n\r\n        if (latestInfo.isCompatible) {\r\n            latestInfo.isLatestVersion = true;\r\n            return latestInfo;\r\n        } else {\r\n            // Look at earlier versions (skipping very latest version since we already checked it)\r\n            for (i--; i >= 0; i--) {\r\n                var compatInfo = getCompatibilityInfoForVersion(entry.versions[i], apiVersion);\r\n                if (compatInfo.isCompatible) {\r\n                    compatInfo.isLatestVersion = false;\r\n                    compatInfo.requiresNewer = latestInfo.requiresNewer;\r\n                    return compatInfo;\r\n                }\r\n            }\r\n\r\n            // No version is compatible, so just return info for the latest version\r\n            return latestInfo;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given an extension id and version number, returns the URL for downloading that extension from\r\n     * the repository. Does not guarantee that the extension exists at that URL.\r\n     * @param {string} id The extension\'s name from the metadata.\r\n     * @param {string} version The version to download.\r\n     * @return {string} The URL to download the extension from.\r\n     */\r\n    function getExtensionURL(id, version) {\r\n        return StringUtils.format(app.config.extension_url, id, version);\r\n    }\r\n\r\n    /**\r\n     * Removes the installed extension with the given id.\r\n     * @param {string} id The id of the extension to remove.\r\n     * @return {$.Promise} A promise that\'s resolved when the extension is removed or\r\n     *     rejected with an error if there\'s a problem with the removal.\r\n     */\r\n    function remove(id) {\r\n        var result = new $.Deferred();\r\n        if (extensions[id] && extensions[id].installInfo) {\r\n            Package.remove(extensions[id].installInfo.path)\r\n                .done(function () {\r\n                    extensions[id].installInfo = null;\r\n                    result.resolve();\r\n                    $(exports).triggerHandler("statusChange", [id]);\r\n                })\r\n                .fail(function (err) {\r\n                    result.reject(err);\r\n                });\r\n        } else {\r\n            result.reject(StringUtils.format(Strings.EXTENSION_NOT_INSTALLED, id));\r\n        }\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Updates an installed extension with the given package file.\r\n     * @param {string} id of the extension\r\n     * @param {string} packagePath path to the package file\r\n     * @return {$.Promise} A promise that\'s resolved when the extension is updated or\r\n     *     rejected with an error if there\'s a problem with the update.\r\n     */\r\n    function update(id, packagePath) {\r\n        return Package.installUpdate(packagePath, id);\r\n    }\r\n\r\n    /**\r\n     * Deletes any temporary files left behind by extensions that\r\n     * were marked for update.\r\n     */\r\n    function cleanupUpdates() {\r\n        Object.keys(_idsToUpdate).forEach(function (id) {\r\n            var filename = _idsToUpdate[id].localPath;\r\n            if (filename) {\r\n                FileSystem.getFileForPath(filename).unlink();\r\n            }\r\n        });\r\n        _idsToUpdate = {};\r\n    }\r\n\r\n    /**\r\n     * Unmarks all extensions marked for removal.\r\n     */\r\n    function unmarkAllForRemoval() {\r\n        _idsToRemove = {};\r\n    }\r\n\r\n    /**\r\n     * Marks an extension for later removal, or unmarks an extension previously marked.\r\n     * @param {string} id The id of the extension to mark for removal.\r\n     * @param {boolean} mark Whether to mark or unmark it.\r\n     */\r\n    function markForRemoval(id, mark) {\r\n        if (mark) {\r\n            _idsToRemove[id] = true;\r\n        } else {\r\n            delete _idsToRemove[id];\r\n        }\r\n        $(exports).triggerHandler("statusChange", [id]);\r\n    }\r\n\r\n    /**\r\n     * Returns true if an extension is marked for removal.\r\n     * @param {string} id The id of the extension to check.\r\n     * @return {boolean} true if it\'s been marked for removal, false otherwise.\r\n     */\r\n    function isMarkedForRemoval(id) {\r\n        return !!(_idsToRemove[id]);\r\n    }\r\n\r\n    /**\r\n     * Returns true if there are any extensions marked for removal.\r\n     * @return {boolean} true if there are extensions to remove\r\n     */\r\n    function hasExtensionsToRemove() {\r\n        return Object.keys(_idsToRemove).length > 0;\r\n    }\r\n\r\n    /**\r\n     * If a downloaded package appears to be an update, mark the extension for update.\r\n     * If an extension was previously marked for removal, marking for update will\r\n     * turn off the removal mark.\r\n     * @param {Object} installationResult info about the install provided by the Package.download function\r\n     */\r\n    function updateFromDownload(installationResult) {\r\n        var installationStatus = installationResult.installationStatus;\r\n        if (installationStatus === Package.InstallationStatuses.ALREADY_INSTALLED ||\r\n                installationStatus === Package.InstallationStatuses.NEEDS_UPDATE ||\r\n                installationStatus === Package.InstallationStatuses.SAME_VERSION ||\r\n                installationStatus === Package.InstallationStatuses.OLDER_VERSION) {\r\n            var id = installationResult.name;\r\n            delete _idsToRemove[id];\r\n            _idsToUpdate[id] = installationResult;\r\n            $(exports).triggerHandler("statusChange", [id]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the mark for an extension to be updated on restart. Also deletes the\r\n     * downloaded package file.\r\n     * @param {string} id The id of the extension for which the update is being removed\r\n     */\r\n    function removeUpdate(id) {\r\n        var installationResult = _idsToUpdate[id];\r\n        if (!installationResult) {\r\n            return;\r\n        }\r\n        if (installationResult.localPath) {\r\n            FileSystem.getFileForPath(installationResult.localPath).unlink();\r\n        }\r\n        delete _idsToUpdate[id];\r\n        $(exports).triggerHandler("statusChange", [id]);\r\n    }\r\n\r\n    /**\r\n     * Returns true if an extension is marked for update.\r\n     * @param {string} id The id of the extension to check.\r\n     * @return {boolean} true if it\'s been marked for update, false otherwise.\r\n     */\r\n    function isMarkedForUpdate(id) {\r\n        return !!(_idsToUpdate[id]);\r\n    }\r\n\r\n    /**\r\n     * Returns true if there are any extensions marked for update.\r\n     * @return {boolean} true if there are extensions to update\r\n     */\r\n    function hasExtensionsToUpdate() {\r\n        return Object.keys(_idsToUpdate).length > 0;\r\n    }\r\n\r\n    /**\r\n     * Removes extensions previously marked for removal.\r\n     * @return {$.Promise} A promise that\'s resolved when all extensions are removed, or rejected\r\n     *     if one or more extensions can\'t be removed. When rejected, the argument will be an\r\n     *     array of error objects, each of which contains an "item" property with the id of the\r\n     *     failed extension and an "error" property with the actual error.\r\n     */\r\n    function removeMarkedExtensions() {\r\n        return Async.doInParallel_aggregateErrors(\r\n            Object.keys(_idsToRemove),\r\n            function (id) {\r\n                return remove(id);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Updates extensions previously marked for update.\r\n     * @return {$.Promise} A promise that\'s resolved when all extensions are updated, or rejected\r\n     *     if one or more extensions can\'t be updated. When rejected, the argument will be an\r\n     *     array of error objects, each of which contains an "item" property with the id of the\r\n     *     failed extension and an "error" property with the actual error.\r\n     */\r\n    function updateExtensions() {\r\n        return Async.doInParallel_aggregateErrors(\r\n            Object.keys(_idsToUpdate),\r\n            function (id) {\r\n                var installationResult = _idsToUpdate[id];\r\n                return update(installationResult.name, installationResult.localPath);\r\n            }\r\n        );\r\n    }\r\n\r\n    // Listen to extension load and loadFailed events\r\n    $(ExtensionLoader)\r\n        .on("load", _handleExtensionLoad)\r\n        .on("loadFailed", _handleExtensionLoad);\r\n\r\n    // Public exports\r\n    exports.downloadRegistry = downloadRegistry;\r\n    exports.getCompatibilityInfo = getCompatibilityInfo;\r\n    exports.getExtensionURL = getExtensionURL;\r\n    exports.remove = remove;\r\n    exports.update = update;\r\n    exports.extensions = extensions;\r\n    exports.cleanupUpdates = cleanupUpdates;\r\n    exports.markForRemoval = markForRemoval;\r\n    exports.isMarkedForRemoval = isMarkedForRemoval;\r\n    exports.unmarkAllForRemoval = unmarkAllForRemoval;\r\n    exports.hasExtensionsToRemove = hasExtensionsToRemove;\r\n    exports.updateFromDownload = updateFromDownload;\r\n    exports.removeUpdate = removeUpdate;\r\n    exports.isMarkedForUpdate = isMarkedForUpdate;\r\n    exports.hasExtensionsToUpdate = hasExtensionsToUpdate;\r\n    exports.removeMarkedExtensions = removeMarkedExtensions;\r\n    exports.updateExtensions = updateExtensions;\r\n\r\n    exports.ENABLED = ENABLED;\r\n    exports.START_FAILED = START_FAILED;\r\n\r\n    exports.LOCATION_DEFAULT = LOCATION_DEFAULT;\r\n    exports.LOCATION_DEV = LOCATION_DEV;\r\n    exports.LOCATION_USER = LOCATION_USER;\r\n    exports.LOCATION_UNKNOWN = LOCATION_UNKNOWN;\r\n\r\n    // For unit testing only\r\n    exports._reset = _reset;\r\n    exports._setExtensions = _setExtensions;\r\n});\r\n\n//# sourceURL=/extensibility/ExtensionManager.js'),eval('define(\'text!htmlContent/install-extension-dialog.html\',[],function () { return \'<div class="install-extension-dialog dialog modal" data-title="{{title}}">\\r\\n    <div class="dialog-body">\\r\\n        <div class="field-container input-field">\\r\\n            <input type="text" placeholder="{{INSTALL_EXTENSION_HINT}}" class="k-input k-textbox url" />\\r\\n        </div>\\r\\n        <div class="field-container message-field">\\r\\n            <div class="message"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n        <button class="k-button dialog-button primary" data-button-id="ok" disabled>{{Strings.INSTALL}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/install-extension-dialog.html'),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, window, $, brackets, Mustache, document */\r\n/*unittests: Install Extension Dialog*/\r\n\r\ndefine(\'extensibility/InstallExtensionDialog\',[\'require\',\'exports\',\'module\',\'dialogs/Dialogs\',\'utils/StringUtils\',\'strings\',\'filesystem/FileSystem\',\'utils/KeyEvent\',\'extensibility/Package\',\'text!htmlContent/install-extension-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Dialogs                = require("dialogs/Dialogs"),\r\n        StringUtils            = require("utils/StringUtils"),\r\n        Strings                = require("strings"),\r\n        FileSystem             = require("filesystem/FileSystem"),\r\n        KeyEvent               = require("utils/KeyEvent"),\r\n        Package                = require("extensibility/Package"),\r\n        InstallDialogTemplate  = require("text!htmlContent/install-extension-dialog.html");\r\n\r\n    var STATE_CLOSED              = 0,\r\n        STATE_START               = 1,\r\n        STATE_VALID_URL           = 2,\r\n        STATE_INSTALLING          = 3,\r\n        STATE_INSTALLED           = 4,\r\n        STATE_INSTALL_FAILED      = 5,\r\n        STATE_CANCELING_INSTALL   = 6,\r\n        STATE_CANCELING_HUNG      = 7,\r\n        STATE_INSTALL_CANCELED    = 8,\r\n        STATE_ALREADY_INSTALLED   = 9,\r\n        STATE_OVERWRITE_CONFIRMED = 10,\r\n        STATE_NEEDS_UPDATE        = 11;\r\n\r\n    /**\r\n     * @constructor\r\n     * Creates a new extension installer dialog.\r\n     * @param {{install: function(url), cancel: function()}} installer The installer backend to use.\r\n     */\r\n    function InstallExtensionDialog(installer, _isUpdate) {\r\n        this._installer = installer;\r\n        this._state = STATE_CLOSED;\r\n        this._installResult = null;\r\n        this._isUpdate = _isUpdate;\r\n\r\n        // Timeout before we allow user to leave STATE_INSTALL_CANCELING without waiting for a resolution\r\n        // (per-instance so we can poke it for unit testing)\r\n        this._cancelTimeout = 10 * 1000;\r\n    }\r\n\r\n    /** @type {jQuery} The dialog root. */\r\n    InstallExtensionDialog.prototype.$dlg = null;\r\n\r\n    /** @type {jQuery} The url input field. */\r\n    InstallExtensionDialog.prototype.$url = null;\r\n\r\n    /** @type {jQuery} The ok button. */\r\n    InstallExtensionDialog.prototype.$okButton = null;\r\n\r\n    /** @type {jQuery} The cancel button. */\r\n    InstallExtensionDialog.prototype.$cancelButton = null;\r\n\r\n    /** @type {jQuery} The area containing the url input label and field. */\r\n    InstallExtensionDialog.prototype.$inputArea = null;\r\n\r\n    /** @type {jQuery} The area containing the installation message and spinner. */\r\n    InstallExtensionDialog.prototype.$msgArea = null;\r\n\r\n    /** @type {jQuery} The span containing the installation message. */\r\n    InstallExtensionDialog.prototype.$msg = null;\r\n\r\n    /** @type {$.Deferred} A deferred that\'s resolved/rejected when the dialog is closed and\r\n        something has/hasn\'t been installed successfully. */\r\n    InstallExtensionDialog.prototype._dialogDeferred = null;\r\n\r\n\r\n    /** @type {{install: function(url), cancel: function()}} installer The installer backend for this dialog. */\r\n    InstallExtensionDialog.prototype._installer = null;\r\n\r\n    /** @type {number} The current state of the dialog; one of the STATE_* constants above. */\r\n    InstallExtensionDialog.prototype._state = null;\r\n\r\n    /**\r\n     * @private\r\n     * Transitions the dialog into a new state as the installation proceeds.\r\n     * @param {number} newState The state to transition into; one of the STATE_* variables.\r\n     */\r\n    InstallExtensionDialog.prototype._enterState = function (newState) {\r\n        var url,\r\n            msg,\r\n            self = this,\r\n            prevState = this._state;\r\n\r\n        // Store the new state up front in case some of the processing below ends up changing\r\n        // the state again immediately.\r\n        this._state = newState;\r\n\r\n        switch (newState) {\r\n        case STATE_START:\r\n            // This should match the default appearance of the dialog when it first opens.\r\n            this.$msg.find(".spinner").remove();\r\n            this.$msgArea.hide();\r\n            this.$inputArea.show();\r\n            this.$okButton\r\n                .prop("disabled", true)\r\n                .text(Strings.INSTALL);\r\n            break;\r\n\r\n        case STATE_VALID_URL:\r\n            this.$okButton.prop("disabled", false);\r\n            break;\r\n\r\n        case STATE_INSTALLING:\r\n            url = this.$url.val().trim();\r\n            this.$inputArea.hide();\r\n            this.$msg.text(StringUtils.format(Strings.INSTALLING_FROM, url))\r\n                .append("<div class=\'spinner\'/>");\r\n            this.$msgArea.show();\r\n            this.$okButton.prop("disabled", true);\r\n            this._installer.install(url)\r\n                .done(function (result) {\r\n                    self._installResult = result;\r\n                    if (result.installationStatus === Package.InstallationStatuses.ALREADY_INSTALLED ||\r\n                            result.installationStatus === Package.InstallationStatuses.OLDER_VERSION ||\r\n                            result.installationStatus === Package.InstallationStatuses.SAME_VERSION) {\r\n                        self._enterState(STATE_ALREADY_INSTALLED);\r\n                    } else if (result.installationStatus === Package.InstallationStatuses.NEEDS_UPDATE) {\r\n                        self._enterState(STATE_NEEDS_UPDATE);\r\n                    } else {\r\n                        self._enterState(STATE_INSTALLED);\r\n                    }\r\n                })\r\n                .fail(function (err) {\r\n                    // If the "failure" is actually a user-requested cancel, don\'t show an error UI\r\n                    if (err === "CANCELED") {\r\n                        console.assert(self._state === STATE_CANCELING_INSTALL || self._state === STATE_CANCELING_HUNG);\r\n                        self._enterState(STATE_INSTALL_CANCELED);\r\n                    } else {\r\n                        self._errorMessage = Package.formatError(err);\r\n                        self._enterState(STATE_INSTALL_FAILED);\r\n                    }\r\n                });\r\n            break;\r\n\r\n        case STATE_CANCELING_INSTALL:\r\n            // This should call back the STATE_INSTALLING fail() handler above, unless it\'s too late to cancel\r\n            // in which case we\'ll still jump to STATE_INSTALLED after this\r\n            this.$cancelButton.prop("disabled", true);\r\n            this.$msg.text(Strings.CANCELING_INSTALL);\r\n            this._installer.cancel();\r\n            window.setTimeout(function () {\r\n                if (self._state === STATE_CANCELING_INSTALL) {\r\n                    self._enterState(STATE_CANCELING_HUNG);\r\n                }\r\n            }, this._cancelTimeout);\r\n            break;\r\n\r\n        case STATE_CANCELING_HUNG:\r\n            this.$msg.text(Strings.CANCELING_HUNG);\r\n            this.$okButton\r\n                .removeAttr("disabled")\r\n                .text(Strings.CLOSE);\r\n            break;\r\n\r\n        case STATE_INSTALLED:\r\n        case STATE_INSTALL_FAILED:\r\n        case STATE_INSTALL_CANCELED:\r\n        case STATE_NEEDS_UPDATE:\r\n            if (newState === STATE_INSTALLED) {\r\n                msg = Strings.INSTALL_SUCCEEDED;\r\n            } else if (newState === STATE_INSTALL_FAILED) {\r\n                msg = Strings.INSTALL_FAILED;\r\n            } else if (newState === STATE_NEEDS_UPDATE) {\r\n                msg = Strings.EXTENSION_UPDATE_INSTALLED;\r\n            } else {\r\n                msg = Strings.INSTALL_CANCELED;\r\n            }\r\n            this.$msg.html($("<strong/>").text(msg));\r\n            if (this._errorMessage) {\r\n                this.$msg.append($("<p/>").text(this._errorMessage));\r\n            }\r\n            this.$okButton\r\n                .removeAttr("disabled")\r\n                .text(Strings.CLOSE);\r\n            this.$cancelButton.hide();\r\n            break;\r\n\r\n        case STATE_ALREADY_INSTALLED:\r\n            var installResult = this._installResult;\r\n            var status = installResult.installationStatus;\r\n            var msgText = Strings["EXTENSION_" + status];\r\n            if (status === Package.InstallationStatuses.OLDER_VERSION) {\r\n                msgText = StringUtils.format(msgText, installResult.metadata.version, installResult.installedVersion);\r\n            }\r\n            this.$msg.text(msgText);\r\n            this.$okButton\r\n                .prop("disabled", false)\r\n                .text(Strings.OVERWRITE);\r\n            break;\r\n\r\n        case STATE_OVERWRITE_CONFIRMED:\r\n            this._enterState(STATE_CLOSED);\r\n            break;\r\n\r\n        case STATE_CLOSED:\r\n            $(document.body).off(".installDialog");\r\n\r\n           // Only resolve as successful if we actually installed something.\r\n            Dialogs.cancelModalDialogIfOpen("install-extension-dialog");\r\n            if (prevState === STATE_INSTALLED || prevState === STATE_NEEDS_UPDATE ||\r\n                    prevState === STATE_OVERWRITE_CONFIRMED) {\r\n                this._dialogDeferred.resolve(this._installResult);\r\n            } else {\r\n                this._dialogDeferred.reject();\r\n            }\r\n            break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Handle a click on the Cancel button, which either cancels an ongoing installation (leaving\r\n     * the dialog open), or closes the dialog if no installation is in progress.\r\n     */\r\n    InstallExtensionDialog.prototype._handleCancel = function () {\r\n        if (this._state === STATE_INSTALLING) {\r\n            this._enterState(STATE_CANCELING_INSTALL);\r\n        } else if (this._state === STATE_ALREADY_INSTALLED) {\r\n            // If we were prompting the user about overwriting a previous installation,\r\n            // and the user cancels, we can delete the downloaded file.\r\n            if (this._installResult && this._installResult.localPath) {\r\n                var filename = this._installResult.localPath;\r\n                FileSystem.getFileForPath(filename).unlink();\r\n            }\r\n            this._enterState(STATE_CLOSED);\r\n        } else if (this._state !== STATE_CANCELING_INSTALL) {\r\n            this._enterState(STATE_CLOSED);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Handle a click on the default button, which is "Install" while we\'re waiting for the\r\n     * user to enter a URL, and "Close" once we\'ve successfully finished installation.\r\n     */\r\n    InstallExtensionDialog.prototype._handleOk = function () {\r\n        if (this._state === STATE_INSTALLED ||\r\n                this._state === STATE_INSTALL_FAILED ||\r\n                this._state === STATE_INSTALL_CANCELED ||\r\n                this._state === STATE_CANCELING_HUNG ||\r\n                this._state === STATE_NEEDS_UPDATE) {\r\n            // In these end states, this is a "Close" button: just close the dialog and indicate\r\n            // success.\r\n            this._enterState(STATE_CLOSED);\r\n        } else if (this._state === STATE_VALID_URL) {\r\n            this._enterState(STATE_INSTALLING);\r\n        } else if (this._state === STATE_ALREADY_INSTALLED) {\r\n            this._enterState(STATE_OVERWRITE_CONFIRMED);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Handle key up events on the document. We use this to detect the Esc key.\r\n     */\r\n    InstallExtensionDialog.prototype._handleKeyUp = function (e) {\r\n        if (e.keyCode === KeyEvent.DOM_VK_ESCAPE) {\r\n            this._handleCancel();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Handle typing in the URL field.\r\n     */\r\n    InstallExtensionDialog.prototype._handleUrlInput = function (e) {\r\n        var url     = this.$url.val().trim(),\r\n            valid   = (url !== "");\r\n        if (!valid && this._state === STATE_VALID_URL) {\r\n            this._enterState(STATE_START);\r\n        } else if (valid && this._state === STATE_START) {\r\n            this._enterState(STATE_VALID_URL);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Closes the dialog if it\'s not already closed. For unit testing only.\r\n     */\r\n    InstallExtensionDialog.prototype._close = function () {\r\n        if (this._state !== STATE_CLOSED) {\r\n            this._enterState(STATE_CLOSED);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Initialize and show the dialog.\r\n     * @param {string=} urlToInstall If specified, immediately starts installing the given file as if the user had\r\n     *     specified it.\r\n     * @return {$.Promise} A promise object that will be resolved when the selected extension\r\n     *     has finished installing, or rejected if the dialog is cancelled.\r\n     */\r\n    InstallExtensionDialog.prototype.show = function (urlToInstall) {\r\n        if (this._state !== STATE_CLOSED) {\r\n            // Somehow the dialog got invoked twice. Just ignore this.\r\n            return this._dialogDeferred.promise();\r\n        }\r\n\r\n        var context = {\r\n            Strings: Strings,\r\n            title: this._isUpdate ? Strings.UPDATE_EXTENSION_TITLE : Strings.INSTALL_EXTENSION_TITLE,\r\n            includeBrowseExtensions: !!app.config.extension_listing_url\r\n        };\r\n\r\n        // We ignore the promise returned by showModalDialogUsingTemplate, since we\'re managing the\r\n        // lifecycle of the dialog ourselves.\r\n        Dialogs.showModalDialogUsingTemplate(Mustache.render(InstallDialogTemplate, context), false);\r\n\r\n        this.$dlg          = $(".install-extension-dialog.instance");\r\n        this.$url          = this.$dlg.find(".url").focus();\r\n        this.$okButton     = this.$dlg.find(".dialog-button[data-button-id=\'ok\']");\r\n        this.$cancelButton = this.$dlg.find(".dialog-button[data-button-id=\'cancel\']");\r\n        this.$inputArea    = this.$dlg.find(".input-field");\r\n        this.$msgArea      = this.$dlg.find(".message-field");\r\n        this.$msg          = this.$msgArea.find(".message");\r\n\r\n        this.$okButton.on("click", this._handleOk.bind(this));\r\n        this.$cancelButton.on("click", this._handleCancel.bind(this));\r\n        this.$url.on("input", this._handleUrlInput.bind(this));\r\n        $(document.body).on("keyup.installDialog", this._handleKeyUp.bind(this));\r\n\r\n        this._enterState(STATE_START);\r\n        if (urlToInstall) {\r\n            // Act as if the user had manually entered the URL.\r\n            this.$url.val(urlToInstall);\r\n            this._enterState(STATE_VALID_URL);\r\n            this._enterState(STATE_INSTALLING);\r\n        }\r\n\r\n        this._dialogDeferred = new $.Deferred();\r\n        return this._dialogDeferred.promise();\r\n    };\r\n\r\n\r\n    /** Mediates between this module and the Package extension-installation utils. Mockable for unit-testing. */\r\n    function InstallerFacade() { }\r\n    InstallerFacade.prototype.install = function (url) {\r\n        if (this.pendingInstall) {\r\n            console.error("Extension installation already pending");\r\n            return new $.Deferred().reject("DOWNLOAD_ID_IN_USE").promise();\r\n        }\r\n        this.pendingInstall = Package.installFromURL(url);\r\n\r\n        // Store now since we\'ll null pendingInstall immediately if the promise was resolved synchronously\r\n        var promise = this.pendingInstall.promise;\r\n\r\n        var self = this;\r\n        this.pendingInstall.promise.always(function () {\r\n            self.pendingInstall = null;\r\n        });\r\n\r\n        return promise;\r\n    };\r\n    InstallerFacade.prototype.cancel = function () {\r\n        this.pendingInstall.cancel();\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Show a dialog that allows the user to enter the URL of an extension ZIP file to install.\r\n     * @return {$.Promise} A promise object that will be resolved when the selected extension\r\n     *     has finished installing, or rejected if the dialog is cancelled.\r\n     */\r\n    function showDialog() {\r\n        var dlg = new InstallExtensionDialog(new InstallerFacade());\r\n        return dlg.show();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Show the installation dialog and automatically begin installing the given URL.\r\n     * @param {string=} urlToInstall If specified, immediately starts installing the given file as if the user had\r\n     *     specified it.\r\n     * @return {$.Promise} A promise object that will be resolved when the selected extension\r\n     *     has finished installing, or rejected if the dialog is cancelled.\r\n     */\r\n    function installUsingDialog(urlToInstall, _isUpdate) {\r\n        var dlg = new InstallExtensionDialog(new InstallerFacade(), _isUpdate);\r\n        return dlg.show(urlToInstall);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Show the update dialog and automatically begin downloading the update from the given URL.\r\n     * @param {string} urlToUpdate URL to download\r\n     * @return {$.Promise} A promise object that will be resolved when the selected extension\r\n     *     has finished downloading, or rejected if the dialog is cancelled.\r\n     */\r\n    function updateUsingDialog(urlToUpdate) {\r\n        return installUsingDialog(urlToUpdate, true);\r\n    }\r\n\r\n    exports.showDialog          = showDialog;\r\n    exports.installUsingDialog  = installUsingDialog;\r\n    exports.updateUsingDialog   = updateUsingDialog;\r\n\r\n    // Exposed for unit testing only\r\n    exports._Dialog = InstallExtensionDialog;\r\n});\r\n\n//# sourceURL=/extensibility/InstallExtensionDialog.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n/*\r\n * N.B.: This file was copied from `lib/registry_utils.js` in `https://github.com/adobe/brackets-registry`.\r\n * We can\'t use the exact same file currently because Brackets uses AMD-style modules, so this version has\r\n * the AMD wrapper added (and is reindented to avoid JSLint complaints).. If changes are made here, the \r\n * version in the registry app should be kept in sync.\r\n * In the future, we should have a better mechanism for sharing code between the two.\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define*/\r\n\r\ndefine(\'extensibility/registry_utils\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    // From Brackets StringUtils\r\n    function htmlEscape(str) {\r\n        return String(str)\r\n            .replace(/&/g, "&amp;")\r\n            .replace(/"/g, "&quot;")\r\n            .replace(/\'/g, "&#39;")\r\n            .replace(/</g, "&lt;")\r\n            .replace(/>/g, "&gt;");\r\n    }\r\n    \r\n    /**\r\n     * Gets the last version from the given object and returns the short form of its date.\r\n     * Assumes "this" is the current template context.\r\n     * @return {string} The formatted date.\r\n     */\r\n    exports.lastVersionDate = function () {\r\n        var result;\r\n        if (this.versions && this.versions.length) {\r\n            result = this.versions[this.versions.length - 1].published;\r\n            if (result) {\r\n                // Just return the ISO-formatted date, which is the portion up to the "T".\r\n                var dateEnd = result.indexOf("T");\r\n                if (dateEnd !== -1) {\r\n                    result = result.substr(0, dateEnd);\r\n                }\r\n            }\r\n        }\r\n        return result || "";\r\n    };\r\n    \r\n    /**\r\n     * Returns a more friendly display form of the owner\'s internal user id.\r\n     * Assumes "this" is the current template context.\r\n     * @return {string} A display version in the form "id (service)".\r\n     */\r\n    exports.formatUserId = function () {\r\n        var friendlyName;\r\n        if (this.owner) {\r\n            var nameComponents = this.owner.split(":");\r\n            friendlyName = nameComponents[1];\r\n        }\r\n        return friendlyName;\r\n    };\r\n    \r\n    /**\r\n     * Given a registry item, returns a URL that represents its owner\'s page on the auth service.\r\n     * Currently only handles GitHub.\r\n     * Assumes "this" is the current template context.\r\n     * @return {string} A link to that user\'s page on the service.\r\n     */\r\n    exports.ownerLink = function () {\r\n        var url;\r\n        if (this.owner) {\r\n            var nameComponents = this.owner.split(":");\r\n            if (nameComponents[0] === "github") {\r\n                url = "https://github.com/" + nameComponents[1];\r\n            }\r\n        }\r\n        return url;\r\n    };\r\n\r\n    /**\r\n     * Given a registry item, formats the author information, including a link to the owner\'s\r\n     * github page (if available) and the author\'s name from the metadata.\r\n     */\r\n    exports.authorInfo = function () {\r\n        var result = "",\r\n            ownerLink = exports.ownerLink.call(this),\r\n            userId = exports.formatUserId.call(this);\r\n        if (this.metadata && this.metadata.author) {\r\n            result = htmlEscape(this.metadata.author.name || this.metadata.author);\r\n        } else if (userId) {\r\n            result = htmlEscape(userId);\r\n        }\r\n        if (ownerLink) {\r\n            result = "<a href=\'" + htmlEscape(ownerLink) + "\' title=\'" + htmlEscape(ownerLink) + "\'>" + result + "</a>";\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of current registry entries, sorted by the publish date of the latest version of each entry.\r\n     * @param {object} registry The unsorted registry.\r\n     * @param {string} subkey The subkey to look for the registry metadata in. If unspecified, assumes\r\n     *     we should look at the top level of the object.\r\n     * @return {Array} Sorted array of registry entries.\r\n     */\r\n    exports.sortRegistry = function (registry, subkey) {\r\n        function getPublishTime(entry) {\r\n            if (entry.versions) {\r\n                return new Date(entry.versions[entry.versions.length - 1].published).getTime();\r\n            }\r\n            \r\n            return Number.NEGATIVE_INFINITY;\r\n        }\r\n        \r\n        var sortedEntries = [];\r\n    \r\n        // Sort the registry by last published date (newest first).\r\n        Object.keys(registry).forEach(function (key) {\r\n            sortedEntries.push(registry[key]);\r\n        });\r\n        sortedEntries.sort(function (entry1, entry2) {\r\n            return getPublishTime((subkey && entry2[subkey]) || entry2) -\r\n                getPublishTime((subkey && entry1[subkey]) || entry1);\r\n        });\r\n        \r\n        return sortedEntries;\r\n    };\r\n});\n//# sourceURL=/extensibility/registry_utils.js'),eval('define(\'text!htmlContent/extension-manager-view-item.html\',[],function () { return \'<tr>\\r\\n    <td class="ext-info">\\r\\n        <span class="ext-name">{{#metadata.title}}{{metadata.title}}{{/metadata.title}}{{^metadata.title}}{{metadata.name}}{{/metadata.title}}</span>\\r\\n        <span class="muted ext-version">{{metadata.version}}</span>\\r\\n        {{#authorInfo}}\\r\\n        <span class="muted ext-author-name">{{{authorInfo}}}</span>\\r\\n        {{/authorInfo}}\\r\\n        {{#hasVersionInfo}}\\r\\n            <span class="muted ext-date"> &mdash; {{lastVersionDate}}</span>\\r\\n        {{/hasVersionInfo}}\\r\\n    </td>\\r\\n    <td class="ext-desc">\\r\\n        {{#showInstallButton}}\\r\\n            {{^isCompatible}}\\r\\n                <div class="alert warning">\\r\\n                    {{#requiresNewer}}{{Strings.EXTENSION_INCOMPATIBLE_NEWER}}{{/requiresNewer}}\\r\\n                    {{^requiresNewer}}{{Strings.EXTENSION_INCOMPATIBLE_OLDER}}{{/requiresNewer}}\\r\\n                </div>\\r\\n            {{/isCompatible}}\\r\\n            {{#isCompatible}}\\r\\n                {{^isCompatibleLatest}}\\r\\n                    <div class="alert warning">\\r\\n                        {{installWarning}}\\r\\n                    </div>\\r\\n                {{/isCompatibleLatest}}\\r\\n            {{/isCompatible}}\\r\\n        {{/showInstallButton}}\\r\\n        {{metadata.description}}\\r\\n        {{^metadata.description}}\\r\\n            <p class="muted"><em>{{Strings.EXTENSION_NO_DESCRIPTION}}</em></p>\\r\\n        {{/metadata.description}}\\r\\n        <div>\\r\\n            {{#metadata.issues}}\\r\\n            <a title="{{metadata.issues}}" href="{{metadata.issues}}">{{Strings.EXTENSION_ISSUES}}</a>&nbsp;&nbsp;\\r\\n            {{/metadata.issues}}\\r\\n            {{#metadata.homepage}}\\r\\n            <a title="{{metadata.homepage}}" href="{{metadata.homepage}}">{{Strings.EXTENSION_MORE_INFO}}</a>\\r\\n            {{/metadata.homepage}}\\r\\n        </div>\\r\\n        {{#metadata.keywords.length}}\\r\\n            <br/>\\r\\n            <span class="ext-keywords">{{Strings.EXTENSION_KEYWORDS}}:\\r\\n            {{#metadata.keywords}}\\r\\n                {{.}}\\r\\n            {{/metadata.keywords}}\\r\\n            </span>\\r\\n        {{/metadata.keywords.length}}\\r\\n    </td>\\r\\n    <!--\\r\\n    <td class="ext-author">\\r\\n        {{#authorImageUrl}}\\r\\n        <img class="ext-author-image" src="{{authorImageUrl}}">\\r\\n        {{/authorImageUrl}}\\r\\n        {{^authorImageUrl}}\\r\\n        <div>Author:</div>\\r\\n        {{/authorImageUrl}}\\r\\n    </td>\\r\\n    -->\\r\\n    <td class="ext-action">\\r\\n        {{#showInstallButton}}\\r\\n            <button class="k-button install" data-extension-id="{{metadata.name}}" {{^allowInstall}}disabled{{/allowInstall}}>\\r\\n                {{^isInstalled}}{{Strings.INSTALL}}{{/isInstalled}}\\r\\n                {{#isInstalled}}{{Strings.EXTENSION_INSTALLED}}{{/isInstalled}}\\r\\n            </button>\\r\\n        {{/showInstallButton}}\\r\\n        {{#isInstalled}}\\r\\n            {{#showUpdateButton}}\\r\\n                <button class="k-button update" data-extension-id="{{metadata.name}}" {{^allowUpdate}}disabled title="{{updateNotAllowedReason}}"{{/allowUpdate}}>\\r\\n                    {{Strings.UPDATE}}\\r\\n                </button>\\r\\n            {{/showUpdateButton}}\\r\\n            {{#removalAllowed}}\\r\\n                <button class="k-button remove" data-extension-id="{{metadata.name}}" {{^allowRemove}}disabled title="{{Strings.CANT_REMOVE_DEV}}"{{/allowRemove}}>\\r\\n                    {{Strings.REMOVE}}\\r\\n                </button>\\r\\n            {{/removalAllowed}}\\r\\n            {{#failedToStart}}\\r\\n                {{^isMarkedForRemoval}}\\r\\n                    {{Strings.EXTENSION_ERROR}} {{#allowRemove}}(<a class="remove" data-extension-id="{{metadata.name}}">{{Strings.REMOVE}}</a>){{/allowRemove}}\\r\\n                {{/isMarkedForRemoval}}\\r\\n            {{/failedToStart}}\\r\\n            {{#isMarkedForRemoval}}\\r\\n                {{Strings.MARKED_FOR_REMOVAL}} (<a class="undo-remove" data-extension-id="{{metadata.name}}" href="#">{{Strings.UNDO_REMOVE}}</a>)\\r\\n            {{/isMarkedForRemoval}}\\r\\n            {{#isMarkedForUpdate}}\\r\\n                {{Strings.MARKED_FOR_UPDATE}} (<a class="undo-update" data-extension-id="{{metadata.name}}" href="#">{{Strings.UNDO_UPDATE}}</a>)\\r\\n            {{/isMarkedForUpdate}}\\r\\n        {{/isInstalled}}\\r\\n    </td>\\r\\n</tr>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/extension-manager-view-item.html'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, window, $, brackets, Mustache, app, md5 */\r\n/*unittests: ExtensionManager*/\r\n\r\ndefine(\'extensibility/ExtensionManagerView\',[\'require\',\'exports\',\'module\',\'strings\',\'utils/StringUtils\',\'utils/Helper\',\'extensibility/ExtensionManager\',\'extensibility/registry_utils\',\'extensibility/InstallExtensionDialog\',\'text!htmlContent/extension-manager-view-item.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Strings                   = require("strings"),\r\n        StringUtils               = require("utils/StringUtils"),\r\n        Helper                    = require("utils/Helper"),\r\n        ExtensionManager          = require("extensibility/ExtensionManager"),\r\n        registry_utils            = require("extensibility/registry_utils"),\r\n        InstallExtensionDialog    = require("extensibility/InstallExtensionDialog"),\r\n        itemTemplate              = require("text!htmlContent/extension-manager-view-item.html");\r\n\r\n    /**\r\n     * @constructor\r\n     * Creates a view enabling the user to install and manage extensions. Must be initialized\r\n     * with initialize(). When the view is closed, dispose() must be called.\r\n     */\r\n    function ExtensionManagerView() {\r\n    }\r\n\r\n    /**\r\n     * Initializes the view to show a set of extensions.\r\n     * @param {ExtensionManagerViewModel} model Model object containing extension data to view\r\n     * @return {$.Promise} a promise that\'s resolved once the view has been initialized. Never\r\n     *     rejected.\r\n     */\r\n    ExtensionManagerView.prototype.initialize = function (model) {\r\n        var self = this,\r\n            result = new $.Deferred();\r\n        this.model = model;\r\n        this._itemTemplate = itemTemplate; /*Mustache.compile(itemTemplate);*/\r\n        this._itemViews = {};\r\n        this.$el = $("<div class=\'extension-list\' id=\'" + this.model.source + "\'/>");\r\n        this._$emptyMessage = $("<div class=\'empty-message\'/>")\r\n            .appendTo(this.$el);\r\n        this._$infoMessage = $("<div class=\'info-message\'/>")\r\n            .appendTo(this.$el).html(this.model.infoMessage);\r\n        this._$table = $("<table class=\'table\'/>").appendTo(this.$el);\r\n\r\n        this.model.initialize().done(function () {\r\n            self._setupEventHandlers();\r\n        }).always(function () {\r\n            self._render();\r\n            result.resolve();\r\n        });\r\n\r\n        return result.promise();\r\n    };\r\n\r\n    /**\r\n     * @type {jQueryObject}\r\n     * The root of the view\'s DOM tree.\r\n     */\r\n    ExtensionManagerView.prototype.$el = null;\r\n\r\n    /**\r\n     * @type {Model}\r\n     * The view\'s model. Handles sorting and filtering of items in the view.\r\n     */\r\n    ExtensionManagerView.prototype.model = null;\r\n\r\n    /**\r\n     * @type {jQueryObject}\r\n     * Element showing a message when there are no extensions.\r\n     */\r\n    ExtensionManagerView.prototype._$emptyMessage = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {jQueryObject}\r\n     * The root of the table inside the view.\r\n     */\r\n    ExtensionManagerView.prototype._$table = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {function} The compiled template we use for rendering items in the extension list.\r\n     */\r\n    ExtensionManagerView.prototype._itemTemplate = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object.<string, jQueryObject>}\r\n     * The individual views for each item, keyed by the extension ID.\r\n     */\r\n    ExtensionManagerView.prototype._itemViews = null;\r\n\r\n    /**\r\n     * @private\r\n     * Attaches our event handlers. We wait to do this until we\'ve fully fetched the extension list.\r\n     */\r\n    ExtensionManagerView.prototype._setupEventHandlers = function () {\r\n        var self = this;\r\n\r\n        // Listen for model data and filter changes.\r\n        $(this.model)\r\n            .on("filter", function () {\r\n                self._render();\r\n            })\r\n            .on("change", function (e, id) {\r\n                var extensions = self.model.extensions,\r\n                    $oldItem = self._itemViews[id];\r\n                self._updateMessage();\r\n                if (self.model.filterSet.indexOf(id) === -1) {\r\n                    // This extension is not in the filter set. Remove it from the view if we\r\n                    // were rendering it previously.\r\n                    if ($oldItem) {\r\n                        $oldItem.remove();\r\n                        delete self._itemViews[id];\r\n                    }\r\n                } else {\r\n                    // Render the item, replacing the old item if we had previously rendered it.\r\n                    var $newItem = self._renderItem(extensions[id], self.model._getEntry(id));\r\n                    if ($oldItem) {\r\n                        $oldItem.replaceWith($newItem);\r\n                        self._itemViews[id] = $newItem;\r\n                    }\r\n                }\r\n            });\r\n\r\n        // UI event handlers\r\n        this.$el\r\n            .on("click", "a", function (e) {\r\n                var $target = $(e.target);\r\n                if ($target.hasClass("undo-remove")) {\r\n                    ExtensionManager.markForRemoval($target.attr("data-extension-id"), false);\r\n                } else if ($target.hasClass("remove")) {\r\n                    ExtensionManager.markForRemoval($target.attr("data-extension-id"), true);\r\n                } else if ($target.hasClass("undo-update")) {\r\n                    ExtensionManager.removeUpdate($target.attr("data-extension-id"));\r\n                }\r\n            })\r\n            .on("click", "button.install", function (e) {\r\n                self._installUsingDialog($(e.target).attr("data-extension-id"));\r\n            })\r\n            .on("click", "button.update", function (e) {\r\n                self._installUsingDialog($(e.target).attr("data-extension-id"), true);\r\n            })\r\n            .on("click", "button.remove", function (e) {\r\n                ExtensionManager.markForRemoval($(e.target).attr("data-extension-id"), true);\r\n            });\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Renders the view for a single extension entry.\r\n     * @param {Object} entry The extension entry to render.\r\n     * @param {Object} info The extension\'s metadata.\r\n     * @return {jQueryObject} The rendered node as a jQuery object.\r\n     */\r\n    ExtensionManagerView.prototype._renderItem = function (entry, info) {\r\n        // Create a Mustache context object containing the entry data and our helper functions.\r\n\r\n        // Start with the basic info from the given entry, either the installation info or the\r\n        // registry info depending on what we\'re listing.\r\n        var context = $.extend({}, info);\r\n\r\n        // Normally we would merge the strings into the context we\'re passing into the template,\r\n        // but since we\'re instantiating the template for every item, it seems wrong to take the hit\r\n        // of copying all the strings into the context, so we just make it a subfield.\r\n        context.Strings = Strings;\r\n\r\n        // Calculate various bools, since Mustache doesn\'t let you use expressions and interprets\r\n        // arrays as iteration contexts.\r\n        context.isInstalled = !!entry.installInfo;\r\n        context.failedToStart = (entry.installInfo && entry.installInfo.status === ExtensionManager.START_FAILED);\r\n        context.hasVersionInfo = !!info.versions;\r\n\r\n        if (entry.registryInfo) {\r\n            var latestVerCompatInfo = ExtensionManager.getCompatibilityInfo(entry.registryInfo, app.metadata.apiVersion);\r\n            context.isCompatible = latestVerCompatInfo.isCompatible;\r\n            context.requiresNewer = latestVerCompatInfo.requiresNewer;\r\n            context.isCompatibleLatest = latestVerCompatInfo.isLatestVersion;\r\n            if (!context.isCompatibleLatest) {\r\n                var installWarningBase = context.requiresNewer ? Strings.EXTENSION_LATEST_INCOMPATIBLE_NEWER : Strings.EXTENSION_LATEST_INCOMPATIBLE_OLDER;\r\n                context.installWarning = StringUtils.format(installWarningBase, entry.registryInfo.versions[entry.registryInfo.versions.length - 1].version, latestVerCompatInfo.compatibleVersion);\r\n            }\r\n        } else {\r\n            // We should only get here when viewing the Installed tab and some extensions don\'t exist in the registry\r\n            // (or registry is offline). These flags *should* always be ignored in that scenario, but just in case...\r\n            context.isCompatible = context.isCompatibleLatest = true;\r\n        }\r\n\r\n        context.isMarkedForRemoval = ExtensionManager.isMarkedForRemoval(info.metadata.name);\r\n        context.isMarkedForUpdate = ExtensionManager.isMarkedForUpdate(info.metadata.name);\r\n\r\n        context.showInstallButton = (this.model.source === this.model.SOURCE_REGISTRY) && !context.updateAvailable;\r\n        context.showUpdateButton = context.updateAvailable && !context.isMarkedForUpdate && !context.isMarkedForRemoval;\r\n\r\n        context.allowInstall = context.isCompatible && !context.isInstalled;\r\n\r\n        var isInstalledInUserFolder = (entry.installInfo && entry.installInfo.locationType === ExtensionManager.LOCATION_USER);\r\n        context.allowRemove = isInstalledInUserFolder;\r\n        context.allowUpdate = context.showUpdateButton && context.isCompatible && context.isCompatibleLatest && isInstalledInUserFolder;\r\n        if (!context.allowUpdate) {\r\n            context.updateNotAllowedReason = isInstalledInUserFolder ? Strings.CANT_UPDATE : Strings.CANT_UPDATE_DEV;\r\n        }\r\n\r\n        context.removalAllowed = this.model.source === "installed" &&\r\n            !context.failedToStart && !context.isMarkedForUpdate && !context.isMarkedForRemoval;\r\n\r\n        // Copy over helper functions that we share with the registry app.\r\n        ["lastVersionDate", "authorInfo"].forEach(function (helper) {\r\n            context[helper] = registry_utils[helper].call(context);\r\n        });\r\n\r\n        // Author image\r\n        if (context.metadata.author && context.metadata.author.email) {\r\n            context.authorImageUrl = "http://www.gravatar.com/avatar/" + md5(context.metadata.author.email) + ".png";\r\n        }\r\n\r\n        return $(Mustache.render(this._itemTemplate, context));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Display an optional message (hiding the extension list if displayed)\r\n     * @return {boolean} Returns true if a message is displayed\r\n     */\r\n    ExtensionManagerView.prototype._updateMessage = function () {\r\n        if (this.model.message) {\r\n            this._$emptyMessage.css("display", "block");\r\n            this._$emptyMessage.html(this.model.message);\r\n            this._$infoMessage.css("display", "none");\r\n            this._$table.css("display", "none");\r\n\r\n            return true;\r\n        } else {\r\n            this._$emptyMessage.css("display", "none");\r\n            this._$infoMessage.css("display", this.model.infoMessage ? "block" : "none");\r\n            this._$table.css("display", "");\r\n\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Renders the extension entry table based on the model\'s current filter set. Will create\r\n     * new items for entries that haven\'t yet been rendered, but will not re-render existing items.\r\n     */\r\n    ExtensionManagerView.prototype._render = function () {\r\n        var self = this,\r\n            $item;\r\n\r\n        this._$table.empty();\r\n        this._updateMessage();\r\n\r\n        this.model.filterSet.forEach(function (id) {\r\n            var $item = self._itemViews[id];\r\n            if (!$item) {\r\n                $item = self._renderItem(self.model.extensions[id], self.model._getEntry(id));\r\n                self._itemViews[id] = $item;\r\n            }\r\n            $item.appendTo(self._$table);\r\n        });\r\n\r\n        $(this).triggerHandler("render");\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Install the extension with the given ID using the install dialog.\r\n     * @param {string} id ID of the extension to install.\r\n     */\r\n    ExtensionManagerView.prototype._installUsingDialog = function (id, _isUpdate) {\r\n        var entry = this.model.extensions[id];\r\n        if (entry && entry.registryInfo) {\r\n            var compatInfo = ExtensionManager.getCompatibilityInfo(entry.registryInfo, app.metadata.apiVersion),\r\n                url = ExtensionManager.getExtensionURL(id, compatInfo.compatibleVersion);\r\n\r\n            // TODO: this should set .done on the returned promise\r\n            if (_isUpdate) {\r\n                InstallExtensionDialog.updateUsingDialog(url).done(ExtensionManager.updateFromDownload);\r\n            } else {\r\n                InstallExtensionDialog.installUsingDialog(url);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Filters the contents of the view.\r\n     * @param {string} query The query to filter by.\r\n     */\r\n    ExtensionManagerView.prototype.filter = function (query) {\r\n        this.model.filter(query);\r\n    };\r\n\r\n    exports.ExtensionManagerView = ExtensionManagerView;\r\n});\r\n\n//# sourceURL=/extensibility/ExtensionManagerView.js'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *  \r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"), \r\n * to deal in the Software without restriction, including without limitation \r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\n * and/or sell copies of the Software, and to permit persons to whom the \r\n * Software is furnished to do so, subject to the following conditions:\r\n *  \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *  \r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \r\n * DEALINGS IN THE SOFTWARE.\r\n * \r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, window, $, brackets, Mustache */\r\n/*unittests: ExtensionManager*/\r\n\r\ndefine(\'extensibility/ExtensionManagerViewModel\',[\'require\',\'exports\',\'module\',\'extensibility/ExtensionManager\',\'extensibility/Package\',\'extensibility/registry_utils\',\'strings\'],function (require, exports, module) {\r\n    "use strict";\r\n    \r\n    var ExtensionManager = require("extensibility/ExtensionManager"),\r\n        Package          = require("extensibility/Package"),\r\n        registry_utils   = require("extensibility/registry_utils"),\r\n        Strings          = require("strings");\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array}\r\n     * A list of fields to search when trying to search for a query string in an object. Each field is \r\n     * represented as an array of keys to recurse downward through the object. We store this here to avoid \r\n     * doing it for each search call.\r\n     */\r\n    var _searchFields = [["metadata", "name"], ["metadata", "title"], ["metadata", "description"],\r\n                         ["metadata", "author", "name"], ["metadata", "keywords"], ["owner"]];\r\n    /**\r\n     * @constructor\r\n     * The base model for the ExtensionManagerView. Keeps track of the extensions that are currently visible\r\n     * and manages sorting/filtering them. Must be disposed with dispose() when done.\r\n     * Events:\r\n     *     change - triggered when the data for a given extension changes. Second parameter is the extension id.\r\n     *     filter - triggered whenever the filtered set changes (including on initialize).\r\n     *\r\n     */\r\n    function ExtensionManagerViewModel() {\r\n        this._handleStatusChange = this._handleStatusChange.bind(this);\r\n        \r\n        // Listen for extension status changes.\r\n        $(ExtensionManager)\r\n            .on("statusChange." + this.source, this._handleStatusChange)\r\n            .on("registryUpdate." + this.source, this._handleStatusChange);\r\n    }\r\n    \r\n    /**\r\n     * @type {string}\r\n     * Constant indicating that this model/view should initialize from the main extension registry.\r\n     */\r\n    ExtensionManagerViewModel.prototype.SOURCE_REGISTRY = "registry";\r\n    \r\n    /**\r\n     * @type {string}\r\n     * Constant indicating that this model/view should initialize from the list of locally installed extensions.\r\n     */\r\n    ExtensionManagerViewModel.prototype.SOURCE_INSTALLED = "installed";\r\n    \r\n    /**\r\n     * @type {Object}\r\n     * The current set of extensions managed by this model. Same as ExtensionManager.extensions.\r\n     */\r\n    ExtensionManagerViewModel.prototype.extensions = null;\r\n    \r\n    /**\r\n     * @type {string}\r\n     * The current source for the model; one of the SOURCE_* keys above.\r\n     */\r\n    ExtensionManagerViewModel.prototype.source = null;\r\n    \r\n    /**\r\n     * @type {Array.<Object>}\r\n     * The list of IDs of items matching the current query and sorted with the current sort.\r\n     */\r\n    ExtensionManagerViewModel.prototype.filterSet = null;\r\n    \r\n    /**\r\n     * @type {Object}\r\n     * The list of all ids from the extension list, sorted with the current sort.\r\n     */\r\n    ExtensionManagerViewModel.prototype.sortedFullSet = null;\r\n    \r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     * The last query we filtered by. Used to optimize future searches.\r\n     */\r\n    ExtensionManagerViewModel.prototype._lastQuery = null;\r\n    \r\n    /**\r\n     * @type {string}\r\n     * Info message to display to the user when listing extensions\r\n     */\r\n    ExtensionManagerViewModel.prototype.infoMessage = null;\r\n    \r\n    /**\r\n     * @type {string}\r\n     * An optional message to display to the user\r\n     */\r\n    ExtensionManagerViewModel.prototype.message = null;\r\n    \r\n    /**\r\n     * @type {number}\r\n     * Number to show in tab\'s notification icon. No icon shown if 0.\r\n     */\r\n    ExtensionManagerViewModel.prototype.notifyCount = 0;\r\n    \r\n    /**\r\n     * @private {$.Promise}\r\n     * Internal use only to track when initialization fails, see usage in _updateMessage.\r\n     */\r\n    ExtensionManagerViewModel.prototype._initializeFromSourcePromise = null;\r\n    \r\n    /**\r\n     * Unregisters listeners when we\'re done.\r\n     */\r\n    ExtensionManagerViewModel.prototype.dispose = function () {\r\n        $(ExtensionManager).off("." + this.source);\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Sets up the initial filtered set based on the sorted full set.\r\n     */\r\n    ExtensionManagerViewModel.prototype._setInitialFilter = function () {\r\n        // Initial filtered list is the same as the sorted list.\r\n        this.filterSet = _.clone(this.sortedFullSet);\r\n        $(this).triggerHandler("filter");\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Re-sorts the current full set based on the source we\'re viewing.\r\n     * The base implementation does nothing.\r\n     */\r\n    ExtensionManagerViewModel.prototype._sortFullSet = function () { };\r\n\r\n    /**\r\n     * Initializes the model from the source.\r\n     */\r\n    ExtensionManagerViewModel.prototype.initialize = function () {\r\n        var self = this;\r\n\r\n        this._initializeFromSourcePromise = this._initializeFromSource().always(function () {\r\n            self._updateMessage();\r\n        });\r\n        \r\n        return this._initializeFromSourcePromise;\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Updates the initial set and filter as necessary when the status of an extension changes,\r\n     * and notifies listeners of the change.\r\n     * @param {$.Event} e The jQuery event object.\r\n     * @param {string} id The id of the extension whose status changed.\r\n     */\r\n    ExtensionManagerViewModel.prototype._handleStatusChange = function (e, id) {\r\n        $(this).triggerHandler("change", id);\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Searches for the given query in the current extension list and updates the filter set,\r\n     * dispatching a filter event.\r\n     * @param {string} query The string to search for.\r\n     * @param {boolean} force If true, always filter starting with the full set, not the last\r\n     *     query\'s filter.\r\n     */\r\n    ExtensionManagerViewModel.prototype.filter = function (query, force) {\r\n        var self = this, initialList;\r\n        if (!force && this._lastQuery && query.indexOf(this._lastQuery) === 0) {\r\n            // This is the old query with some new letters added, so we know we can just\r\n            // search in the current filter set. (This is true even if query has spaces).\r\n            initialList = this.filterSet;\r\n        } else {\r\n            // This is a new query, so start with the full list.\r\n            initialList = this.sortedFullSet;\r\n        }\r\n        \r\n        var keywords = query.toLowerCase().split(/\\s+/);\r\n        \r\n        // Takes \'extensionList\' and returns a version filtered to only those that match \'keyword\'\r\n        function filterForKeyword(extensionList, word) {\r\n            var filteredList = [];\r\n            extensionList.forEach(function (id) {\r\n                var entry = self._getEntry(id);\r\n                if (entry && self._entryMatchesQuery(entry, word)) {\r\n                    filteredList.push(id);\r\n                }\r\n            });\r\n            return filteredList;\r\n        }\r\n        \r\n        // "AND" the keywords together: successively filter down the result set by each keyword in turn\r\n        var i, currentList = initialList;\r\n        for (i = 0; i < keywords.length; i++) {\r\n            currentList = filterForKeyword(currentList, keywords[i]);\r\n        }\r\n        \r\n        this._lastQuery = query;\r\n        this.filterSet = currentList;\r\n\r\n        this._updateMessage();\r\n\r\n        $(this).triggerHandler("filter");\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Updates an optional message displayed to the user along with the extension list.\r\n     */\r\n    ExtensionManagerViewModel.prototype._updateMessage = function () {\r\n        if (this._initializeFromSourcePromise && this._initializeFromSourcePromise.state() === "rejected") {\r\n            this.message = Strings.EXTENSION_MANAGER_ERROR_LOAD;\r\n        } else if (this.filterSet && this.filterSet.length === 0) {\r\n            this.message = this.sortedFullSet && this.sortedFullSet.length ? Strings.NO_EXTENSION_MATCHES : Strings.NO_EXTENSIONS;\r\n        } else {\r\n            this.message = null;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * This is to be overridden by subclasses to provide the metadata for the extension\r\n     * with the provided `id`.\r\n     *\r\n     * @param {string} id of the extension\r\n     * @return {Object?} extension metadata or null if there\'s no matching extension\r\n     */\r\n    ExtensionManagerViewModel.prototype._getEntry = function (id) {\r\n        return null;\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Tests if the given entry matches the query.\r\n     * @param {Object} entry The extension entry to test.\r\n     * @param {string} query The query to match against.\r\n     * @return {boolean} Whether the query matches.\r\n     */\r\n    ExtensionManagerViewModel.prototype._entryMatchesQuery = function (entry, query) {\r\n        return query === "" ||\r\n            _searchFields.some(function (fieldSpec) {\r\n                var i, cur = entry;\r\n                for (i = 0; i < fieldSpec.length; i++) {\r\n                    // Recurse downward through the specified fields to the leaf value.\r\n                    cur = cur[fieldSpec[i]];\r\n                    if (!cur) {\r\n                        return false;\r\n                    }\r\n                }\r\n                // If the leaf value is an array (like keywords), search each item, otherwise\r\n                // just search in the string.\r\n                if (Array.isArray(cur)) {\r\n                    return cur.some(function (keyword) {\r\n                        return keyword.toLowerCase().indexOf(query) !== -1;\r\n                    });\r\n                } else if (fieldSpec[fieldSpec.length - 1] === "owner") {\r\n                    // Special handling: ignore the authentication source when querying,\r\n                    // since it\'s not useful to search on\r\n                    var components = cur.split(":");\r\n                    if (components[1].toLowerCase().indexOf(query) !== -1) {\r\n                        return true;\r\n                    }\r\n                } else if (cur.toLowerCase().indexOf(query) !== -1) {\r\n                    return true;\r\n                }\r\n            });\r\n    };\r\n    \r\n    /**\r\n     * @constructor\r\n     * The model for the ExtensionManagerView that is responsible for handling registry-based extensions. \r\n     * This extends ExtensionManagerViewModel.\r\n     * Must be disposed with dispose() when done.\r\n     *\r\n     * Events:\r\n     *     change - triggered when the data for a given extension changes. Second parameter is the extension id.\r\n     *     filter - triggered whenever the filtered set changes (including on initialize).\r\n     */\r\n    function RegistryViewModel() {\r\n        ExtensionManagerViewModel.call(this);\r\n        this.infoMessage = Strings.REGISTRY_SANITY_CHECK_WARNING;\r\n    }\r\n    \r\n    RegistryViewModel.prototype = Object.create(ExtensionManagerViewModel.prototype);\r\n    RegistryViewModel.prototype.constructor = RegistryViewModel;\r\n    \r\n    /**\r\n     * @type {string}\r\n     * RegistryViewModels always have a source of SOURCE_REGISTRY.\r\n     */\r\n    RegistryViewModel.prototype.source = ExtensionManagerViewModel.prototype.SOURCE_REGISTRY;\r\n    \r\n    /**\r\n     * Initializes the model from the remote extension registry.\r\n     * @return {$.Promise} a promise that\'s resolved with the registry JSON data\r\n     * or rejected if the server can\'t be reached.\r\n     */\r\n    RegistryViewModel.prototype._initializeFromSource = function () {\r\n        var self = this;\r\n        return ExtensionManager.downloadRegistry()\r\n            .done(function () {\r\n                self.extensions = ExtensionManager.extensions;\r\n                \r\n                // Sort the registry by last published date and store the sorted list of IDs.\r\n                self.sortedFullSet = registry_utils.sortRegistry(self.extensions, "registryInfo")\r\n                    .filter(function (entry) {\r\n                        return entry.registryInfo !== undefined;\r\n                    })\r\n                    .map(function (entry) {\r\n                        return entry.registryInfo.metadata.name;\r\n                    });\r\n                self._setInitialFilter();\r\n            })\r\n            .fail(function () {\r\n                self.extensions = [];\r\n                self.sortedFullSet = [];\r\n                self.filterSet = [];\r\n            });\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Finds the extension metadata by id. If there is no extension matching the given id,\r\n     * this returns `null`.\r\n     * @param {string} id of the extension\r\n     * @return {Object?} extension metadata or null if there\'s no matching extension\r\n     */\r\n    RegistryViewModel.prototype._getEntry = function (id) {\r\n        var entry = this.extensions[id];\r\n        if (entry) {\r\n            return entry.registryInfo;\r\n        }\r\n        return entry;\r\n    };\r\n    \r\n    /**\r\n     * @constructor\r\n     * The model for the ExtensionManagerView that is responsible for handling previously-installed extensions. \r\n     * This extends ExtensionManagerViewModel.\r\n     * Must be disposed with dispose() when done.\r\n     *\r\n     * Events:\r\n     *     change - triggered when the data for a given extension changes. Second parameter is the extension id.\r\n     *     filter - triggered whenever the filtered set changes (including on initialize).\r\n     */\r\n    function InstalledViewModel() {\r\n        ExtensionManagerViewModel.call(this);\r\n    }\r\n    \r\n    InstalledViewModel.prototype = Object.create(ExtensionManagerViewModel.prototype);\r\n    InstalledViewModel.prototype.constructor = InstalledViewModel;\r\n    \r\n    /**\r\n     * @type {string}\r\n     * InstalledViewModels always have a source of SOURCE_INSTALLED.\r\n     */\r\n    InstalledViewModel.prototype.source = ExtensionManagerViewModel.prototype.SOURCE_INSTALLED;\r\n    \r\n    /**\r\n     * Initializes the model from the set of locally installed extensions, sorted\r\n     * alphabetically by id (or name of the extension folder for legacy extensions).\r\n     * @return {$.Promise} a promise that\'s resolved when we\'re done initializing.\r\n     */\r\n    InstalledViewModel.prototype._initializeFromSource = function () {\r\n        var self = this;\r\n        this.extensions = ExtensionManager.extensions;\r\n        this.sortedFullSet = Object.keys(this.extensions)\r\n            .filter(function (key) {\r\n                return self.extensions[key].installInfo &&\r\n                    self.extensions[key].installInfo.locationType !== ExtensionManager.LOCATION_DEFAULT;\r\n            });\r\n        this._sortFullSet();\r\n        this._setInitialFilter();\r\n        this._countUpdates();\r\n        \r\n        return new $.Deferred().resolve().promise();\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Re-sorts the current full set\r\n     */\r\n    InstalledViewModel.prototype._sortFullSet = function () {\r\n        var self = this;\r\n        \r\n        this.sortedFullSet = this.sortedFullSet.sort(function (key1, key2) {\r\n            var metadata1 = self.extensions[key1].installInfo.metadata,\r\n                metadata2 = self.extensions[key2].installInfo.metadata,\r\n                id1 = (metadata1.title || metadata1.name).toLowerCase(),\r\n                id2 = (metadata2.title || metadata2.name).toLowerCase();\r\n            if (id1 < id2) {\r\n                return -1;\r\n            } else if (id1 === id2) {\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Updates notifyCount based on number of extensions with an update available\r\n     */\r\n    InstalledViewModel.prototype._countUpdates = function () {\r\n        var self = this;\r\n        this.notifyCount = 0;\r\n        this.sortedFullSet.forEach(function (key) {\r\n            if (self.extensions[key].installInfo.updateAvailable) {\r\n                self.notifyCount++;\r\n            }\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Updates the initial set and filter as necessary when the status of an extension changes,\r\n     * and notifies listeners of the change.\r\n     * @param {$.Event} e The jQuery event object.\r\n     * @param {string} id The id of the extension whose status changed.\r\n     */\r\n    InstalledViewModel.prototype._handleStatusChange = function (e, id) {\r\n        var index = this.sortedFullSet.indexOf(id),\r\n            refilter = false;\r\n        if (index !== -1 && !this.extensions[id].installInfo) {\r\n            // This was in our set, but was uninstalled. Remove it.\r\n            this.sortedFullSet.splice(index, 1);\r\n            this._countUpdates();  // may also affect update count\r\n            refilter = true;\r\n        } else if (index === -1 && this.extensions[id].installInfo) {\r\n            // This was not in our set, but is now installed. Add it and resort.\r\n            this.sortedFullSet.push(id);\r\n            this._sortFullSet();\r\n            refilter = true;\r\n        }\r\n        if (refilter) {\r\n            this.filter(this._lastQuery || "", true);\r\n        }\r\n        \r\n        if (this.extensions[id].installInfo) {\r\n            // If our count of available updates may have been affected, re-count\r\n            this._countUpdates();\r\n        }\r\n        \r\n        ExtensionManagerViewModel.prototype._handleStatusChange.call(this, e, id);\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * Finds the extension metadata by id. If there is no extension matching the given id,\r\n     * this returns `null`.\r\n     * @param {string} id of the extension\r\n     * @return {Object?} extension metadata or null if there\'s no matching extension\r\n     */\r\n    InstalledViewModel.prototype._getEntry = function (id) {\r\n        var entry = this.extensions[id];\r\n        if (entry) {\r\n            return entry.installInfo;\r\n        }\r\n        return entry;\r\n    };\r\n\r\n    exports.RegistryViewModel = RegistryViewModel;\r\n    exports.InstalledViewModel = InstalledViewModel;\r\n});\n//# sourceURL=/extensibility/ExtensionManagerViewModel.js'),eval('define(\'text!htmlContent/extension-manager-dialog.html\',[],function () { return \'<div class="extension-manager-dialog dialog modal" data-title="Extension Manager">\\r\\n    <div class="dialog-toolbar">\\r\\n        <div class="radio-button-bar left">\\r\\n            <label class="radio-button-bar__item">\\r\\n                <input id="extension-manager-radio-button-registry" type="radio" name="extension-tab" value="registry">\\r\\n                <label for="extension-manager-radio-button-registry" class="k-button button-registry">Registry</label>\\r\\n            </label>\\r\\n            <label class="radio-button-bar__item">\\r\\n                <input id="extension-manager-radio-button-installed" type="radio" name="extension-tab" value="installed">\\r\\n                <label for="extension-manager-radio-button-installed" class="k-button button-installed">Installed<span class="update-notifications"></span></label>\\r\\n            </label>\\r\\n        </div>\\r\\n\\r\\n        <input type="search" value="" placeholder="search" class="search k-search-input">\\r\\n    </div>\\r\\n    <div class="dialog-body no-padding">\\r\\n        <div class="spinner"></div>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button left install-from-url">Install From Url...</button>\\r\\n        <button class="k-button dialog-button primary" data-button-id="close">{{Strings.CLOSE}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/extension-manager-dialog.html'),eval('/*\r\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global brackets, define, $, Mustache, app, window */\r\n\r\ndefine(\'extensibility/ExtensionManagerDialog\',[\'require\',\'exports\',\'module\',\'dialogs/Dialogs\',\'extensibility/Package\',\'strings\',\'utils/StringUtils\',\'command/Commands\',\'command/CommandManager\',\'extensibility/InstallExtensionDialog\',\'utils/AppInit\',\'utils/Async\',\'extensibility/ExtensionManager\',\'extensibility/ExtensionManagerView\',\'extensibility/ExtensionManagerViewModel\',\'text!htmlContent/extension-manager-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Dialogs                     = require("dialogs/Dialogs"),\r\n        Package                     = require("extensibility/Package"),\r\n        Strings                     = require("strings"),\r\n        StringUtils                 = require("utils/StringUtils"),\r\n        Commands                    = require("command/Commands"),\r\n        CommandManager              = require("command/CommandManager"),\r\n        InstallExtensionDialog      = require("extensibility/InstallExtensionDialog"),\r\n        AppInit                     = require("utils/AppInit"),\r\n        Async                       = require("utils/Async"),\r\n        ExtensionManager            = require("extensibility/ExtensionManager"),\r\n        ExtensionManagerView        = require("extensibility/ExtensionManagerView").ExtensionManagerView,\r\n        ExtensionManagerViewModel   = require("extensibility/ExtensionManagerViewModel"),\r\n        dialogTemplate              = require("text!htmlContent/extension-manager-dialog.html");\r\n\r\n    var _activeTabIndex;\r\n\r\n    /**\r\n     * @private\r\n     * Triggers changes requested by the dialog UI.\r\n     */\r\n    function _performChanges() {\r\n        // If an extension was removed or updated, prompt the user to quit Brackets.\r\n        var hasRemovedExtensions = ExtensionManager.hasExtensionsToRemove(),\r\n            hasUpdatedExtensions = ExtensionManager.hasExtensionsToUpdate();\r\n        if (!hasRemovedExtensions && !hasUpdatedExtensions) {\r\n            return;\r\n        }\r\n\r\n        var buttonLabel = Strings.CHANGE_AND_RELOAD;\r\n        if (hasRemovedExtensions && !hasUpdatedExtensions) {\r\n            buttonLabel = Strings.REMOVE_AND_RELOAD;\r\n        } else if (hasUpdatedExtensions && !hasRemovedExtensions) {\r\n            buttonLabel = Strings.UPDATE_AND_RELOAD;\r\n        }\r\n\r\n        var dlg = Dialogs.showModalDialog(\r\n            "change-marked-extensions",\r\n            Strings.CHANGE_AND_RELOAD_TITLE,\r\n            Strings.CHANGE_AND_RELOAD_MESSAGE,\r\n            [\r\n                {\r\n                    className : Dialogs.DIALOG_BTN_CLASS_NORMAL,\r\n                    id        : Dialogs.DIALOG_BTN_CANCEL,\r\n                    text      : Strings.CANCEL\r\n                },\r\n                {\r\n                    className : Dialogs.DIALOG_BTN_CLASS_PRIMARY,\r\n                    id        : Dialogs.DIALOG_BTN_OK,\r\n                    text      : buttonLabel\r\n                }\r\n            ],\r\n            false\r\n        ),\r\n            $dlg = dlg.getElement();\r\n\r\n        $dlg.one("buttonClick", function (e, buttonId) {\r\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                // Disable the dialog buttons so the user can\'t dismiss it,\r\n                // and show a message indicating that we\'re doing the updates,\r\n                // in case it takes a long time.\r\n                $dlg.find(".dialog-button").prop("disabled", true);\r\n                $dlg.find(".close").hide();\r\n                $dlg.find(".dialog-message")\r\n                    .text(Strings.PROCESSING_EXTENSIONS)\r\n                    .append("<span class=\'spinner spin\'/>");\r\n\r\n                ExtensionManager.removeMarkedExtensions()\r\n                    .done(function () {\r\n                        ExtensionManager.updateExtensions()\r\n                            .done(function () {\r\n                                dlg.close();\r\n                                CommandManager.execute(Commands.APP_RELOAD);\r\n                            })\r\n                            .fail(function (errorArray) {\r\n                                dlg.close();\r\n\r\n                                // This error case should be very uncommon.\r\n                                // Just let the user know that we couldn\'t update\r\n                                // this extension and log the errors to the console.\r\n                                var ids = [];\r\n                                errorArray.forEach(function (errorObj) {\r\n                                    ids.push(errorObj.item);\r\n                                    if (errorObj.error && errorObj.error.forEach) {\r\n                                        console.error("Errors for ", errorObj.item);\r\n                                        errorObj.error.forEach(function (error) {\r\n                                            console.error(Package.formatError(error));\r\n                                        });\r\n                                    }\r\n                                });\r\n                                Dialogs.showErrorDialog(\r\n                                    StringUtils.format(Strings.EXTENSION_MANAGER_UPDATE_ERROR, ids.join(", "))\r\n                                ).done(function () {\r\n                                    // We still have to reload even if some of the removals failed.\r\n                                    CommandManager.execute(Commands.APP_RELOAD);\r\n                                });\r\n                            });\r\n                    })\r\n                    .fail(function (errorArray) {\r\n                        dlg.close();\r\n                        ExtensionManager.cleanupUpdates();\r\n\r\n                        var ids = [];\r\n                        errorArray.forEach(function (errorObj) {\r\n                            ids.push(errorObj.item);\r\n                        });\r\n\r\n                        Dialogs.showErrorDialog(\r\n                            StringUtils.format(Strings.EXTENSION_MANAGER_REMOVE_ERROR, ids.join(", "))\r\n                        ).done(function () {\r\n                            // We still have to reload even if some of the removals failed.\r\n                            CommandManager.execute(Commands.APP_RELOAD);\r\n                        });\r\n                    });\r\n            } else {\r\n                dlg.close();\r\n                ExtensionManager.cleanupUpdates();\r\n                ExtensionManager.unmarkAllForRemoval();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Show a dialog that allows the user to browse and manage extensions.\r\n     */\r\n    function showDialog() {\r\n        var models = [],\r\n            views  = [],\r\n            context = { Strings: Strings, showRegistry: !!app.config.extension_registry };\r\n\r\n        // Load registry only if the registry URL exists\r\n        if (context.showRegistry) {\r\n            models.push(new ExtensionManagerViewModel.RegistryViewModel());\r\n        }\r\n        models.push(new ExtensionManagerViewModel.InstalledViewModel());\r\n\r\n        // Open the Dialog\r\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(dialogTemplate, context), false);\r\n        var $dlg = dialog.getElement(),\r\n            $search = $dlg.find(".search"),\r\n            $extensionTab = $("input[name=\'extension-tab\']", $dlg);\r\n\r\n        // When dialog closes, dismiss models and commit changes\r\n        dialog.done(function () {\r\n            models.forEach(function (model) {\r\n                model.dispose();\r\n            });\r\n\r\n            _performChanges();\r\n        });\r\n\r\n\r\n        function updateTab(active) {\r\n            switch (active) {\r\n            case "registry":\r\n                _activeTabIndex = 0;\r\n                $dlg.find(".extension-list#registry").show();\r\n                $dlg.find(".extension-list#installed").hide();\r\n                break;\r\n            case "installed":\r\n                _activeTabIndex = 1;\r\n                $dlg.find(".extension-list#registry").hide();\r\n                $dlg.find(".extension-list#installed").show();\r\n                break;\r\n            }\r\n\r\n            // Clear search\r\n            $search.val("");\r\n            views.forEach(function (view, index) {\r\n                view.filter("");\r\n            });\r\n\r\n            models[_activeTabIndex].scrollPos = $(".modal-body", $dlg).scrollTop();\r\n            $(".modal-body", $dlg).scrollTop(models[_activeTabIndex].scrollPos || 0);\r\n        }\r\n\r\n        $extensionTab.change(function () {\r\n            updateTab(this.value);\r\n        });\r\n\r\n        // Update & hide/show the notification overlay on a tab\'s icon, based on its model\'s notifyCount\r\n        function updateNotificationIcon(index) {\r\n            // Only in Installed tab\r\n            if (index === 1) {\r\n                var model = models[index],\r\n                    $notificationIcon = $dlg.find(".update-notifications");\r\n                if (model.notifyCount) {\r\n                    $notificationIcon.text(model.notifyCount);\r\n                    $notificationIcon.show();\r\n                } else {\r\n                    $notificationIcon.hide();\r\n                }\r\n            }\r\n        }\r\n\r\n        // Initialize models and create a view for each model\r\n        var modelInitPromise = Async.doInParallel(models, function (model, index) {\r\n            var view    = new ExtensionManagerView(),\r\n                promise = view.initialize(model),\r\n                lastNotifyCount;\r\n\r\n            promise.always(function () {\r\n                views[index] = view;\r\n\r\n                lastNotifyCount = model.notifyCount;\r\n                updateNotificationIcon(index);\r\n            });\r\n\r\n            $(model).on("change", function () {\r\n                if (lastNotifyCount !== model.notifyCount) {\r\n                    lastNotifyCount = model.notifyCount;\r\n                    updateNotificationIcon(index);\r\n                }\r\n            });\r\n\r\n            return promise;\r\n        }, true);\r\n\r\n\r\n        modelInitPromise.always(function () {\r\n            $(".spinner", $dlg).remove();\r\n\r\n            views.forEach(function (view) {\r\n                view.$el.appendTo($(".dialog-body", $dlg));\r\n            });\r\n\r\n            // Filter the views when the user types in the search field.\r\n            $dlg.on("input", ".search", function (e) {\r\n                var query = $(this).val();\r\n                views.forEach(function (view) {\r\n                    view.filter(query);\r\n                });\r\n            });\r\n\r\n            // Show the first tab\r\n            $extensionTab.val(["registry"]);\r\n            updateTab("registry");\r\n        });\r\n\r\n        // Handle the close button.\r\n        $(".extension-manager-dialog button[data-button-id=close]")\r\n            .click(function () {\r\n                dialog.close();\r\n            });\r\n\r\n        // Handle the install button.\r\n        $(".extension-manager-dialog .install-from-url")\r\n            .click(function () {\r\n                InstallExtensionDialog.showDialog().done(ExtensionManager.updateFromDownload);\r\n            });\r\n\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        $("#toolbar-extension-manager").click(function () {\r\n            showDialog();\r\n        });\r\n    });\r\n\r\n    exports.showDialog = showDialog;\r\n\r\n});\r\n\n//# sourceURL=/extensibility/ExtensionManagerDialog.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo */\r\n\r\ndefine(\'explorer/NavigatorView\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'command/CommandManager\',\'command/Commands\',\'strings\',\'utils/Resizer\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit             = require("utils/AppInit"),\r\n        CommandManager      = require("command/CommandManager"),\r\n        Commands            = require("command/Commands"),\r\n        Strings             = require("strings"),\r\n        Resizer             = require("utils/Resizer");\r\n\r\n    var $navigator,\r\n        $modelExplorer,\r\n        $editors;\r\n\r\n    var EXPLORER_MIN_HEIGHT = 40;\r\n\r\n    /**\r\n     * Toggle NavigatorView\r\n     */\r\n    function toggle() {\r\n        Resizer.toggle($navigator);\r\n    }\r\n\r\n    /**\r\n     * Show NavigatorView\r\n     */\r\n    function show() {\r\n        Resizer.show($navigator);\r\n    }\r\n\r\n    /**\r\n     * Hide NavigatorView\r\n     */\r\n    function hide() {\r\n        Resizer.hide($navigator);\r\n    }\r\n\r\n    /**\r\n     * Return whether NavigatorView is visible or not\r\n     *\r\n     * @return {booean}\r\n     */\r\n    function isVisible() {\r\n        return Resizer.isVisible($navigator);\r\n    }\r\n\r\n\r\n    function _limitEditorsHeight() {\r\n        if (($navigator.height() - EXPLORER_MIN_HEIGHT) < $editors.height()) {\r\n            $editors.height($navigator.height() - EXPLORER_MIN_HEIGHT);\r\n            $modelExplorer.find(".view-content").triggerHandler("scroll");\r\n            $editors.find(".view-content").triggerHandler("scroll");\r\n        }\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        $navigator = $("#navigator");\r\n        $modelExplorer = $("#model-explorer");\r\n        $editors = $("#editors");\r\n\r\n        // Navigator Resizing\r\n\r\n        $navigator.on("panelResizeStart", function (evt, width) {\r\n            $navigator.find(".scroller-shadow").css("display", "none");\r\n        });\r\n\r\n        $navigator.on("panelResizeUpdate", function (evt, width) {\r\n            _limitEditorsHeight();\r\n        });\r\n\r\n        $navigator.on("panelResizeEnd", function (evt, width) {\r\n            $navigator.find(".scroller-shadow").css("display", "block");\r\n            $modelExplorer.find(".view-content").triggerHandler("scroll");\r\n            $editors.find(".view-content").triggerHandler("scroll");\r\n        });\r\n\r\n        $navigator.on("panelCollapsed", function (evt, width) {\r\n            CommandManager.get(Commands.VIEW_HIDE_NAVIGATOR).setName(Strings.CMD_VIEW_SHOW_NAVIGATOR);\r\n        });\r\n\r\n        $navigator.on("panelExpanded", function (evt, width) {\r\n            $navigator.find(".scroller-shadow").css("display", "block");\r\n            $modelExplorer.find(".view-content").triggerHandler("scroll");\r\n            $editors.find(".view-content").triggerHandler("scroll");\r\n            CommandManager.get(Commands.VIEW_HIDE_NAVIGATOR).setName(Strings.CMD_VIEW_HIDE_NAVIGATOR);\r\n        });\r\n\r\n        // AppInit.htmlReady in utils/Resizer executes before, so it\'s possible that the sidebar\r\n        // is collapsed before we add the event. Check here initially\r\n        if (!$navigator.is(":visible")) {\r\n            $navigator.trigger("panelCollapsed");\r\n        }\r\n\r\n        // Toolbox Resizing\r\n\r\n        $editors.on("panelResizeStart", function (evt, width) {\r\n            $editors.find(".scroller-shadow").css("display", "none");\r\n        });\r\n\r\n        $editors.on("panelResizeUpdate", function (evt, width) {\r\n        });\r\n\r\n        $editors.on("panelResizeEnd", function (evt, width) {\r\n            $editors.find(".scroller-shadow").css("display", "block");\r\n            $modelExplorer.find(".view-content").triggerHandler("scroll");\r\n            $editors.find(".view-content").triggerHandler("scroll");\r\n        });\r\n\r\n        $editors.on("panelCollapsed", function (evt, width) {\r\n        });\r\n\r\n        $editors.on("panelExpanded", function (evt, width) {\r\n            $editors.find(".scroller-shadow").css("display", "block");\r\n            $modelExplorer.find(".view-content").triggerHandler("scroll");\r\n            $editors.find(".view-content").triggerHandler("scroll");\r\n        });\r\n\r\n        // Window Resizing\r\n\r\n        $(window).resize(function () {\r\n            $modelExplorer.find(".view-content").triggerHandler("scroll");\r\n            $editors.find(".view-content").triggerHandler("scroll");\r\n            if ($navigator.height() > EXPLORER_MIN_HEIGHT) {\r\n                _limitEditorsHeight();\r\n            }\r\n        });\r\n\r\n\r\n    });\r\n\r\n    CommandManager.register(Strings.CMD_VIEW_HIDE_NAVIGATOR, Commands.VIEW_HIDE_NAVIGATOR, toggle);\r\n\r\n    exports.toggle    = toggle;\r\n    exports.show      = show;\r\n    exports.hide      = hide;\r\n    exports.isVisible = isVisible;\r\n\r\n});\r\n\n//# sourceURL=/explorer/NavigatorView.js'),eval('define(\'text!htmlContent/model-explorer-view.html\',[],function () { return \'<div id="model-explorer-holder" class="view-holder">\\r\\n    <div class="view-header">\\r\\n        <span class="view-header-title">Model Explorer</span>\\r\\n\\r\\n        <div id="model-explorer-quick-search-wrapper" style="position: absolute; margin: 0; left: 120px; right: 35px; top: 5px;">\\r\\n            <input id="model-explorer-quick-search" type="search" title="Quick Search">\\r\\n        </div>\\r\\n\\r\\n        <button id="model-explorer-settings" class="k-button icon-button quiet view-header-button" style="right: 5px;" title="Configure Model Explorer">\\r\\n            <span class="view-header-button-icon" style="background: url(\\\'styles/icons/topcoat-settings-13.svg\\\') 0 0 no-repeat;"></span>\\r\\n        </button>\\r\\n\\r\\n    </div>\\r\\n    <div class="view-content">\\r\\n        <div class="treeview-wrapper">\\r\\n            <div class="treeview"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/model-explorer-view.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo */\r\n\r\n/**\r\n *\r\n * This module dispatches these events:\r\n *     - selected:        (elem)\r\n *     - doubleClicked:   (elem)\r\n *     - dragOver:        ({source, target, allow});\r\n *     - dragOverDiagram: ({source, diagram, allow});\r\n *     - drop:            (source, target)\r\n *     - dropOnDiagram    (source, diagram)\r\n */\r\ndefine(\'explorer/ModelExplorerView\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'utils/ViewUtils\',\'core/Core\',\'core/Repository\',\'core/PreferenceManager\',\'command/Commands\',\'command/CommandManager\',\'strings\',\'menu/ContextMenuManager\',\'engine/ProjectManager\',\'diagrams/DiagramManager\',\'text!htmlContent/model-explorer-view.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit            = require("utils/AppInit"),\r\n        ViewUtils          = require("utils/ViewUtils"),\r\n        Core               = require("core/Core"),\r\n        Repository         = require("core/Repository"),\r\n        PreferenceManager  = require("core/PreferenceManager"),\r\n        Commands           = require("command/Commands"),\r\n        CommandManager     = require("command/CommandManager"),\r\n        Strings            = require("strings"),\r\n        ContextMenuManager = require("menu/ContextMenuManager"),\r\n        ProjectManager     = require("engine/ProjectManager"),\r\n        DiagramManager     = require("diagrams/DiagramManager"),\r\n        viewTemplate       = require("text!htmlContent/model-explorer-view.html");\r\n\r\n    /**\r\n     * JQuery for Explorer Pane\r\n     * @private\r\n     * @type {JQuery}\r\n     */\r\n    var $viewContent = null;\r\n\r\n    /**\r\n     * JQuery for Tree\r\n     * @private\r\n     * @type {JQuery}\r\n     */\r\n    var $tree = null;\r\n\r\n    /**\r\n     * KendoTreeView object\r\n     * @private\r\n     * @type {kendo.ui.TreeView}\r\n     */\r\n    var _tree = null;\r\n\r\n    /**\r\n     * DataSource for TreeView\r\n     * @private\r\n     * @type {kendo.data.HierarchicalDataSource}\r\n     */\r\n    var _dataSource = null;\r\n\r\n    /**\r\n     * Temporal variable for storing mouse position when draging.\r\n     * @private\r\n     * @type {{x:number, y:number}}\r\n     */\r\n    var _dragPosition = {x: 0, y: 0};\r\n\r\n    /**\r\n     * Sort type\r\n     * @private\r\n     */\r\n    var _sortBy;\r\n\r\n    /**\r\n     * Show stereotype\r\n     * @private\r\n     */\r\n    var _showStereotype = true;\r\n\r\n\r\n    /**\r\n     * Sort type constants\r\n     * @const\r\n     */\r\n    var SORT_BY_ADDED = "added",\r\n        SORT_BY_NAME  = "name";\r\n\r\n    /**\r\n     * Context Menu for Settings\r\n     * @private\r\n     * @type {ContextMenu}\r\n     */\r\n    var settingsMenu;\r\n\r\n    /**\r\n     * Commands for Settings\r\n     */\r\n    var CMD_EXPLORER_SETTINGS_SORT_BY_ADDED        = "explorer.settings.sort-by-added",\r\n        CMD_EXPLORER_SETTINGS_SORT_BY_NAME         = "explorer.settings.sort-by-name",\r\n        CMD_EXPLORER_SETTINGS_SHOW_STEREOTYPE_TEXT = "explorer.settings.show-stereotype-text";\r\n\r\n    /**\r\n     * Setup Tree\r\n     * @private\r\n     */\r\n    function _setupTree() {\r\n        // Setup Custom DataSource for TreeView\r\n        _dataSource = new kendo.data.HierarchicalDataSource({\r\n            transport: {\r\n                read: function (options) {\r\n                    var id = options.data._id,\r\n                        elem;\r\n                    if (id) {\r\n                        elem = Repository.get(id);\r\n                        var children = _sort(_getChildren(elem));\r\n                        var nodes = [];\r\n                        _.each(children, function (child) {\r\n                            var node = _makeNode(child);\r\n                            nodes.push(node);\r\n                        });\r\n                        options.success(nodes);\r\n                    } else {\r\n                        elem = ProjectManager.getProject();\r\n                        if (elem) {\r\n                            var node = _makeNode(elem);\r\n                            options.success([node]);\r\n                        } else {\r\n                            options.success([]);\r\n                        }\r\n                    }\r\n                },\r\n                create: function (options) {\r\n                },\r\n                destroy: function (options) {\r\n                },\r\n            },\r\n            schema: {\r\n                model: {\r\n                    id: "_id",\r\n                    hasChildren: "hasChildren"\r\n                }\r\n            }\r\n        });\r\n\r\n        // Setup TreeView\r\n        $tree.kendoTreeView({\r\n            loadOnDemand: true,\r\n            animation: false,\r\n            dataSource: _dataSource,\r\n            dataSpriteCssClassField: "sprite",\r\n            dataTextField: "text",\r\n            dragAndDrop: true,\r\n            select: function (e) {\r\n                $tree.focus();\r\n                var item = this.dataItem(e.node);\r\n                var elem = Repository.get(item._id);\r\n                console.log(elem);\r\n                $(exports).triggerHandler(\'selected\', [elem]);\r\n            },\r\n            drag: function (e) {\r\n                _dragPosition.x = e.pageX;\r\n                _dragPosition.y = e.pageY;\r\n                var sourceItem, targetItem, dragEvent;\r\n                if (e.dropTarget.id && e.dropTarget.id == "diagram-canvas") {\r\n                    // When dragging to Diagram Area\r\n                    sourceItem = this.dataItem(e.sourceNode);\r\n                    var source     = Repository.get(sourceItem._id);\r\n                    if (DiagramManager.getEditor()) {\r\n                        var diagram = DiagramManager.getEditor().diagram;\r\n                        if (diagram && (diagram != source)) {\r\n                            dragEvent = {\r\n                                source: source,\r\n                                diagram: diagram,\r\n                                accept: false\r\n                            };\r\n                            $(exports).triggerHandler(\'dragOverDiagram\', [dragEvent]);\r\n                            if (dragEvent.accept === false) {\r\n                                e.setStatusClass("k-denied");\r\n                            } else {\r\n                                e.setStatusClass("k-add");\r\n                                e.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    // When dragging inside ModelExplorer\r\n                    if (e.statusClass !== "add") {\r\n                        e.setStatusClass("k-denied");\r\n                    }\r\n                    sourceItem = this.dataItem(e.sourceNode);\r\n                    targetItem = this.dataItem(e.dropTarget);\r\n                    if (sourceItem && targetItem && sourceItem._id && targetItem._id) {\r\n                        dragEvent = {\r\n                            source: Repository.get(sourceItem._id),\r\n                            target: Repository.get(targetItem._id),\r\n                            accept: false\r\n                        };\r\n                        if (dragEvent.source != dragEvent.target) {\r\n                            $(exports).triggerHandler(\'dragOver\', [dragEvent]);\r\n                        }\r\n                        if (dragEvent.accept === false) {\r\n                            e.setStatusClass("k-denied");\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            drop: function (e) {\r\n                var sourceItem,\r\n                    targetItem,\r\n                    dropEvent;\r\n                if (e.dropTarget.id && e.dropTarget.id == "diagram-canvas") {\r\n                    // When drop on Diagram Area\r\n                    sourceItem = this.dataItem(e.sourceNode);\r\n                    var source     = Repository.get(sourceItem._id);\r\n                    if (DiagramManager.getEditor()) {\r\n                        var diagram = DiagramManager.getEditor().diagram;\r\n                        if (diagram && (diagram != source)) {\r\n                            dropEvent = {\r\n                                source: source,\r\n                                diagram: diagram,\r\n                                x: _dragPosition.x,\r\n                                y: _dragPosition.y\r\n                            };\r\n                            if (e.valid) {\r\n                                $(exports).triggerHandler(\'dropOnDiagram\', [dropEvent]);\r\n                            }\r\n                        }\r\n                    e.setValid(false);\r\n                    }\r\n                } else {\r\n                    // When drop on ModelExplorer\r\n                    sourceItem = this.dataItem(e.sourceNode);\r\n                    targetItem = this.dataItem(e.destinationNode);\r\n                    if (sourceItem && targetItem && sourceItem._id && targetItem._id) {\r\n                        dropEvent = {\r\n                            source: Repository.get(sourceItem._id),\r\n                            target: Repository.get(targetItem._id)\r\n                        };\r\n                        if (e.valid) {\r\n                            if (e.dropPosition == \'over\') {\r\n                                $(exports).triggerHandler(\'drop\', [dropEvent]);\r\n                            }\r\n                        }\r\n                    }\r\n                    e.setValid(false);\r\n                }\r\n            }\r\n        });\r\n        _tree = $tree.data("kendoTreeView");\r\n\r\n        // Setup Double Clicked event.\r\n        $tree.dblclick(function (e) {\r\n            var node = _tree.select();\r\n            var item = _tree.dataItem(node);\r\n            if (item && item._id) {\r\n                var elem = Repository.get(item._id);\r\n                $(exports).triggerHandler("doubleClicked", [elem]);\r\n                e.stopImmediatePropagation();\r\n            }\r\n        });\r\n\r\n        // Support Right-click Selection\r\n        $tree.on("mousedown", ".k-item", function (e) {\r\n            if (e.which === 3) { // Right-click\r\n                e.stopImmediatePropagation();\r\n                _tree.select(this);\r\n                var item = _tree.dataItem(this);\r\n                var elem = Repository.get(item._id);\r\n                $(exports).triggerHandler(\'selected\', [elem]);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Return JSON object for tree node for a given element.\r\n     * @private\r\n     * @param {Core.Element} elem\r\n     * @return {{_id: string, text: string, sprite: string, hasChildren: boolean}}\r\n     */\r\n    function _makeNode(elem) {\r\n        var options = {\r\n            showStereotype: _showStereotype\r\n        };\r\n        return {\r\n            _id: elem._id,\r\n            text: elem.getNodeText(options),\r\n            sprite: elem.getNodeIcon(elem),\r\n            hasChildren: (elem.getChildNodes().length > 0),\r\n            _name: elem.name,\r\n            _namespace: elem._parent ? elem._parent.name || "" : ""\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Return child elements.\r\n     * @private\r\n     * @param {Element} elem\r\n     * @return {Array.<Element>}\r\n     */\r\n    function _getChildren(elem) {\r\n        return elem.getChildNodes();\r\n    }\r\n\r\n    /**\r\n     * Sort elements.\r\n     * @private\r\n     * @param {Array.<Element>} elements\r\n     * @return {Array.<Element>} - 정렬된 요소들의 배열\r\n     */\r\n    function _sort(elements) {\r\n        if (_sortBy === SORT_BY_ADDED) {\r\n            return _.sortBy(elements, function (child, idx) {\r\n                return child.getOrdering(idx);\r\n            });\r\n        } else if (_sortBy === SORT_BY_NAME) {\r\n            var alphaSorted = _.sortBy(elements, function (child, idx) {\r\n                return child.name;\r\n            });\r\n            return _.sortBy(elements, function (child, idx) {\r\n                return child.getOrdering(_.indexOf(alphaSorted, child));\r\n            });\r\n        } else {\r\n            return elements;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a tree node of an element.\r\n     * @private\r\n     * @param {Element} elem\r\n     * @return {}\r\n     */\r\n    function _getNode(elem) {\r\n        var item = _dataSource.get(elem._id);\r\n        if (item && item.uid) {\r\n            var node = _tree.findByUid(item.uid);\r\n            return node;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Append a tree node.\r\n     * @private\r\n     * @param {Core.Element} elem\r\n     * @param {boolean} expandAllParents\r\n     */\r\n    function add(elem, expandAllParents) {\r\n        // Extend all parents\r\n        if (elem && elem._parent) {\r\n            if (expandAllParents) {\r\n                expand(elem._parent, true);\r\n            }\r\n        }\r\n        // If parent node is not loaded, the element is added when expanding it\'s parent.\r\n        // Then, the node should not be added to avoid duplicated addition of the node.\r\n        var node = _getNode(elem);\r\n        if (node === null) {\r\n            if (elem._parent) {\r\n                var parentNode = _getNode(elem._parent),\r\n                    children = _getChildren(elem._parent);\r\n                if (!_.contains(children, elem)) {\r\n                    children.push(elem);\r\n                }\r\n                // Find the position to be added\r\n                var sorted = _sort(children),\r\n                    position = _.indexOf(sorted, elem);\r\n                if ((position > -1) && (position < (sorted.length - 1))) {\r\n                    var after = sorted[position + 1];\r\n                    var afterNode = _getNode(after);\r\n                    if (afterNode) {\r\n                        _tree.insertBefore(_makeNode(elem), afterNode);\r\n                    } else {\r\n                        _tree.append(_makeNode(elem), parentNode);\r\n                    }\r\n                } else {\r\n                    _tree.append(_makeNode(elem), parentNode);\r\n                }\r\n            } else {\r\n                // Add as a root element\r\n                _tree.append(_makeNode(elem));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update tree node correspond to a given Element\r\n     * @private\r\n     * @param {Core.Element} elem\r\n     */\r\n    function update(elem) {\r\n        var node = _getNode(elem);\r\n        if (node) {\r\n            var update = _makeNode(elem);\r\n            // update text\r\n            _tree.text(node, update.text);\r\n            // update icon\r\n            var iconNode = node.children().children(".k-in").children(".k-sprite");\r\n            if (iconNode.length > 0 && !iconNode.hasClass(update.sprite)) {\r\n                iconNode.attr("class", "k-sprite " + update.sprite);\r\n            }\r\n            // update position (sort)\r\n            var item = _tree.dataItem(node);\r\n            if (_sortBy === SORT_BY_NAME && item._name !== elem.name) {\r\n                remove(elem);\r\n                add(elem);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a tree node.\r\n     * @private\r\n     * @param {Core.Element} elem\r\n     */\r\n    function remove(elem) {\r\n        var node = _getNode(elem);\r\n        if (node) {\r\n            _tree.remove(node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rebuild all tree nodes.\r\n     * @private\r\n     */\r\n    function rebuild() {\r\n        if (_tree && _tree.destroy) {\r\n            _tree.destroy();\r\n        }\r\n        if ($tree) {\r\n            $tree.children().remove();\r\n        }\r\n        _setupTree();\r\n    }\r\n\r\n    /**\r\n     * Expand a tree node\r\n     * @param {Core.Model} elem\r\n     * @param {?boolean} expandAllParents - true 인 경우, 모든 조상들을 expand 함.\r\n     */\r\n    function expand(elem, expandAllParents) {\r\n        if (elem) {\r\n            // Expand all parents\r\n            if ((expandAllParents === true) && elem._parent && elem._parent._id) {\r\n                expand(elem._parent, expandAllParents);\r\n            }\r\n            // Expand current node\r\n            var node = _getNode(elem);\r\n            if (node) {\r\n                _tree.expand(node);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collapse a tree node\r\n     * @param {Core.Model} elem\r\n     */\r\n    function collapse(elem) {\r\n        if (elem) {\r\n            var node = _getNode(elem);\r\n            if (node) {\r\n                _tree.collapse(node);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select an element\r\n     * @param {Core.Model} elem\r\n     * @param {boolean} scrollTo\r\n     */\r\n    function select(elem, scrollTo) {\r\n        if (elem) {\r\n            expand(elem._parent, true);\r\n            var node = _getNode(elem);\r\n            if (node) {\r\n                _tree.select(node);\r\n                // Scroll to node\r\n                if (scrollTo === true) {\r\n                    $viewContent.animate({\r\n                        scrollTop: node.offset().top - $viewContent.offset().top + $viewContent.scrollTop()\r\n                    }, 500);\r\n                }\r\n                $(exports).triggerHandler(\'selected\', [elem]);\r\n            }\r\n        } else {\r\n            _tree.select($());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselect\r\n     */\r\n    function deselect() {\r\n        _tree.select($());\r\n    }\r\n\r\n    /**\r\n     * Return a selected element in treeview\r\n     * @private\r\n     */\r\n    function _getSelected() {\r\n        var node = _tree.select(),\r\n            elem = null;\r\n        if (node.length > 0) {\r\n            var item = _tree.dataItem(node[0]);\r\n            elem = Repository.get(item._id);\r\n        }\r\n        return elem;\r\n    }\r\n\r\n    function _updateSettingsMenu() {\r\n        CommandManager.get(CMD_EXPLORER_SETTINGS_SORT_BY_ADDED).setChecked(_sortBy === SORT_BY_ADDED);\r\n        CommandManager.get(CMD_EXPLORER_SETTINGS_SORT_BY_NAME).setChecked(_sortBy === SORT_BY_NAME);\r\n        CommandManager.get(CMD_EXPLORER_SETTINGS_SHOW_STEREOTYPE_TEXT).setChecked(_showStereotype);\r\n    }\r\n\r\n    /**\r\n     * Sort elements by added\r\n     * @private\r\n     */\r\n    function _handleSortByAdded() {\r\n        var elem = _getSelected();\r\n        _sortBy = SORT_BY_ADDED;\r\n        PreferenceManager.set("explorer.sortBy", _sortBy);\r\n        _updateSettingsMenu();\r\n        rebuild();\r\n        if (elem) {\r\n            select(elem, true);\r\n        } else {\r\n            expand(ProjectManager.getProject());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sort elements by name\r\n     * @private\r\n     */\r\n    function _handleSortByName() {\r\n        var elem = _getSelected();\r\n        _sortBy = SORT_BY_NAME;\r\n        PreferenceManager.set("explorer.sortBy", _sortBy);\r\n        _updateSettingsMenu();\r\n        rebuild();\r\n        if (elem) {\r\n            select(elem, true);\r\n        } else {\r\n            expand(ProjectManager.getProject());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show/hide stereotype text\r\n     * @private\r\n     */\r\n    function _toggleStereotypeText() {\r\n        var elem = _getSelected();\r\n        _showStereotype = !_showStereotype;\r\n        PreferenceManager.set("explorer.showStereotype", _showStereotype);\r\n        _updateSettingsMenu();\r\n        rebuild();\r\n        if (elem) {\r\n            select(elem, true);\r\n        } else {\r\n            expand(ProjectManager.getProject());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup Settings Menu\r\n     * @private\r\n     */\r\n    function _setupSettingsMenu() {\r\n        // Register Commands\r\n        CommandManager.register(Strings.EXPLORER_SETTINGS_SORT_BY_ADDED,        CMD_EXPLORER_SETTINGS_SORT_BY_ADDED,        _handleSortByAdded);\r\n        CommandManager.register(Strings.EXPLORER_SETTINGS_SORT_BY_NAME,         CMD_EXPLORER_SETTINGS_SORT_BY_NAME,         _handleSortByName);\r\n        CommandManager.register(Strings.EXPLORER_SETTINGS_SHOW_STEREOTYPE_TEXT, CMD_EXPLORER_SETTINGS_SHOW_STEREOTYPE_TEXT, _toggleStereotypeText);\r\n\r\n        // Define Settings Menu\r\n        var CONTEXT_MENU = "model-explorer-settings";\r\n        settingsMenu = ContextMenuManager.addContextMenu(CONTEXT_MENU, "#model-explorer-settings");\r\n        settingsMenu.addMenuItem(CMD_EXPLORER_SETTINGS_SORT_BY_ADDED);\r\n        settingsMenu.addMenuItem(CMD_EXPLORER_SETTINGS_SORT_BY_NAME);\r\n        settingsMenu.addMenuDivider();\r\n        settingsMenu.addMenuItem(CMD_EXPLORER_SETTINGS_SHOW_STEREOTYPE_TEXT);\r\n\r\n        var $settingsButton = $("#model-explorer-settings");\r\n        $settingsButton.on(\'contextmenu\', function (e) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n        });\r\n        $settingsButton.click(function (e) {\r\n            e.preventDefault();\r\n            var $btn = $("#model-explorer-settings");\r\n            var pos = $btn.offset();\r\n            e.pageY = pos.top + $btn.outerHeight() + 2;\r\n            settingsMenu._kendoObject.show(settingsMenu._kendoObject.options.anchor, e);\r\n            return false;\r\n        });\r\n    }\r\n\r\n\r\n    function _setupQuickSearch() {\r\n        var searchDataSource =  new kendo.data.DataSource({\r\n            transport: {\r\n                read: function (options) {\r\n                    if (options.data.filter && options.data.filter.filters.length > 0) {\r\n                        var keyword = options.data.filter.filters[0].value;\r\n                        var results = Repository.search(keyword);\r\n                        options.success(_.map(results, _makeNode));\r\n                    } else {\r\n                        options.success([]);\r\n                    }\r\n                }\r\n            },\r\n            serverFiltering: true\r\n        });\r\n\r\n        $("#model-explorer-quick-search").kendoAutoComplete({\r\n            dataTextField: "text",\r\n            minLength: 1,\r\n            filter: "contains",\r\n            select: function(e) {\r\n                var item = this.dataItem(e.item.index());\r\n                var elem = Repository.get(item._id);\r\n                if (elem) {\r\n                    select(elem, true);\r\n                }\r\n            },\r\n            template: "<div style=\'white-space: nowrap\'>" +\r\n                "<span class=\'k-sprite #:data.sprite#\'></span>" +\r\n                "<span style=\'margin-left: 5px\'>#:data.text#</span>" +\r\n                "#if (data._namespace.length > 0) {# <span style=\'margin-left: 5px; font-size: 11px; color: rgb(139,139,139);\'> — #:data._namespace#</span> #}#<div>",\r\n            dataSource: searchDataSource\r\n        });\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        _sortBy = PreferenceManager.get("explorer.sortBy", SORT_BY_ADDED);\r\n        _showStereotype = PreferenceManager.get("explorer.showStereotype", true);\r\n\r\n        // Setup UI\r\n        var $view = $(viewTemplate);\r\n        $viewContent = $view.find(".view-content");\r\n        $tree = $view.find(".treeview");\r\n        $("#model-explorer").append($view);\r\n        ViewUtils.addScrollerShadow($viewContent.get(0), null, true);\r\n\r\n        // Rebuild TreeView\r\n        rebuild();\r\n\r\n        // Setup Settings\r\n        _setupSettingsMenu();\r\n\r\n\r\n        _setupQuickSearch();\r\n    });\r\n\r\n    AppInit.appReady(function () {\r\n        _updateSettingsMenu();\r\n    });\r\n\r\n\r\n    // Define public API\r\n    exports.add                = add;\r\n    exports.remove             = remove;\r\n    exports.update             = update;\r\n    exports.rebuild            = rebuild;\r\n    exports.expand             = expand;\r\n    exports.collapse           = collapse;\r\n    exports.select             = select;\r\n    exports.deselect           = deselect;\r\n\r\n});\r\n\n//# sourceURL=/explorer/ModelExplorerView.js'),eval('define(\'text!htmlContent/editors-holder.html\',[],function () { return \'<div class="view-holder">\\r\\n    <div class="view-header">\\r\\n        <span class="view-header-title">Editors</span>\\r\\n    </div>\\r\\n    <div id="editors-holder" class="view-content">\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/editors-holder.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, meta, appshell, kendo, Mustache */\r\n\r\n/**\r\n * EditorsHolder\r\n *\r\n * This contains StyleEditorView, PropertyEditorView, and DocumentationEditorView\r\n */\r\ndefine(\'editors/EditorsHolder\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'command/CommandManager\',\'command/Commands\',\'strings\',\'utils/Resizer\',\'utils/ViewUtils\',\'text!htmlContent/editors-holder.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit        = require("utils/AppInit"),\r\n        CommandManager = require("command/CommandManager"),\r\n        Commands       = require("command/Commands"),\r\n        Strings        = require("strings"),\r\n        Resizer        = require("utils/Resizer"),\r\n        ViewUtils      = require("utils/ViewUtils"),\r\n        viewTemplate   = require("text!htmlContent/editors-holder.html");\r\n\r\n    var $editors;\r\n\r\n    /**\r\n     * Toggle EditorsHolder\r\n     */\r\n    function toggle() {\r\n        Resizer.toggle($editors);\r\n    }\r\n\r\n    /**\r\n     * Show EditorsHolder\r\n     */\r\n    function show() {\r\n        Resizer.show($editors);\r\n    }\r\n\r\n    /**\r\n     * Hide EditorsHolder\r\n     */\r\n    function hide() {\r\n        Resizer.hide($editors);\r\n    }\r\n\r\n    /**\r\n     * Return whether EditorsHolder is visible or not\r\n     *\r\n     * @return {booean}\r\n     */\r\n    function isVisible() {\r\n        return Resizer.isVisible($editors);\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        var $view = $(viewTemplate),\r\n            $content = $view.find(".view-content");\r\n\r\n        $editors = $("#editors");\r\n        $editors.append($view);\r\n        ViewUtils.addScrollerShadow($content.get(0), null, true);\r\n\r\n        $editors.on("panelCollapsed", function (evt, width) {\r\n            CommandManager.get(Commands.VIEW_HIDE_EDITORS).setName(Strings.CMD_VIEW_SHOW_EDITORS);\r\n        });\r\n\r\n        $editors.on("panelExpanded", function (evt, width) {\r\n            CommandManager.get(Commands.VIEW_HIDE_EDITORS).setName(Strings.CMD_VIEW_HIDE_EDITORS);\r\n        });\r\n\r\n        // AppInit.htmlReady in utils/Resizer executes before, so it\'s possible that the sidebar\r\n        // is collapsed before we add the event. Check here initially\r\n        if (!$editors.is(":visible")) {\r\n            $editors.trigger("panelCollapsed");\r\n        }\r\n    });\r\n\r\n    CommandManager.register(Strings.CMD_VIEW_HIDE_EDITORS, Commands.VIEW_HIDE_EDITORS, toggle);\r\n\r\n    exports.toggle    = toggle;\r\n    exports.show      = show;\r\n    exports.hide      = hide;\r\n    exports.isVisible = isVisible;\r\n\r\n});\r\n\r\n\n//# sourceURL=/editors/EditorsHolder.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, meta, app, appshell, kendo, Mustache */\r\n\r\ndefine(\'editors/EditorView\',[\'require\',\'exports\',\'module\',\'core/PreferenceManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var PreferenceManager = require("core/PreferenceManager");\r\n\r\n    function setupEditorView($view) {\r\n        var viewId    = $view.data("id"),\r\n            $suppress = $view.find(".suppress-button"),\r\n            $body     = $view.find(".editor-view-body");\r\n\r\n        // Read EditorView\'s Preferences\r\n        var elementPrefs = PreferenceManager.getViewState(viewId);\r\n        if (!elementPrefs) {\r\n            elementPrefs = { visible: true };\r\n        }\r\n        $body.toggle(elementPrefs.visible);\r\n        $suppress.toggleClass("collapsed", !elementPrefs.visible);\r\n\r\n        // Toggle Button\r\n        $suppress.click(function () {\r\n            $body.slideToggle(function () {\r\n                var elementPrefs = {\r\n                    visible: $body.is(":visible")\r\n                };\r\n                PreferenceManager.setViewState(viewId, elementPrefs);\r\n                $suppress.toggleClass("collapsed", !elementPrefs.visible);\r\n            });\r\n        });\r\n\r\n        // Append to Editors-Holder\r\n        $("#editors-holder").append($view);\r\n    }\r\n\r\n    exports.setupEditorView = setupEditorView;\r\n\r\n});\r\n\n//# sourceURL=/editors/EditorView.js'),eval('define(\'text!htmlContent/style-editor-view.html\',[],function () { return \'<div class="editor-view" data-id="styleEditor">\\r\\n    <hr>\\r\\n    <div class="editor-view-header">\\r\\n        <span class="suppress-button"></span>\\r\\n        <label class="header">Styles</label>\\r\\n    </div>\\r\\n    <div class="editor-view-body">\\r\\n        <table class=\\\'property-grid small\\\'>\\r\\n            <!-- Font -->\\r\\n            <tr>\\r\\n                <td>\\r\\n                    Font\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div style="width: 100%; display: block; position: relative; padding-right: 60px; box-sizing: border-box;">\\r\\n                        <label class="font-face k-combo small" style="width: 100%; margin: 0; padding: 0">\\r\\n                            <input type="text" style="width: 100%;">\\r\\n                            <select tabindex="-1">\\r\\n                            </select>\\r\\n                        </label>\\r\\n                        <label class="font-size k-combo small" style="position: absolute; right: 0; top: 0; width: 55px;">\\r\\n                            <input type="text" style="width: 100%;">\\r\\n                            <select tabindex="-1">\\r\\n                                <option value="8">8</option>\\r\\n                                <option value="9">9</option>\\r\\n                                <option value="10">10</option>\\r\\n                                <option value="11">11</option>\\r\\n                                <option value="12">12</option>\\r\\n                                <option value="13">13</option>\\r\\n                                <option value="15">15</option>\\r\\n                                <option value="16">16</option>\\r\\n                                <option value="18">18</option>\\r\\n                                <option value="20">20</option>\\r\\n                                <option value="22">22</option>\\r\\n                                <option value="24">24</option>\\r\\n                                <option value="26">26</option>\\r\\n                                <option value="28">28</option>\\r\\n                                <option value="32">32</option>\\r\\n                                <option value="36">36</option>\\r\\n                                <option value="42">42</option>\\r\\n                            </select>\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </td>\\r\\n            </tr>\\r\\n\\r\\n            <!-- Color -->\\r\\n            <tr>\\r\\n                <td>\\r\\n                    Color\\r\\n                </td>\\r\\n                <td>\\r\\n                    <span class="k-sprite tool-icon-fill-color" style="margin-right: 3px;"></span>\\r\\n                    <input type="color" class="fill-color k-color-input small" title="Fill Color" value="#ffffff">\\r\\n                    <span style="display: inline-block; width: 3px;"></span>\\r\\n\\r\\n                    <span class="k-sprite tool-icon-line-color" style="margin-right: 3px;"></span>\\r\\n                    <input type="color" class="line-color k-color-input small" title="Line Color" value="#000000">\\r\\n                    <span style="display: inline-block; width: 3px;"></span>\\r\\n\\r\\n                    <span class="k-sprite tool-icon-font-color" style="margin-right: 3px;"></span>\\r\\n                    <input type="color" class="font-color k-color-input small" title="Text Color" value="#000000">\\r\\n                </td>\\r\\n            </tr>\\r\\n\\r\\n            <!-- Line Style -->\\r\\n            <tr>\\r\\n                <td>\\r\\n                    Line Style\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class="radio-button-bar icon-group">\\r\\n                        <label class="radio-button-bar__item">\\r\\n                            <input id="style-editor-line-style-rectilinear" type="radio" name="line-style" value="0">\\r\\n                            <label for="style-editor-line-style-rectilinear" class="line-style k-button small" title="Rectilinear"><span class="k-sprite tool-icon-rectilinear"/></label>\\r\\n                        </label>\\r\\n                        <label class="radio-button-bar__item">\\r\\n                            <input id="style-editor-line-style-oblique" type="radio" name="line-style" value="1">\\r\\n                            <label for="style-editor-line-style-oblique" class="line-style k-button small" title="Oblique"><span class="k-sprite tool-icon-oblique"/></label>\\r\\n                        </label>\\r\\n                        <label class="radio-button-bar__item">\\r\\n                            <input id="style-editor-line-style-roundrect" type="radio" name="line-style" value="2">\\r\\n                            <label for="style-editor-line-style-roundrect" class="line-style k-button small" title="Rounded Rectilinear"><span class="k-sprite tool-icon-rounded-rectilinear"/></label>\\r\\n                        </label>\\r\\n                        <label class="radio-button-bar__item">\\r\\n                            <input id="style-editor-line-style-curve" type="radio" name="line-style" value="3">\\r\\n                            <label for="style-editor-line-style-curve" class="line-style k-button small" title="Curve"><span class="k-sprite tool-icon-curve"/></label>\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </td>\\r\\n            </tr>\\r\\n\\r\\n            <!-- Format -->\\r\\n            <tr>\\r\\n                <td>\\r\\n                    Format\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class="k-button-bar icon-group">\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="auto-resize">\\r\\n                            <label class="k-button auto-resize" title="Auto Resize"><span class="k-sprite tool-icon-auto-resize"/></label>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="show-shadow">\\r\\n                            <label class="k-button show-shadow" title="Show Shadow"><span class="k-sprite tool-icon-show-shadow"/></label>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="word-wrap">\\r\\n                            <label class="k-button word-wrap" title="Word Wrap"><span class="k-sprite tool-icon-word-wrap"/></label>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div style="display: inline-block; vertical-align: bottom">\\r\\n                        <label class="k-select small stereotype-display">\\r\\n                            <select title="Stereotype Display">\\r\\n                                <option value="none">None</option>\\r\\n                                <option value="label">Label</option>\\r\\n                                <option value="decoration">Decoration</option>\\r\\n                                <option value="decoration-label">Decoration with Label</option>\\r\\n                                <option value="icon">Icon</option>\\r\\n                                <option value="icon-label">Icon with Label</option>\\r\\n                            </select>\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td></td>\\r\\n                <td>\\r\\n                    <div class="k-button-bar icon-group">\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="show-visibility">\\r\\n                            <label class="k-button show-visibility" title="Show Visibility"><span class="k-sprite tool-icon-show-visibility"/></label>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="show-namespace">\\r\\n                            <label class="k-button show-namespace" title="Show Namespace"><span class="k-sprite tool-icon-show-namespace"/></label>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="show-property">\\r\\n                            <label class="k-button show-property" title="Show Property"><span class="k-sprite tool-icon-show-property"/></label>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="show-type">\\r\\n                            <label class="k-button show-type" title="Show Type"><span class="k-sprite tool-icon-show-type"/></label>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class="k-button-bar icon-group">\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="suppress-attributes">\\r\\n                            <label class="k-button suppress-attributes" title="Suppress Attributes"><span class="k-sprite tool-icon-suppress-attributes"/></label>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="suppress-operations">\\r\\n                            <label class="k-button suppress-operations" title="Suppress Operations"><span class="k-sprite tool-icon-suppress-operations"/></label>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="suppress-receptions">\\r\\n                            <label class="k-button suppress-receptions" title="Suppress Receptions"><span class="k-sprite tool-icon-suppress-receptions"/></label>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <input type="checkbox" class="suppress-literals">\\r\\n                            <label class="k-button suppress-literals" title="Suppress Literals"><span class="k-sprite tool-icon-suppress-literals"/></label>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </td>\\r\\n            </tr>\\r\\n\\r\\n            <!-- Alignment -->\\r\\n            <tr>\\r\\n                <td>\\r\\n                    Alignment\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div class="k-button-bar icon-group">\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button send-to-back" title="Send to Back"><span class="k-sprite tool-icon-sendtoback"/></button>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button bring-to-front" title="Bring to Front"><span class="k-sprite tool-icon-bringtofront"/></button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class="k-button-bar icon-group">\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button align-left" title="Align Left"><span class="k-sprite tool-icon-align-left"/></button>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button align-center" title="Align Center"><span class="k-sprite tool-icon-align-center"/></button>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button align-right" title="Align Right"><span class="k-sprite tool-icon-align-right"/></button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class="k-button-bar icon-group">\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button align-top" title="Align Top"><span class="k-sprite tool-icon-align-top"/></button>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button align-middle" title="Align Middle"><span class="k-sprite tool-icon-align-middle"/></button>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button align-bottom" title="Align Bottom"><span class="k-sprite tool-icon-align-bottom"/></button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class="k-button-bar icon-group">\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button space-equal-horz" title="Space Equally, Horizontally"><span class="k-sprite tool-icon-align-space-even-horz"/></button>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button space-equal-vert" title="Space Equally, Vertically"><span class="k-sprite tool-icon-align-space-even-vert"/></button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class="k-button-bar icon-group">\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button set-width-equal" title="Set Width Equally"><span class="k-sprite tool-icon-set-width-equal"/></button>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button set-height-equal" title="Set Height Equally"><span class="k-sprite tool-icon-set-height-equal"/></button>\\r\\n                        </div>\\r\\n                        <div class="k-button-bar__item">\\r\\n                            <button class="k-button set-size-equal" title="Set Size Equally"><span class="k-sprite tool-icon-set-size-equal"/></button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </td>\\r\\n            </tr>\\r\\n\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/style-editor-view.html'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, meta, app, appshell, kendo, Mustache */\r\n\r\n/**\r\n *\r\n * This module dispatches these events:\r\n *     - styleChanged: (views, field, value)\r\n */\r\ndefine('editors/StyleEditorView',['require','exports','module','utils/AppInit','utils/Helper','core/PreferenceManager','dialogs/Dialogs','command/CommandManager','editors/EditorView','text!htmlContent/style-editor-view.html','editors/EditorsHolder'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var AppInit           = require(\"utils/AppInit\"),\r\n        Helper            = require(\"utils/Helper\"),\r\n        PreferenceManager = require(\"core/PreferenceManager\"),\r\n        Dialogs           = require(\"dialogs/Dialogs\"),\r\n        CommandManager    = require(\"command/CommandManager\"),\r\n        EditorView        = require(\"editors/EditorView\"),\r\n        viewTemplate      = require(\"text!htmlContent/style-editor-view.html\");\r\n\r\n    // for Loading Order\r\n    require(\"editors/EditorsHolder\");\r\n\r\n    var _views = null;\r\n\r\n    var $view,\r\n        $propertyGrid,\r\n        $fontFaceEdit, $fontFaceSelect,\r\n        $fontSizeEdit, $fontSizeSelect,\r\n        $fillColor, $lineColor, $fontColor,\r\n        $lineStyleRadio, $lineStyleButtons,\r\n\r\n        $autoResizeButton, $autoResizeCheckbox,\r\n        $showShadowButton, $showShadowCheckbox,\r\n        $wordWrapButton, $wordWrapCheckbox,\r\n        $stereotypeDisplaySelect,\r\n\r\n        $showVisibilityButton, $showVisibilityCheckbox,\r\n        $showNamespaceButton, $showNamespaceCheckbox,\r\n        $showPropertyButton, $showPropertyCheckbox,\r\n        $showTypeButton, $showTypeCheckbox,\r\n\r\n        $suppressAttributesButton, $suppressAttributesCheckbox,\r\n        $suppressOperationsButton, $suppressOperationsCheckbox,\r\n        $suppressReceptionsButton, $suppressReceptionsCheckbox,\r\n        $suppressLiteralsButton, $suppressLiteralsCheckbox,\r\n\r\n        $sendToBackButton, $bringToFrontButton,\r\n        $alignLeftButton, $alignRightButton, $alignCenterButton,\r\n        $alignTopButton, $alignBottomButton, $alignMiddleButton,\r\n        $spaceEqualHorz, $spaceEqualVert,\r\n        $setWidthEqual, $setSizeEqual, $setHeightEqual;\r\n\r\n    function _setupStyleWidgets() {\r\n        $propertyGrid       = $view.find(\".property-grid\");\r\n        $fontFaceEdit       = $view.find(\".font-face input\");\r\n        $fontFaceSelect     = $view.find(\".font-face select\");\r\n        $fontSizeEdit       = $view.find(\".font-size input\");\r\n        $fontSizeSelect     = $view.find(\".font-size select\");\r\n        $fillColor          = $view.find(\".fill-color\");\r\n        $lineColor          = $view.find(\".line-color\");\r\n        $fontColor          = $view.find(\".font-color\");\r\n        $lineStyleRadio     = $(\"input[name='line-style']\", $view);\r\n        $lineStyleButtons   = $(\"button.line-style\", $view);\r\n\r\n        $autoResizeButton   = $(\"label.auto-resize\", $view);\r\n        $autoResizeCheckbox = $(\"input.auto-resize\", $view);\r\n        $showShadowButton   = $(\"label.show-shadow\", $view);\r\n        $showShadowCheckbox = $(\"input.show-shadow\", $view);\r\n        $wordWrapButton     = $(\"label.word-wrap\", $view);\r\n        $wordWrapCheckbox   = $(\"input.word-wrap\", $view);\r\n        $stereotypeDisplaySelect = $view.find(\".stereotype-display select\");\r\n\r\n        $showVisibilityButton   = $(\"label.show-visibility\", $view);\r\n        $showVisibilityCheckbox = $(\"input.show-visibility\", $view);\r\n        $showNamespaceButton    = $(\"label.show-namespace\", $view);\r\n        $showNamespaceCheckbox  = $(\"input.show-namespace\", $view);\r\n        $showPropertyButton     = $(\"label.show-property\", $view);\r\n        $showPropertyCheckbox   = $(\"input.show-property\", $view);\r\n        $showTypeButton         = $(\"label.show-type\", $view);\r\n        $showTypeCheckbox       = $(\"input.show-type\", $view);\r\n\r\n        $suppressAttributesButton   = $(\"label.suppress-attributes\", $view);\r\n        $suppressAttributesCheckbox = $(\"input.suppress-attributes\", $view);\r\n        $suppressOperationsButton   = $(\"label.suppress-operations\", $view);\r\n        $suppressOperationsCheckbox = $(\"input.suppress-operations\", $view);\r\n        $suppressReceptionsButton   = $(\"label.suppress-receptions\", $view);\r\n        $suppressReceptionsCheckbox = $(\"input.suppress-receptions\", $view);\r\n        $suppressLiteralsButton     = $(\"label.suppress-literals\", $view);\r\n        $suppressLiteralsCheckbox   = $(\"input.suppress-literals\", $view);\r\n\r\n        $sendToBackButton   = $(\".send-to-back\", $view);\r\n        $bringToFrontButton = $(\".bring-to-front\", $view);\r\n        $alignLeftButton    = $(\".align-left\", $view);\r\n        $alignRightButton   = $(\".align-right\", $view);\r\n        $alignCenterButton  = $(\".align-center\", $view);\r\n        $alignTopButton     = $(\".align-top\", $view);\r\n        $alignBottomButton  = $(\".align-bottom\", $view);\r\n        $alignMiddleButton  = $(\".align-middle\", $view);\r\n        $spaceEqualHorz     = $(\".space-equal-horz\", $view);\r\n        $spaceEqualVert     = $(\".space-equal-vert\", $view);\r\n        $setWidthEqual      = $(\".set-width-equal\", $view);\r\n        $setHeightEqual     = $(\".set-height-equal\", $view);\r\n        $setSizeEqual       = $(\".set-size-equal\", $view);\r\n\r\n        // Font Face\r\n        $fontFaceEdit.change(function () {\r\n            $(exports).triggerHandler('styleChanged', [_views, 'font.face', $fontFaceEdit.val()]);\r\n        });\r\n\r\n        // Font Face <select>\r\n        $fontFaceSelect.change(function () {\r\n            $fontFaceEdit.val($fontFaceSelect.val());\r\n            $fontFaceEdit.change();\r\n        });\r\n        // (for Windows) To prevent immediate collapse of dropdown in comboBox.\r\n        $fontFaceSelect.click(function (e) {\r\n            $fontFaceSelect.focus();\r\n            e.stopPropagation();\r\n            return false;\r\n        });\r\n\r\n        // Font Size\r\n        $fontSizeEdit.change(function () {\r\n            if (!_.isNaN(parseInt($fontSizeEdit.val()))) {\r\n                $(exports).triggerHandler('styleChanged', [_views, 'font.size', $fontSizeEdit.val()]);\r\n            } else {\r\n                // TODO: Show message? (Only number is allowed)\r\n            }\r\n        });\r\n\r\n        // Font Size <select>\r\n        $fontSizeSelect.change(function () {\r\n            $fontSizeEdit.val($fontSizeSelect.val());\r\n            $fontSizeEdit.change();\r\n        });\r\n        // (for Windows) To prevent immediate collapse of dropdown in comboBox.\r\n        $fontSizeSelect.click(function (e) {\r\n            $fontSizeSelect.focus();\r\n            e.stopPropagation();\r\n            return false;\r\n        });\r\n\r\n        // Fill Color\r\n        $fillColor.click(function () {\r\n            Dialogs.showColorDialog($fillColor.val())\r\n                .done(function (buttonId, color) {\r\n                    if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                        $fillColor.val(color);\r\n                        $(exports).triggerHandler('styleChanged', [_views, 'fillColor', $fillColor.val()]);\r\n                    }\r\n                });\r\n        });\r\n\r\n        // Line Color\r\n        $lineColor.click(function () {\r\n            Dialogs.showColorDialog($lineColor.val())\r\n                .done(function (buttonId, color) {\r\n                    if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                        $lineColor.val(color);\r\n                        $(exports).triggerHandler('styleChanged', [_views, 'lineColor', $lineColor.val()]);\r\n                    }\r\n                });\r\n        });\r\n\r\n        // Fill Color\r\n        $fontColor.click(function () {\r\n            Dialogs.showColorDialog($fontColor.val())\r\n                .done(function (buttonId, color) {\r\n                    if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                        $fontColor.val(color);\r\n                        $(exports).triggerHandler('styleChanged', [_views, 'fontColor', $fontColor.val()]);\r\n                    }\r\n                });\r\n        });\r\n\r\n        // Line Style\r\n        $lineStyleRadio.change(function () {\r\n            $(exports).triggerHandler('styleChanged', [_views, 'lineStyle', parseInt(this.value)]);\r\n        });\r\n\r\n        // Format\r\n        $autoResizeButton.click(function () {\r\n            $autoResizeCheckbox.prop('checked', !$autoResizeCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'autoResize', $autoResizeCheckbox.is(':checked')]);\r\n        });\r\n        $showShadowButton.click(function () {\r\n            $showShadowCheckbox.prop('checked', !$showShadowCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'showShadow', $showShadowCheckbox.is(':checked')]);\r\n        });\r\n        $wordWrapButton.click(function () {\r\n            $wordWrapCheckbox.prop('checked', !$wordWrapCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'wordWrap', $wordWrapCheckbox.is(':checked')]);\r\n        });\r\n        $stereotypeDisplaySelect.change(function () {\r\n            $(exports).triggerHandler('styleChanged', [_views, 'stereotypeDisplay', $stereotypeDisplaySelect.val()]);\r\n        });\r\n\r\n        $showVisibilityButton.click(function () {\r\n            $showVisibilityCheckbox.prop('checked', !$showVisibilityCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'showVisibility', $showVisibilityCheckbox.is(':checked')]);\r\n        });\r\n        $showNamespaceButton.click(function () {\r\n            $showNamespaceCheckbox.prop('checked', !$showNamespaceCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'showNamespace', $showNamespaceCheckbox.is(':checked')]);\r\n        });\r\n        $showPropertyButton.click(function () {\r\n            $showPropertyCheckbox.prop('checked', !$showPropertyCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'showProperty', $showPropertyCheckbox.is(':checked')]);\r\n        });\r\n        $showTypeButton.click(function () {\r\n            $showTypeCheckbox.prop('checked', !$showTypeCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'showType', $showTypeCheckbox.is(':checked')]);\r\n        });\r\n\r\n        $suppressAttributesButton.click(function () {\r\n            $suppressAttributesCheckbox.prop('checked', !$suppressAttributesCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'suppressAttributes', $suppressAttributesCheckbox.is(':checked')]);\r\n        });\r\n        $suppressOperationsButton.click(function () {\r\n            $suppressOperationsCheckbox.prop('checked', !$suppressOperationsCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'suppressOperations', $suppressOperationsCheckbox.is(':checked')]);\r\n        });\r\n        $suppressReceptionsButton.click(function () {\r\n            $suppressReceptionsCheckbox.prop('checked', !$suppressReceptionsCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'suppressReceptions', $suppressReceptionsCheckbox.is(':checked')]);\r\n        });\r\n        $suppressLiteralsButton.click(function () {\r\n            $suppressLiteralsCheckbox.prop('checked', !$suppressLiteralsCheckbox.is(':checked'));\r\n            $(exports).triggerHandler('styleChanged', [_views, 'suppressLiterals', $suppressLiteralsCheckbox.is(':checked')]);\r\n        });\r\n\r\n        // Alignment\r\n        $sendToBackButton.click(function () {\r\n            CommandManager.execute(\"format.alignment.sendToBack\");\r\n        });\r\n        $bringToFrontButton.click(function () {\r\n            CommandManager.execute(\"format.alignment.bringToFront\");\r\n        });\r\n        $alignLeftButton.click(function () {\r\n            CommandManager.execute(\"format.alignment.alignLeft\");\r\n        });\r\n        $alignCenterButton.click(function () {\r\n            CommandManager.execute(\"format.alignment.alignCenter\");\r\n        });\r\n        $alignRightButton.click(function () {\r\n            CommandManager.execute(\"format.alignment.alignRight\");\r\n        });\r\n        $alignTopButton.click(function () {\r\n            CommandManager.execute(\"format.alignment.alignTop\");\r\n        });\r\n        $alignMiddleButton.click(function () {\r\n            CommandManager.execute(\"format.alignment.alignMiddle\");\r\n        });\r\n        $alignBottomButton.click(function () {\r\n            CommandManager.execute(\"format.alignment.alignBottom\");\r\n        });\r\n        $spaceEqualHorz.click(function () {\r\n            CommandManager.execute(\"format.alignment.spaceEquallyHorizontally\");\r\n        });\r\n        $spaceEqualVert.click(function () {\r\n            CommandManager.execute(\"format.alignment.spaceEquallyVertically\");\r\n        });\r\n        $setWidthEqual.click(function () {\r\n            CommandManager.execute(\"format.alignment.setWidthEqually\");\r\n        });\r\n        $setHeightEqual.click(function () {\r\n            CommandManager.execute(\"format.alignment.setHeightEqually\");\r\n        });\r\n        $setSizeEqual.click(function () {\r\n            CommandManager.execute(\"format.alignment.setSizeEqually\");\r\n        });\r\n\r\n    }\r\n\r\n    function _setFontFace(face) {\r\n        if (face) {\r\n            $fontFaceEdit.val(face);\r\n            $fontFaceSelect.val(face);\r\n        } else {\r\n            $fontFaceEdit.prop(\"placeholder\", \"—\");\r\n            $fontFaceEdit.val(\"\");\r\n            $fontFaceSelect.val(null);\r\n        }\r\n    }\r\n\r\n    function _setFontSize(size) {\r\n        if (_.isNumber(size)) {\r\n            $fontSizeEdit.val(size);\r\n            $fontSizeSelect.val(size);\r\n        } else {\r\n            $fontSizeEdit.prop(\"placeholder\", \"—\");\r\n            $fontSizeEdit.val(\"\");\r\n            $fontSizeSelect.val(null);\r\n        }\r\n    }\r\n\r\n    function _setFillColor(color) {\r\n        if (color) {\r\n            $fillColor.val(color);\r\n        } else {\r\n            $fillColor.val(\"\");\r\n        }\r\n    }\r\n\r\n    function _setLineColor(color) {\r\n        if (color) {\r\n            $lineColor.val(color);\r\n        } else {\r\n            $lineColor.val(\"\");\r\n        }\r\n    }\r\n\r\n    function _setFontColor(color) {\r\n        if (color) {\r\n            $fontColor.val(color);\r\n        } else {\r\n            $fontColor.val(\"\");\r\n        }\r\n    }\r\n\r\n    function _setLineStyle(lineStyle) {\r\n        if (_.isNumber(lineStyle)) {\r\n            $lineStyleRadio.val([lineStyle]);\r\n        } else {\r\n            $lineStyleRadio.attr(\"checked\", false);\r\n        }\r\n    }\r\n\r\n    function _setStereotypeDisplay(value) {\r\n        if (value) {\r\n            $stereotypeDisplaySelect.val(value);\r\n        } else {\r\n            $stereotypeDisplaySelect.val(null);\r\n        }\r\n    }\r\n\r\n    function _setCheckbox($widget, value) {\r\n        if (_.isBoolean(value)) {\r\n            $widget.prop('checked', value);\r\n        } else {\r\n            $widget.prop('checked', false);\r\n        }\r\n    }\r\n\r\n    function _updateStyles(views) {\r\n        if (views && views.length > 0) {\r\n            $view.show();\r\n            var fonts      = _.map(views, function (v) { return v.font; }),\r\n                fontFace   = Helper.reduceValue(fonts, 'face'),\r\n                fontSize   = Helper.reduceValue(fonts, 'size'),\r\n                fillColor  = Helper.reduceValue(views, 'fillColor'),\r\n                lineColor  = Helper.reduceValue(views, 'lineColor'),\r\n                fontColor  = Helper.reduceValue(views, 'fontColor'),\r\n                lineStyle  = Helper.reduceValue(views, 'lineStyle'),\r\n                autoResize = Helper.reduceValue(views, 'autoResize'),\r\n                showShadow = Helper.reduceValue(views, 'showShadow'),\r\n                wordWrap   = Helper.reduceValue(views, 'wordWrap'),\r\n                stereotypeDisplay = Helper.reduceValue(views, 'stereotypeDisplay'),\r\n                showVisibility = Helper.reduceValue(views, 'showVisibility'),\r\n                showNamespace  = Helper.reduceValue(views, 'showNamespace'),\r\n                showProperty   = Helper.reduceValue(views, 'showProperty'),\r\n                showType       = Helper.reduceValue(views, 'showType'),\r\n                suppressAttributes = Helper.reduceValue(views, 'suppressAttributes'),\r\n                suppressOperations = Helper.reduceValue(views, 'suppressOperations'),\r\n                suppressReceptions = Helper.reduceValue(views, 'suppressReceptions'),\r\n                suppressLiterals   = Helper.reduceValue(views, 'suppressLiterals');\r\n\r\n            _setFontFace(fontFace);\r\n            _setFontSize(fontSize);\r\n            _setFillColor(fillColor);\r\n            _setLineColor(lineColor);\r\n            _setFontColor(fontColor);\r\n            _setLineStyle(lineStyle);\r\n\r\n            _setCheckbox($autoResizeCheckbox, autoResize);\r\n            _setCheckbox($showShadowCheckbox, showShadow);\r\n            _setCheckbox($wordWrapCheckbox, wordWrap);\r\n            _setStereotypeDisplay(stereotypeDisplay);\r\n\r\n            _setCheckbox($showVisibilityCheckbox, showVisibility);\r\n            _setCheckbox($showNamespaceCheckbox, showNamespace);\r\n            _setCheckbox($showPropertyCheckbox, showProperty);\r\n            _setCheckbox($showTypeCheckbox, showType);\r\n\r\n            _setCheckbox($suppressAttributesCheckbox, suppressAttributes);\r\n            _setCheckbox($suppressOperationsCheckbox, suppressOperations);\r\n            _setCheckbox($suppressReceptionsCheckbox, suppressReceptions);\r\n            _setCheckbox($suppressLiteralsCheckbox, suppressLiterals);\r\n\r\n        } else {\r\n            $view.hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show styles of a given a list of views\r\n     * @param {Array.<View>} views\r\n     */\r\n    function show(views) {\r\n        _views = views;\r\n        _updateStyles(views);\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        var strings = {\r\n            defaultFonts: app.config.defaultFonts\r\n        };\r\n        $view = $(Mustache.render(viewTemplate, strings));\r\n        _setupStyleWidgets();\r\n        EditorView.setupEditorView($view);\r\n    });\r\n\r\n    AppInit.appReady(function () {\r\n        // Add font list to StyleEditor after loading all fonts\r\n        var $fontSelect = $view.find(\"label.font-face > select\");\r\n        _.each(app.config.defaultFonts, function (font) {\r\n            var s = \"<option value='{{value}}'>{{text}}</option>\";\r\n            $fontSelect.append(Mustache.render(s, font));\r\n        });\r\n    });\r\n\r\n    exports.show = show;\r\n\r\n});\r\n\n//# sourceURL=/editors/StyleEditorView.js"),eval("define('text!htmlContent/element-list-editor-dialog.html',[],function () { return '<div class=\"element-list-editor dialog modal\" data-title=\"{{name}}\">\\r\\n    <div class=\"dialog-body no-padding\">\\r\\n        <div class=\"listview-wrapper\">\\r\\n            <div class=\"listview\"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\"dialog-footer\">\\r\\n        <div class=\"left\" style=\"text-align: left;\">\\r\\n            <button class=\\'k-button add-element\\'>Add<!--<span class=\\'k-sprite quick-edit-icon-add\\'></span>--></button>\\r\\n            <button class=\\'k-button delete-element\\'>Remove<!--<span class=\\'k-sprite quick-edit-icon-delete\\'></span>--></button>\\r\\n            <button class=\\'k-button move-up\\'>Up<!--<span class=\\'k-sprite quick-edit-icon-moveup\\'></span>--></button>\\r\\n            <button class=\\'k-button move-down\\'>Down<!--<span class=\\'k-sprite quick-edit-icon-movedown\\'></span>--></button>\\r\\n        </div>\\r\\n        <button class=\"k-button dialog-button primary\" data-button-id=\"close\">{{Strings.CLOSE}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n';});\n\n//# sourceURL=/text!htmlContent/element-list-editor-dialog.html"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo, Mustache */\r\n\r\n/**\r\n * Element List Editor Dialog\r\n */\r\ndefine(\'dialogs/ElementListEditorDialog\',[\'require\',\'exports\',\'module\',\'utils/Helper\',\'utils/ViewUtils\',\'core/Repository\',\'engine/Engine\',\'dialogs/ElementPickerDialog\',\'dialogs/Dialogs\',\'strings\',\'text!htmlContent/element-list-editor-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Helper              = require("utils/Helper"),\r\n        ViewUtils           = require("utils/ViewUtils"),\r\n        Repository          = require("core/Repository"),\r\n        Engine              = require("engine/Engine"),\r\n        ElementPickerDialog = require("dialogs/ElementPickerDialog"),\r\n        Dialogs             = require("dialogs/Dialogs"),\r\n        Strings             = require("strings"),\r\n        dialogTemplate      = require("text!htmlContent/element-list-editor-dialog.html");\r\n\r\n    var UI_ELEMENTLIST_EDITOR = "#ui-element-list-editor",\r\n        UI_CLOSE_BUTTON       = "#ui-element-list-editor-button-close";\r\n\r\n\r\n    /**\r\n     * DataSource for ListView\r\n     * @private\r\n     * @type {kendo.data.DataSource}\r\n     */\r\n    var dataSource = new kendo.data.DataSource();\r\n\r\n    /**\r\n     * Convert Core.Model to DataSource Item\r\n     * @private\r\n     * @type {kendo.data.DataSource}\r\n     */\r\n    function _toDataItem(elem) {\r\n        return {\r\n            id: elem._id,\r\n            icon: elem.getNodeIcon(),\r\n            text: elem.getNodeText(),\r\n            path: elem.getPathname()\r\n        };\r\n    }\r\n\r\n    function updateDataSource(elem, field) {\r\n        if (_.isArray(elem[field])) {\r\n            dataSource.data([]);\r\n            var ref = elem[field];\r\n            for (var i = 0, len = ref.length; i < len; i++) {\r\n                var item = ref[i];\r\n                dataSource.add(_toDataItem(item));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show Element List Editor Dialog.\r\n     *\r\n     * @param {Core.Model} elem\r\n     * @param {string} field Array field name to be listed\r\n     */\r\n    function showDialog(elem, field) {\r\n        var context = {\r\n            Strings: Strings,\r\n            name: elem.name + "." + field\r\n        };\r\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(dialogTemplate, context), true, function ($dlg) {\r\n\r\n        });\r\n\r\n        var $dlg = dialog.getElement(),\r\n            $listview = $dlg.find(".listview"),\r\n            $addElement = $dlg.find(".add-element"),\r\n            $deleteElement = $dlg.find(".delete-element"),\r\n            $moveUp = $dlg.find(".move-up"),\r\n            $moveDown = $dlg.find(".move-down");\r\n\r\n        var $wrapper = $dlg.find(".listview-wrapper");\r\n        ViewUtils.addScrollerShadow($wrapper, null, true);\r\n\r\n        // Setup ListView\r\n        updateDataSource(elem, field);\r\n        $listview.kendoListView({\r\n            dataSource: dataSource,\r\n            template: "<div style=\'padding: 0.2em;\'><span class=\'k-sprite #=icon#\'></span>#:text# (#=path#)</div>",\r\n            selectable: true\r\n        });\r\n        var listview = $listview.data("kendoListView");\r\n\r\n        // Add Button\r\n        $addElement.click(function () {\r\n            ElementPickerDialog.showDialog("Select Element to Add", null, null).done(function (buttonId, selected) {\r\n                if (buttonId === Dialogs.DIALOG_BTN_OK && selected !== null) {\r\n                    Engine.addItem(elem, field, selected);\r\n                    dataSource.add(_toDataItem(selected));\r\n                }\r\n            });\r\n        });\r\n\r\n        // Delete Button\r\n        $deleteElement.click(function () {\r\n            var selected = listview.select();\r\n            if (selected && selected.length > 0) {\r\n                var dataItem = dataSource.getByUid(selected[0].dataset.uid);\r\n                var item = Repository.get(dataItem.id);\r\n                if (item) {\r\n                    Engine.removeItem(elem, field, item);\r\n                    dataSource.remove(dataItem);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Move Up Button\r\n        $moveUp.click(function () {\r\n            var selected = listview.select();\r\n            if (selected && selected.length > 0) {\r\n                var dataItem = dataSource.getByUid(selected[0].dataset.uid);\r\n                var item = Repository.get(dataItem.id);\r\n                if (item) {\r\n                    Engine.moveUp(elem, field, item);\r\n                    dataSource.remove(dataItem);\r\n                    dataSource.insert(_.indexOf(elem[field], item), dataItem);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Move Down Button\r\n        $moveDown.click(function () {\r\n            var selected = listview.select();\r\n            if (selected && selected.length > 0) {\r\n                var dataItem = dataSource.getByUid(selected[0].dataset.uid);\r\n                var item = Repository.get(dataItem.id);\r\n                if (item) {\r\n                    Engine.moveDown(elem, field, item);\r\n                    dataSource.remove(dataItem);\r\n                    dataSource.insert(_.indexOf(elem[field], item), dataItem);\r\n                }\r\n            }\r\n        });\r\n\r\n        return dialog;\r\n    }\r\n\r\n    // Public API\r\n    exports.showDialog = showDialog;\r\n\r\n});\r\n\n//# sourceURL=/dialogs/ElementListEditorDialog.js'),eval('define(\'text!htmlContent/property-editor-view.html\',[],function () { return \'<div class="editor-view" data-id="propertyEditor">\\r\\n    <hr>\\r\\n    <div class="editor-view-header">\\r\\n        <span class="suppress-button"></span>\\r\\n        <label class="header">Properties</label>\\r\\n    </div>\\r\\n    <div class="editor-view-body">\\r\\n        <table class=\\\'property-grid small\\\'>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/property-editor-view.html'),eval('define(\'text!htmlContent/property-editor-view-item-text.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <span class="property-name">{{prefix}}</span>{{name}}\\r\\n    </td>\\r\\n    <td>\\r\\n        <input type="text" class="k-input k-textbox small" value="{{val}}">\\r\\n    </td>\\r\\n</tr>\';});\n\n//# sourceURL=/text!htmlContent/property-editor-view-item-text.html'),eval('define(\'text!htmlContent/property-editor-view-item-multiline.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <span class="property-name">{{prefix}}</span>{{name}}\\r\\n    </td>\\r\\n    <td>\\r\\n        <!--\\r\\n        <span style="display: inline-block; padding-right: 25px; position: relative; width: 100%; box-sizing: border-box;">\\r\\n            <input type="text" class="k-input k-textbox small" value="{{val}}" disabled>\\r\\n            <button class="k-button icon-button small quiet search-button" style="position: absolute; right: 0; top: 0;"></button>\\r\\n        </span>\\r\\n        -->\\r\\n        <textarea class="k-textbox small" style="height: 70px;"></textarea>\\r\\n    </td>\\r\\n</tr>\';});\n\n//# sourceURL=/text!htmlContent/property-editor-view-item-multiline.html'),eval('define(\'text!htmlContent/property-editor-view-item-check.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <span class="property-name">{{prefix}}</span>{{name}}\\r\\n    </td>\\r\\n    <td>\\r\\n        <label class="k-checkbox">\\r\\n            <input type="checkbox">\\r\\n            <div class="k-checkbox__checkmark"></div>\\r\\n        </label>\\r\\n    </td>\\r\\n</tr>\';});\n\n//# sourceURL=/text!htmlContent/property-editor-view-item-check.html'),eval('define(\'text!htmlContent/property-editor-view-item-integer.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <span class="property-name">{{prefix}}</span>{{name}}\\r\\n    </td>\\r\\n    <td>\\r\\n        <input type="text" class="k-input k-textbox small" value="{{val}}">\\r\\n    </td>\\r\\n</tr>\';});\n\n//# sourceURL=/text!htmlContent/property-editor-view-item-integer.html'),eval('define(\'text!htmlContent/property-editor-view-item-enum.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <span class="property-name">{{prefix}}</span>{{name}}\\r\\n    </td>\\r\\n    <td>\\r\\n        <label style="width: 100%; padding: 0; margin: 0;" class="k-select small">\\r\\n            <select style="width: 100%;">\\r\\n                {{#items}}\\r\\n                <option value="{{.}}">{{.}}</option>\\r\\n                {{/items}}\\r\\n            </select>\\r\\n        </label>\\r\\n    </td>\\r\\n</tr>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/property-editor-view-item-enum.html'),eval('define(\'text!htmlContent/property-editor-view-item-combo.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <span class="property-name">{{prefix}}</span>{{name}}\\r\\n    </td>\\r\\n    <td>\\r\\n        <label class="k-combo small" style="width: 100%; margin: 0; padding: 0">\\r\\n            <input type="text" style="width: 100%;">\\r\\n            <select>\\r\\n                {{#options}}\\r\\n                <option value="{{.}}">{{.}}</option>\\r\\n                {{/options}}\\r\\n            </select>\\r\\n        </label>\\r\\n    </td>\\r\\n</tr>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/property-editor-view-item-combo.html'),eval('define(\'text!htmlContent/property-editor-view-item-ref.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <span class="property-name">{{prefix}}</span>{{name}}\\r\\n    </td>\\r\\n    <td>\\r\\n        <span style="display: inline-block; padding-right: 25px; position: relative; width: 100%; box-sizing: border-box;">\\r\\n            <div style="display: inline-block">\\r\\n                <span class="icon"></span>\\r\\n                <span class="name">{{val.name}}</span>\\r\\n            </div>\\r\\n            <button tabindex="-1" id="{{buttonId}}" class="k-button icon-button small quiet search-button" style="position: absolute; right: 0; top: 0;"></button>\\r\\n        </span>\\r\\n    </td>\\r\\n</tr>\';});\n\n//# sourceURL=/text!htmlContent/property-editor-view-item-ref.html'),eval('define(\'text!htmlContent/property-editor-view-item-reflist.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <span class="property-name">{{prefix}}</span>{{name}}\\r\\n    </td>\\r\\n    <td>\\r\\n        <span style="display: inline-block; padding-right: 25px; position: relative; width: 100%; box-sizing: border-box;">\\r\\n            <div style="display: inline-block">\\r\\n            {{#elements}}\\r\\n                <div style="display: block">\\r\\n                    <span class="k-sprite icon-{{getClassName}}"></span>\\r\\n                    <span>{{name}}</span>\\r\\n                </div>\\r\\n            {{/elements}}\\r\\n            {{^elements}}\\r\\n                <span>—</span>\\r\\n            {{/elements}}\\r\\n            </div>\\r\\n            <button class="k-button icon-button small quiet search-button" style="position: absolute; right: 0; top: 0;"></button>\\r\\n        </span>\\r\\n    </td>\\r\\n</tr>\\r\\n\\r\\n\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/property-editor-view-item-reflist.html'),eval('define(\'text!htmlContent/property-editor-view-item-var.html\',[],function () { return \'<tr>\\r\\n    <td>\\r\\n        <span class="property-name">{{prefix}}</span>{{name}}\\r\\n    </td>\\r\\n    <td>\\r\\n        <span style="display: inline-block; padding-right: 25px; position: relative; width: 100%; box-sizing: border-box;">\\r\\n            {{#element}}\\r\\n            <span class="k-sprite icon-{{element.getClassName}}" style="position: absolute; left: 4px; top: 3px; z-index: 1;"></span>\\r\\n            {{/element}}\\r\\n            <input type="text" class="small" value="{{val}}" style="width: 100%;">\\r\\n            <button tabindex="-1" id="{{buttonId}}" class="k-button icon-button small quiet search-button" style="position: absolute; right: 0; top: 0;"></button>\\r\\n        </span>\\r\\n    </td>\\r\\n</tr>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/property-editor-view-item-var.html'),eval("define('text!htmlContent/property-editor-view-item-separator.html',[],function () { return '<tr>\\r\\n    <td colspan=\\'2\\' class=\\'ui-property-separator\\'>\\r\\n        <div></div>\\r\\n    </td>\\r\\n</tr>';});\n\n//# sourceURL=/text!htmlContent/property-editor-view-item-separator.html"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, loopfunc: true */\r\n/*global define, $, _, window, type, meta, appshell, kendo, Mustache */\r\n\r\n/**\r\n *\r\n * This module dispatches these events:\r\n *     - propertyChanged: (element, field, value)\r\n */\r\ndefine(\'editors/PropertyEditorView\',[\'require\',\'exports\',\'module\',\'core/Core\',\'core/MetaModelManager\',\'core/Global\',\'utils/AppInit\',\'utils/Helper\',\'core/Repository\',\'dialogs/Dialogs\',\'dialogs/ElementPickerDialog\',\'dialogs/ElementListEditorDialog\',\'editors/EditorView\',\'text!htmlContent/property-editor-view.html\',\'text!htmlContent/property-editor-view-item-text.html\',\'text!htmlContent/property-editor-view-item-multiline.html\',\'text!htmlContent/property-editor-view-item-check.html\',\'text!htmlContent/property-editor-view-item-integer.html\',\'text!htmlContent/property-editor-view-item-enum.html\',\'text!htmlContent/property-editor-view-item-combo.html\',\'text!htmlContent/property-editor-view-item-ref.html\',\'text!htmlContent/property-editor-view-item-reflist.html\',\'text!htmlContent/property-editor-view-item-var.html\',\'text!htmlContent/property-editor-view-item-separator.html\',\'editors/EditorsHolder\',\'editors/StyleEditorView\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Core                    = require("core/Core"),\r\n        MetaModelManager        = require("core/MetaModelManager"),\r\n        global                  = require("core/Global").global,\r\n        AppInit                 = require("utils/AppInit"),\r\n        Helper                  = require("utils/Helper"),\r\n        Repository              = require("core/Repository"),\r\n        Dialogs                 = require("dialogs/Dialogs"),\r\n        ElementPickerDialog     = require("dialogs/ElementPickerDialog"),\r\n        ElementListEditorDialog = require("dialogs/ElementListEditorDialog"),\r\n        EditorView              = require("editors/EditorView"),\r\n        viewTemplate            = require("text!htmlContent/property-editor-view.html"),\r\n        textItemTemplate        = require("text!htmlContent/property-editor-view-item-text.html"),\r\n        multilineItemTemplate   = require("text!htmlContent/property-editor-view-item-multiline.html"),\r\n        checkItemTemplate       = require("text!htmlContent/property-editor-view-item-check.html"),\r\n        integerItemTemplate     = require("text!htmlContent/property-editor-view-item-integer.html"),\r\n        enumItemTemplate        = require("text!htmlContent/property-editor-view-item-enum.html"),\r\n        comboItemTemplate       = require("text!htmlContent/property-editor-view-item-combo.html"),\r\n        refItemTemplate         = require("text!htmlContent/property-editor-view-item-ref.html"),\r\n        reflistItemTemplate     = require("text!htmlContent/property-editor-view-item-reflist.html"),\r\n        varItemTemplate         = require("text!htmlContent/property-editor-view-item-var.html"),\r\n        separatorItemTemplate   = require("text!htmlContent/property-editor-view-item-separator.html");\r\n\r\n    // for Loading Order\r\n    require("editors/EditorsHolder");\r\n    require("editors/StyleEditorView");\r\n\r\n    var $view = null;\r\n\r\n    /**\r\n     * JQuery Object for Property Grid\r\n     * @private\r\n     */\r\n    var $propertyGrid = null;\r\n\r\n\r\n    /**\r\n     * Kendo Widgets must be destroyed before showing new properties\r\n     */\r\n    var _destroyedBeforeShowing = [];\r\n\r\n\r\n    function _getStrings(prefix, name, elems, field) {\r\n        var strings = {},\r\n            name_   = name.replace(\'.\', \'-\'),\r\n            prefix_ = (prefix ? prefix.replace(\'.\', \'-\') : \'\');\r\n        strings.prefix    = (prefix ? prefix_ + \'.\' : \'\');\r\n        strings.name      = name;\r\n        strings.val       = Helper.reduceValue(elems, field);\r\n        return strings;\r\n    }\r\n\r\n    function _makeNode(elem) {\r\n        return {\r\n            _id: elem._id,\r\n            text: elem.getNodeText(),\r\n            sprite: elem.getNodeIcon(elem),\r\n            hasChildren: (elem.getChildNodes().length > 0),\r\n            _name: elem.name,\r\n            _namespace: elem._parent ? elem._parent.name || "" : ""\r\n        };\r\n    }\r\n\r\n    function _getMetaAttr(elem, field) {\r\n        var attrs = elem.getMetaAttributes();\r\n        var attr = _.find(attrs, function (e) {\r\n            return (e.name === field);\r\n        });\r\n        return attr;\r\n    }\r\n\r\n    /**\r\n     * 텍스트 프로퍼티를 정의.\r\n     *\r\n     * @private\r\n     * @param {string} prefix?\r\n     * @param {string} name\r\n     * @param {Element} elems\r\n     * @param {string} field\r\n     */\r\n    function defineTextProperty(prefix, name, elems, field) {\r\n        var strings = _getStrings(prefix, name, elems, field),\r\n            $item   = $(Mustache.render(textItemTemplate, strings)),\r\n            $edit   = $item.find("input");\r\n\r\n        $propertyGrid.append($item);\r\n\r\n        if (strings.val !== null) {\r\n            $edit.val(strings.val);\r\n            $edit.prop("placeholder", "");\r\n        } else {\r\n            $edit.val("");\r\n            $edit.prop("placeholder", "—");\r\n        }\r\n\r\n        $edit.change(function () {\r\n            $(exports).triggerHandler(\'propertyChanged\', [elems, field, $edit.val()]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Define Multiline Property\r\n     *\r\n     * @private\r\n     * @param {string} prefix?\r\n     * @param {string} name\r\n     * @param {Element} elems\r\n     * @param {string} field\r\n     */\r\n    function defineMultilineTextProperty(prefix, name, elems, field) {\r\n        var strings = _getStrings(prefix, name, elems, field),\r\n            $item   = $(Mustache.render(multilineItemTemplate, strings)),\r\n            $edit   = $item.find("textarea"),\r\n            $button = $item.find("button");\r\n\r\n        $propertyGrid.append($item);\r\n\r\n        if (strings.val !== null) {\r\n            $edit.val(strings.val);\r\n            $edit.prop("placeholder", "");\r\n        } else {\r\n            $edit.val("");\r\n            $edit.prop("placeholder", "—");\r\n        }\r\n\r\n        $edit.change(function () {\r\n            $(exports).triggerHandler(\'propertyChanged\', [elems, field, $edit.val()]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 체크 프로퍼티를 정의.\r\n     *\r\n     * @private\r\n     * @param {string} prefix?\r\n     * @param {string} name\r\n     * @param {Element} elems\r\n     * @param {string} field\r\n     */\r\n    function defineCheckProperty(prefix, name, elems, field) {\r\n        var strings = _getStrings(prefix, name, elems, field),\r\n            $item   = $(Mustache.render(checkItemTemplate, strings)),\r\n            $check  = $item.find("input");\r\n\r\n        $propertyGrid.append($item);\r\n\r\n        if (strings.val !== null) {\r\n            $check.attr(\'checked\', strings.val);\r\n        } else {\r\n            $check.attr(\'checked\', false);\r\n        }\r\n\r\n        $check.change(function () {\r\n            $(exports).triggerHandler(\'propertyChanged\', [elems, field, $check.is(":checked")]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 정수형 프로퍼티를 정의.\r\n     *\r\n     * @private\r\n     * @param {string} prefix?\r\n     * @param {string} name\r\n     * @param {Array.<string>} items\r\n     * @param {Element} elems\r\n     * @param {string} field\r\n     */\r\n    function defineIntegerProperty(prefix, name, elems, field) {\r\n        var strings = _getStrings(prefix, name, elems, field),\r\n            $item   = $(Mustache.render(integerItemTemplate, strings)),\r\n            $edit   = $item.find("input");\r\n\r\n        $propertyGrid.append($item);\r\n\r\n        if (strings.val !== null) {\r\n            $edit.val(strings.val);\r\n            $edit.prop("placeholder", "");\r\n        } else {\r\n            $edit.val("");\r\n            $edit.prop("placeholder", "—");\r\n        }\r\n\r\n        $edit.change(function () {\r\n            var value = parseInt($edit.val());\r\n            if (_.isNumber(value)) {\r\n                $(exports).triggerHandler(\'propertyChanged\', [elems, field, value]);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 열거형 프로퍼티를 정의.\r\n     *\r\n     * @private\r\n     * @param {string} prefix?\r\n     * @param {string} name\r\n     * @param {{literals: Array.<{string}>}} enumType\r\n     * @param {Element} elems\r\n     * @param {string} field\r\n     */\r\n    function defineEnumProperty(prefix, name, enumType, elems, field) {\r\n        var strings = _getStrings(prefix, name, elems, field);\r\n        strings.items = enumType.literals;\r\n\r\n        var $item   = $(Mustache.render(enumItemTemplate, strings)),\r\n            $select = $item.find("select");\r\n\r\n        $propertyGrid.append($item);\r\n\r\n        if (strings.val !== null) {\r\n            $select.val(strings.val);\r\n        } else {\r\n            $select.val(null);\r\n        }\r\n\r\n        $select.change(function () {\r\n            $(exports).triggerHandler(\'propertyChanged\', [elems, field, $select.val()]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 콤보형 프로퍼티를 정의.\r\n     *\r\n     * @private\r\n     * @param {string} prefix?\r\n     * @param {string} name\r\n     * @param {Array.<string>} options\r\n     * @param {Element} elems\r\n     * @param {string} field\r\n     */\r\n    function defineComboProperty(prefix, name, options, elems, field) {\r\n        var strings = _getStrings(prefix, name, elems, field);\r\n        strings.options = options;\r\n\r\n        var $item   = $(Mustache.render(comboItemTemplate, strings)),\r\n            $edit   = $item.find("input"),\r\n            $select = $item.find("select");\r\n\r\n        $propertyGrid.append($item);\r\n\r\n        if (strings.val !== null) {\r\n            $edit.val(strings.val);\r\n            $edit.prop("placeholder", "");\r\n        } else {\r\n            $edit.val("");\r\n            $edit.prop("placeholder", "—");\r\n        }\r\n\r\n        $edit.change(function () {\r\n            $(exports).triggerHandler(\'propertyChanged\', [elems, field, $edit.val()]);\r\n        });\r\n\r\n        $select.val(strings.val);\r\n        $select.change(function () {\r\n            $edit.val($select.val());\r\n            $edit.change();\r\n        });\r\n        // (for Windows) To prevent immediate collapse of dropdown in comboBox.\r\n        $select.click(function (e) {\r\n            $select.focus();\r\n            e.stopPropagation();\r\n            return false;\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * 레퍼런스 프로퍼티를 정의.\r\n     *\r\n     * @private\r\n     * @param {string} prefix?\r\n     * @param {string} name\r\n     * @param {Element} elems\r\n     * @param {string} field\r\n     */\r\n    function defineRefProperty(prefix, name, elems, field, readOnly) {\r\n        var strings = _getStrings(prefix, name, elems, field);\r\n        if (!(strings.val instanceof type.Model)) {\r\n            strings.val = null;\r\n        }\r\n\r\n        var $item   = $(Mustache.render(refItemTemplate, strings)),\r\n            $icon   = $item.find(".icon"),\r\n            $name   = $item.find(".name"),\r\n            $button = $item.find("button");\r\n\r\n        $propertyGrid.append($item);\r\n\r\n        function _setElement(elem) {\r\n            if (elem instanceof type.Model) {\r\n                $icon.show();\r\n                $icon.removeClass();\r\n                $icon.addClass("k-sprite " + elem.getNodeIcon());\r\n                $name.html(elem.name);\r\n            } else {\r\n                $icon.hide();\r\n                $name.html("—");\r\n            }\r\n        }\r\n\r\n        _setElement(strings.val);\r\n\r\n        if (readOnly) {\r\n            $button.hide();\r\n        }\r\n\r\n        var metaAttr = _getMetaAttr(elems[0], field);\r\n        var selectableType = null;\r\n        if (metaAttr) {\r\n            selectableType = type[metaAttr.type];\r\n        }\r\n\r\n        $button.click(function () {\r\n            var initialSelection = Helper.reduceValue(elems, field);\r\n            ElementPickerDialog.showDialog("Select Element", initialSelection, selectableType).done(function (buttonId, selected) {\r\n                if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                    _setElement(selected);\r\n                    $(exports).triggerHandler(\'propertyChanged\', [elems, field, selected]);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 레퍼런스 리스트 프로퍼티를 정의.\r\n     *\r\n     * @private\r\n     * @param {string} prefix?\r\n     * @param {string} name\r\n     * @param {Element} elems\r\n     * @param {string} field\r\n     */\r\n    function defineRefListProperty(prefix, name, elems, field) {\r\n        var strings = _getStrings(prefix, name, elems, field);\r\n        if (elems.length === 1) {\r\n            strings.elements = elems[0][field];\r\n        }\r\n\r\n        var $item   = $(Mustache.render(reflistItemTemplate, strings)),\r\n            $button = $item.find("button");\r\n\r\n        $propertyGrid.append($item);\r\n\r\n        $button.click(function () {\r\n            ElementListEditorDialog.showDialog(elems[0], field);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Variant 타입 프로퍼티를 정의.\r\n     *\r\n     * @private\r\n     * @param {string} prefix?\r\n     * @param {string} name\r\n     * @param {Element} elems\r\n     * @param {string} field\r\n     */\r\n    function defineVarProperty(prefix, name, attrType, elems, field) {\r\n        var strings = _getStrings(prefix, name, elems, field);\r\n        if (strings.val instanceof type.Model) {\r\n            strings.element = strings.val;\r\n            strings.val = strings.val.name;\r\n        }\r\n\r\n        var $item   = $(Mustache.render(varItemTemplate, strings)),\r\n            $edit   = $item.find("input"),\r\n            $button = $item.find("button");\r\n\r\n        $propertyGrid.append($item);\r\n\r\n        var _autoCompleteSelected = null;\r\n\r\n        var autoComplete  = $edit.kendoAutoComplete({\r\n            dataTextField: "text",\r\n            minLength: 1,\r\n            filter: "contains",\r\n            select: function(e) {\r\n                var item = this.dataItem(e.item.index());\r\n                var elem = Repository.get(item._id);\r\n                if (elem) {\r\n                    _autoCompleteSelected = elem;\r\n                    $(exports).triggerHandler(\'propertyChanged\', [elems, field, _autoCompleteSelected]);\r\n                }\r\n            },\r\n            change: function (e) {\r\n                var value = this.value();\r\n                if (!_autoCompleteSelected || _autoCompleteSelected.name !== value) {\r\n                    var ref = null;\r\n                    var typeFilter = type[attrType];\r\n                    // Lookup element by name and type\r\n                    if (value && value.length > 0) {\r\n                        if (elems.length > 0 && elems[0]._parent !== null) {\r\n                            ref = Repository.lookupAndFind(elems[0]._parent, value, typeFilter);\r\n                        }\r\n                    }\r\n                    $(exports).triggerHandler(\'propertyChanged\', [elems, field, (ref ? ref : value)]);\r\n                    _autoCompleteSelected = null;\r\n                }\r\n            },\r\n            template: "<div style=\'white-space: nowrap\'>" +\r\n                "<span class=\'k-sprite #:data.sprite#\'></span>" +\r\n                "<span style=\'margin-left: 5px\'>#:data.text#</span>" +\r\n                "#if (data._namespace.length > 0) {# <span style=\'margin-left: 5px; font-size: 11px; color: rgb(139,139,139);\'> — #:data._namespace#</span> #}#<div>",\r\n            dataSource: {\r\n                transport: {\r\n                    read: function (options) {\r\n                        if (options.data.filter && options.data.filter.filters.length > 0) {\r\n                            var keyword = options.data.filter.filters[0].value;\r\n                            var results = Repository.search(keyword, type[attrType]);\r\n                            options.success(_.map(results, _makeNode));\r\n                        } else {\r\n                            options.success([]);\r\n                        }\r\n                    }\r\n                },\r\n                serverFiltering: true\r\n            }\r\n        }).data("kendoAutoComplete");\r\n\r\n        // autoComplete must be destroyed\r\n        _destroyedBeforeShowing.push(autoComplete);\r\n\r\n\r\n        if (strings.val !== null) {\r\n            $edit.val(strings.val);\r\n            $edit.prop("placeholder", "");\r\n        } else {\r\n            $edit.val("");\r\n            $edit.prop("placeholder", "—");\r\n        }\r\n\r\n        // Make a space to show icon on left side.\r\n        if (strings.element) {\r\n            var $autocomplete = $item.find("span.k-autocomplete");\r\n            // $edit.css("padding-left", "1.8em");\r\n            $autocomplete.css("padding-left", "1.8em");\r\n            $autocomplete.css("background-color", $edit.css("background-color"));\r\n        }\r\n\r\n        /*\r\n        $edit.change(function () {\r\n            var val = $edit.val();\r\n            var ref = null;\r\n            var typeFilter = type[attrType];\r\n            // Lookup element by name and type\r\n            if (val && val.length > 0) {\r\n                if (elems.length > 0 && elems[0]._parent !== null) {\r\n                    ref = Repository.lookupAndFind(elems[0]._parent, val, typeFilter);\r\n                }\r\n            }\r\n            $(exports).triggerHandler(\'propertyChanged\', [elems, field, (ref ? ref : val)]);\r\n        });\r\n        */\r\n\r\n        $button.click(function () {\r\n            var initialSelection = Helper.reduceValue(elems, field);\r\n            ElementPickerDialog.showDialog("Select Type", initialSelection, type.UMLClassifier).done(function (buttonId, selected) {\r\n                if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                    $edit.val((selected ? selected.name : \'\'));\r\n                    $(exports).triggerHandler(\'propertyChanged\', [elems, field, selected]);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    function defineAttributes(prefix, elems, attrs) {\r\n        _.forEach(attrs, function (attr) {\r\n            if (attr.visible === true) {\r\n                switch (attr.kind) {\r\n                case Core.ATTR_KIND_PRIM:\r\n                    switch (attr.type) {\r\n                    case \'String\':\r\n                        if (attr.options) {\r\n                            defineComboProperty(prefix, attr.name, attr.options, elems, attr.name);\r\n                        } else if (attr.multiline === true) {\r\n                            defineMultilineTextProperty(prefix, attr.name, elems, attr.name);\r\n                        } else {\r\n                            defineTextProperty(prefix, attr.name, elems, attr.name);\r\n                        }\r\n                        break;\r\n                    case \'Boolean\':\r\n                        defineCheckProperty(prefix, attr.name, elems, attr.name);\r\n                        break;\r\n                    case \'Integer\':\r\n                        defineIntegerProperty(prefix, attr.name, elems, attr.name);\r\n                        break;\r\n                    }\r\n                    break;\r\n                case Core.ATTR_KIND_ENUM:\r\n                    defineEnumProperty(prefix, attr.name, meta[attr.type], elems, attr.name);\r\n                    break;\r\n                case Core.ATTR_KIND_REF:\r\n                    defineRefProperty(prefix, attr.name, elems, attr.name, attr.readOnly);\r\n                    break;\r\n                case Core.ATTR_KIND_REFS:\r\n                    defineRefListProperty(prefix, attr.name, elems, attr.name);\r\n                    break;\r\n                case Core.ATTR_KIND_VAR:\r\n                    defineVarProperty(prefix, attr.name, attr.type, elems, attr.name);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Show properties of a given element.\r\n     *\r\n     * @param {Core.Element} elem\r\n     */\r\n    function show(elems) {\r\n        if (elems && elems.length > 0) {\r\n            var i, len;\r\n            // Destroy previous kendo widgets (e.g. AutoComplete)\r\n            if (_destroyedBeforeShowing.length > 0) {\r\n                for (i = 0, len = _destroyedBeforeShowing.length; i < len; i++) {\r\n                    _destroyedBeforeShowing[i].destroy();\r\n                }\r\n            }\r\n\r\n            $view.show();\r\n            $propertyGrid.empty();\r\n            var commonType = Core.getCommonType(elems);\r\n            var attrs = MetaModelManager.getMetaAttributes(commonType.name);\r\n            defineAttributes(null, elems, attrs);\r\n            for (i = 0, len = attrs.length; i < len; i++) {\r\n                var attr = attrs[i];\r\n                if (attr.expand === true) {\r\n                    var name = attr.name;\r\n                    var values = _.map(elems, function (e) { return e[name]; });\r\n                    var commonType2 = Core.getCommonType(values);\r\n                    var attrs2 = MetaModelManager.getMetaAttributes(commonType2.name);\r\n                    $propertyGrid.append(Mustache.render(separatorItemTemplate, { name: name, type: commonType2.name }));\r\n                    defineAttributes(name, values, attrs2);\r\n                }\r\n            }\r\n        } else {\r\n            $view.hide();\r\n        }\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        $view = $(viewTemplate);\r\n        $propertyGrid = $view.find(".property-grid");\r\n        EditorView.setupEditorView($view);\r\n    });\r\n\r\n    // Define public API\r\n    exports.show = show;\r\n\r\n});\r\n\r\n\n//# sourceURL=/editors/PropertyEditorView.js'),eval('define(\'text!htmlContent/documentation-editor-view.html\',[],function () { return \'<div class="editor-view" data-id="documentationEditor">\\r\\n    <hr>\\r\\n    <div class="editor-view-header">\\r\\n        <span class="suppress-button"></span>\\r\\n        <label class="header">Documentation</label>\\r\\n    </div>\\r\\n    <div class="editor-view-body" style="padding-left: 1em; padding-right: 1em; padding-bottom: 1em; width: 100%; padding-top: 0.5em; box-sizing: border-box;">\\r\\n        <textarea id=\\\'documentation\\\' class=\\\'k-textbox small\\\' style="width: 100%; height: 180px;"></textarea>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/documentation-editor-view.html'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo */\r\n\r\n/**\r\n *\r\n * This module dispatches these events:\r\n *     - documentationChanged: (element, documentation)\r\n */\r\ndefine('editors/DocumentationEditorView',['require','exports','module','utils/Helper','utils/AppInit','core/Repository','editors/EditorView','text!htmlContent/documentation-editor-view.html','editors/EditorsHolder','editors/PropertyEditorView'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var Helper       = require(\"utils/Helper\"),\r\n        AppInit      = require(\"utils/AppInit\"),\r\n        Repository   = require(\"core/Repository\"),\r\n        EditorView   = require(\"editors/EditorView\"),\r\n        viewTemplate = require(\"text!htmlContent/documentation-editor-view.html\");\r\n\r\n    // for Loading Order\r\n    require(\"editors/EditorsHolder\");\r\n    require(\"editors/PropertyEditorView\");\r\n\r\n    var $view = null;\r\n\r\n    var _element = null;\r\n\r\n    /**\r\n     * Show documentation of a given element\r\n     *\r\n     * @param {Model} elem\r\n     */\r\n    function show(elem) {\r\n        if (elem instanceof type.ExtensibleModel) {\r\n            $view.show();\r\n            _element = elem;\r\n            $(\"#documentation\").val(_element.documentation);\r\n        } else {\r\n            $view.hide();\r\n            _element = null;\r\n        }\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        $view = $(viewTemplate);\r\n        var $documentation = $view.find(\"#documentation\");\r\n        $documentation.change(function () {\r\n            $(exports).triggerHandler('documentationChanged', [_element, $documentation.val()]);\r\n        });\r\n        EditorView.setupEditorView($view);\r\n    });\r\n\r\n    // Define public API\r\n    exports.show = show;\r\n\r\n});\r\n\n//# sourceURL=/editors/DocumentationEditorView.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo */\r\n\r\n/**\r\n * SidebarView\r\n *\r\n * This contains ToolboxView and WorkingDiagramView\r\n */\r\ndefine(\'diagrams/SidebarView\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'command/CommandManager\',\'command/Commands\',\'strings\',\'utils/Resizer\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit             = require("utils/AppInit"),\r\n        CommandManager      = require("command/CommandManager"),\r\n        Commands            = require("command/Commands"),\r\n        Strings             = require("strings"),\r\n        Resizer             = require("utils/Resizer");\r\n\r\n    var $sidebar,\r\n        $workingDiagrams,\r\n        $toolbox;\r\n\r\n    var WORKING_DIAGRAM_MIN_HEIGHT = 40;\r\n\r\n    /**\r\n     * Toggle SidebarView\r\n     */\r\n    function toggle() {\r\n        Resizer.toggle($sidebar);\r\n    }\r\n\r\n    /**\r\n     * Show SidebarView\r\n     */\r\n    function show() {\r\n        Resizer.show($sidebar);\r\n    }\r\n\r\n    /**\r\n     * Hide SidebarView\r\n     */\r\n    function hide() {\r\n        Resizer.hide($sidebar);\r\n    }\r\n\r\n    /**\r\n     * Return whether SidebarView is visible or not\r\n     *\r\n     * @return {booean}\r\n     */\r\n    function isVisible() {\r\n        return Resizer.isVisible($sidebar);\r\n    }\r\n\r\n\r\n    function _limitToolboxHeight() {\r\n        if (($sidebar.height() - WORKING_DIAGRAM_MIN_HEIGHT) < $toolbox.height()) {\r\n            $toolbox.height($sidebar.height() - WORKING_DIAGRAM_MIN_HEIGHT);\r\n            $workingDiagrams.find(".view-content").triggerHandler("scroll");\r\n            $toolbox.find(".view-content").triggerHandler("scroll");\r\n        }\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        $sidebar = $("#sidebar");\r\n        $workingDiagrams = $("#working-diagrams");\r\n        $toolbox = $("#toolbox");\r\n\r\n        var $viewContents = $sidebar.find(".view-content");\r\n\r\n        // Sidebar Resizing\r\n\r\n        $sidebar.on("panelResizeStart", function (evt, width) {\r\n            $sidebar.find(".scroller-shadow").css("display", "none");\r\n        });\r\n\r\n        $sidebar.on("panelResizeUpdate", function (evt, width) {\r\n        });\r\n\r\n        $sidebar.on("panelResizeEnd", function (evt, width) {\r\n            $sidebar.find(".scroller-shadow").css("display", "block");\r\n            $workingDiagrams.find(".view-content").triggerHandler("scroll");\r\n            $toolbox.find(".view-content").triggerHandler("scroll");\r\n        });\r\n\r\n        $sidebar.on("panelCollapsed", function (evt, width) {\r\n            CommandManager.get(Commands.VIEW_HIDE_SIDEBAR).setName(Strings.CMD_VIEW_SHOW_SIDEBAR);\r\n        });\r\n\r\n        $sidebar.on("panelExpanded", function (evt, width) {\r\n            $sidebar.find(".scroller-shadow").css("display", "block");\r\n            $workingDiagrams.find(".view-content").triggerHandler("scroll");\r\n            $toolbox.find(".view-content").triggerHandler("scroll");\r\n            CommandManager.get(Commands.VIEW_HIDE_SIDEBAR).setName(Strings.CMD_VIEW_HIDE_SIDEBAR);\r\n        });\r\n\r\n        // AppInit.htmlReady in utils/Resizer executes before, so it\'s possible that the sidebar\r\n        // is collapsed before we add the event. Check here initially\r\n        if (!$sidebar.is(":visible")) {\r\n            $sidebar.trigger("panelCollapsed");\r\n        }\r\n\r\n\r\n        // Toolbox Resizing\r\n\r\n        $toolbox.on("panelResizeStart", function (evt, height) {\r\n            $toolbox.find(".scroller-shadow").css("display", "none");\r\n        });\r\n\r\n        $toolbox.on("panelResizeUpdate", function (evt, height) {\r\n            _limitToolboxHeight();\r\n        });\r\n\r\n        $toolbox.on("panelResizeEnd", function (evt, height) {\r\n            $toolbox.find(".scroller-shadow").css("display", "block");\r\n            $workingDiagrams.find(".view-content").triggerHandler("scroll");\r\n            $toolbox.find(".view-content").triggerHandler("scroll");\r\n        });\r\n\r\n        $toolbox.on("panelCollapsed", function (evt, height) {\r\n        });\r\n\r\n        $toolbox.on("panelExpanded", function (evt, height) {\r\n            $toolbox.find(".scroller-shadow").css("display", "block");\r\n            $workingDiagrams.find(".view-content").triggerHandler("scroll");\r\n            $toolbox.find(".view-content").triggerHandler("scroll");\r\n        });\r\n\r\n        // Window Resizing\r\n\r\n        $(window).resize(function () {\r\n            $workingDiagrams.find(".view-content").triggerHandler("scroll");\r\n            $toolbox.find(".view-content").triggerHandler("scroll");\r\n            if ($sidebar.height() > WORKING_DIAGRAM_MIN_HEIGHT) {\r\n                _limitToolboxHeight();\r\n            }\r\n        });\r\n\r\n    });\r\n\r\n    CommandManager.register(Strings.CMD_VIEW_HIDE_SIDEBAR, Commands.VIEW_HIDE_SIDEBAR, toggle);\r\n\r\n    exports.toggle    = toggle;\r\n    exports.show      = show;\r\n    exports.hide      = hide;\r\n    exports.isVisible = isVisible;\r\n\r\n});\r\n\n//# sourceURL=/diagrams/SidebarView.js'),eval("/**!\r\n * Sortable\r\n * @author	RubaXa   <trash@rubaxa.org>\r\n * @license MIT\r\n */\r\n\r\n\r\n(function (factory){\r\n	\"use strict\";\r\n\r\n	if( typeof define === \"function\" && define.amd ){\r\n		define('thirdparty/sortable/Sortable',factory);\r\n	}\r\n	else if( typeof module != \"undefined\" && typeof module.exports != \"undefined\" ){\r\n		module.exports = factory();\r\n	}\r\n	else {\r\n		window[\"Sortable\"] = factory();\r\n	}\r\n})(function (){\r\n	\"use strict\";\r\n\r\n	var\r\n		  dragEl\r\n		, ghostEl\r\n		, rootEl\r\n		, nextEl\r\n\r\n		, lastEl\r\n		, lastCSS\r\n		, lastRect\r\n\r\n		, activeGroup\r\n\r\n		, tapEvt\r\n		, touchEvt\r\n\r\n		, expando = 'Sortable' + (new Date).getTime()\r\n\r\n		, win = window\r\n		, document = win.document\r\n		, parseInt = win.parseInt\r\n		, supportIEdnd = !!document.createElement('div').dragDrop\r\n\r\n		, _silent = false\r\n\r\n		, _createEvent = function (event/**String*/, item/**HTMLElement*/){\r\n			var evt = document.createEvent('Event');\r\n			evt.initEvent(event, true, true);\r\n			evt.item = item;\r\n			return evt;\r\n		}\r\n\r\n		, noop = function (){}\r\n		, slice = [].slice\r\n\r\n		, touchDragOverListeners = []\r\n\r\n		, pointerdown\r\n		, pointerup\r\n		, pointermove\r\n		, pointercancel\r\n	;\r\n\r\n\r\n	/**\r\n	 * @class  Sortable\r\n	 * @param  {HTMLElement}  el\r\n	 * @param  {Object}  [options]\r\n	 * @constructor\r\n	 */\r\n	function Sortable(el, options){\r\n		this.el = el; // root element\r\n		this.options = options = (options || {});\r\n\r\n\r\n		// Defaults\r\n		options.group = options.group || Math.random();\r\n		options.handle = options.handle || null;\r\n		options.draggable = options.draggable || el.children[0] && el.children[0].nodeName || (/[uo]l/i.test(el.nodeName) ? 'li' : '*');\r\n		options.ghostClass = options.ghostClass || 'sortable-ghost';\r\n		options.ignore = options.ignore || 'a, img';\r\n\r\n		options.onAdd = _bind(this, options.onAdd || noop);\r\n		options.onUpdate = _bind(this, options.onUpdate || noop);\r\n		options.onRemove = _bind(this, options.onRemove || noop);\r\n		options.onStart = _bind(this, options.onStart || noop);\r\n		options.onEnd = _bind(this, options.onEnd || noop);\r\n\r\n\r\n		// Export group name\r\n		el[expando] = options.group;\r\n\r\n\r\n		// Bind all private methods\r\n		for( var fn in this ){\r\n			if( fn.charAt(0) === '_' ){\r\n				this[fn] = _bind(this, this[fn]);\r\n			}\r\n		}\r\n\r\n		// Detect IE10/IE11+\r\n		if (window.onpointerdown !== undefined) {\r\n			pointerdown = 'pointerdown';\r\n			pointerup = 'pointerup';\r\n			pointermove = 'pointermove';\r\n			pointercancel = 'pointercancel';\r\n		} else {\r\n			pointerdown = 'MSPointerDown';\r\n			pointerup = 'MSPointerUp';\r\n			pointermove = 'MSPointerMove';\r\n			pointercancel = 'MSPointerCancel';\r\n		}\r\n\r\n		// Bind events\r\n		_on(el, 'add', options.onAdd);\r\n		_on(el, 'update', options.onUpdate);\r\n		_on(el, 'remove', options.onRemove);\r\n		_on(el, 'start', options.onStart);\r\n		_on(el, 'stop', options.onEnd);\r\n\r\n		_on(el, 'mousedown', this._onTapStart);\r\n		_on(el, 'touchstart', this._onTapStart);\r\n		supportIEdnd && _on(el, 'selectstart', this._onTapStart);\r\n\r\n		_on(el, 'dragover', this._onDragOver);\r\n		_on(el, 'dragenter', this._onDragOver);\r\n		_on(el, pointerdown, this._onTapStart);\r\n\r\n		_css(el, 'touch-action', 'none');\r\n		_css(el, '-ms-touch-action', 'none');\r\n\r\n		touchDragOverListeners.push(this._onDragOver);\r\n	}\r\n\r\n\r\n	Sortable.prototype = {\r\n		constructor: Sortable,\r\n\r\n\r\n		_applyEffects: function (){\r\n			_toggleClass(dragEl, this.options.ghostClass, true);\r\n		},\r\n\r\n\r\n		_onTapStart: function (evt/**Event|TouchEvent|PointerEvent*/){\r\n			var\r\n				  touch = evt.touches && evt.touches[0]\r\n				, target = (touch || evt).target\r\n				, options =  this.options\r\n				, el = this.el\r\n			;\r\n\r\n			if( options.handle ){\r\n				target = _closest(target, options.handle, el);\r\n			}\r\n\r\n			target = _closest(target, options.draggable, el);\r\n\r\n			// IE 9 Support\r\n			if( target && evt.type == 'selectstart' ){\r\n				if( target.tagName != 'A' && target.tagName != 'IMG'){\r\n					target.dragDrop();\r\n				}\r\n			}\r\n\r\n			if( target && !dragEl && (target.parentNode === el) ){\r\n				tapEvt = evt;\r\n				target.draggable = true;\r\n\r\n				// Disable \"draggable\"\r\n				Array.prototype.forEach.call(options.ignore.split(','), function (criteria) {\r\n					_find(target, criteria.trim(), _disableDraggable);\r\n				});\r\n\r\n				if( touch ){\r\n					// Touch device support\r\n					tapEvt = {\r\n						  target:  target\r\n						, clientX: touch.clientX\r\n						, clientY: touch.clientY\r\n					};\r\n					this._onDragStart(tapEvt, true);\r\n					evt.preventDefault();\r\n				}\r\n				\r\n				if (evt.type == 'pointerdown' || evt.type == 'MSPointerDown') {\r\n					this._onDragStart(tapEvt, true);\r\n					evt.preventDefault();\r\n				}\r\n\r\n				_on(this.el, 'dragstart', this._onDragStart);\r\n				_on(this.el, 'dragend', this._onDrop);\r\n				_on(document, 'dragover', _globalDragOver);\r\n\r\n\r\n				try {\r\n					if( document.selection ){\r\n						document.selection.empty();\r\n					} else {\r\n						window.getSelection().removeAllRanges()\r\n					}\r\n				} catch (err){ }\r\n			}\r\n		},\r\n\r\n\r\n		_emulateDragOver: function (){\r\n			if( touchEvt ){\r\n				_css(ghostEl, 'display', 'none');\r\n\r\n				var\r\n					  target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY)\r\n					, parent = target\r\n					, group = this.options.group\r\n					, i = touchDragOverListeners.length\r\n				;\r\n\r\n				if( parent ){\r\n					do {\r\n						if( parent[expando] === group ){\r\n							while( i-- ){\r\n								touchDragOverListeners[i]({\r\n									clientX: touchEvt.clientX,\r\n									clientY: touchEvt.clientY,\r\n									target: target,\r\n									rootEl: parent\r\n								});\r\n							}\r\n							break;\r\n						}\r\n\r\n						target = parent; // store last element\r\n					}\r\n					while( parent = parent.parentNode );\r\n				}\r\n\r\n				_css(ghostEl, 'display', '');\r\n			}\r\n		},\r\n\r\n\r\n		_onTouchMove: function (evt/**TouchEvent|PointerEvent*/){\r\n			if( tapEvt ){\r\n				var\r\n					  touch = evt.touches[0]\r\n					, dx = touch.clientX - tapEvt.clientX\r\n					, dy = touch.clientY - tapEvt.clientY\r\n				;\r\n\r\n				touchEvt = touch;\r\n				_css(ghostEl, 'webkitTransform', 'translate3d('+dx+'px,'+dy+'px,0)');\r\n				_css(ghostEl, 'mozTransform', 'translate3d('+dx+'px,'+dy+'px,0)');\r\n				_css(ghostEl, 'msTransform', 'translate3d('+dx+'px,'+dy+'px,0)');\r\n				_css(ghostEl, 'transform', 'translate3d('+dx+'px,'+dy+'px,0)');\r\n				evt.preventDefault();\r\n			}\r\n		},\r\n\r\n\r\n		_onDragStart: function (evt/**Event*/, isTouch/**Boolean*/){\r\n			var\r\n				  target = evt.target\r\n				, dataTransfer = evt.dataTransfer\r\n			;\r\n\r\n			rootEl = this.el;\r\n			dragEl = target;\r\n			nextEl = target.nextSibling;\r\n			activeGroup = this.options.group;\r\n\r\n			if( isTouch ){\r\n				var\r\n					  rect = target.getBoundingClientRect()\r\n					, css = _css(target)\r\n					, ghostRect\r\n				;\r\n\r\n				ghostEl = target.cloneNode(true);\r\n\r\n				_css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));\r\n				_css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));\r\n				_css(ghostEl, 'width', rect.width);\r\n				_css(ghostEl, 'height', rect.height);\r\n				_css(ghostEl, 'opacity', '0.8');\r\n				_css(ghostEl, 'position', 'fixed');\r\n				_css(ghostEl, 'zIndex', '100000');\r\n\r\n				rootEl.appendChild(ghostEl);\r\n\r\n				// Fixing dimensions.\r\n				ghostRect = ghostEl.getBoundingClientRect();\r\n				_css(ghostEl, 'width', rect.width*2 - ghostRect.width);\r\n				_css(ghostEl, 'height', rect.height*2 - ghostRect.height);\r\n\r\n				// Bind touch events\r\n				_on(document, 'touchmove', this._onTouchMove);\r\n				_on(document, 'touchend', this._onDrop);\r\n				_on(document, 'touchcancel', this._onDrop);\r\n				_on(document, pointermove, this._onTouchMove);\r\n				_on(document, pointerup, this._onDrop);\r\n				_on(document, pointercancel, this._onDrop);\r\n\r\n				this._loopId = setInterval(this._emulateDragOver, 150);\r\n			}\r\n			else {\r\n				dataTransfer.effectAllowed = 'move';\r\n				dataTransfer.setData('Text', target.textContent);\r\n\r\n				_on(document, 'drop', this._onDrop);\r\n			}\r\n\r\n			dragEl.dispatchEvent(_createEvent('start', dragEl));\r\n			setTimeout(this._applyEffects);\r\n		},\r\n\r\n\r\n		_onDragOver: function (evt/**Event*/){\r\n			if( !_silent && (activeGroup === this.options.group) && (evt.rootEl === void 0 || evt.rootEl === this.el) ){\r\n				var\r\n					  el = this.el\r\n					, target = _closest(evt.target, this.options.draggable, el)\r\n				;\r\n\r\n				if( el.children.length === 0 || el.children[0] === ghostEl || (el === evt.target) && _ghostInBottom(el, evt) ){\r\n					el.appendChild(dragEl);\r\n				}\r\n				else if( target && target !== dragEl && (target.parentNode[expando] !== void 0) ){\r\n					if( lastEl !== target ){\r\n						lastEl = target;\r\n						lastCSS = _css(target);\r\n						lastRect = target.getBoundingClientRect();\r\n					}\r\n\r\n\r\n					var\r\n						  rect = lastRect\r\n						, width = rect.right - rect.left\r\n						, height = rect.bottom - rect.top\r\n						, floating = /left|right|inline/.test(lastCSS.cssFloat + lastCSS.display)\r\n						, skew = (floating ? (evt.clientX - rect.left)/width : (evt.clientY - rect.top)/height) > .5\r\n						, isWide = (target.offsetWidth > dragEl.offsetWidth)\r\n						, isLong = (target.offsetHeight > dragEl.offsetHeight)\r\n						, nextSibling = target.nextSibling\r\n						, after\r\n					;\r\n\r\n					_silent = true;\r\n					setTimeout(_unsilent, 30);\r\n\r\n					if( floating ){\r\n						after = (target.previousElementSibling === dragEl) && !isWide || (skew > .5) && isWide\r\n					} else {\r\n						after = (target.nextElementSibling !== dragEl) && !isLong || (skew > .5) && isLong;\r\n					}\r\n\r\n					if( after && !nextSibling ){\r\n						el.appendChild(dragEl);\r\n					} else {\r\n						target.parentNode.insertBefore(dragEl, after ? nextSibling : target);\r\n					}\r\n				}\r\n			}\r\n		},\r\n\r\n\r\n		_onDrop: function (evt/**Event*/){\r\n			clearInterval(this._loopId);\r\n\r\n			// Unbind events\r\n			_off(document, 'drop', this._onDrop);\r\n			_off(document, 'dragover', _globalDragOver);\r\n\r\n			_off(this.el, 'dragend', this._onDrop);\r\n			_off(this.el, 'dragstart', this._onDragStart);\r\n			_off(this.el, 'selectstart', this._onTapStart);\r\n\r\n			_off(document, 'touchmove', this._onTouchMove);\r\n			_off(document, 'touchend', this._onDrop);\r\n			_off(document, 'touchcancel', this._onDrop);\r\n			_off(document, pointermove, this._onTouchMove);\r\n			_off(document, pointerup, this._onDrop);\r\n			_off(document, pointercancel, this._onDrop);\r\n\r\n\r\n			if( evt ){\r\n				evt.preventDefault();\r\n				evt.stopPropagation();\r\n\r\n				if( ghostEl ){\r\n					ghostEl.parentNode.removeChild(ghostEl);\r\n				}\r\n\r\n				if( dragEl ){\r\n					_disableDraggable(dragEl);\r\n					_toggleClass(dragEl, this.options.ghostClass, false);\r\n\r\n					if( !rootEl.contains(dragEl) ){\r\n						// Remove event\r\n						rootEl.dispatchEvent(_createEvent('remove', dragEl));\r\n\r\n						// Add event\r\n						dragEl.dispatchEvent(_createEvent('add', dragEl));\r\n					}\r\n					else if( dragEl.nextSibling !== nextEl ){\r\n						// Update event\r\n						dragEl.dispatchEvent(_createEvent('update', dragEl));\r\n					}\r\n					dragEl.dispatchEvent(_createEvent('stop', dragEl));\r\n				}\r\n\r\n				// Set NULL\r\n				rootEl =\r\n				dragEl =\r\n				ghostEl =\r\n				nextEl =\r\n\r\n				tapEvt =\r\n				touchEvt =\r\n\r\n				lastEl =\r\n				lastCSS =\r\n\r\n				activeGroup = null;\r\n			}\r\n		},\r\n\r\n\r\n		destroy: function (){\r\n			var el = this.el, options = this.options;\r\n\r\n			_off(el, 'add', options.onAdd);\r\n			_off(el, 'update', options.onUpdate);\r\n			_off(el, 'remove', options.onRemove);\r\n			_off(el, 'start', options.onStart);\r\n			_off(el, 'stop', options.onEnd);\r\n			_off(el, 'mousedown', this._onTapStart);\r\n			_off(el, 'touchstart', this._onTapStart);\r\n			_off(el, 'selectstart', this._onTapStart);\r\n			_off(el, pointerdown, this._onTapStart);\r\n\r\n			_off(el, 'dragover', this._onDragOver);\r\n			_off(el, 'dragenter', this._onDragOver);\r\n\r\n			//remove draggable attributes\r\n			Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function(el) {\r\n				el.removeAttribute('draggable');\r\n			});\r\n\r\n			touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);\r\n\r\n			this._onDrop();\r\n\r\n			this.el = null;\r\n		}\r\n	};\r\n\r\n	function _bind(ctx, fn){\r\n		var args = slice.call(arguments, 2);\r\n		return	fn.bind ? fn.bind.apply(fn, [ctx].concat(args)) : function (){\r\n			return fn.apply(ctx, args.concat(slice.call(arguments)));\r\n		};\r\n	}\r\n\r\n\r\n	function _closest(el, selector, ctx){\r\n		if( selector === '*' ){\r\n			return el;\r\n		}\r\n		else if( el ){\r\n			ctx = ctx || document;\r\n			selector = selector.split('.');\r\n\r\n			var\r\n				  tag = selector.shift().toUpperCase()\r\n				, re = new RegExp('\\\\s('+selector.join('|')+')\\\\s', 'g')\r\n			;\r\n\r\n			do {\r\n				if(\r\n					   (tag === '' || el.nodeName == tag)\r\n					&& (!selector.length || ((' '+el.className+' ').match(re) || []).length == selector.length)\r\n				){\r\n					return	el;\r\n				}\r\n			}\r\n			while( el !== ctx && (el = el.parentNode) );\r\n		}\r\n\r\n		return	null;\r\n	}\r\n\r\n\r\n	function _globalDragOver(evt){\r\n		evt.dataTransfer.dropEffect = 'move';\r\n		evt.preventDefault();\r\n	}\r\n\r\n\r\n	function _on(el, event, fn){\r\n		el.addEventListener(event, fn, false);\r\n	}\r\n\r\n\r\n	function _off(el, event, fn){\r\n		el.removeEventListener(event, fn, false);\r\n	}\r\n\r\n\r\n	function _toggleClass(el, name, state){\r\n		if( el ){\r\n			if( el.classList ){\r\n				el.classList[state ? 'add' : 'remove'](name);\r\n			}\r\n			else {\r\n				var className = (' '+el.className+' ').replace(/\\s+/g, ' ').replace(' '+name+' ', '');\r\n				el.className = className + (state ? ' '+name : '')\r\n			}\r\n		}\r\n	}\r\n\r\n\r\n	function _css(el, prop, val){\r\n		if( el && el.style ){\r\n			if( val === void 0 ){\r\n				if( document.defaultView && document.defaultView.getComputedStyle ){\r\n					val = document.defaultView.getComputedStyle(el, '');\r\n				}\r\n				else if( el.currentStyle ){\r\n					val	= el.currentStyle;\r\n				}\r\n				return	prop === void 0 ? val : val[prop];\r\n			} else {\r\n				el.style[prop] = val + (typeof val === 'string' ? '' : 'px');\r\n			}\r\n		}\r\n	}\r\n\r\n\r\n	function _find(ctx, tagName, iterator){\r\n		if( ctx ){\r\n			var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\r\n			if( iterator ){\r\n				for( ; i < n; i++ ){\r\n					iterator(list[i], i);\r\n				}\r\n			}\r\n			return	list;\r\n		}\r\n		return	[];\r\n	}\r\n\r\n\r\n	function _disableDraggable(el){\r\n		return el.draggable = false;\r\n	}\r\n\r\n\r\n	function _unsilent(){\r\n		_silent = false;\r\n	}\r\n\r\n\r\n	function _ghostInBottom(el, evt){\r\n		var last = el.lastElementChild.getBoundingClientRect();\r\n		return evt.clientY - (last.top + last.height) > 5; // min delta\r\n	}\r\n\r\n\r\n\r\n	// Export utils\r\n	Sortable.utils = {\r\n		on: _on,\r\n		off: _off,\r\n		css: _css,\r\n		find: _find,\r\n		bind: _bind,\r\n		closest: _closest,\r\n		toggleClass: _toggleClass\r\n	};\r\n\r\n\r\n	Sortable.version = '0.3.0';\r\n\r\n	// Export\r\n	return	Sortable;\r\n});\r\n\n//# sourceURL=/thirdparty/sortable/Sortable.js"),eval('define(\'text!htmlContent/working-diagrams-view.html\',[],function () { return \'<div class="view-holder">\\r\\n    <div class="view-header">\\r\\n        <span class="view-header-title">Working Diagrams</span>\\r\\n    </div>\\r\\n    <div class="view-content">\\r\\n        <ul class="listview"></ul>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/working-diagrams-view.html'),eval('define(\'text!htmlContent/working-diagrams-view-item.html\',[],function () { return \'<li data-id="{{_id}}" class="working-diagram">\\r\\n    <span data-id="{{_id}}" class="close-button"></span>\\r\\n    <span class="diagram-icon k-sprite icon-{{getClassName}}"></span>\\r\\n    <span class="name">{{name}}</span>\\r\\n    {{#_parent}}\\r\\n    <span class="namespace"> — {{name}}</span>\\r\\n    {{/_parent}}\\r\\n</li>\';});\n\n//# sourceURL=/text!htmlContent/working-diagrams-view-item.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo, Mustache */\r\n\r\n/**\r\n * WorkingDiagramView\r\n */\r\ndefine(\'diagrams/WorkingDiagramsView\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'utils/ViewUtils\',\'core/Repository\',\'engine/Engine\',\'command/Commands\',\'command/CommandManager\',\'menu/ContextMenuManager\',\'diagrams/DiagramManager\',\'dialogs/Dialogs\',\'thirdparty/sortable/Sortable\',\'text!htmlContent/working-diagrams-view.html\',\'text!htmlContent/working-diagrams-view-item.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit            = require("utils/AppInit"),\r\n        ViewUtils          = require("utils/ViewUtils"),\r\n        Repository         = require("core/Repository"),\r\n        Engine             = require("engine/Engine"),\r\n        Commands           = require("command/Commands"),\r\n        CommandManager     = require("command/CommandManager"),\r\n        ContextMenuManager = require("menu/ContextMenuManager"),\r\n        DiagramManager     = require("diagrams/DiagramManager"),\r\n        Dialogs            = require("dialogs/Dialogs"),\r\n        Sortable           = require("thirdparty/sortable/Sortable"),\r\n        viewTemplate       = require("text!htmlContent/working-diagrams-view.html"),\r\n        itemTemplate       = require("text!htmlContent/working-diagrams-view-item.html");\r\n\r\n    var CMD_DIAGRAM_RENAME = "working-diagrams.rename";\r\n\r\n    /**\r\n     * JQuery Object for ListView\r\n     * @private\r\n     * @type{JQuery}\r\n     */\r\n    var $listview = null;\r\n\r\n\r\n    /**\r\n     * Add Working Diagram\r\n     * @private\r\n     */\r\n    function _addWorkingDiagram(diagram) {\r\n        if (diagram) {\r\n            var $item = $(Mustache.render(itemTemplate, diagram));\r\n            $(".close-button", $item).click(function (e) {\r\n                DiagramManager.closeDiagram(diagram);\r\n                e.stopPropagation();\r\n            });\r\n            $item.click(function () {\r\n                DiagramManager.setCurrentDiagram(diagram);\r\n            });\r\n            $listview.append($item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove Working Diagram\r\n     * @private\r\n     */\r\n    function _removeWorkingDiagram(diagram) {\r\n        if (diagram) {\r\n            var $item = $(".working-diagram[data-id=\'" + diagram._id + "\']", $listview);\r\n            $item.remove();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Update Working Diagram\r\n     * @private\r\n     */\r\n    function _updateWorkingDiagram(diagram) {\r\n        if (diagram) {\r\n            var $item      = $(".working-diagram[data-id=\'" + diagram._id + "\']", $listview),\r\n                $name      = $(".name", $item);\r\n            $name.html(diagram.name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all working diagrams\r\n     * @private\r\n     */\r\n    function _clearWorkingDiagrams() {\r\n        $listview.empty();\r\n    }\r\n\r\n    /**\r\n     * Update Working Diagrams\r\n     * @private\r\n     */\r\n    function _updateAllWorkingDiagrams(diagrams) {\r\n        $listview.empty();\r\n        for (var i = 0, len = diagrams.length; i < len; i++) {\r\n            var item = diagrams[i];\r\n            _addWorkingDiagram(item);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Set Current Diagram\r\n     * @private\r\n     */\r\n    function _setCurrentDiagram(diagram) {\r\n        if (diagram) {\r\n            $(".working-diagram", $listview).removeClass("selected");\r\n            var $item = $(".working-diagram[data-id=\'" + diagram._id + "\']", $listview);\r\n            $item.addClass("selected");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * ContextMenu for Diagram Navigation\r\n     * @private\r\n     */\r\n    function _setupContextMenu() {\r\n        var CONTEXT_MENU = "context-menu-working-diagrams";\r\n        var contextMenu;\r\n        contextMenu = ContextMenuManager.addContextMenu(CONTEXT_MENU, "#working-diagrams ul.listview");\r\n        contextMenu.addMenuItem(Commands.VIEW_CLOSE_DIAGRAM);\r\n        contextMenu.addMenuItem(Commands.VIEW_CLOSE_OTHER_DIAGRAMS);\r\n        contextMenu.addMenuItem(Commands.VIEW_CLOSE_ALL_DIAGRAMS);\r\n        contextMenu.addMenuDivider();\r\n        contextMenu.addMenuItem(CMD_DIAGRAM_RENAME);\r\n    }\r\n\r\n    function _handleRename() {\r\n        var dgm = DiagramManager.getCurrentDiagram();\r\n        Dialogs.showInputDialog("Enter diagram name", dgm.name)\r\n            .done(function (modal, result) {\r\n                if (modal === Dialogs.DIALOG_BTN_OK) {\r\n                    console.log(modal, result);\r\n                    Engine.setProperty(dgm, "name", result);\r\n                }\r\n            });\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        var $workingDiagrams = $("#working-diagrams"),\r\n            $view = $(viewTemplate),\r\n            $content = $view.find(".view-content");\r\n        $workingDiagrams.append($view);\r\n        $listview = $workingDiagrams.find(".listview");\r\n\r\n        ViewUtils.addScrollerShadow($content.get(0), null, true);\r\n\r\n        $(DiagramManager).on("workingDiagramsClear", function (evt) {\r\n            try {\r\n                _clearWorkingDiagrams();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(DiagramManager).on("workingDiagramAdd", function (evt, diagram) {\r\n            try {\r\n                _addWorkingDiagram(diagram);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(DiagramManager).on("workingDiagramRemove", function (evt, diagram) {\r\n            try {\r\n                _removeWorkingDiagram(diagram);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(DiagramManager).on("workingDiagramUpdate", function (evt, diagram) {\r\n            try {\r\n                _updateWorkingDiagram(diagram);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(DiagramManager).on("currentDiagramChanged", function (evt, diagram, editor) {\r\n            try {\r\n                if (diagram) {\r\n                    _setCurrentDiagram(diagram);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        // Make listview sortable\r\n        var sort = new Sortable($listview.get(0));\r\n\r\n        // Setup Context Menu for Working Diagrams\r\n        _setupContextMenu();\r\n\r\n    });\r\n\r\n    CommandManager.register("Rename", CMD_DIAGRAM_RENAME, _handleRename);\r\n\r\n});\r\n\n//# sourceURL=/diagrams/WorkingDiagramsView.js'),eval('define(\'text!htmlContent/toolbox-view.html\',[],function () { return \'<div class="view-holder">\\r\\n    <div class="view-header">\\r\\n        <span class="view-header-title">Toolbox</span>\\r\\n        <div class="buttons">\\r\\n            <button class="select-button k-button icon-button quiet"><span class="k-sprite tool-icon-select"></span></button>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class="view-content">\\r\\n        <div id=\\\'ui-toolbox\\\' style=\\\'width: 100%; height: 100%;\\\'></div>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/toolbox-view.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo, Mustache */\r\n\r\n/**\r\n *\r\n * This module dispatches these events:\r\n *     - elementCreated:       (id, editor, x1, y1, x2, y2)\r\n *     - activeHandlerChanged: (handler)\r\n */\r\ndefine(\'diagrams/ToolboxView\',[\'require\',\'exports\',\'module\',\'core/Global\',\'utils/AppInit\',\'command/CommandManager\',\'command/Commands\',\'strings\',\'utils/Resizer\',\'utils/ViewUtils\',\'utils/KeyEvent\',\'diagrams/Editor\',\'diagrams/Editor\',\'diagrams/DiagramManager\',\'text!htmlContent/toolbox-view.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global         = require("core/Global").global,\r\n        AppInit        = require("utils/AppInit"),\r\n        CommandManager = require("command/CommandManager"),\r\n        Commands       = require("command/Commands"),\r\n        Strings        = require("strings"),\r\n        Resizer        = require("utils/Resizer"),\r\n        ViewUtils      = require("utils/ViewUtils"),\r\n        KeyEvent       = require("utils/KeyEvent"),\r\n        SelectHandler  = require("diagrams/Editor").SelectHandler,\r\n        CreateHandler  = require("diagrams/Editor").CreateHandler,\r\n        DiagramManager = require("diagrams/DiagramManager"),\r\n        viewTemplate   = require("text!htmlContent/toolbox-view.html");\r\n\r\n    var SELECTOR_ID = \'toolbox-select\';\r\n\r\n\r\n    var $toolbox,\r\n        $toolboxPanelBar = null,\r\n        $buttons = null,\r\n        $selectButton = null;\r\n\r\n    /**\r\n     * Array for Groups\r\n     * @private\r\n     * @type {Array.<{id:string, title:string, allowedDiagrams:Array.<Core.Diagram>}>}\r\n     */\r\n    var _groups = [];\r\n\r\n    /**\r\n     * Active Item\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    var _activeItem = null;\r\n\r\n    /**\r\n     * Active Item Locked\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    var _activeItemLocked = false;\r\n\r\n    /**\r\n     * Map for Handlers\r\n     * @private\r\n     * @type {Object.<string,Handlers.Handler>}\r\n     */\r\n    var _handlers = {};\r\n\r\n    /**\r\n     * Panel Bar\r\n     * @private\r\n     * @type {kendo.ui.PanelBar}\r\n     */\r\n    var _panelBar = null;\r\n\r\n\r\n    /**\r\n     * Toggle ToolboxView\r\n     */\r\n    function toggle() {\r\n        Resizer.toggle($toolbox);\r\n    }\r\n\r\n    /**\r\n     * Show ToolboxView\r\n     */\r\n    function show() {\r\n        Resizer.show($toolbox);\r\n    }\r\n\r\n    /**\r\n     * Hide ToolboxView\r\n     */\r\n    function hide() {\r\n        Resizer.hide($toolbox);\r\n    }\r\n\r\n    /**\r\n     * Return whether ToolboxView is visible or not\r\n     *\r\n     * @return {booean}\r\n     */\r\n    function isVisible() {\r\n        return Resizer.isVisible($toolbox);\r\n    }\r\n\r\n    function _createEventHandler(id, editor, x1, y1, x2, y2) {\r\n        $(exports).triggerHandler(\'elementCreated\', [id, editor, x1, y1, x2, y2]);\r\n        // 요소 생성 후, Select로 돌아감.\r\n        if (!_activeItemLocked) {\r\n            selectItem();\r\n        }\r\n    }\r\n\r\n    function _triggerHandlerChangeEvent(handler) {\r\n        $(exports).triggerHandler(\'activeHandlerChanged\', handler);\r\n    }\r\n\r\n    /**\r\n     * Activate a given item\r\n     * @private\r\n     * @param {string} itemId\r\n     */\r\n    function _setActiveItem(itemId) {\r\n        if (itemId === SELECTOR_ID) {\r\n            $("#" + _activeItem + " > span").removeClass("k-state-selected k-state-focused"); // deselect\r\n            $selectButton.addClass("k-state-selected");\r\n        } else {\r\n            $selectButton.removeClass("k-state-selected");\r\n        }\r\n        _setActiveItemLock(false);\r\n        _activeItem = itemId;\r\n        var handler = _handlers[itemId];\r\n        DiagramManager.setActiveHandler(handler);\r\n        _triggerHandlerChangeEvent(handler);\r\n    }\r\n\r\n    /**\r\n     * Active 아이템을 고정시킨다.\r\n     * @param {string} itemId\r\n     * @param {boolean} locked\r\n     */\r\n    function _setActiveItemLock(locked) {\r\n        _activeItemLocked = locked;\r\n        if (_activeItemLocked) {\r\n            $("#" + _activeItem + " > span").append("<span class=\'k-sprite icon-Lock toolbox-lock\' style=\'float: none; margin-left: 2px; margin-bottom: 7px;\'></span>");\r\n        } else {\r\n            $(".toolbox-lock").remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a group.\r\n     *\r\n     * @param {string} groupId\r\n     * @param {string} title\r\n     * @param {!Array.<Core.Diagram>} allowedDiagrams\r\n     *      This group only available for allowed diagrams.\r\n     *      If empty array is passed, then this group will be available for any diagrams\r\n     */\r\n    function addGroup(groupId, title, allowedDiagrams) {\r\n        var group = {\r\n            id: groupId,\r\n            title: title,\r\n            allowedDiagrams: allowedDiagrams\r\n        };\r\n        // var html = "<li id=\'{{id}}\'>{{title}}<ul><li id=\'toolbox-select\'><span class=\'k-sprite tool-icon-select\'></span>Select</li></ul></li>";\r\n        var html = "<li id=\'{{id}}\'>{{title}}<ul></li>";\r\n        $("#ui-toolbox").append(Mustache.render(html, group));\r\n        _groups.add(group);\r\n    }\r\n\r\n    /**\r\n     * Add an item to a group.\r\n     *\r\n     * @param {string} id\r\n     * @param {string} groupId\r\n     * @param {string} title\r\n     * @param {string} iconClass\r\n     * @param {string} skeleton "line" | "rect" | "point"\r\n     */\r\n    function addItem(id, groupId, title, iconClass, skeleton) {\r\n        var html = "<li id=\'" + id + "\'><span class=\'k-sprite " + iconClass + "\'></span><span>" + title + "</span></li>";\r\n        $("#" + groupId + " > ul").append(html);\r\n        if (!_handlers[id]) {\r\n            _handlers[id] = new CreateHandler(id, skeleton, _createEventHandler);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show groups only available for a given diagram.\r\n     *\r\n     * @param {Core.Diagram} diagram\r\n     */\r\n    function setDiagram(diagram) {\r\n        if (diagram) {\r\n            $toolboxPanelBar.show();\r\n            $buttons.show();\r\n            _.forEach(_groups, function (group) {\r\n                var visible = false;\r\n                if (_.isArray(group.allowedDiagrams) && (group.allowedDiagrams.length > 0)) {\r\n                    if (_.indexOf(group.allowedDiagrams, diagram.constructor) > -1) {\r\n                        visible = true;\r\n                    }\r\n                } else {\r\n                    visible = true;\r\n                }\r\n                $("#" + group.id).toggle(visible);\r\n            });\r\n        } else {\r\n            $toolboxPanelBar.hide();\r\n            $buttons.hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select an item.\r\n     *\r\n     * @param {string} itemId\r\n     */\r\n    function selectItem(itemId) {\r\n        if (itemId && (itemId !== SELECTOR_ID)) {\r\n            _setActiveItem(itemId);\r\n        } else {\r\n            _setActiveItem(SELECTOR_ID);\r\n            _setActiveItemLock(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Expand a group.\r\n     *\r\n     * @param {string} groupId\r\n     */\r\n    function expandGroup(groupId) {\r\n        if (groupId) {\r\n            _panelBar.expand($("#ui-toolbox #" + groupId));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collapse a group.\r\n     *\r\n     * @param {string} groupId\r\n     */\r\n    function collapseGroup(groupId) {\r\n        if (groupId) {\r\n            _panelBar.collapse($("#ui-toolbox #" + groupId));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a handler.\r\n     *\r\n     * @param {string} id\r\n     * @return {Handler}\r\n     */\r\n    function getHandler(id) {\r\n        return _handlers[id];\r\n    }\r\n\r\n    /**\r\n     * Setup for UI\r\n     */\r\n    function _setupUI() {\r\n        // Configure Handlers\r\n        _handlers[SELECTOR_ID] = new SelectHandler();\r\n\r\n        // Setup PanelBar\r\n        $("#ui-toolbox").kendoPanelBar({\r\n            expandMode: "multiple",\r\n            activate: function (e) {\r\n                selectItem();\r\n            },\r\n            select: function (e) {\r\n                if (e.item.id === _activeItem) {\r\n                    if (_activeItemLocked === true) {\r\n                        _setActiveItemLock(false);\r\n                        _setActiveItem(SELECTOR_ID);\r\n                    } else {\r\n                        _setActiveItemLock(true);\r\n                    }\r\n                } else if (_handlers[e.item.id]) {\r\n                    // Handler에 등록된 e.item.id 가 존재하는 경우에만 동작.\r\n                    // Group을 Collapse될 때, 그 내부에 ActiveItem이 존재하면 e.item.id 는 Group의 id가 됨.\r\n                    _setActiveItemLock(false);\r\n                    _setActiveItem(e.item.id);\r\n                } else {\r\n                    // 적합한 Handler가 없는 경우에는 SELECTOR가 선택됨.\r\n                    _setActiveItemLock(false);\r\n                    _setActiveItem(SELECTOR_ID);\r\n                }\r\n            }\r\n        });\r\n        _panelBar = $("#ui-toolbox").data("kendoPanelBar");\r\n\r\n        // Process Key Events (ESC == Go to Selection Mode)\r\n        $("body").keydown(function (event) {\r\n            switch (event.which) {\r\n            case KeyEvent.DOM_VK_ESCAPE:\r\n                _setActiveItem(SELECTOR_ID);\r\n                break;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    /* Initialization when DOM Ready */\r\n    AppInit.htmlReady(function () {\r\n        var $view    = $(viewTemplate),\r\n            $content = $view.find(".view-content");\r\n\r\n        $toolbox = $("#toolbox");\r\n        $toolboxPanelBar = $view.find("#ui-toolbox");\r\n        $buttons = $view.find(".buttons");\r\n        $toolbox.append($view);\r\n        ViewUtils.addScrollerShadow($content.get(0), null, true);\r\n\r\n        $selectButton = $(".select-button", $view);\r\n        $selectButton.click(function () {\r\n            _setActiveItem(SELECTOR_ID);\r\n        });\r\n\r\n        $toolbox.on("panelCollapsed", function (evt, width) {\r\n            CommandManager.get(Commands.VIEW_HIDE_TOOLBOX).setName(Strings.CMD_VIEW_SHOW_TOOLBOX);\r\n        });\r\n\r\n        $toolbox.on("panelExpanded", function (evt, width) {\r\n            CommandManager.get(Commands.VIEW_HIDE_TOOLBOX).setName(Strings.CMD_VIEW_HIDE_TOOLBOX);\r\n        });\r\n\r\n        // AppInit.htmlReady in utils/Resizer executes before, so it\'s possible that the sidebar\r\n        // is collapsed before we add the event. Check here initially\r\n        if (!$toolbox.is(":visible")) {\r\n            $toolbox.trigger("panelCollapsed");\r\n        }\r\n\r\n\r\n    });\r\n\r\n    /* Initialization when DOM Ready */\r\n    AppInit.appReady(function () {\r\n        _setupUI();\r\n        // Expand the first group\r\n        if (_groups.length > 0) {\r\n            _panelBar.expand($("#" + _groups[0].id));\r\n        }\r\n    });\r\n\r\n    CommandManager.register(Strings.CMD_VIEW_HIDE_TOOLBOX, Commands.VIEW_HIDE_TOOLBOX, toggle);\r\n\r\n    // Define public API\r\n    exports.toggle        = toggle;\r\n    exports.show          = show;\r\n    exports.hide          = hide;\r\n    exports.isVisible     = isVisible;\r\n    exports.addGroup      = addGroup;\r\n    exports.addItem       = addItem;\r\n    exports.setDiagram    = setDiagram;\r\n    exports.expandGroup   = expandGroup;\r\n    exports.collapseGroup = collapseGroup;\r\n    exports.selectItem    = selectItem;\r\n    exports.getHandler    = getHandler;\r\n\r\n});\r\n\n//# sourceURL=/diagrams/ToolboxView.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo */\r\n\r\n/**\r\n * Toolbar\r\n */\r\ndefine(\'ui/Toolbar\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/PreferenceManager\',\'command/CommandManager\',\'command/Commands\',\'strings\',\'utils/Resizer\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit             = require("utils/AppInit"),\r\n        PreferenceManager   = require("core/PreferenceManager"),\r\n        CommandManager      = require("command/CommandManager"),\r\n        Commands            = require("command/Commands"),\r\n        Strings             = require("strings"),\r\n        Resizer             = require("utils/Resizer");\r\n\r\n    var $toolbar,\r\n        $contentHolder;\r\n\r\n    /**\r\n     * Toggle Toolbar\r\n     */\r\n    function toggle() {\r\n        if (isVisible()) {\r\n            hide();\r\n        } else {\r\n            show();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show Toolbar\r\n     */\r\n    function show() {\r\n        var elementPrefs = {\r\n            size: $toolbar.outerWidth(),\r\n            visible: true\r\n        };\r\n        $toolbar.show();\r\n        $contentHolder.css("right", elementPrefs.size);\r\n        $toolbar.trigger("panelExpanded", [elementPrefs.size]);\r\n        PreferenceManager.setViewState("toolbar", elementPrefs);\r\n\r\n        CommandManager.get(Commands.VIEW_HIDE_TOOLBAR).setName(Strings.CMD_VIEW_HIDE_TOOLBAR);\r\n    }\r\n\r\n    /**\r\n     * Hide Toolbar\r\n     */\r\n    function hide() {\r\n        var elementPrefs = {\r\n            size: $toolbar.outerWidth(),\r\n            visible: false\r\n        };\r\n        $toolbar.hide();\r\n        $contentHolder.css("right", 0);\r\n        $toolbar.trigger("panelCollapsed", [0]);\r\n        PreferenceManager.setViewState("toolbar", elementPrefs);\r\n\r\n        CommandManager.get(Commands.VIEW_HIDE_TOOLBAR).setName(Strings.CMD_VIEW_SHOW_TOOLBAR);\r\n    }\r\n\r\n    /**\r\n     * Return whether Toolbar is visible or not\r\n     *\r\n     * @return {booean}\r\n     */\r\n    function isVisible() {\r\n        return $toolbar.is(":visible");\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        $toolbar = $("#toolbar");\r\n        $contentHolder = $(".content-holder");\r\n\r\n        var elementPrefs = PreferenceManager.getViewState("toolbar");\r\n        if (elementPrefs.visible === false) {\r\n            hide();\r\n        } else {\r\n            show();\r\n        }\r\n    });\r\n\r\n    CommandManager.register(Strings.CMD_VIEW_HIDE_TOOLBAR, Commands.VIEW_HIDE_TOOLBAR, toggle);\r\n\r\n    exports.toggle = toggle;\r\n    exports.show   = show;\r\n    exports.hide   = hide;\r\n\r\n});\r\n\n//# sourceURL=/ui/Toolbar.js'),eval('define(\'text!htmlContent/statusbar.html\',[],function () { return \'<div class="left-section">\\r\\n    <div class="selected-element" style="height: 100%;">\\r\\n    </div>\\r\\n</div>\\r\\n<div class="right-section">\\r\\n    <div class="validation item" title="Validation Results" ><span class="validation-icon k-sprite validation-ok"></span></div>\\r\\n    <div class="zoom item" title="Zoom Level">100%</div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/statusbar.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell */\r\n\r\n/**\r\n * StatusBar\r\n */\r\ndefine(\'ui/StatusBar\',[\'require\',\'exports\',\'module\',\'core/Global\',\'utils/AppInit\',\'core/PreferenceManager\',\'command/CommandManager\',\'command/Commands\',\'strings\',\'text!htmlContent/statusbar.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global            = require("core/Global").global,\r\n        AppInit           = require("utils/AppInit"),\r\n        PreferenceManager = require("core/PreferenceManager"),\r\n        CommandManager    = require("command/CommandManager"),\r\n        Commands          = require("command/Commands"),\r\n        Strings           = require("strings"),\r\n        template          = require("text!htmlContent/statusbar.html");\r\n\r\n    var $statusbar,\r\n        $mainView,\r\n        $view,\r\n        $selectedElement,\r\n        $zoom,\r\n        $validation;\r\n\r\n    /**\r\n     * Zoom의 비율을 나타내기\r\n     *\r\n     * @private\r\n     * @param {number} value\r\n     */\r\n    function setZoomLevel(value) {\r\n        if (value) {\r\n            $zoom.html(Math.round(value * 100) + "%");\r\n        } else {\r\n            $zoom.html("100%");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set Validity\r\n     *\r\n     * @private\r\n     * @param {boolean} value\r\n     */\r\n    function setValidity(value) {\r\n        if (value) {\r\n            $validation.addClass("validation-ok");\r\n            $validation.removeClass("validation-error");\r\n        } else {\r\n            $validation.addClass("validation-error");\r\n            $validation.removeClass("validation-ok");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 선택된 요소의 정보를 나타내기\r\n     *\r\n     * @private\r\n     * @param {Core.Model} elem\r\n     */\r\n    function setElement(elem) {\r\n\r\n        function _addItem(_elem) {\r\n            if (_elem) {\r\n                var text;\r\n                if (_elem === elem) {\r\n                    text = "<span class=\'element\'>"\r\n                         + "<span class=\'k-sprite " + _elem.getNodeIcon() + "\'></span>"\r\n                         + "<span style=\'color: #8fddff\'>" + _elem.name + "</span>"\r\n                         + "<span style=\'color: #8b8b8b; font-size: 11px;\'> [" + _elem.getClassName() + "]</span>"\r\n                         + "</span>";\r\n                } else {\r\n                    if (_elem instanceof type.Project) {\r\n                        text = "<span class=\'element\'>"\r\n                             + "<span class=\'k-sprite " + _elem.getNodeIcon() + "\'></span>"\r\n                             + "</span>";\r\n                    } else {\r\n                        text = "<span class=\'element\'>"\r\n                             + "<span class=\'k-sprite " + _elem.getNodeIcon() + "\'></span>"\r\n                             + "<span>" + _elem.name + "</span>"\r\n                             + "</span>";\r\n                    }\r\n                }\r\n                $selectedElement.prepend(text);\r\n                if (_elem._parent) {\r\n                    _addItem(_elem._parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (elem) {\r\n            // var text = "<span class=\'k-sprite " + elem.getNodeIcon() + "\'></span> [" + elem.getClassName() + "] " + elem.getPathname();\r\n            // $selectedElement.html(text);\r\n            $selectedElement.children().remove();\r\n            _addItem(elem);\r\n        } else {\r\n            $selectedElement.html("&nbsp;");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle StatusBar\r\n     */\r\n    function toggle() {\r\n        if (isVisible()) {\r\n            hide();\r\n        } else {\r\n            show();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show StatusBar\r\n     */\r\n    function show() {\r\n        var elementPrefs = {\r\n            size: $statusbar.outerHeight(),\r\n            visible: true\r\n        };\r\n        $statusbar.show();\r\n        $mainView.css("bottom", elementPrefs.size);\r\n        $statusbar.trigger("panelExpanded", [elementPrefs.size]);\r\n        PreferenceManager.setViewState("statusbar", elementPrefs);\r\n\r\n        CommandManager.get(Commands.VIEW_HIDE_STATUSBAR).setName(Strings.CMD_VIEW_HIDE_STATUSBAR);\r\n    }\r\n\r\n    /**\r\n     * Hide StatusBar\r\n     */\r\n    function hide() {\r\n        var elementPrefs = {\r\n            size: $statusbar.outerHeight(),\r\n            visible: false\r\n        };\r\n        $statusbar.hide();\r\n        $mainView.css("bottom", 0);\r\n        $statusbar.trigger("panelCollapsed", [0]);\r\n        PreferenceManager.setViewState("statusbar", elementPrefs);\r\n\r\n        CommandManager.get(Commands.VIEW_HIDE_STATUSBAR).setName(Strings.CMD_VIEW_SHOW_STATUSBAR);\r\n    }\r\n\r\n    /**\r\n     * Return whether StatusBar is visible or not\r\n     *\r\n     * @return {booean}\r\n     */\r\n    function isVisible() {\r\n        return $statusbar.is(":visible");\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        $statusbar = $("#statusbar");\r\n        $mainView = $(".main-view");\r\n\r\n        $view = $(template);\r\n        $selectedElement = $view.find(".selected-element");\r\n        $zoom = $view.find(".zoom");\r\n        $validation = $view.find(".validation-icon");\r\n\r\n        $statusbar.append($view);\r\n\r\n        if (!$statusbar.is(":visible")) {\r\n            hide();\r\n        }\r\n\r\n        var elementPrefs = PreferenceManager.getViewState("statusbar");\r\n        if (elementPrefs.visible === false) {\r\n            hide();\r\n        } else {\r\n            show();\r\n        }\r\n    });\r\n\r\n    CommandManager.register(Strings.CMD_VIEW_HIDE_STATUSBAR, Commands.VIEW_HIDE_STATUSBAR, toggle);\r\n\r\n    // Public API\r\n    exports.toggle       = toggle;\r\n    exports.show         = show;\r\n    exports.hide         = hide;\r\n    exports.isVisible    = isVisible;\r\n    exports.setZoomLevel = setZoomLevel;\r\n    exports.setValidity  = setValidity;\r\n    exports.setElement   = setElement;\r\n\r\n});\r\n\n//# sourceURL=/ui/StatusBar.js'),eval('define(\'text!htmlContent/unregistered-dialog.html\',[],function () { return \'<div class="unregistered-dialog dialog modal" data-title="Unregistered Version">\\r\\n    <div class="dialog-body">\\r\\n        <div class="ad"></div>\\r\\n        <div>Thank you for evaluating StarUML. This is unregistered evaluation version. Although no time limit for evaluation, a license should be purchased for continued use. If you want to purchase a license, please click "Buy Now" button.</div>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button left buy-now primary">Buy Now</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">Evaluate</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/unregistered-dialog.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo, Mustache */\r\n\r\ndefine(\'license/UnregisteredDialog\',[\'require\',\'exports\',\'module\',\'core/Global\',\'utils/Initializer\',\'strings\',\'dialogs/Dialogs\',\'license/LicenseManager\',\'text!htmlContent/unregistered-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global         = require("core/Global").global,\r\n        Initializer    = require("utils/Initializer"),\r\n        Strings        = require("strings"),\r\n        Dialogs        = require("dialogs/Dialogs"),\r\n        LicenseManager = require("license/LicenseManager");\r\n\r\n    var unregisteredDialogTemplate = require("text!htmlContent/unregistered-dialog.html");\r\n\r\n    /**\r\n     * Show License Manager Dialog\r\n     * @return {$.Promise}\r\n     */\r\n    function showDialog() {\r\n        var context = {\r\n            Strings: Strings,\r\n            metadata: global.app.metadata\r\n        };\r\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(unregisteredDialogTemplate, context));\r\n\r\n        var $dlg    = dialog.getElement(),\r\n            $buyNow = $dlg.find(".buy-now"),\r\n            $ad     = $dlg.find(".ad");\r\n\r\n        $buyNow.click(function () {\r\n            appshell.app.openURLInDefaultBrowser(global.app.config.purchase_url);\r\n        });\r\n\r\n        $.ajax({url: "http://starumlad-7a0.kxcdn.com/ad.json", cache: false})\r\n            .done(function (data) {\r\n                console.log(data);\r\n                if (data.image && data.image.length > 0) {\r\n                    $ad.append("<a href=\'" + data.url + "\'><img src=\'" + data.image + "\'></a>");\r\n                }\r\n            })\r\n\r\n        dialog.done(function (buttonId) {\r\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n            }\r\n        });\r\n\r\n        return dialog;\r\n    }\r\n\r\n    exports.showDialog = showDialog;\r\n\r\n});\r\n\n//# sourceURL=/license/UnregisteredDialog.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, JSEncrypt*/\r\n\r\ndefine(\'license/LicenseManager\',[\'require\',\'exports\',\'module\',\'core/Global\',\'engine/ProjectManager\',\'utils/Initializer\',\'utils/AppInit\',\'utils/NodeDomain\',\'file/FileUtils\',\'filesystem/FileSystem\',\'license/UnregisteredDialog\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global         = require("core/Global").global,\r\n        ProjectManager = require("engine/ProjectManager"),\r\n        Initializer    = require("utils/Initializer"),\r\n        AppInit        = require("utils/AppInit"),\r\n        NodeDomain     = require("utils/NodeDomain"),\r\n        FileUtils      = require("file/FileUtils"),\r\n        FileSystem     = require("filesystem/FileSystem");\r\n\r\n    var UnregisteredDialog = require("license/UnregisteredDialog");\r\n\r\n    var PK =\r\n    "-----BEGIN RSA PRIVATE KEY-----\\n" +\r\n    "MIIBOgIBAAJBAKMtaq6K5rkfHskR2sYRvUU0APpGlpCBz8bhbqBaMmjFot9XZy/9\\n" +\r\n    "B+BuqF4yIytW7404U4D6tkGTsL237i/vhRsCAwEAAQJAUmYuxvDxTW3/l71iYj62\\n" +\r\n    "+uklzTwz78j9aQqRWHvzlJ/ZlKHPit8sA7GZ16ArN8DoHx+Slh6pm4tDkNgz+Evc\\n" +\r\n    "MQIhANr1M6M2GfzXX0PQxIkKypn7F6C1t2r9ivUjt9uRFP8nAiEAvshu1HKSPwrf\\n" +\r\n    "i1gtNHOoak1Er7e2lizWEmiyG48XAu0CIAOf/ZvdIG8ELcqUoTxXlmUYOBrsBz5Z\\n" +\r\n    "Njy6u6eB7mQPAiEAq7Qqg0vmMZTwojGm5akeLyYBpoAadUg/FmxhuAntNPUCIAZQ\\n" +\r\n    "iopKN9x4H2zAC7zhkBNeane6xGNLaR5QOG510Vk6\\n" +\r\n    "-----END RSA PRIVATE KEY-----";\r\n\r\n    /**\r\n     * @enum\r\n     */\r\n    var STAT_UNREGISTERED = "UNREGISTERED",\r\n        STAT_REGISTERED   = "REGISTERED";\r\n\r\n    // Status\r\n    var status = null;\r\n\r\n    // License Info\r\n    var licenseInfo = null;\r\n\r\n    // LicenseManager Domain\r\n    var LicenseManagerDomain;\r\n\r\n    /**\r\n     * Get Registration Status\r\n     * @return {string}\r\n     */\r\n    function getStatus() {\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * Set Registration Status\r\n     * @return {string}\r\n     */\r\n    function setStatus(newStat) {\r\n        if (status !== newStat) {\r\n            status = newStat;\r\n            $(exports).triggerHandler("statusChanged", [status]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get License Infomation\r\n     * @return {Object}\r\n     */\r\n    function getLicenseInfo() {\r\n        return licenseInfo;\r\n    }\r\n\r\n    /**\r\n     * Register LicenseKey\r\n     * @param {string} licenseKey\r\n     * @return {$.Promise}\r\n     */\r\n    function register(name, licenseKey) {\r\n        var path    = appshell.app.getApplicationSupportDirectory() + "/LICENSE",\r\n            file    = FileSystem.getFileForPath(path);\r\n        var license = {\r\n                name: name,\r\n                licenseKey: licenseKey\r\n            };\r\n        return FileUtils.writeText(file, JSON.stringify(license), true);\r\n    }\r\n\r\n    function doValidate(data) {\r\n        var result = new $.Deferred();\r\n        try {\r\n            licenseInfo = JSON.parse(data);\r\n            LicenseManagerDomain.exec("validate", PK, licenseInfo.name, global.app.metadata.config.product_id, licenseInfo.licenseKey)\r\n                .done(function (validated) {\r\n                    if (validated === false) { // failed\r\n                        licenseInfo = null;\r\n                        setStatus(STAT_UNREGISTERED);\r\n                        result.reject("Invalid License Key");\r\n                    } else { // success\r\n                        licenseInfo = validated;\r\n                        setStatus(STAT_REGISTERED);\r\n                        result.resolve(getStatus());\r\n                    }\r\n                })\r\n                .fail(function (err) {\r\n                    licenseInfo = null;\r\n                    setStatus(STAT_UNREGISTERED);\r\n                    result.reject(err);\r\n                });\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            licenseInfo = null;\r\n            setStatus(STAT_UNREGISTERED);\r\n            result.reject(ex);\r\n        }\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Validate LicenseKey\r\n     * @return {$.Promise}\r\n     */\r\n    function validate() {\r\n        var result = new $.Deferred(),\r\n            path   = appshell.app.getApplicationSupportDirectory() + "/LICENSE",\r\n            file   = FileSystem.getFileForPath(path);\r\n        FileUtils.readAsText(file)\r\n            .done(function (data) {\r\n                doValidate(data).then(result.resolve, result.reject);\r\n            })\r\n            .fail(function (err) {\r\n                // Find LICENSE file on a secondary path\r\n                var path2 = FileUtils.getApplicationDirectoryPath() + "LICENSE",\r\n                    file2 = FileSystem.getFileForPath(path2);\r\n                FileUtils.readAsText(file2)\r\n                    .done(function (data2) {\r\n                        doValidate(data2).then(result.resolve, result.reject);\r\n                    })\r\n                    .fail(function (err2) {\r\n                        licenseInfo = null;\r\n                        setStatus(STAT_UNREGISTERED);\r\n                        result.reject(err);\r\n                    });\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n    function checkValidity() {\r\n        var domainPath = FileUtils.getNativeDirectoryPath() + "/" + FileUtils.getNativeModuleDirectoryPath(module) + "/node/LicenseManagerDomain";\r\n        LicenseManagerDomain = new NodeDomain("LicenseManager", domainPath);\r\n        // setStatus(STAT_UNREGISTERED);\r\n        validate().fail(function (err) {\r\n            UnregisteredDialog.showDialog();\r\n        });\r\n    }\r\n\r\n    // Initializes Node Connection\r\n    AppInit.appReady(function () {\r\n        checkValidity();\r\n    });\r\n\r\n\r\n    // Check License When File Save\r\n    var LICENSE_CHECK_PROBABILITY = 0.2;\r\n    $(ProjectManager).on(\'projectSaved\', function (event, filename, project) {\r\n        var val = Math.floor(Math.random() * (1.0 / LICENSE_CHECK_PROBABILITY));\r\n        if (val === 0) {\r\n            checkValidity();\r\n        }\r\n    });\r\n\r\n    exports.STAT_UNREGISTERED = STAT_UNREGISTERED;\r\n    exports.STAT_REGISTERED   = STAT_REGISTERED;\r\n\r\n    exports.getStatus      = getStatus;\r\n    exports.setStatus      = setStatus;\r\n    exports.getLicenseInfo = getLicenseInfo;\r\n    exports.register       = register;\r\n    exports.validate       = validate;\r\n\r\n});\r\n\n//# sourceURL=/license/LicenseManager.js'),eval('define(\'text!htmlContent/about-dialog.html\',[],function () { return \'<div class="about-dialog dialog modal" data-title="About">\\r\\n    <div class="dialog-body">\\r\\n        <table>\\r\\n            <tr>\\r\\n                <td valign="top">\\r\\n                    <img style="margin-right: 1em;" src="{{metadata.config.app_icon}}">\\r\\n                </td>\\r\\n                <td valign="top">\\r\\n                    <div style="font-size: 20px;">{{metadata.name}}</div>\\r\\n                    <div style="font-size: 14px;" class="license"></div>\\r\\n                    <div style="font-size: 14px;" class="licenseType"></div>\\r\\n                    <div style="font-size: 14px;" class="quantity"></div>\\r\\n                    <br>\\r\\n                    <div>{{metadata.copyright}}</div>\\r\\n                    <div><b>Version {{metadata.version}}</b></div>\\r\\n                    <div><a class="thirdparty" href="#">Third party softwares</a></div>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button primary" data-button-id="close">{{Strings.CLOSE}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/about-dialog.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo, Mustache*/\r\n\r\ndefine(\'dialogs/AboutDialog\',[\'require\',\'exports\',\'module\',\'core/Global\',\'strings\',\'file/FileUtils\',\'dialogs/Dialogs\',\'license/LicenseManager\',\'text!htmlContent/about-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global         = require("core/Global").global,\r\n        Strings        = require("strings"),\r\n        FileUtils      = require("file/FileUtils"),\r\n        Dialogs        = require("dialogs/Dialogs"),\r\n        LicenseManager = require("license/LicenseManager");\r\n\r\n    var aboutDialogTemplate = require("text!htmlContent/about-dialog.html");\r\n\r\n    /**\r\n     * Show About Dialog\r\n     * @return {$.Promise}\r\n     */\r\n    function showDialog() {\r\n        var context = {\r\n            Strings: Strings,\r\n            metadata: global.app.metadata\r\n        };\r\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(aboutDialogTemplate, context));\r\n        var $dlg         = dialog.getElement(),\r\n            $license     = $dlg.find(".license"),\r\n            $licenseType = $dlg.find(".licenseType"),\r\n            $quantity    = $dlg.find(".quantity"),\r\n            $thirdparty  = $dlg.find(".thirdparty");\r\n\r\n        $thirdparty.click(function () {\r\n            var path = "file://" + FileUtils.getNativeDirectoryPath() + "/thirdparty/thirdparty-licenses.html";\r\n            appshell.app.openURLInDefaultBrowser(path);\r\n        });\r\n\r\n        // set license info\r\n        var licenseStatus = LicenseManager.getStatus();\r\n        if (licenseStatus === LicenseManager.STAT_REGISTERED) {\r\n            var info = LicenseManager.getLicenseInfo(),\r\n                licenseTypeName;\r\n            switch (info.licenseType) {\r\n            case "PS":\r\n                licenseTypeName = "Personal";\r\n                break;\r\n            case "CO":\r\n                licenseTypeName = "Commercial";\r\n                break;\r\n            case "ED":\r\n                licenseTypeName = "Educational";\r\n                break;\r\n            case "CR":\r\n                licenseTypeName = "Classroom";\r\n                break;\r\n            }\r\n            $license.html("Licensed to " + info.name);\r\n            $licenseType.html(licenseTypeName + " License");\r\n            $quantity.html(info.quantity + " User(s)");\r\n        } else {\r\n            $license.html(licenseStatus);\r\n        }\r\n        return dialog;\r\n    }\r\n\r\n    exports.showDialog = showDialog;\r\n\r\n});\r\n\n//# sourceURL=/dialogs/AboutDialog.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell, kendo, Mustache */\r\n\r\ndefine(\'ui/QuickEdit\',[\'require\',\'exports\',\'module\',\'core/Core\',\'core/Graphics\',\'core/Graphics\',\'core/Repository\',\'engine/Engine\',\'diagrams/DiagramManager\',\'command/KeyBindingManager\',\'utils/Helper\',\'utils/KeyEvent\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Core              = require("core/Core"),\r\n        Graphics          = require("core/Graphics"),\r\n        Coord             = require("core/Graphics").Coord,\r\n        Repository        = require("core/Repository"),\r\n        Engine            = require("engine/Engine"),\r\n        DiagramManager    = require("diagrams/DiagramManager"),\r\n        KeyBindingManager = require("command/KeyBindingManager"),\r\n        Helper            = require("utils/Helper"),\r\n        KeyEvent          = require("utils/KeyEvent");\r\n\r\n    var TEMPLATE_BEGIN = "<div id=\'quick-edit\' class=\'quick-edit modal instance\' style=\'left: {{left}}px; top: {{top}}px; width: {{width}}px;\'>",\r\n        TEMPLATE_END   = "<button id=\'quick-edit-outfocus\' style=\'width: 0; height: 0\'></button></div>";\r\n\r\n    var TEMPLATE_EDIT =\r\n        "<input type=\'text\' id=\'quick-edit-{{id}}\' class=\'quick-edit-input quick-edit-hint\' style=\'width: {{width}}px; height: {{height}}px; font-family: {{fontFamily}}; font-size: {{fontSize}}px\' value=\'{{text}}\' title=\'{{hint}}\'>";\r\n\r\n    var TEMPLATE_TEXTAREA =\r\n        "<textarea id=\'quick-edit-{{id}}\' class=\'quick-edit-textarea quick-edit-hint\' style=\'width: {{width}}px; height: {{height}}px; font-family: {{fontFamily}}; font-size: {{fontSize}}px\' title=\'{{hint}}\'>{{text}}</textarea>";\r\n\r\n    var TEMPLATE_DROPDOWN =\r\n        "<button id=\'quick-edit-{{id}}\' title=\'{{hint}}\' class=\'k-button icon-button small quick-edit-hint\' style=\'position: absolute; top: 0px; left: {{left}}px\'><span class=\'k-sprite\'></span></button>" +\r\n        "<div style=\'position: absolute; margin: 0; left: {{left}}px; top: 25px\'>" +\r\n            "<ul id=\'quick-edit-{{id}}-dropdown\' class=\'k-context-menu quick-edit-dropdown\' style=\'width: {{dropdownWidth}}px\'>" +\r\n                "{{#items}}" +\r\n                "<li data-data=\'{{value}}\'><span class=\'k-sprite {{icon}}\'></span>{{text}}</li>" +\r\n                "{{/items}}" +\r\n            "</ul>" +\r\n        "</div>";\r\n\r\n    var TEMPLATE_BUTTON =\r\n        "<button id=\'quick-edit-{{id}}\' class=\'k-button icon-button small quick-edit-hint\' style=\'position: absolute; top: {{top}}px; left: {{left}}px\' title=\'{{fullHint}}\'><span class=\'k-sprite {{icon}}\'></span></button>";\r\n\r\n    var TEMPLATE_COMBO =\r\n        "<div id=\'quick-edit-{{id}}-container\' class=\'quick-edit-hint quick-edit-combo\' style=\'position: absolute; left: {{left}}px; top: 0px\' title=\'{{hint}}\'>" +\r\n            "<label id=\'quick-edit-{{id}}\' class=\'widget k-combo small\' style=\'width: {{width}}px\'>" +\r\n                "<input type=\'text\' value=\'{{text}}\'>" +\r\n                "<select>" +\r\n                    "{{#items}}" +\r\n                    "<option value=\'{{value}}\'>{{text}}</option>" +\r\n                    "{{/items}}" +\r\n                "</select>" +\r\n            "</label>" +\r\n        "</div>";\r\n\r\n\r\n    var INPUT_WIDTH    = 60,\r\n        TEXTAREA_WIDTH = 60,\r\n        DROPDOWN_WIDTH = 25,\r\n        BUTTON_WIDTH   = 25,\r\n        BUTTON_HEIGHT  = 25,\r\n        COMBO_WIDTH    = 60;\r\n\r\n    /**\r\n     * QuickEdit List\r\n     * @type {}\r\n     */\r\n    var quickEditList = [];\r\n\r\n    /**\r\n     *\r\n     */\r\n    var currentQuickEdit = null;\r\n\r\n    /**\r\n     *\r\n     */\r\n    var currentQuickEditItems = {};\r\n\r\n    /**\r\n     *\r\n     */\r\n    var tooltip = null;\r\n\r\n\r\n    var _preventClose = false;\r\n\r\n    function renderItem(editor, view, item) {\r\n        currentQuickEditItems[item.id] = item;\r\n        switch (item.type) {\r\n        case \'input\':\r\n            item.width = item.width - 9; // padding\r\n            item.height = Math.round(item.height + 6);\r\n            item.fontFamily = view.font.face;\r\n            item.fontSize = Coord.valueTransform(editor.canvas.zoomFactor, view.font.size);\r\n            return Mustache.render(TEMPLATE_EDIT, item);\r\n        case \'textarea\':\r\n            item.width = item.width - 9; // padding\r\n            item.fontFamily = view.font.face;\r\n            item.fontSize = Coord.valueTransform(editor.canvas.zoomFactor, view.font.size);\r\n            return Mustache.render(TEMPLATE_TEXTAREA, item);\r\n        case \'dropdown\':\r\n            return Mustache.render(TEMPLATE_DROPDOWN, item);\r\n        case \'button\':\r\n            if (item.key) {\r\n                // TODO: This is temporal implementation of showing key-shortcuts.\r\n                var displayStr = item.key;\r\n                if (app.platform === "mac") {\r\n                    displayStr = displayStr.replace("Ctrl-", "Cmd-");\r\n                    displayStr = displayStr.replace("Delete", "Backspace");\r\n                }\r\n                item.fullHint = item.hint + " (" + KeyBindingManager.formatKeyDescriptor(displayStr) + ")";\r\n            } else {\r\n                item.fullHint = item.hint;\r\n            }\r\n            return Mustache.render(TEMPLATE_BUTTON, item);\r\n        case \'combo\':\r\n            return Mustache.render(TEMPLATE_COMBO, item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide Dropdowns\r\n     * @private\r\n     * @param {string} exceptId Exception Dropdown Id\r\n     */\r\n    function _hideDropdowns(exceptId) {\r\n        _.forEach(currentQuickEditItems, function (item) {\r\n            if ((item.type == \'dropdown\') && (item.id != exceptId)) {\r\n                $("#quick-edit-" + item.id).removeClass("k-state-selected");\r\n                $("#quick-edit-" + item.id + "-dropdown").hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    function buildItem(config, item, view) {\r\n        var $input,\r\n            $textarea,\r\n            $button,\r\n            $dropdown,\r\n            $edit,\r\n            $select;\r\n        switch (item.type) {\r\n        case \'input\':\r\n            $input = $("#quick-edit-" + item.id);\r\n            $input.change(function () {\r\n                var newValue = $(this).val();\r\n                var feedback = { success: true };\r\n                _triggerChangeEvent(config.id, item.id, view, newValue, feedback);\r\n                if (!feedback.success) {\r\n                    _preventClose = true;\r\n                    _.defer(function () {\r\n                        $("#quick-edit").effect("shake", { distance: 10 }, function () {\r\n                            // when shake animation completed.\r\n                            _preventClose = false;\r\n                            $input.select();\r\n                        });\r\n                    });\r\n                } else {\r\n                    $input.data(\'oldValue\', newValue);\r\n                }\r\n\r\n            });\r\n            $input.focus(function () {\r\n                $input.select();\r\n                _hideDropdowns(null);\r\n            });\r\n            $input.focus();\r\n            break;\r\n        case \'textarea\':\r\n            $textarea = $("#quick-edit-" + item.id);\r\n            $textarea.change(function () {\r\n                _triggerChangeEvent(config.id, item.id, view, $(this).val());\r\n            });\r\n            $textarea.focus(function () {\r\n                $textarea.select();\r\n                _hideDropdowns(null);\r\n            });\r\n            $textarea.focus();\r\n            break;\r\n        case \'dropdown\':\r\n            $button   = $("#quick-edit-" + item.id);\r\n            $dropdown = $("#quick-edit-" + item.id + "-dropdown");\r\n            $dropdown.kendoMenu({\r\n                orientation: \'vertical\',\r\n                select: function (e) {\r\n                    var value = e.item.dataset.data;\r\n                    if (value == "true") { value = true; }\r\n                    if (value == "false") { value = false; }\r\n                    setDropdownValue(item.id, value);\r\n                    $button.removeClass("k-state-selected");\r\n                    $dropdown.hide();\r\n                    _triggerChangeEvent(config.id, item.id, view, value);\r\n                }\r\n            });\r\n            $button.click(function () {\r\n                _hideDropdowns(item.id);\r\n                $button.toggleClass("k-state-selected");\r\n                $dropdown.toggle($button.hasClass("k-state-selected"));\r\n            });\r\n            break;\r\n        case \'button\':\r\n            $button   = $("#quick-edit-" + item.id);\r\n            $button.click(function () {\r\n                _hideDropdowns(null);\r\n                _triggerClickEvent(config.id, item.id, view);\r\n            });\r\n            break;\r\n        case \'combo\':\r\n            $edit  = $("#quick-edit-" + item.id + " > input");\r\n            $select = $("#quick-edit-" + item.id + " > select");\r\n\r\n            $edit.change(function () {\r\n                _triggerChangeEvent(config.id, item.id, view, $edit.val());\r\n            });\r\n\r\n            $select.val($edit.val());\r\n            $select.change(function () {\r\n                $edit.val($select.val());\r\n                $edit.change();\r\n            });\r\n            // (for Windows) To prevent immediate collapse of dropdown in comboBox.\r\n            $select.click(function (e) {\r\n                $select.focus();\r\n                e.stopPropagation();\r\n                return false;\r\n            });\r\n\r\n            $("#quick-edit-" + item.id + "-container input").focus(function () {\r\n                _hideDropdowns(null);\r\n            });\r\n            break;\r\n        }\r\n    }\r\n\r\n    function getWidth(item) {\r\n        var w = 0;\r\n        switch (item.type) {\r\n        case \'input\':\r\n            w = INPUT_WIDTH;\r\n            break;\r\n        case \'textarea\':\r\n            w = TEXTAREA_WIDTH;\r\n            break;\r\n        case \'dropdown\':\r\n            if (item.width) {\r\n                w = item.width;\r\n            } else {\r\n                w = DROPDOWN_WIDTH;\r\n            }\r\n            break;\r\n        case \'button\':\r\n            w = BUTTON_WIDTH;\r\n            break;\r\n        case \'combo\':\r\n            if (item.width) {\r\n                w = item.width;\r\n            } else {\r\n                w = COMBO_WIDTH;\r\n            }\r\n            break;\r\n        }\r\n        return w;\r\n    }\r\n\r\n    function getHeight(item) {\r\n        var h = 0;\r\n        switch (item.type) {\r\n        case \'button\':\r\n            h = BUTTON_HEIGHT;\r\n            break;\r\n        }\r\n        return h;\r\n    }\r\n\r\n    /**\r\n     * Get Double Clicked Position of Edge\r\n     * @param {GraphicClasses.Points} points\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @return {string} - \'center\' | \'tail\' | \'head\'\r\n     */\r\n    function getPositionOfEdge(points, x, y) {\r\n        var midPointIndex = 0,\r\n            midPoint = new Graphics.Point();\r\n        if (points.count() > 2) {\r\n            midPointIndex = Math.trunc(points.count() / 2);\r\n        } else {\r\n            midPointIndex = 0;\r\n        }\r\n        midPoint.x = Math.trunc((points.points[midPointIndex].x + points.points[midPointIndex+1].x) / 2);\r\n        midPoint.y = Math.trunc((points.points[midPointIndex].y + points.points[midPointIndex+1].y) / 2);\r\n        var L1 = Math.trunc(Math.sqrt(Math.pow(points.points[0].x - x,2) + Math.pow(points.points[0].y - y,2))),\r\n            L2 = Math.trunc(Math.sqrt(Math.pow(points.points[points.count()-1].x - x,2) + Math.pow(points.points[points.count()-1].y - y,2))),\r\n            L3 = Math.trunc(Math.sqrt(Math.pow(midPoint.x - x,2) + Math.pow(midPoint.y - y,2))),\r\n            minValue = Math.min(Math.min(L1, L2), L3);\r\n        if (minValue == L3) {\r\n            return \'center\';\r\n        } else {\r\n            if (minValue == L1) {\r\n                return \'tail\';\r\n            } else if (minValue == L2) {\r\n                return \'head\';\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render QuickEdit\r\n     *\r\n     * @param {Editor} editor\r\n     */\r\n    function render(editor, rect, view, config) {\r\n        Coord.coordTransform2(editor.canvas.zoomFactor, Graphics.GridFactor.NO_GRID, rect);\r\n\r\n        // insert html tags\r\n        var html = Mustache.render(TEMPLATE_BEGIN, {left: rect.x1, top: rect.y1, width: rect.getWidth()}),\r\n            item, x, y, w, h;\r\n        if (config.leftSection) {\r\n            x = -2;\r\n            y = 0;\r\n            w = rect.getWidth();\r\n            h = rect.getHeight();\r\n            _.forEach(config.leftSection, function (item) {\r\n                w = getWidth(item);\r\n                x = x - w;\r\n                item.left = x;\r\n                item.top = y;\r\n                item.width = w;\r\n                item.height = h;\r\n                html += renderItem(editor, view, item);\r\n            });\r\n        }\r\n\r\n        if (config.leftSection2) {\r\n            x = -2;\r\n            y = BUTTON_HEIGHT;\r\n            w = rect.getWidth();\r\n            h = rect.getHeight();\r\n            _.forEach(config.leftSection2, function (item) {\r\n                w = getWidth(item);\r\n                x = x - w;\r\n                item.left = x;\r\n                item.top = y;\r\n                item.width = w;\r\n                item.height = h;\r\n                html += renderItem(editor, view, item);\r\n            });\r\n        }\r\n\r\n        if (config.main) {\r\n            item = config.main;\r\n            item.left = rect.x1;\r\n            item.top = rect.y1;\r\n            item.width = rect.getWidth();\r\n            item.height = rect.getHeight();\r\n            html += renderItem(editor, view, item);\r\n        }\r\n\r\n        if (config.rightSection) {\r\n            x = rect.getWidth() + 3;\r\n            y = 0;\r\n            w = rect.getWidth();\r\n            h = rect.getHeight();\r\n            _.forEach(config.rightSection, function (item) {\r\n                w = getWidth(item);\r\n                item.left = x;\r\n                item.top = y;\r\n                item.width = w;\r\n                item.height = h;\r\n                html += renderItem(editor, view, item);\r\n                w = getWidth(item);\r\n                x = x + w;\r\n            });\r\n        }\r\n\r\n        if (config.rightSection2) {\r\n            x = rect.getWidth() + 3;\r\n            y = BUTTON_HEIGHT;\r\n            w = rect.getWidth();\r\n            h = rect.getHeight();\r\n            _.forEach(config.rightSection2, function (item) {\r\n                w = getWidth(item);\r\n                item.left = x;\r\n                item.top = y;\r\n                item.width = w;\r\n                item.height = h;\r\n                html += renderItem(editor, view, item);\r\n                w = getWidth(item);\r\n                x = x + w;\r\n            });\r\n        }\r\n\r\n        if (config.rightSection3) {\r\n            x = rect.getWidth() + 3;\r\n            y = BUTTON_HEIGHT * 2;\r\n            w = rect.getWidth();\r\n            h = rect.getHeight();\r\n            _.forEach(config.rightSection3, function (item) {\r\n                w = getWidth(item);\r\n                item.left = x;\r\n                item.top = y;\r\n                item.width = w;\r\n                item.height = h;\r\n                html += renderItem(editor, view, item);\r\n                w = getWidth(item);\r\n                x = x + w;\r\n            });\r\n        }\r\n\r\n        if (config.rightSection4) {\r\n            x = rect.getWidth() + 3;\r\n            y = BUTTON_HEIGHT * 3;\r\n            w = rect.getWidth();\r\n            h = rect.getHeight();\r\n            _.forEach(config.rightSection4, function (item) {\r\n                w = getWidth(item);\r\n                item.left = x;\r\n                item.top = y;\r\n                item.width = w;\r\n                item.height = h;\r\n                html += renderItem(editor, view, item);\r\n                w = getWidth(item);\r\n                x = x + w;\r\n            });\r\n        }\r\n\r\n        html += TEMPLATE_END;\r\n        $("body").append(html);\r\n        // bind events\r\n        if (config.leftSection) {\r\n            _.forEach(config.leftSection, function (item) {\r\n                buildItem(config, item, view);\r\n            });\r\n        }\r\n        if (config.leftSection2) {\r\n            _.forEach(config.leftSection2, function (item) {\r\n                buildItem(config, item, view);\r\n            });\r\n        }\r\n        if (config.main) {\r\n            buildItem(config, config.main, view);\r\n        }\r\n        if (config.rightSection) {\r\n            _.forEach(config.rightSection, function (item) {\r\n                buildItem(config, item, view);\r\n            });\r\n        }\r\n        if (config.rightSection2) {\r\n            _.forEach(config.rightSection2, function (item) {\r\n                buildItem(config, item, view);\r\n            });\r\n        }\r\n        if (config.rightSection3) {\r\n            _.forEach(config.rightSection3, function (item) {\r\n                buildItem(config, item, view);\r\n            });\r\n        }\r\n        if (config.rightSection4) {\r\n            _.forEach(config.rightSection4, function (item) {\r\n                buildItem(config, item, view);\r\n            });\r\n        }\r\n        // keydown events\r\n        $("#quick-edit").keydown(function (e) {\r\n            // default key actions\r\n            switch (e.which) {\r\n            case KeyEvent.DOM_VK_RETURN:\r\n                if (e.shiftKey) {\r\n                    // If shift key pressed, do not close.\r\n                } else {\r\n                    close(true);\r\n                }\r\n                break;\r\n            case KeyEvent.DOM_VK_ESCAPE:\r\n                close();\r\n                break;\r\n            case KeyEvent.DOM_VK_BACK_SPACE:\r\n                e.stopPropagation();\r\n                break;\r\n            case KeyEvent.DOM_VK_DELETE:\r\n                e.stopPropagation();\r\n                break;\r\n            case KeyEvent.DOM_VK_UP:\r\n            case KeyEvent.DOM_VK_DOWN:\r\n                if (e.ctrlKey || e.metaKey) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                }\r\n                break;\r\n            default:\r\n                // event.stopPropagation();\r\n                break;\r\n            }\r\n            _triggerKeydownEvent(config.id, item.id, view, e);\r\n        });\r\n        // Tooltips\r\n        /*\r\n        tooltip = $("#quick-edit").kendoTooltip({\r\n            filter: ".quick-edit-hint",\r\n            width: 100,\r\n            position: "top"\r\n        }).data("kendoTooltip");\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Set Input Value\r\n     */\r\n    function setInputValue(id, value) {\r\n        var $input = $("#quick-edit-" + id);\r\n        $input.val(value);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function setTextAreaValue(id, value) {\r\n        $("#quick-edit-" + id).val(value);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function setDropdownValue(id, value) {\r\n        var item = currentQuickEditItems[id];\r\n        if (item) {\r\n            _.forEach(item.items, function (option) {\r\n                if (option.value == value) {\r\n                    $("#quick-edit-" + id).empty();\r\n                    $("#quick-edit-" + id).append("<span class=\'k-sprite " + option.icon + "\'></span>");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function setComboBoxValue(id, value) {\r\n        var $edit   = $("#quick-edit-" + id + " > input"),\r\n            $select = $("#quick-edit-" + id + " > select");\r\n        $edit.val(value);\r\n        $select.val(value);\r\n    }\r\n\r\n    /**\r\n     * register QuickEdit\r\n     * @param {Object} data\r\n     */\r\n    function register(data) {\r\n        quickEditList.push(data);\r\n    }\r\n\r\n    /**\r\n     * Open QuickEdit on a specific view.\r\n     * @param {Editor} editor\r\n     * @param {View} view\r\n     * @param {number} x\r\n     * @param {number} y\r\n     */\r\n    function open(editor, view, x, y) {\r\n        var canvas   = $("#" + editor.canvasId),\r\n            offset   = canvas.offset(),\r\n            position = new Graphics.Point(offset.left, offset.top);\r\n        Coord.coordRevTransform(editor.canvas.zoomFactor, Graphics.GridFactor.NO_GRID, position);\r\n        close();\r\n        for (var i = 0; i < quickEditList.length; i++) {\r\n            var quickEdit = quickEditList[i];\r\n            var pass = {};\r\n            if (quickEdit.when(view, x, y, pass)) {\r\n                if (quickEdit.popup) {\r\n                    currentQuickEdit = quickEdit;\r\n                    currentQuickEditItems = {};\r\n                    quickEdit.popup(editor, position, view, pass);\r\n                }\r\n                if (quickEdit.init) {\r\n                    quickEdit.init(view, pass);\r\n                }\r\n                // select text in input field\r\n                $("#quick-edit > input[type=text]").select();\r\n                // Disable Scrolling\r\n                $("#diagram-area").css("overflow", "hidden");\r\n                // Trigger Event\r\n                _triggerOpenEvent(editor, view, x, y);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close QuickEdit\r\n     * @param {boolean} applyChanges\r\n     */\r\n    function close(applyChanges) {\r\n        // Apply Changes before Closing\r\n        if (applyChanges === true) {\r\n            // To trigger change events of input and textarea elements,\r\n            // Focus on a zero-sized button element.\r\n            $("#quick-edit-outfocus").focus();\r\n        }\r\n        // Prevent Closing\r\n        if (_preventClose) {\r\n            return;\r\n        }\r\n        // Hide Tooltips\r\n        if (tooltip) {\r\n            tooltip.hide();\r\n        }\r\n        // Remove QuickEdit\r\n        var $quickEdit = $("#quick-edit");\r\n        if ($quickEdit.length > 0) {\r\n            $("#quick-edit").remove();\r\n            _triggerCloseEvent();\r\n        }\r\n        // Enable Scrolling\r\n        $("#diagram-area").css("overflow", "scroll");\r\n        // Set Focus to Diagram Area (to allow Enter key to popup QuickEdit)\r\n        $("#diagram-canvas").focus();\r\n    }\r\n\r\n    /**\r\n     * Change Event\r\n     * @event module:ui/QuickEdit.change\r\n     * @property {string} id QuickEdit Id.\r\n     * @property {string} itemId Item Id.\r\n     * @property {View} view View\r\n     * @property {*} value Value\r\n     */\r\n    function _triggerChangeEvent(id, itemId, view, value, feedback) {\r\n        DiagramManager.suspendRepaint();\r\n        $(exports).triggerHandler(\'change\', [id, itemId, view, value, feedback]);\r\n        DiagramManager.resumeRepaint();\r\n    }\r\n\r\n    /**\r\n     * Click Event\r\n     * @event module:ui/QuickEdit.click\r\n     * @property {string} id QuickEdit Id.\r\n     * @property {string} itemId Item Id.\r\n     * @property {View} view View\r\n     * @property {*} value Value\r\n     */\r\n    function _triggerClickEvent(id, itemId, view) {\r\n        DiagramManager.suspendRepaint();\r\n        $(exports).triggerHandler(\'click\', [id, itemId, view]);\r\n        DiagramManager.resumeRepaint();\r\n    }\r\n\r\n    /**\r\n     * Keydown Event\r\n     * @event module:ui/QuickEdit.keydown\r\n     * @property {string} id QuickEdit Id.\r\n     * @property {string} itemId Item Id.\r\n     * @property {View} view View\r\n     * @property {JQuery.Event} event\r\n     */\r\n    function _triggerKeydownEvent(id, itemId, view, event) {\r\n        $(exports).triggerHandler(\'keydown\', [id, itemId, view, event]);\r\n    }\r\n\r\n    /**\r\n     * Open Event\r\n     * @event module:ui/QuickEdit.open\r\n     * @property {Editor} editor Diagram Editor\r\n     * @property {View} view View\r\n     * @property {number} x\r\n     * @property {number} y\r\n     */\r\n    function _triggerOpenEvent(editor, view, x, y) {\r\n        $(exports).triggerHandler(\'open\', [editor, view, x, y]);\r\n    }\r\n\r\n    /**\r\n     * Close Event\r\n     * @event module:ui/QuickEdit.close\r\n     */\r\n    function _triggerCloseEvent() {\r\n        $(exports).triggerHandler(\'close\', []);\r\n    }\r\n\r\n    function addInQuickEdit(parentModel, field, parentView, compartmentField, Type, namePrefix, initializer) {\r\n        var item = new Type();\r\n        item.name = Core.getNewName(parentModel[field], namePrefix);\r\n        if (initializer) {\r\n            initializer(item);\r\n        }\r\n        Engine.addModel(parentModel, field, item);\r\n        close();\r\n        _.defer(function () {\r\n            _.each(parentView[compartmentField].subViews, function (subView) {\r\n                if (subView.model._id == item._id) {\r\n                    open(DiagramManager.getEditor(), subView, subView.left, subView.top);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    function deleteInQuickEdit(compartmentItemView) {\r\n        var idx = _.indexOf(compartmentItemView._parent.subViews, compartmentItemView);\r\n        Engine.deleteElements([compartmentItemView.model], []);\r\n        close();\r\n        var subView = compartmentItemView._parent.subViews[idx];\r\n        if (subView) {\r\n            _.defer(function () {\r\n                open(DiagramManager.getEditor(), subView, subView.left, subView.top);\r\n            });\r\n        }\r\n    }\r\n\r\n    function openUpInQuickEdit(compartmentItemView) {\r\n        var idx = _.indexOf(compartmentItemView._parent.subViews, compartmentItemView);\r\n        if (idx > 0) {\r\n            var target = compartmentItemView._parent.subViews[idx - 1];\r\n            _.defer(function () {\r\n                open(DiagramManager.getEditor(), target, target.left, target.top);\r\n            });\r\n        }\r\n    }\r\n\r\n    function openDownInQuickEdit(compartmentItemView) {\r\n        var idx = _.indexOf(compartmentItemView._parent.subViews, compartmentItemView);\r\n        if (idx < (compartmentItemView._parent.subViews.length - 1)) {\r\n            var target = compartmentItemView._parent.subViews[idx + 1];\r\n            _.defer(function () {\r\n                open(DiagramManager.getEditor(), target, target.left, target.top);\r\n            });\r\n        }\r\n    }\r\n\r\n    function moveUpInQuickEdit(parentModel, field, compartmentItemView) {\r\n        Engine.moveUp(parentModel, field, compartmentItemView.model);\r\n        close();\r\n        _.defer(function () {\r\n            _.each(compartmentItemView._parent.subViews, function (subView) {\r\n                if (subView.model._id == compartmentItemView.model._id) {\r\n                    open(DiagramManager.getEditor(), subView, subView.left, subView.top);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    function moveDownInQuickEdit(parentModel, field, compartmentItemView) {\r\n        Engine.moveDown(parentModel, field, compartmentItemView.model);\r\n        close();\r\n        _.defer(function () {\r\n            _.each(compartmentItemView._parent.subViews, function (subView) {\r\n                if (subView.model._id == compartmentItemView.model._id) {\r\n                    open(DiagramManager.getEditor(), subView, subView.left, subView.top);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    function getHeadNodes(view, edgeType) {\r\n        var edges = _.filter(Repository.getEdgeViewsOf(view), function (e) {\r\n            return (e instanceof edgeType && e.tail === view);\r\n        });\r\n        var nodes = _.map(edges, function (e) { return e.head; });\r\n        return nodes;\r\n    }\r\n\r\n    function getTailNodes(view, edgeType) {\r\n        var edges = _.filter(Repository.getEdgeViewsOf(view), function (e) {\r\n            return (e instanceof edgeType && e.head === view);\r\n        });\r\n        var nodes = _.map(edges, function (e) { return e.tail; });\r\n        return nodes;\r\n    }\r\n\r\n    function getBothNodes(view, edgeType, predicate) {\r\n        var edges = _.filter(Repository.getEdgeViewsOf(view), function (e) {\r\n            return (e instanceof edgeType && (predicate ? predicate(e) : true));\r\n        });\r\n        var nodes = _.map(edges, function (e) {\r\n            if (e.head === view) {\r\n                return e.tail;\r\n            } else {\r\n                return e.head;\r\n            }\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    function setInside(rect) {\r\n        if (rect.x1 < 0) { rect.x1 = 0; }\r\n        if (rect.x2 < 0) { rect.x2 = 0; }\r\n        if (rect.y1 < 0) { rect.y1 = 0; }\r\n        if (rect.y2 < 0) { rect.y2 = 0; }\r\n    }\r\n\r\n    function getEdgeViewOption(fromView, toView) {\r\n        return {\r\n            tailView  : fromView,\r\n            headView  : toView,\r\n            tailModel : fromView.model || null,\r\n            headModel : toView.model || null\r\n        };\r\n    }\r\n\r\n    function getTopPosition(view, refNodes, gap) {\r\n        gap = gap || 100;\r\n        var rect = {\r\n            x1: view.left,\r\n            y1: view.top - gap,\r\n            x2: view.left,\r\n            y2: view.top - gap\r\n        };\r\n        if (refNodes.length > 0) {\r\n            var rightMost = _.max(refNodes, function (e) { return e.getRight(); });\r\n            if (Graphics.Coord.rectInRect(rightMost.getBoundingBox(), DiagramManager.getDiagramArea())) {\r\n                rect = {\r\n                    x1 : rightMost.getRight() + 10,\r\n                    y1 : rightMost.top,\r\n                    x2 : rightMost.getRight() + 20,\r\n                    y2 : rightMost.top + 10\r\n                };\r\n            }\r\n        }\r\n        setInside(rect);\r\n        return rect;\r\n    }\r\n\r\n    function getBottomPosition(view, refNodes, gap) {\r\n        gap = gap || 70;\r\n        var rect = {\r\n            x1: view.left,\r\n            y1: view.getBottom() + gap,\r\n            x2: view.left,\r\n            y2: view.getBottom() + gap\r\n        };\r\n        if (refNodes.length > 0) {\r\n            var rightMost = _.max(refNodes, function (e) { return e.getRight(); });\r\n            if (Graphics.Coord.rectInRect(rightMost.getBoundingBox(), DiagramManager.getDiagramArea())) {\r\n                rect = {\r\n                    x1 : rightMost.getRight() + 10,\r\n                    y1 : rightMost.top,\r\n                    x2 : rightMost.getRight() + 20,\r\n                    y2 : rightMost.top + 10\r\n                };\r\n            }\r\n        }\r\n        setInside(rect);\r\n        return rect;\r\n    }\r\n\r\n    function getLeftPosition(view, refNodes) {\r\n        var rect = {\r\n            x1: view.left - 100,\r\n            y1: view.top,\r\n            x2: view.left - 100,\r\n            y2: view.top\r\n        };\r\n        if (refNodes.length > 0) {\r\n            var bottomMost = _.max(refNodes, function (e) { return e.getBottom(); });\r\n            if (Graphics.Coord.rectInRect(bottomMost.getBoundingBox(), DiagramManager.getDiagramArea())) {\r\n                rect = {\r\n                    x1 : bottomMost.left,\r\n                    y1 : bottomMost.getBottom() + 10,\r\n                    x2 : bottomMost.getRight(),\r\n                    y2 : bottomMost.getBottom() + 20\r\n                };\r\n            }\r\n        }\r\n        setInside(rect);\r\n        return rect;\r\n    }\r\n\r\n    function getRightPosition(view, refNodes) {\r\n        var rect = {\r\n            x1: view.getRight() + 70,\r\n            y1: view.top,\r\n            x2: view.getRight() + 70,\r\n            y2: view.top\r\n        };\r\n        if (refNodes.length > 0) {\r\n            var bottomMost = _.max(refNodes, function (e) { return e.getBottom(); });\r\n            if (Graphics.Coord.rectInRect(bottomMost.getBoundingBox(), DiagramManager.getDiagramArea())) {\r\n                rect = {\r\n                    x1 : bottomMost.left,\r\n                    y1 : bottomMost.getBottom() + 10,\r\n                    x2 : bottomMost.getRight(),\r\n                    y2 : bottomMost.getBottom() + 20\r\n                };\r\n            }\r\n        }\r\n        setInside(rect);\r\n        return rect;\r\n    }\r\n\r\n\r\n    // Define public API\r\n    exports.render            = render;\r\n    exports.setInputValue     = setInputValue;\r\n    exports.setTextAreaValue  = setTextAreaValue;\r\n    exports.setDropdownValue  = setDropdownValue;\r\n    exports.setComboBoxValue  = setComboBoxValue;\r\n    exports.getPositionOfEdge = getPositionOfEdge;\r\n    exports.register          = register;\r\n    exports.open              = open;\r\n    exports.close             = close;\r\n\r\n    exports.addInQuickEdit      = addInQuickEdit;\r\n    exports.deleteInQuickEdit   = deleteInQuickEdit;\r\n    exports.openUpInQuickEdit   = openUpInQuickEdit;\r\n    exports.openDownInQuickEdit = openDownInQuickEdit;\r\n    exports.moveUpInQuickEdit   = moveUpInQuickEdit;\r\n    exports.moveDownInQuickEdit = moveDownInQuickEdit;\r\n\r\n    exports.getHeadNodes = getHeadNodes;\r\n    exports.getTailNodes = getTailNodes;\r\n    exports.getBothNodes = getBothNodes;\r\n\r\n    exports.setInside         = setInside;\r\n    exports.getEdgeViewOption = getEdgeViewOption;\r\n    exports.getTopPosition    = getTopPosition;\r\n    exports.getBottomPosition = getBottomPosition;\r\n    exports.getLeftPosition   = getLeftPosition;\r\n    exports.getRightPosition  = getRightPosition;\r\n\r\n});\r\n\n//# sourceURL=/ui/QuickEdit.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, Mustache, app, document */\r\n\r\n/**\r\n * MenuManager\r\n */\r\ndefine(\'menu/MenuManager\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Global\',\'utils/Helper\',\'command/Commands\',\'command/CommandManager\',\'command/KeyBindingManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit           = require("utils/AppInit"),\r\n        global            = require("core/Global").global,\r\n        Helper            = require("utils/Helper"),\r\n        Commands          = require("command/Commands"),\r\n        CommandManager    = require("command/CommandManager"),\r\n        KeyBindingManager = require("command/KeyBindingManager");\r\n\r\n    /**\r\n     * Error Codes from AppShell\r\n     * @enum {number}\r\n     */\r\n    var NO_ERROR           = 0,\r\n        ERR_UNKNOWN        = 1,\r\n        ERR_INVALID_PARAMS = 2,\r\n        ERR_NOT_FOUND      = 3;\r\n\r\n    /**\r\n     * Insertion position constants\r\n     * Used by addMenu(), addMenuItem(), and addSubMenu() to\r\n     * specify the relative position of a newly created menu object\r\n     * @enum {string}\r\n     */\r\n    var BEFORE           = "before",\r\n        AFTER            = "after",\r\n        FIRST            = "first",\r\n        LAST             = "last",\r\n        FIRST_IN_SECTION = "firstInSection",\r\n        LAST_IN_SECTION  = "lastInSection";\r\n\r\n    /**\r\n     * Other constants\r\n     */\r\n    var DIVIDER = "---";\r\n\r\n    /**\r\n     * Menu Data\r\n     */\r\n    var menuData = [];\r\n\r\n    /**\r\n     * Maps menuID\'s to Menu objects\r\n     * @type {Object.<string, Menu>}\r\n     * @private\r\n     */\r\n    var menuMap = {};\r\n\r\n    /**\r\n     * Maps menuItemID\'s to MenuItem objects\r\n     * @type {Object.<string, MenuItem>}\r\n     * @private\r\n     */\r\n    var menuItemMap = {};\r\n\r\n\r\n    var $menubar,\r\n        $mainView;\r\n\r\n    /**\r\n     * Kendo Menu Object\r\n     * @private\r\n     */\r\n    var kendoMenu;\r\n\r\n    /**\r\n     * Add menuItem to a given position\r\n     * @private\r\n     */\r\n    function _addToPosition(array, dataItem, position, relativeId) {\r\n        var relativeItem,\r\n            relativeItemIdx;\r\n\r\n        if (relativeId) {\r\n            relativeItem = _.find(\r\n                array,\r\n                function (item) {\r\n                    return item.id === relativeId;\r\n                }\r\n            );\r\n            relativeItemIdx = _.indexOf(array, relativeItem);\r\n        }\r\n        switch (position) {\r\n        case FIRST:\r\n            array.unshift(dataItem);\r\n            break;\r\n        case LAST:\r\n            array.push(dataItem);\r\n            break;\r\n        case BEFORE:\r\n            array.splice(relativeItemIdx, 0, dataItem);\r\n            break;\r\n        case AFTER:\r\n            array.splice(relativeItemIdx + 1, 0, dataItem);\r\n            break;\r\n        case FIRST_IN_SECTION:\r\n            // TODO: Support FIRST_IN_SECTION\r\n            break;\r\n        case LAST_IN_SECTION:\r\n            // TODO: Support LAST_IN_SECTION\r\n            break;\r\n        default:\r\n            array.push(dataItem);\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Return shortcut key string for commandID\r\n     * @private\r\n     * @param {string} commandID\r\n     * @return {string}\r\n     */\r\n    function _getDisplayKey(commandID) {\r\n        var bindings = KeyBindingManager.getKeyBindings(commandID),\r\n            binding,\r\n            bindingStr = "",\r\n            displayStr = "";\r\n        if (bindings && bindings.length > 0) {\r\n            binding = bindings[bindings.length - 1];\r\n            bindingStr = binding.displayKey || binding.key;\r\n        }\r\n        if (bindingStr.length > 0) {\r\n            displayStr = KeyBindingManager.formatKeyDescriptor(bindingStr);\r\n        }\r\n        return displayStr;\r\n    }\r\n\r\n    /**\r\n     * Return menu name with display key\r\n     */\r\n    function _getMenuString(name, displayKey) {\r\n        var str = name;\r\n        if (displayKey && displayKey.length > 0) {\r\n\r\n        }\r\n        var _key = "<span style=\'margin-right: {{margin}}em;\'></span><span class=\'key-binding\' style=\'position: absolute; right: 0; margin-right: 1.2em;\'>{{key}}</span>";\r\n        str += Mustache.render(_key, { margin: displayKey.length / 2, key: displayKey});\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the Menu object for the corresponding id.\r\n     * @param {string} id Unique identifier or command id for Menu.\r\n     * @return {Menu} Menu Object\r\n     */\r\n    function getMenu(id) {\r\n        return menuMap[id];\r\n    }\r\n\r\n    /**\r\n     * Retrieves the map of all Menu objects.\r\n     * @return {Object.<string, Menu>} Map of All Menus.\r\n     */\r\n    function getAllMenus() {\r\n        return menuMap;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the MenuItem object for the corresponding id.\r\n     * @param {string} id Unique identifier or command id for MenuItem.\r\n     * @return {MenuItem} MenuItem Object\r\n     */\r\n    function getMenuItem(id) {\r\n        return menuItemMap[id];\r\n    }\r\n\r\n    var _menuDividerIDCount = 1;\r\n    function _getNextMenuItemDividerID() {\r\n        return "staruml-menuDivider-" + _menuDividerIDCount++;\r\n    }\r\n\r\n\r\n    function isHTMLMenu() {\r\n        return (!app.nativeMenus);\r\n    }\r\n\r\n    /**\r\n     * MenuEntry.\r\n     * Abstraction of Menu and MenuItem.\r\n     * @constructor\r\n     * @param {string} id\r\n     * @param {string} text\r\n     */\r\n    function MenuEntry(id, text) {\r\n\r\n        /** @member {string} */\r\n        this.id = id;\r\n\r\n        /** @member {string} */\r\n        this.text = text;\r\n\r\n        /** @member {string} */\r\n        this.data = id; // for "data-data" attribute for HTML menu item\r\n\r\n        /** @member {Array.<MenuEntry>} */\r\n        this.items = [];\r\n    }\r\n\r\n    /**\r\n     * Add MenuItem\r\n     * @param {!string | Command} commandId\r\n     * @param {} keyBindings\r\n     * @param {?string} position\r\n     * @param {?string} relativeId\r\n     * @param {?string} iconClass\r\n     */\r\n    MenuEntry.prototype.addMenuItem = function (command, keyBindings, position, relativeId, iconClass) {\r\n        var menuId = this.id,\r\n            menuItem,\r\n            id,\r\n            name,\r\n            commandID;\r\n\r\n        if (!command) {\r\n            console.error("addMenuItem(): missing required parameters: command");\r\n            return null;\r\n        }\r\n\r\n        if (typeof (command) === "string") {\r\n            if (command === DIVIDER) {\r\n                name = DIVIDER;\r\n                commandID = _getNextMenuItemDividerID();\r\n            } else {\r\n                commandID = command;\r\n                command = CommandManager.get(commandID);\r\n                if (!command) {\r\n                    console.error("addMenuItem(): commandID not found: " + commandID);\r\n                    return null;\r\n                }\r\n                name = command.getName();\r\n            }\r\n        } else {\r\n            commandID = command.getID();\r\n            name = command.getName();\r\n        }\r\n\r\n        id = commandID;\r\n        if (menuItemMap[id]) {\r\n            console.log("MenuItem added with same id of existing MenuItem: " + id);\r\n            return null;\r\n        }\r\n\r\n        menuItem = new MenuItem(id, command, name, iconClass);\r\n        _addToPosition(this.items, menuItem, position, relativeId); // add to sub menu items\r\n        menuItemMap[id] = menuItem; // register to menuItemMap\r\n\r\n        // Set KeyBinding Display\r\n        var bindings = KeyBindingManager.getKeyBindings(commandID),\r\n            binding,\r\n            bindingStr = "",\r\n            displayStr = "";\r\n        if (bindings && bindings.length > 0) {\r\n            binding = bindings[bindings.length - 1];\r\n            bindingStr = binding.displayKey || binding.key;\r\n        }\r\n        if (bindingStr.length > 0) {\r\n            displayStr = KeyBindingManager.formatKeyDescriptor(bindingStr);\r\n        }\r\n\r\n        // Add Menu Item as Native or HTML\r\n        if (isHTMLMenu()) {\r\n            if (command === DIVIDER) {\r\n                if (this.$element) {\r\n                    var dividerJson = {\r\n                        text: "<hr size=\'0px\'>",\r\n                        data: id,\r\n                        encoded: false,\r\n                        enabled: false,\r\n                        cssClass: "k-menu-separator"\r\n                    };\r\n                    kendoMenu.append([dividerJson], this.$element);\r\n                    menuItem.$element = $(\'li[data-data=""\' + id + \'""]\', this.$element);\r\n                } else {\r\n                    menuItem.text = "<hr size=\'0px\'>";\r\n                    menuItem.encoded = false;\r\n                    menuItem.enabled = false;\r\n                    menuItem.cssClass = "k-menu-separator";\r\n                }\r\n            } else {\r\n                if (this.$element) { // HTML Menu is already built.\r\n                    var jsonItem = {\r\n                        text: _getMenuString(name, displayStr),\r\n                        data: id,\r\n                        encoded: false,\r\n                        items: [],\r\n                        spriteCssClass: iconClass\r\n                    };\r\n                    kendoMenu.append([jsonItem], this.$element);\r\n                    menuItem.$element = $(\'li[data-data=""\' + id + \'""]\', this.$element);\r\n                } else { // HTML Menu is not yey build\r\n                    if (displayStr.length > 0) {\r\n                        menuItem.text = _getMenuString(name, displayStr);\r\n                        menuItem.encoded = false;\r\n                    }\r\n                }\r\n            }\r\n            menuItem.isNative = false;\r\n        } else {\r\n            appshell.app.addMenuItem(menuId, name, commandID, bindingStr, displayStr, position, relativeId, function (err) {\r\n                switch (err) {\r\n                case NO_ERROR:\r\n                    break;\r\n                case ERR_INVALID_PARAMS:\r\n                    console.error("addMenuItem(): Invalid Parameters when adding the command " + commandID);\r\n                    break;\r\n                case ERR_NOT_FOUND:\r\n                    console.error("_getRelativeMenuItem(): MenuItem with Command id " + relativeId + " not found in the Menu " + menuId);\r\n                    break;\r\n                default:\r\n                    console.error("addMenuItem(); Unknown Error (" + err + ") when adding the command " + commandID);\r\n                }\r\n            });\r\n            menuItem.isNative = true;\r\n        }\r\n\r\n        // Initialize MenuItem state\r\n        if (menuItem.isDivider) {\r\n            menuItem.dividerId = commandID;\r\n        } else {\r\n            if (keyBindings) {\r\n                // Add key bindings. The MenuItem listens to the Command object to update MenuItem DOM with shortcuts.\r\n                if (!Array.isArray(keyBindings)) {\r\n                    keyBindings = [keyBindings];\r\n                }\r\n            }\r\n\r\n            // Note that keyBindings passed during MenuItem creation take precedent over any existing key bindings\r\n            KeyBindingManager.addBinding(commandID, keyBindings);\r\n\r\n            // Look for existing key bindings\r\n            // _addExistingKeyBinding(menuItem, commandID);\r\n\r\n            menuItem._checkedChanged();\r\n            menuItem._enabledChanged();\r\n            menuItem._nameChanged();\r\n        }\r\n\r\n        return menuItem;\r\n    };\r\n\r\n    /**\r\n     * Add Menu Divier\r\n     */\r\n    MenuEntry.prototype.addMenuDivider = function (position, relativeId) {\r\n        this.addMenuItem(DIVIDER, "", position, relativeId);\r\n    };\r\n\r\n    /**\r\n     * Removes the specified menu item from this Menu. Key bindings are unaffected; use KeyBindingManager\r\n     * directly to remove key bindings if desired.\r\n     *\r\n     * @param {!string | Command} command - command the menu would execute if we weren\'t deleting it.\r\n     */\r\n    MenuEntry.prototype.removeMenuItem = function (command) {\r\n        var menuItemID,\r\n            commandID,\r\n            menuItem;\r\n\r\n        if (!command) {\r\n            console.error("removeMenuItem(): missing required parameters: command");\r\n            return;\r\n        }\r\n\r\n        if (typeof (command) === "string") {\r\n            var commandObj = CommandManager.get(command);\r\n            if (!commandObj) {\r\n                console.error("removeMenuItem(): command not found: " + command);\r\n                return;\r\n            }\r\n\r\n            commandID = command;\r\n        } else {\r\n            commandID = command.getID();\r\n        }\r\n        menuItemID = commandID;\r\n        menuItem = getMenuItem(menuItemID);\r\n\r\n        // Remove all sub menu items\r\n        if (menuItem) {\r\n            _.forEach(menuItem.items, function (item, idx) {\r\n                if (item.isDivider) {\r\n                    menuItem.removeMenuDivider(item.id);\r\n                } else {\r\n                    commandID = item.getCommand();\r\n                    menuItem.removeMenuItem(commandID);\r\n                }\r\n            });\r\n            menuItem.items = [];\r\n\r\n        }\r\n\r\n        // Remove this menu item.\r\n        if (isHTMLMenu()) {\r\n            if (menuItem && menuItem.$element) {\r\n                menuItem.$element.remove();\r\n            }\r\n        } else {\r\n            appshell.app.removeMenuItem(menuItemID, function (err) {\r\n                if (err) {\r\n                    console.error("removeMenuItem() -- command not found: " + commandID + " (error: " + err + ")");\r\n                }\r\n            });\r\n        }\r\n\r\n        delete menuItemMap[menuItemID];\r\n    };\r\n\r\n    /**\r\n     * Removes the specified menu divider from this Menu.\r\n     *\r\n     * @param {!string} menuItemID - the menu item id of the divider to remove.\r\n     */\r\n    MenuEntry.prototype.removeMenuDivider = function (menuItemID) {\r\n        var menuItem;\r\n\r\n        if (!menuItemID) {\r\n            console.error("removeMenuDivider(): missing required parameters: menuItemID");\r\n            return;\r\n        }\r\n\r\n        menuItem = getMenuItem(menuItemID);\r\n\r\n        if (!menuItem) {\r\n            console.error("removeMenuDivider(): parameter menuItemID: %s is not a valid menu item id", menuItemID);\r\n            return;\r\n        }\r\n\r\n        if (!menuItem.isDivider) {\r\n            console.error("removeMenuDivider(): parameter menuItemID: %s is not a menu divider", menuItemID);\r\n            return;\r\n        }\r\n\r\n        appshell.app.removeMenuItem(menuItem.dividerId, function (err) {\r\n            if (err) {\r\n                console.error("removeMenuDivider() -- divider not found: %s (error: %s)", menuItemID, err);\r\n            }\r\n        });\r\n\r\n        if (!menuItemMap[menuItemID]) {\r\n            console.error("removeMenuDivider(): menu divider not found in menuItemMap: %s", menuItemID);\r\n            return;\r\n        }\r\n\r\n        delete menuItemMap[menuItemID];\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Menu\r\n     * @constructor\r\n     */\r\n    function Menu(id, text) {\r\n        MenuEntry.call(this, id, text);\r\n    }\r\n    Menu.prototype = Object.create(MenuEntry.prototype);\r\n    Menu.prototype.constructor = Menu;\r\n    Menu.prototype.parentClass = MenuEntry.prototype;\r\n\r\n    /**\r\n     * Menu Item\r\n     * @constructor\r\n     */\r\n    function MenuItem(id, command, text, iconClass) {\r\n        MenuEntry.call(this, id, text);\r\n        this.isDivider = (command === DIVIDER);\r\n        this.isNative = !isHTMLMenu();\r\n        this.spriteCssClass = iconClass;\r\n        if (!this.isDivider) {\r\n            // Bind event handlers\r\n            this._enabledChanged = this._enabledChanged.bind(this);\r\n            this._checkedChanged = this._checkedChanged.bind(this);\r\n            this._visibleChanged = this._visibleChanged.bind(this);\r\n            this._nameChanged = this._nameChanged.bind(this);\r\n            this._keyBindingAdded = this._keyBindingAdded.bind(this);\r\n            this._keyBindingRemoved = this._keyBindingRemoved.bind(this);\r\n            this._command = command;\r\n            $(this._command)\r\n                .on("enabledStateChange", this._enabledChanged)\r\n                .on("checkedStateChange", this._checkedChanged)\r\n                .on("visibleStateChange", this._visibleChanged)\r\n                .on("nameChange", this._nameChanged)\r\n                .on("keyBindingAdded", this._keyBindingAdded)\r\n                .on("keyBindingRemoved", this._keyBindingRemoved);\r\n        }\r\n    }\r\n    MenuItem.prototype = Object.create(MenuEntry.prototype);\r\n    MenuItem.prototype.constructor = MenuItem;\r\n    MenuItem.prototype.parentClass = MenuEntry.prototype;\r\n\r\n    /**\r\n     * Synchronizes MenuItem checked state with underlying Command checked state\r\n     */\r\n    MenuItem.prototype._checkedChanged = function () {\r\n        var checked = !!this._command.getChecked();\r\n        if (this.isNative) {\r\n            var enabled = !!this._command.getEnabled();\r\n            appshell.app.setMenuItemState(this._command.getID(), enabled, checked, function (err) {\r\n                if (err) {\r\n                    console.log("Error setting menu item state: " + err);\r\n                }\r\n            });\r\n        } else {\r\n            // HTML Menu\r\n            if (this.$element) {\r\n                var $inside = $("span.k-link", this.$element),\r\n                    $checkIcon = $inside.children("span.k-i-tick");\r\n                if (checked) {\r\n                    if ($checkIcon.length === 0) {\r\n                        $inside.prepend("<span class=\'k-icon k-i-tick\'></span>");\r\n                    }\r\n                } else {\r\n                    $checkIcon.remove();\r\n                }\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Synchronizes MenuItem enabled state with underlying Command enabled state\r\n     */\r\n    MenuItem.prototype._enabledChanged = function () {\r\n        var enabled = !!this._command.getEnabled();\r\n        if (this.isNative) {\r\n            var checked = !!this._command.getChecked();\r\n            appshell.app.setMenuItemState(this._command.getID(), enabled, checked, function (err) {\r\n                if (err) {\r\n                    console.log("Error setting menu item state: " + err);\r\n                }\r\n            });\r\n        } else {\r\n            // HTML Menu\r\n            if (this.$element) {\r\n                this.$element.toggleClass("k-state-disabled", !enabled);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Synchronizes MenuItem visible state with underlying Command visible state\r\n     * (Temporally visible is same with enabled)\r\n     */\r\n    MenuItem.prototype._visibleChanged = function () {\r\n        var visible = !!this._command.getVisible();\r\n        if (this.isNative) {\r\n            var checked = !!this._command.getChecked();\r\n            appshell.app.setMenuItemState(this._command.getID(), visible, checked, function (err) {\r\n                if (err) {\r\n                    console.log("Error setting menu item state: " + err);\r\n                }\r\n            });\r\n        } else {\r\n            // HTML Menu\r\n            if (this.$element) {\r\n                this.$element.toggle(visible);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Synchronizes MenuItem name with underlying Command name\r\n     */\r\n    MenuItem.prototype._nameChanged = function () {\r\n        var self = this;\r\n        if (this.isNative) {\r\n            appshell.app.setMenuTitle(this._command.getID(), this._command.getName(), function (err) {\r\n                if (err) {\r\n                    console.log(self._command);\r\n                    console.log("Error setting menu title: " + err);\r\n                }\r\n            });\r\n        } else {\r\n            // HTML Menu\r\n            if (!this.$element) {\r\n                this.text = _getMenuString(this._command.getName(), _getDisplayKey(this._command.getID()));\r\n                this.encoded = false;\r\n            } else {\r\n                var $inside = $("span.k-link", this.$element);\r\n                $inside.html(_getMenuString(this._command.getName(), _getDisplayKey(this._command.getID())));\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Updates MenuItem DOM with a keyboard shortcut label\r\n     */\r\n    MenuItem.prototype._keyBindingAdded = function (event, keyBinding) {\r\n        var shortcutKey = keyBinding.displayKey || keyBinding.key;\r\n        if (this.isNative) {\r\n            appshell.app.setMenuItemShortcut(this._command.getID(), shortcutKey, KeyBindingManager.formatKeyDescriptor(shortcutKey), function (err) {\r\n                if (err) {\r\n                    console.error("Error setting menu item shortcut: " + err);\r\n                }\r\n            });\r\n        } else {\r\n            // HTML Menu\r\n            if (!this.$element) {\r\n                this.text = _getMenuString(this._command.getName(), _getDisplayKey(this._command.getID()));\r\n                this.encoded = false;\r\n            } else {\r\n                var $inside = $("span.k-link", this.$element);\r\n                $inside.html(_getMenuString(this._command.getName(), _getDisplayKey(this._command.getID())));\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * Updates MenuItem DOM to remove keyboard shortcut label\r\n     */\r\n    MenuItem.prototype._keyBindingRemoved = function (event, keyBinding) {\r\n        if (this.isNative) {\r\n            appshell.app.setMenuItemShortcut(this._command.getID(), "", "", function (err) {\r\n                if (err) {\r\n                    console.error("Error setting menu item shortcut: " + err);\r\n                }\r\n            });\r\n        } else {\r\n            // HTML Menu\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the Command associated with a MenuItem\r\n     * @return {Command}\r\n     */\r\n    MenuItem.prototype.getCommand = function () {\r\n        return this._command;\r\n    };\r\n\r\n    // ----\r\n\r\n    /**\r\n     * Add Menu\r\n     * @param {string | Command} id\r\n     *     Unique identifier for Menu. Typically use the id of command corresponding the menu.\r\n     * @param {?string} position - constant defining the position of new MenuItem relative to\r\n     *      other MenuItems. Values:\r\n     *          - With no relativeID, use Menus.FIRST or LAST (default is LAST)\r\n     *          - Relative to a command id, use BEFORE or AFTER (required)\r\n     *          - Relative to a MenuSection, use FIRST_IN_SECTION or LAST_IN_SECTION (required)\r\n     * @param {?string} relativeId - command id. Required for all position constants except FIRST and LAST.\r\n     */\r\n    function addMenu(id, position, relativeId) {\r\n        var menu,\r\n            commandID,\r\n            _id,\r\n            name;\r\n\r\n        if (!id) {\r\n            console.error("addMenu(): missing required parameters: id");\r\n            return null;\r\n        }\r\n\r\n        if (typeof (id) === "string") {\r\n            commandID = id;\r\n            id = CommandManager.get(commandID);\r\n            if (!id) {\r\n                console.error("addMenu(): commandID not found: " + commandID);\r\n                return null;\r\n            }\r\n            name = id.getName();\r\n        } else {\r\n            commandID = id.getID();\r\n            name = id.getName();\r\n        }\r\n\r\n        // Guard against duplicate menu ids\r\n        _id = commandID;\r\n        if (menuMap[_id]) {\r\n            console.error("Menu added with same name and id of existing Menu: " + _id);\r\n            return null;\r\n        }\r\n\r\n        menu = new Menu(_id, name);\r\n        menuMap[_id] = menu; // register to menuMap\r\n        _addToPosition(menuData, menu, position, relativeId); // add to menuData\r\n\r\n        if (isHTMLMenu()) {\r\n            // ...\r\n        } else {\r\n            appshell.app.addMenu(name, _id, position, relativeId, function (err) {\r\n                switch (err) {\r\n                case NO_ERROR:\r\n                    // Make sure name is up to date\r\n                    appshell.app.setMenuTitle(_id, name, function (err) {\r\n                        if (err) {\r\n                            console.error("setMenuTitle() -- error: " + err);\r\n                        }\r\n                    });\r\n                    break;\r\n                case ERR_UNKNOWN:\r\n                    console.error("addMenu(): Unknown Error when adding the menu " + _id);\r\n                    break;\r\n                case ERR_INVALID_PARAMS:\r\n                    console.error("addMenu(): Invalid Parameters when adding the menu " + _id);\r\n                    break;\r\n                case ERR_NOT_FOUND:\r\n                    console.error("addMenu(): Menu with command " + relativeId + " could not be found when adding the menu " + _id);\r\n                    break;\r\n                default:\r\n                    console.error("addMenu(): Unknown Error (" + err + ") when adding the menu " + _id);\r\n                }\r\n            });\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    /**\r\n     * Removes a top-level menu from the application menu bar which may be native or HTML-based.\r\n     *\r\n     * @param {!string} id\r\n     *     Unique identifier for Menu. Typically use the id of command corresponding the menu.\r\n     */\r\n    function removeMenu(id) {\r\n        var menu,\r\n            commandID = "";\r\n\r\n        if (!id) {\r\n            console.error("removeMenu(): missing required parameter: id");\r\n            return;\r\n        }\r\n\r\n        if (!menuMap[id]) {\r\n            console.error("removeMenu(): menu id not found: %s", id);\r\n            return;\r\n        }\r\n\r\n        // Remove all of the menu items in the menu\r\n        menu = getMenu(id);\r\n        _.forEach(menu.items, function (item, key) {\r\n            if (item.isDivider) {\r\n                menu.removeMenuDivider(item.id);\r\n            } else {\r\n                commandID = item.getCommand();\r\n                menu.removeMenuItem(commandID);\r\n            }\r\n\r\n        });\r\n        menu.items = [];\r\n\r\n        // Remove this menu.\r\n        if (isHTMLMenu()) {\r\n            // ...\r\n        } else {\r\n            appshell.app.removeMenu(id, function (err) {\r\n                if (err) {\r\n                    console.error("removeMenu() -- id not found: " + id + " (error: " + err + ")");\r\n                }\r\n            });\r\n        }\r\n        delete menuMap[id];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 메인 메뉴를 셋팅한다.\r\n     */\r\n    function _setupMainMenu() {\r\n        // TODO: Rewrite shellAPI binding (refer to Brackets)\r\n        if (window.appshell) {\r\n            appshell.shellAPI = {\r\n                executeCommand: function (id) {\r\n                    if ($(".modal.instance").length > 0) {\r\n                        // When modal dialog is showing, application exit is not allowed.\r\n                        // Return true results preventing application exit.\r\n                        return (id === Commands.FILE_CLOSE_WINDOW);\r\n                    }\r\n\r\n                    // For allow Ctrl+C,V,X,Z,Y for focused <input> and <textarea>\r\n                    if (id === Commands.EDIT_COPY ||\r\n                        id === Commands.EDIT_CUT ||\r\n                        id === Commands.EDIT_DELETE ||\r\n                        id === Commands.EDIT_PASTE ||\r\n                        id === Commands.EDIT_UNDO ||\r\n                        id === Commands.EDIT_REDO) {\r\n                        if (document.activeElement.nodeName === "TEXTAREA" ||\r\n                            document.activeElement.nodeName === "INPUT") {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    // BELOW IS FROM BRACKETS (utils.ShellAPI.js)\r\n                    // Use E for Error so that uglify doesn\'t change this to simply Error()\r\n                    var promise, E = Error, e = new E(), stackDepth = e.stack.split("\\n").length;\r\n\r\n                    // This function should *only* be called as a top-level function. If the current\r\n                    // stack depth is > 2, it is most likely because we are at a breakpoint.\r\n                    if (stackDepth < 3) {\r\n                        promise = CommandManager.execute(id);\r\n                    } else {\r\n                        console.error("Skipping command " + id + " because it looks like you are " +\r\n                                      "at a breakpoint. If you are NOT at a breakpoint, please " +\r\n                                      "file a bug and mention this comment. Stack depth = " + stackDepth + ".");\r\n                    }\r\n                    return (promise && _.isFunction(promise.state) && promise.state() === "rejected") ? false : true;\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    function _setupHTMLMenu() {\r\n        if (isHTMLMenu()) {\r\n\r\n            // Remove empty items\r\n            _.forEach(menuItemMap, function (item, key) {\r\n                if (item.items.length < 1) {\r\n                    delete item.items;\r\n                }\r\n            });\r\n\r\n            // Create main menu\r\n            $menubar = $("#menu-bar");\r\n            $mainView = $(".main-view");\r\n            $menubar.kendoMenu({\r\n                dataSource: menuData,\r\n                animation: false,\r\n                select: function (e) {\r\n                    var menuId = JSON.parse(e.item.dataset.data);\r\n                    CommandManager.execute(menuId);\r\n                }\r\n            });\r\n            kendoMenu = $menubar.data("kendoMenu");\r\n            $mainView.css("top", $menubar.outerHeight());\r\n\r\n            // Initialize menu items.\r\n            // For all <LI> element and assign it to menuItem.$element.\r\n            var $allItems = $("li.k-item[role=menuitem]", $menubar);\r\n            $allItems.each(function () {\r\n                var $item = $(this),\r\n                    data = $item.data("data");\r\n                if (data) {\r\n                    var menuItemId = JSON.parse(data);\r\n                    var menuItem = menuItemMap[menuItemId] || menuMap[menuItemId];\r\n                    menuItem.$element = $item;\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        _setupMainMenu();\r\n    });\r\n\r\n    AppInit.appReady(function () {\r\n        _setupHTMLMenu();\r\n    });\r\n\r\n    exports.BEFORE           = BEFORE;\r\n    exports.AFTER            = AFTER;\r\n    exports.LAST             = LAST;\r\n    exports.FIRST            = FIRST;\r\n    exports.FIRST_IN_SECTION = FIRST_IN_SECTION;\r\n    exports.LAST_IN_SECTION  = LAST_IN_SECTION;\r\n    exports.DIVIDER          = DIVIDER;\r\n\r\n    exports.getMenu     = getMenu;\r\n    exports.getAllMenus = getAllMenus;\r\n    exports.getMenuItem = getMenuItem;\r\n    exports.addMenu     = addMenu;\r\n    exports.removeMenu  = removeMenu;\r\n\r\n    // for Test\r\n    exports.menuMap     = menuMap;\r\n    exports.menuItemMap = menuItemMap;\r\n\r\n\r\n});\r\n\n//# sourceURL=/menu/MenuManager.js'),eval('define(\'text!htmlContent/update-dialog.html\',[],function () { return \'<div class="update-dialog dialog modal" data-title="Update Available">\\r\\n    <div class="dialog-body no-padding">\\r\\n        <div style="position: absolute; left: 1.5em; top: 1em;">\\r\\n            <img src="styles/icons/package.svg" width="64px" height="64px">\\r\\n        </div>\\r\\n        <div style="margin-left: 80px;">\\r\\n            <div class="release-version">Release {{release.version}} ({{release.date}})</div>\\r\\n            <ul>\\r\\n                {{#release.features}}\\r\\n                <li>\\r\\n                    {{name}}\\r\\n                    <span class="desc">{{description}}</span>\\r\\n                </li>\\r\\n                {{/release.features}}\\r\\n            </ul>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button left" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n        <button class="k-button dialog-button primary" data-button-id="ok">{{Strings.DOWNLOAD}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/update-dialog.html'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell */\r\ndefine(\'utils/CheckUpdates\',[\'require\',\'exports\',\'module\',\'core/Global\',\'core/Repository\',\'command/Commands\',\'command/CommandManager\',\'menu/MenuManager\',\'explorer/ModelExplorerView\',\'dialogs/Dialogs\',\'strings\',\'utils/PanelManager\',\'utils/ExtensionUtils\',\'extensibility/ExtensionManager\',\'text!htmlContent/update-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global               = require("core/Global").global,\r\n        Repository           = require("core/Repository"),\r\n        Commands             = require("command/Commands"),\r\n        CommandManager       = require("command/CommandManager"),\r\n        MenuManager          = require("menu/MenuManager"),\r\n        ModelExplorerView    = require("explorer/ModelExplorerView"),\r\n        Dialogs              = require("dialogs/Dialogs"),\r\n        Strings              = require("strings"),\r\n        PanelManager         = require("utils/PanelManager"),\r\n        ExtensionUtils       = require("utils/ExtensionUtils"),\r\n        ExtensionManager     = require("extensibility/ExtensionManager"),\r\n        updateDialogTemplate = require("text!htmlContent/update-dialog.html");\r\n\r\n    \r\n    function _setUpdateAvailableIcon(newRelease) {\r\n        $("#toolbar-updates-available").remove();\r\n        var $button = $("<a id=\'toolbar-updates-available\' href=\'#\' title=\'Updates Available\'></a>");\r\n        $("#toolbar .buttons").append($button);\r\n        $button.click(function () {\r\n            showUpdateDialog(newRelease);\r\n        });\r\n    }\r\n        \r\n    /**\r\n     * Show Update Dialog\r\n     * @return {Dialog}\r\n     */\r\n    function showUpdateDialog(release) {\r\n        var context = { Strings: Strings, release: release };\r\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(updateDialogTemplate, context), true, function ($dlg) {});\r\n        var $dlg = dialog.getElement();\r\n        var $download = $dlg.find("button[data-button-id=\'ok\']");\r\n        $download.click(function () {\r\n            appshell.app.openURLInDefaultBrowser(global.app.config.download_url);\r\n        });\r\n        return dialog;\r\n    }\r\n\r\n    /**\r\n     * Check for updates\r\n     * @return {$.Promise}\r\n     */\r\n    function checkForUpdates() {\r\n        var result = new $.Deferred(),\r\n            params = {\r\n                p: navigator.appVersion,\r\n                v: app.metadata.version\r\n            };\r\n        $.ajax(app.config.update_info_url, { data: params })\r\n            .done(function (release) {\r\n                if (app.metadata.version !== release.version) {\r\n                    _setUpdateAvailableIcon(release);\r\n                    result.resolve(release);\r\n                } else {\r\n                    result.reject("You\'re up to date!");\r\n                }\r\n            })\r\n            .fail(function (err) {\r\n                result.reject("Failed to check for updates - Error " + err.status);\r\n            });\r\n        return result.promise();\r\n    }\r\n    \r\n\r\n    /**\r\n     * Check extensions updates\r\n     */\r\n    function checkExtensionUpdates() {\r\n        ExtensionManager.downloadRegistry().done(function () {\r\n            var updateAvailable = false;\r\n            _.each(ExtensionManager.extensions, function (ext) {\r\n                if (ext.installInfo && ext.installInfo.updateAvailable) {\r\n                    updateAvailable = true;\r\n                }\r\n            });\r\n            if (updateAvailable) {\r\n                $("#toolbar-extension-manager").addClass("selected");\r\n            } else {\r\n                $("#toolbar-extension-manager").removeClass("selected");\r\n            }\r\n        });\r\n    }\r\n\r\n    exports.checkForUpdates       = checkForUpdates;\r\n    exports.showUpdateDialog      = showUpdateDialog;\r\n    exports.checkExtensionUpdates = checkExtensionUpdates;\r\n\r\n});\n//# sourceURL=/utils/CheckUpdates.js'),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define */\r\n\r\ndefine(\'utils/Analytics\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var CID_KEY = "__staruml_client_uuid__";\r\n\r\n    /**\r\n     * Generate UUID (version 4)\r\n     */\r\n    function _generateUUID(){\r\n        var d = new Date().getTime();\r\n        var uuid = \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function(c) {\r\n            var r = (d + Math.random()*16)%16 | 0;\r\n            d = Math.floor(d/16);\r\n            return (c==\'x\' ? r : (r&0x7|0x8)).toString(16);\r\n        });\r\n        return uuid;\r\n    };\r\n\r\n    /**\r\n     * Return Client ID (Random UUID version 4)\r\n     */\r\n    function getCID() {\r\n        var uuid = localStorage.getItem(CID_KEY);\r\n        if (!uuid) {\r\n            uuid = _generateUUID();\r\n            localStorage.setItem(CID_KEY, uuid);\r\n        }\r\n        return uuid;\r\n    }\r\n\r\n    function _event(category, action, label, value) {\r\n        var params = {\r\n            v   : 1,\r\n            tid : "UA-50972178-1",\r\n            cid : getCID(),\r\n            t   : "event",\r\n            ec  : category,\r\n            ea  : action\r\n        };\r\n\r\n        if (label) {\r\n            params.el = label;\r\n        }\r\n        if (value) {\r\n            params.ev = value;\r\n        }\r\n\r\n        var r = $.ajax({\r\n            type : "POST",\r\n            url  : "http://www.google-analytics.com/collect",\r\n            data : params\r\n        });\r\n    }\r\n\r\n    function sendExecution() {\r\n        _event("execution", app.platform, app.metadata.version, 1);\r\n    }\r\n\r\n    function sendCommand(commandId) {\r\n        _event("command", commandId);\r\n    }\r\n\r\n    function sendError(op, cmd, stack, message, url, lineNumber) {\r\n        var params = {\r\n            cid: getCID(),\r\n            platform: app.platform,\r\n            version: app.metadata.version,\r\n            op: op,\r\n            cmd: cmd,\r\n            stack: stack,\r\n            message: message,\r\n            url: url,\r\n            lineNumber: lineNumber\r\n        };\r\n        $.ajax({\r\n            type: "POST",\r\n            url: "http://staruml.io/_dev/error_log",\r\n            data: params\r\n        });\r\n    }\r\n\r\n    exports.getCID        = getCID;\r\n    exports.sendExecution = sendExecution;\r\n    exports.sendCommand   = sendCommand;\r\n    exports.sendError     = sendError;\r\n\r\n});\r\n\n//# sourceURL=/utils/Analytics.js'),eval('define(\'text!htmlContent/validation-result-panel.html\',[],function () { return \'<div id="validation-results" class="validation-result-panel bottom-panel vert-resizable top-resizer no-focus">\\r\\n    <div class="toolbar">\\r\\n        <div class="title">Validation Errors</div>\\r\\n        <a href="#" class="close"></a>\\r\\n    </div>\\r\\n    <div class="panel-content resizable-content">\\r\\n        <div class="listview"></div>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/validation-result-panel.html'),eval("define('text!htmlContent/validation-error-item.html',[],function () { return '<div class=\\'validation-error-item\\'>\\r\\n    <span style=\"margin-bottom: 2px; margin-right: 3px;\" class=\"k-sprite validation-error\"></span>\\r\\n    <span>#:message#</span>\\r\\n    <span>(#:ruleId#)</span>\\r\\n    —\\r\\n    <span class=\\'k-sprite #=icon#\\'></span>\\r\\n    <span class=\\'name\\'>#:name#</span>\\r\\n    <span class=\\'type\\'>[#:type#]</span>\\r\\n</div>\\r\\n';});\n\n//# sourceURL=/text!htmlContent/validation-error-item.html"),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, browser: true */\r\n/*global $, _, define, kendo, app, C2S */\r\n\r\ndefine(\'validation/Validator\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Repository\',\'engine/ProjectManager\',\'core/PreferenceManager\',\'utils/PanelManager\',\'file/FileUtils\',\'filesystem/FileSystem\',\'metadata-json/MetadataJson\',\'explorer/ModelExplorerView\',\'ui/StatusBar\',\'text!htmlContent/validation-result-panel.html\',\'text!htmlContent/validation-error-item.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit           = require("utils/AppInit"),\r\n        Repository        = require("core/Repository"),\r\n        ProjectManager    = require("engine/ProjectManager"),\r\n        PreferenceManager = require("core/PreferenceManager"),\r\n        PanelManager      = require("utils/PanelManager"),\r\n        FileUtils         = require("file/FileUtils"),\r\n        FileSystem        = require("filesystem/FileSystem"),\r\n        MetadataJson      = require("metadata-json/MetadataJson"),\r\n        ModelExplorerView = require("explorer/ModelExplorerView"),\r\n        StatusBar         = require("ui/StatusBar"),\r\n        validationResultPanelTemplate = require("text!htmlContent/validation-result-panel.html"),\r\n        validationErrorItemTemplate   = require("text!htmlContent/validation-error-item.html");\r\n\r\n    var $validationResultPanel,\r\n        $title,\r\n        $close,\r\n        $listView,\r\n        $validationStatus;\r\n\r\n    var validationResultPanel;\r\n\r\n    /**\r\n     * DataSource for ListView\r\n     * @type {kendo.data.DataSource}\r\n     */\r\n    var dataSource = new kendo.data.DataSource();\r\n\r\n    function validate(filename) {\r\n        if (PreferenceManager.get("validation.validateModel")) {\r\n            return MetadataJson.validate(filename)\r\n                .done(function (result) {\r\n                    _setValidationErrors(result);\r\n                })\r\n                .fail(function (err) {\r\n                    console.error(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    function _clearValidationErrors() {\r\n        dataSource.data([]);\r\n    }\r\n\r\n    function _addValidationError(item) {\r\n        var element = Repository.get(item.id);\r\n        if (element) {\r\n            dataSource.add({\r\n                id: item.id,\r\n                ruleId: item.ruleId,\r\n                message: item.message,\r\n                icon: element.getNodeIcon(),\r\n                name: element.name,\r\n                type: element.getClassName()\r\n            });\r\n        }\r\n    }\r\n\r\n    function _setValidationErrors(errors) {\r\n        if (Array.isArray(errors) && errors.length > 0) {\r\n            StatusBar.setValidity(false);\r\n            _clearValidationErrors();\r\n            _.each(errors, function (item) {\r\n                _addValidationError(item);\r\n            });\r\n            $title.html("Validation Results — " + errors.length + " errors.");\r\n        } else {\r\n            StatusBar.setValidity(true);\r\n            _clearValidationErrors();\r\n            $title.html("Validation Results — No errors.");\r\n        }\r\n    }\r\n\r\n    // Setup Validation Result Panel\r\n    AppInit.htmlReady(function () {\r\n        $validationResultPanel = $(validationResultPanelTemplate);\r\n        $title = $validationResultPanel.find(".title");\r\n        $close = $validationResultPanel.find(".close");\r\n        $close.click(function () {\r\n            validationResultPanel.hide();\r\n        });\r\n        $listView = $validationResultPanel.find(".listview");\r\n        validationResultPanel = PanelManager.createBottomPanel("?", $validationResultPanel, 29);\r\n        $listView.kendoListView({\r\n            dataSource: dataSource,\r\n            template: validationErrorItemTemplate,\r\n            selectable: true,\r\n            change: function () {\r\n                var data = dataSource.view(),\r\n                    item = data[this.select().index()],\r\n                    element = Repository.get(item.id);\r\n                if (element) {\r\n                    ModelExplorerView.select(element, true);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Validation in StatusBar\r\n        $validationStatus = $(".statusbar .validation");\r\n        $validationStatus.click(function () {\r\n            if (validationResultPanel.isVisible()) {\r\n                validationResultPanel.hide();\r\n            } else {\r\n                validationResultPanel.show();\r\n            }\r\n        });\r\n\r\n        $(ProjectManager).on(\'projectLoaded\', function (event, filename, project) {\r\n            try {\r\n                if (filename) {\r\n                    validate(filename);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(ProjectManager).on(\'projectSaved\', function (event, filename, project) {\r\n            try {\r\n                if (filename) {\r\n                    validate(filename);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(ProjectManager).on(\'projectClosed\', function (event) {\r\n            try {\r\n                _setValidationErrors();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n    });\r\n\r\n    exports.validate = validate;\r\n\r\n});\r\n\n//# sourceURL=/validation/Validator.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, browser: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define*/\r\n\r\ndefine(\'core/Core-meta\',[\'require\',\'exports\',\'module\',\'core/MetaModelManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var MetaModelManager  = require("core/MetaModelManager");\r\n\r\n    var metaModel = {\r\n        "TagKind": {\r\n            "kind": "enum",\r\n            "literals": [ "string", "reference", "boolean", "number", "hidden" ]\r\n        },\r\n        "Element": {\r\n            "kind": "class",\r\n            "attributes": [\r\n                { "name": "_id",     "kind": "prim", "type": "String" },\r\n                { "name": "_parent", "kind": "ref",  "type": "Element" }\r\n            ]\r\n        },\r\n        "Model": {\r\n            "kind": "class",\r\n            "super": "Element",\r\n            "attributes": [\r\n                { "name": "name",          "kind": "prim", "type": "String", "visible": true },\r\n                { "name": "ownedElements", "kind": "objs", "type": "Element" }\r\n            ]\r\n        },\r\n        "Tag": {\r\n            "kind": "class",\r\n            "super": "Model",\r\n            "attributes": [\r\n                { "name": "kind",      "kind": "enum", "type": "TagKind", "visible": true },\r\n                { "name": "value",     "kind": "prim", "type": "String",  "visible": true, "multiline": true },\r\n                { "name": "reference", "kind": "ref",  "type": "Model",   "visible": true },\r\n                { "name": "checked",   "kind": "prim", "type": "Boolean", "visible": true },\r\n                { "name": "number",    "kind": "prim", "type": "Integer", "visible": true }\r\n            ]\r\n        },\r\n        "Hyperlink": {\r\n            "kind": "class",\r\n            "super": "Model",\r\n            "attributes": [\r\n                { "name": "reference", "kind": "ref",  "type": "Model",   "visible": true },\r\n                { "name": "url",       "kind": "prim", "type": "String",  "visible": true }\r\n            ],\r\n            "view": "HyperlinkView"\r\n        },\r\n        "ExtensibleModel": {\r\n            "kind": "class",\r\n            "super": "Model",\r\n            "attributes": [\r\n                { "name": "documentation", "kind": "prim", "type": "String" },\r\n                { "name": "tags",          "kind": "objs", "type": "Tag" }\r\n            ]\r\n        },\r\n        "Relationship": {\r\n            "kind": "class",\r\n            "super": "ExtensibleModel"\r\n        },\r\n        "DirectedRelationship": {\r\n            "kind": "class",\r\n            "super": "Relationship",\r\n            "attributes": [\r\n                { "name": "source", "kind": "ref", "type": "Model", "visible": true, "readOnly": true },\r\n                { "name": "target", "kind": "ref", "type": "Model", "visible": true, "readOnly": true }\r\n            ]\r\n        },\r\n        "RelationshipEnd": {\r\n            "kind": "class",\r\n            "super": "ExtensibleModel",\r\n            "attributes": [\r\n                { "name": "reference", "kind": "ref", "type": "Model", "visible": true, "readOnly": true }\r\n            ]\r\n        },\r\n        "UndirectedRelationship": {\r\n            "kind": "class",\r\n            "super": "Relationship",\r\n            "attributes": [\r\n                { "name": "end1", "kind": "obj", "type": "RelationshipEnd", "expand": true },\r\n                { "name": "end2", "kind": "obj", "type": "RelationshipEnd", "expand": true }\r\n            ]\r\n        },\r\n        "View": {\r\n            "kind": "class",\r\n            "super": "Element",\r\n            "attributes": [\r\n                { "name": "model",               "kind": "ref",    "type": "Element" },\r\n                { "name": "subViews",            "kind": "objs",   "type": "View" },\r\n                { "name": "containerView",       "kind": "ref",    "type": "View" },\r\n                { "name": "containedViews",      "kind": "refs",   "type": "View" },\r\n                { "name": "visible",             "kind": "prim",   "type": "Boolean", "default": true },\r\n                { "name": "enabled",             "kind": "prim",   "type": "Boolean", "default": true },\r\n                { "name": "selected",            "kind": "prim",   "type": "Boolean", "transient": true },\r\n                { "name": "lineColor",           "kind": "prim",   "type": "String" },\r\n                { "name": "fillColor",           "kind": "prim",   "type": "String" },\r\n                { "name": "fontColor",           "kind": "prim",   "type": "String" },\r\n                { "name": "font",                "kind": "custom", "type": "Font" },\r\n                { "name": "parentStyle",         "kind": "prim",   "type": "Boolean", "default": false, "transient": true },\r\n                { "name": "showShadow",          "kind": "prim",   "type": "Boolean", "default": true },\r\n                { "name": "containerChangeable", "kind": "prim",   "type": "Boolean", "default": false, "transient": false },\r\n                { "name": "containerExtending",  "kind": "prim",   "type": "Boolean", "default": false, "transient": false }\r\n            ]\r\n        },\r\n        "NodeView": {\r\n            "kind": "class",\r\n            "super": "View",\r\n            "attributes": [\r\n                { "name": "left",       "kind": "prim", "type": "Integer", "default": 0 },\r\n                { "name": "top",        "kind": "prim", "type": "Integer", "default": 0 },\r\n                { "name": "width",      "kind": "prim", "type": "Integer", "default": 0 },\r\n                { "name": "height",     "kind": "prim", "type": "Integer", "default": 0 },\r\n                { "name": "autoResize", "kind": "prim", "type": "Boolean", "default": false }\r\n            ]\r\n        },\r\n        "EdgeView": {\r\n            "kind": "class",\r\n            "super": "View",\r\n            "attributes": [\r\n                { "name": "head",      "kind": "ref",    "type": "View" },\r\n                { "name": "tail",      "kind": "ref",    "type": "View" },\r\n                { "name": "lineStyle", "kind": "prim",   "type": "Integer" },\r\n                { "name": "points",    "kind": "custom", "type": "Points" }\r\n            ]\r\n        },\r\n        "LabelView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "underline",           "kind": "prim", "type": "Boolean", "default": false },\r\n                { "name": "text",                "kind": "prim", "type": "String" },\r\n                { "name": "horizontalAlignment", "kind": "prim", "type": "Integer", "default": 2 },\r\n                { "name": "verticalAlignment",   "kind": "prim", "type": "Integer", "default": 5 },\r\n                { "name": "direction",           "kind": "prim", "type": "Integer", "default": 0, "transient": true },\r\n                { "name": "wordWrap",            "kind": "prim", "type": "Boolean", "default": false }\r\n            ]\r\n        },\r\n        "ParasiticView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "alpha",    "kind": "prim", "type": "Real" },\r\n                { "name": "distance", "kind": "prim", "type": "Real" }\r\n            ]\r\n        },\r\n        "NodeParasiticView": {\r\n            "kind": "class",\r\n            "super": "ParasiticView",\r\n            "attributes": [\r\n                { "name": "hostNode", "kind": "ref", "type": "NodeView" }\r\n            ]\r\n        },\r\n        "EdgeParasiticView": {\r\n            "kind": "class",\r\n            "super": "ParasiticView",\r\n            "attributes": [\r\n                { "name": "hostEdge",     "kind": "ref",  "type": "EdgeView" },\r\n                { "name": "edgePosition", "kind": "prim", "type": "Integer", "default": 0 }\r\n            ]\r\n        },\r\n        "NodeLabelView": {\r\n            "kind": "class",\r\n            "super": "NodeParasiticView",\r\n            "attributes": [\r\n                { "name": "underline",           "kind": "prim", "type": "Boolean", "default": false },\r\n                { "name": "text",                "kind": "prim", "type": "String" },\r\n                { "name": "horizontalAlignment", "kind": "prim", "type": "Integer", "default": 2 },\r\n                { "name": "verticalAlignment",   "kind": "prim", "type": "Integer", "default": 5 },\r\n                { "name": "wordWrap",            "kind": "prim", "type": "Boolean", "default": false }\r\n            ]\r\n        },\r\n        "EdgeLabelView": {\r\n            "kind": "class",\r\n            "super": "EdgeParasiticView",\r\n            "attributes": [\r\n                { "name": "underline",           "kind": "prim", "type": "Boolean", "default": false },\r\n                { "name": "text",                "kind": "prim", "type": "String" },\r\n                { "name": "horizontalAlignment", "kind": "prim", "type": "Integer", "default": 2 },\r\n                { "name": "verticalAlignment",   "kind": "prim", "type": "Integer", "default": 5 },\r\n                { "name": "wordWrap",            "kind": "prim", "type": "Boolean", "default": false }\r\n            ]\r\n        },\r\n        "NodeNodeView": {\r\n            "kind": "class",\r\n            "super": "NodeParasiticView"\r\n        },\r\n        "EdgeNodeView": {\r\n            "kind": "class",\r\n            "super": "EdgeParasiticView"\r\n        },\r\n        "Diagram": {\r\n            "kind": "class",\r\n            "super": "ExtensibleModel",\r\n            "attributes": [\r\n                { "name": "visible",        "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "defaultDiagram", "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "ownedViews",     "kind": "objs", "type": "View" }\r\n            ]\r\n        },\r\n        "Project": {\r\n            "kind": "class",\r\n            "super": "ExtensibleModel",\r\n            "attributes": [\r\n                { "name": "author",         "kind": "prim", "type": "String",  "visible": true },\r\n                { "name": "company",        "kind": "prim", "type": "String",  "visible": true },\r\n                { "name": "copyright",      "kind": "prim", "type": "String",  "visible": true },\r\n                { "name": "version",        "kind": "prim", "type": "String",  "visible": true }\r\n            ]\r\n        }\r\n    };\r\n\r\n    // Register Meta-model\r\n    MetaModelManager.register(metaModel);\r\n\r\n});\r\n\n//# sourceURL=/core/Core-meta.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, browser: true */\r\n/*global define, $, _, */\r\n\r\ndefine(\'core/Validator\',[\'require\',\'exports\',\'module\',\'core/Global\',\'core/Repository\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var _global    = require("core/Global").global,\r\n        Repository = require("core/Repository");\r\n\r\n    /**\r\n     * Add validation rules\r\n     *\r\n     * @param {Array.<Object>} rules\r\n     */\r\n    function addRules(rules) {\r\n        _.each(rules, function (rule) {\r\n            _global.rules[rule.id] = rule;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validate and return validation errors\r\n     *\r\n     * @return {Array.<Object>}\r\n     */\r\n    function validate() {\r\n        var failed = [];\r\n\r\n        _.each(_global.rules, function (rule) {\r\n\r\n            // Get instances of types in rule.appliesTo\r\n            var targets = Repository.getInstancesOf(rule.appliesTo);\r\n\r\n            // Rejects instances of types in rule.exceptions\r\n            if (rule.exceptions && rule.exceptions.length > 0) {\r\n                targets = _.reject(targets, function (target) {\r\n                    return _.some(rule.exceptions, function (exception) {\r\n                        return target instanceof _global.type[exception];\r\n                    });\r\n                });\r\n            }\r\n\r\n            // Check constraints\r\n            _.each(targets, function (target) {\r\n                try {\r\n                    if (!rule.constraint(target)) {\r\n                        var item = {\r\n                            id: target._id,\r\n                            ruleId: rule.id,\r\n                            message: rule.message\r\n                        };\r\n                        failed.push(item);\r\n                    }\r\n                } catch (err) {\r\n                    console.log("[Validator] Failed to apply the rule (" + rule.id + ") on ", target);\r\n                    console.error(err);\r\n                }\r\n            });\r\n        });\r\n\r\n        return failed;\r\n    }\r\n\r\n    exports.addRules = addRules;\r\n    exports.validate = validate;\r\n\r\n});\r\n\n//# sourceURL=/core/Validator.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, browser: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, type*/\r\n\r\ndefine(\'core/Core-rules\',[\'require\',\'exports\',\'module\',\'core/Validator\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Validator = require("core/Validator");\r\n\r\n    var rules = [\r\n        {\r\n            id: "CORE001",\r\n            message: "Name expected.",\r\n            appliesTo: [ "Project", "Tag" ],\r\n            constraint: function (elem) {\r\n                return (elem.name && elem.name.length > 0);\r\n            }\r\n        },\r\n        {\r\n            id: "CORE002",\r\n            message: "[Critical] DirectedRelationship should have source and target.",\r\n            appliesTo: [ "DirectedRelationship" ],\r\n            constraint: function (elem) {\r\n                return (elem.source instanceof type.Model &&\r\n                        elem.target instanceof type.Model);\r\n            }\r\n        },\r\n        {\r\n            id: "CORE003",\r\n            message: "[Critical] UndirectedRelationship should have two ends.",\r\n            appliesTo: [ "UndirectedRelationship" ],\r\n            constraint: function (elem) {\r\n                return (elem.end1 instanceof type.RelationshipEnd &&\r\n                        elem.end1.reference instanceof type.Model &&\r\n                        elem.end2 instanceof type.RelationshipEnd &&\r\n                        elem.end2.reference instanceof type.Model);\r\n            }\r\n        }\r\n    ];\r\n\r\n    Validator.addRules(rules);\r\n\r\n});\r\n\n//# sourceURL=/core/Core-rules.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell */\r\ndefine('uml/UMLCommands',['require','exports','module'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    // File\r\n    exports.FILE_NEW_FROM_TEMPLATE_UML_MINIMAL       = 'file.newFromTemplate.UMLMinimal';\r\n    exports.FILE_NEW_FROM_TEMPLATE_UML_CONVENTIONAL  = 'file.newFromTemplate.UMLConventional';\r\n    exports.FILE_NEW_FROM_TEMPLATE_4P1VIEWMODEL      = 'file.newFromTemplate.4p1Viewmodel';\r\n    exports.FILE_NEW_FROM_TEMPLATE_RATIONAL          = 'file.newFromTemplate.Rational';\r\n\r\n    // Format\r\n    exports.FORMAT_STEREOTYPE                        = 'format.stereotype';\r\n    exports.FORMAT_STEREOTYPE_NONE                   = 'format.stereotype.none';\r\n    exports.FORMAT_STEREOTYPE_LABEL                  = 'format.stereotype.label';\r\n    exports.FORMAT_STEREOTYPE_DECORATION             = 'format.stereotype.decoration';\r\n    exports.FORMAT_STEREOTYPE_DECORATION_LABEL       = 'format.stereotype.decorationLabel';\r\n    exports.FORMAT_STEREOTYPE_ICON                   = 'format.stereotype.icon';\r\n    exports.FORMAT_STEREOTYPE_ICON_LABEL             = 'format.stereotype.iconLabel';\r\n    exports.FORMAT_WORD_WRAP                         = 'format.wordWrap';\r\n    exports.FORMAT_SHOW_VISIBILITY                   = 'format.showVisibility';\r\n    exports.FORMAT_SHOW_NAMESPACE                    = 'format.showNamespace';\r\n    exports.FORMAT_SHOW_PROPERTY                     = 'format.showProperty';\r\n    exports.FORMAT_SHOW_TYPE                         = 'format.showType';\r\n    exports.FORMAT_SHOW_MULTIPLICITY                 = 'format.showMultiplicity';\r\n    exports.FORMAT_SHOW_OPERATION_SIGNATURE          = 'format.showOperationSignature';\r\n    exports.FORMAT_SUPPRESS_ATTRIBUTES               = 'format.suppressAttributes';\r\n    exports.FORMAT_SUPPRESS_OPERATIONS               = 'format.suppressOperations';\r\n    exports.FORMAT_SUPPRESS_RECEPTIONS               = 'format.suppressReceptions';\r\n    exports.FORMAT_SUPPRESS_LITERALS                 = 'format.suppressLiterals';\r\n\r\n    // Packages\r\n    exports.MODEL_ADD_MODEL                          = 'model.add.model';\r\n    exports.MODEL_ADD_SUBSYSTEM                      = 'model.add.subsystem';\r\n    exports.MODEL_ADD_PACKAGE                        = 'model.add.package';\r\n    exports.MODEL_ADD_PROFILE                        = 'model.add.profile';\r\n    // Classes\r\n    exports.MODEL_ADD_CLASS                          = 'model.add.class';\r\n    exports.MODEL_ADD_INTERFACE                      = 'model.add.interface';\r\n    exports.MODEL_ADD_SIGNAL                         = 'model.add.signal';\r\n    exports.MODEL_ADD_DATATYPE                       = 'model.add.datatype';\r\n    exports.MODEL_ADD_PRIMITIVETYPE                  = 'model.add.primitiveType';\r\n    exports.MODEL_ADD_ENUMERATION                    = 'model.add.enumeration';\r\n    exports.MODEL_ADD_ARTIFACT                       = 'model.add.artifact';\r\n    exports.MODEL_ADD_COMPONENT                      = 'model.add.component';\r\n    exports.MODEL_ADD_NODE                           = 'model.add.node';\r\n    exports.MODEL_ADD_USECASE                        = 'model.add.usecase';\r\n    exports.MODEL_ADD_ACTOR                          = 'model.add.actor';\r\n    exports.MODEL_ADD_STEREOTYPE                     = 'model.add.stereotype';\r\n    // Instances\r\n    exports.MODEL_ADD_OBJECT                         = 'model.add.object';\r\n    exports.MODEL_ADD_ARTIFACTINSTANCE               = 'model.add.artifactInstance';\r\n    exports.MODEL_ADD_COMPONENTINSTANCE              = 'model.add.componentInstance';\r\n    exports.MODEL_ADD_NODEINSTANCE                   = 'model.add.nodeInstance';\r\n    // Behaviors\r\n    exports.MODEL_ADD_COLLABORATION                  = 'model.add.collaboration';\r\n    exports.MODEL_ADD_STATEMACHINE                   = 'model.add.stateMachine';\r\n    exports.MODEL_ADD_ACTIVITY                       = 'model.add.activity';\r\n    exports.MODEL_ADD_INTERACTION                    = 'model.add.interaction';\r\n    exports.MODEL_ADD_OPAQUEBEHAVIOR                 = 'model.add.opaqueBehavior';\r\n    // Features\r\n    exports.MODEL_ADD_ENUMERATIONLITERAL             = 'model.add.enumerationLiteral';\r\n    exports.MODEL_ADD_ATTRIBUTE                      = 'model.add.attribute';\r\n    exports.MODEL_ADD_OPERATION                      = 'model.add.operation';\r\n    exports.MODEL_ADD_RECEPTION                      = 'model.add.reception';\r\n    exports.MODEL_ADD_PORT                           = 'model.add.port';\r\n    exports.MODEL_ADD_PARAMETER                      = 'model.add.parameter';\r\n    exports.MODEL_ADD_TEMPLATEPARAMETER              = 'model.add.templateParameter';\r\n    exports.MODEL_ADD_EXTENSIONPOINT                 = 'model.add.extensionPoint';\r\n    exports.MODEL_ADD_SLOT                           = 'model.add.slot';\r\n    // States\r\n    exports.MODEL_ADD_STATE                          = 'model.add.state';\r\n    exports.MODEL_ADD_REGION                         = 'model.add.region';\r\n    exports.MODEL_ADD_ENTRY_ACTIVITY                 = 'model.add.entryActivity';\r\n    exports.MODEL_ADD_DO_ACTIVITY                    = 'model.add.doActivity';\r\n    exports.MODEL_ADD_EXIT_ACTIVITY                  = 'model.add.exitActivity';\r\n    exports.MODEL_ADD_TRIGGER                        = 'model.add.trigger';\r\n    exports.MODEL_ADD_EFFECT                         = 'model.add.effect';\r\n    // Actions\r\n    exports.MODEL_ADD_ACTION                         = 'model.add.action';\r\n    // Common\r\n    exports.MODEL_ADD_CONSTRAINT                     = 'model.add.constraint';\r\n    // Diagrams\r\n    exports.MODEL_ADD_DIAGRAM_CLASS                  = 'model.addDiagram.class';\r\n    exports.MODEL_ADD_DIAGRAM_PACKAGE                = 'model.addDiagram.package';\r\n    exports.MODEL_ADD_DIAGRAM_OBJECT                 = 'model.addDiagram.object';\r\n    exports.MODEL_ADD_DIAGRAM_COMPOSITESTRUCTURE     = 'model.addDiagram.compositeStructure';\r\n    exports.MODEL_ADD_DIAGRAM_COMPONENT              = 'model.addDiagram.component';\r\n    exports.MODEL_ADD_DIAGRAM_DEPLOYMENT             = 'model.addDiagram.deployment';\r\n    exports.MODEL_ADD_DIAGRAM_USECASE                = 'model.addDiagram.usecase';\r\n    exports.MODEL_ADD_DIAGRAM_SEQUENCE               = 'model.addDiagram.sequence';\r\n    exports.MODEL_ADD_DIAGRAM_COMMUNICATION          = 'model.addDiagram.communication';\r\n    exports.MODEL_ADD_DIAGRAM_STATECHART             = 'model.addDiagram.statechart';\r\n    exports.MODEL_ADD_DIAGRAM_ACTIVITY               = 'model.addDiagram.activity';\r\n    exports.MODEL_ADD_DIAGRAM_PROFILE                = 'model.addDiagram.profile';\r\n    // Profiles\r\n    exports.MODEL_APPLY_PROFILE                      = 'model.applyProfile';\r\n    exports.MODEL_APPLY_PROFILE_UML_STANDARD         = 'model.applyProfile.UMLStandard';\r\n\r\n\r\n});\r\n\n//# sourceURL=/uml/UMLCommands.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell */\r\ndefine(\'menu/DefaultMenus\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'utils/Initializer\',\'core/Global\',\'utils/Helper\',\'command/Commands\',\'command/CommandManager\',\'menu/MenuManager\',\'menu/ContextMenuManager\',\'uml/UMLCommands\',\'strings\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit            = require("utils/AppInit"),\r\n        Initializer        = require("utils/Initializer"),\r\n        global             = require("core/Global").global,\r\n        Helper             = require("utils/Helper"),\r\n        Commands           = require("command/Commands"),\r\n        CommandManager     = require("command/CommandManager"),\r\n        MenuManager        = require("menu/MenuManager"),\r\n        ContextMenuManager = require("menu/ContextMenuManager"),\r\n        UMLCommands        = require("uml/UMLCommands"),\r\n        Strings            = require("strings");\r\n\r\n    /**\r\n     * Default Context Menus\r\n     */\r\n    var ContextMenus = {\r\n        DIAGRAM  : "diagram-context-menu",\r\n        EXPLORER : "explorer-context-menu"\r\n    };\r\n\r\n\r\n    function setupMenus() {\r\n        var menu,\r\n            menuItem;\r\n\r\n        // File Menu\r\n        menu = MenuManager.addMenu(Commands.FILE);\r\n        menu.addMenuItem(Commands.FILE_NEW);\r\n        menu.addMenuItem(Commands.FILE_NEW_FROM_TEMPLATE);\r\n        menu.addMenuItem(Commands.FILE_OPEN);\r\n        // menu.addMenuItem(Commands.FILE_OPEN_RECENT);\r\n        menu.addMenuItem(Commands.FILE_SAVE);\r\n        menu.addMenuItem(Commands.FILE_SAVE_AS);\r\n        menu.addMenuItem(Commands.FILE_CLOSE);\r\n        menu.addMenuDivider();\r\n        menuItem = menu.addMenuItem(Commands.FILE_IMPORT);\r\n        menuItem.addMenuItem(Commands.FILE_IMPORT_FRAGMENT);\r\n        menuItem = menu.addMenuItem(Commands.FILE_EXPORT);\r\n        menuItem.addMenuItem(Commands.FILE_EXPORT_FRAGMENT);\r\n        if (global.app.platform !== "mac") {\r\n            menu.addMenuDivider();\r\n            menu.addMenuItem(Commands.FILE_PREFERENCES);\r\n        }\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(Commands.FILE_PRINT_TO_PDF);\r\n        if (global.app.platform !== "mac") {\r\n            menu.addMenuDivider();\r\n            menu.addMenuItem(Commands.FILE_QUIT);\r\n        }\r\n\r\n        // Edit Menu\r\n        menu = MenuManager.addMenu(Commands.EDIT);\r\n        menu.addMenuItem(Commands.EDIT_UNDO);\r\n        menu.addMenuItem(Commands.EDIT_REDO);\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(Commands.EDIT_CUT);\r\n        menu.addMenuItem(Commands.EDIT_COPY);\r\n        menu.addMenuItem(Commands.EDIT_PASTE);\r\n        menu.addMenuItem(Commands.EDIT_DELETE);\r\n        menu.addMenuItem(Commands.EDIT_DELETE_FROM_MODEL);\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(Commands.EDIT_MOVE_UP);\r\n        menu.addMenuItem(Commands.EDIT_MOVE_DOWN);\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(Commands.EDIT_SELECT_ALL);\r\n        menu.addMenuItem(Commands.EDIT_SELECT_IN_EXPLORER);\r\n        menu.addMenuItem(Commands.EDIT_SELECT_IN_DIAGRAM);\r\n\r\n        // Format Menu\r\n        menu = MenuManager.addMenu(Commands.FORMAT);\r\n        menu.addMenuItem(Commands.FORMAT_FONT);\r\n        menu.addMenuItem(Commands.FORMAT_FILL_COLOR);\r\n        menu.addMenuItem(Commands.FORMAT_LINE_COLOR);\r\n        menu.addMenuDivider();\r\n        menuItem = menu.addMenuItem(Commands.FORMAT_LINE_STYLE);\r\n        menuItem.addMenuItem(Commands.FORMAT_LINE_STYLE_RECTILINEAR);\r\n        menuItem.addMenuItem(Commands.FORMAT_LINE_STYLE_OBLIQUE);\r\n        menuItem.addMenuItem(Commands.FORMAT_LINE_STYLE_ROUNDRECT);\r\n        menuItem.addMenuItem(Commands.FORMAT_LINE_STYLE_CURVE);\r\n        menu.addMenuItem(Commands.FORMAT_AUTO_RESIZE);\r\n        menu.addMenuItem(Commands.FORMAT_SHOW_SHADOW);\r\n\r\n        // Model Menu\r\n        menu = MenuManager.addMenu(Commands.MODEL);\r\n        menu.addMenuItem(Commands.MODEL_ADD_DIAGRAM);\r\n        menu.addMenuItem(Commands.MODEL_ADD);\r\n\r\n        // Tools Menu\r\n        menu = MenuManager.addMenu(Commands.TOOLS);\r\n        menu.addMenuItem(Commands.TOOLS_EXTENSION_MANAGER);\r\n\r\n        // View Menu\r\n        menu = MenuManager.addMenu(Commands.VIEW);\r\n        menu.addMenuItem(Commands.VIEW_CLOSE_DIAGRAM);\r\n        menu.addMenuItem(Commands.VIEW_CLOSE_OTHER_DIAGRAMS);\r\n        menu.addMenuItem(Commands.VIEW_CLOSE_ALL_DIAGRAMS);\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(Commands.VIEW_NEXT_DIAGRAM);\r\n        menu.addMenuItem(Commands.VIEW_PREVIOUS_DIAGRAM);\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(Commands.VIEW_ZOOM_IN);\r\n        menu.addMenuItem(Commands.VIEW_ZOOM_OUT);\r\n        menu.addMenuItem(Commands.VIEW_ACTUAL_SIZE);\r\n        menu.addMenuItem(Commands.VIEW_FIT_TO_WINDOW);\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(Commands.VIEW_SHOW_GRID);\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(Commands.VIEW_HIDE_SIDEBAR);\r\n        menu.addMenuItem(Commands.VIEW_HIDE_NAVIGATOR);\r\n        menu.addMenuItem(Commands.VIEW_HIDE_TOOLBAR);\r\n        menu.addMenuItem(Commands.VIEW_HIDE_STATUSBAR);\r\n        menu.addMenuItem(Commands.VIEW_HIDE_TOOLBOX);\r\n        menu.addMenuItem(Commands.VIEW_HIDE_EDITORS);\r\n\r\n        // Help Menu\r\n        menu = MenuManager.addMenu(Commands.HELP, MenuManager.LAST);\r\n        if (global.app.platform !== "mac") {\r\n            menu.addMenuItem(Commands.HELP_ABOUT);\r\n        }\r\n        menu.addMenuItem(Commands.HELP_CHECK_FOR_UPDATES);\r\n        menu.addMenuItem(Commands.HELP_ENTER_LICENSE);\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(Commands.HELP_DOCUMENTATION);\r\n        menu.addMenuItem(Commands.HELP_FORUM);\r\n        // menu.addMenuItem(Commands.HELP_RELEASE_NOTE);\r\n        menu.addMenuItem(Commands.HELP_REQUEST_FEATURE);\r\n    }\r\n\r\n    /**\r\n     * ContextMenu for Diagram\r\n     */\r\n    function setupContextMenuForDiagram() {\r\n        var contextMenu,\r\n            menu,\r\n            menuItem;\r\n\r\n        contextMenu = ContextMenuManager.addContextMenu(ContextMenus.DIAGRAM, "#diagram-canvas");\r\n\r\n        // Add Menu\r\n        contextMenu.addMenuItem(Commands.MODEL_ADD, null, null, ContextMenuManager.FIRST);\r\n        contextMenu.addMenuDivider(ContextMenuManager.AFTER, Commands.MODEL_ADD);\r\n\r\n        // Format Menu\r\n        menu = contextMenu.addMenuItem(Commands.FORMAT);\r\n        menu.addMenuItem(Commands.FORMAT_FONT);\r\n        menu.addMenuItem(Commands.FORMAT_FILL_COLOR);\r\n        menu.addMenuItem(Commands.FORMAT_LINE_COLOR);\r\n        menu.addMenuDivider();\r\n        menuItem = menu.addMenuItem(Commands.FORMAT_LINE_STYLE);\r\n        menuItem.addMenuItem(Commands.FORMAT_LINE_STYLE_RECTILINEAR);\r\n        menuItem.addMenuItem(Commands.FORMAT_LINE_STYLE_OBLIQUE);\r\n        menuItem.addMenuItem(Commands.FORMAT_LINE_STYLE_ROUNDRECT);\r\n        menuItem.addMenuItem(Commands.FORMAT_LINE_STYLE_CURVE);\r\n        menu.addMenuItem(Commands.FORMAT_AUTO_RESIZE);\r\n        menu.addMenuItem(Commands.FORMAT_SHOW_SHADOW);\r\n\r\n        // Edit Menu\r\n        contextMenu.addMenuDivider();\r\n        contextMenu.addMenuItem(Commands.EDIT_CUT);\r\n        contextMenu.addMenuItem(Commands.EDIT_COPY);\r\n        contextMenu.addMenuItem(Commands.EDIT_PASTE);\r\n        contextMenu.addMenuItem(Commands.EDIT_DELETE);\r\n        contextMenu.addMenuItem(Commands.EDIT_DELETE_FROM_MODEL);\r\n        contextMenu.addMenuDivider();\r\n        contextMenu.addMenuItem(Commands.EDIT_SELECT_ALL);\r\n        contextMenu.addMenuItem(Commands.EDIT_SELECT_IN_EXPLORER);\r\n\r\n    }\r\n\r\n    /**\r\n     * ContextMenu for Explorer\r\n     */\r\n    function setupContextMenuForExplorer() {\r\n        var contextMenu,\r\n            menu;\r\n\r\n        contextMenu = ContextMenuManager.addContextMenu(ContextMenus.EXPLORER, "#model-explorer-holder .treeview");\r\n\r\n        // Add Diagram and Add Menu\r\n        contextMenu.addMenuItem(Commands.MODEL_ADD_DIAGRAM, null, null, ContextMenuManager.FIRST);\r\n        contextMenu.addMenuItem(Commands.MODEL_ADD, null, null, ContextMenuManager.AFTER, Commands.MODEL_ADD_DIAGRAM);\r\n        contextMenu.addMenuDivider(ContextMenuManager.AFTER, Commands.MODEL_ADD);\r\n\r\n        // Edit Menu\r\n        contextMenu.addMenuItem(Commands.EDIT_CUT);\r\n        contextMenu.addMenuItem(Commands.EDIT_COPY);\r\n        contextMenu.addMenuItem(Commands.EDIT_PASTE);\r\n        contextMenu.addMenuItem(Commands.EDIT_DELETE_FROM_MODEL);\r\n        contextMenu.addMenuDivider();\r\n        contextMenu.addMenuItem(Commands.EDIT_MOVE_UP);\r\n        contextMenu.addMenuItem(Commands.EDIT_MOVE_DOWN);\r\n        contextMenu.addMenuDivider();\r\n        contextMenu.addMenuItem(Commands.EDIT_SELECT_IN_DIAGRAM);\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupMenus();\r\n        setupContextMenuForDiagram();\r\n        setupContextMenuForExplorer();\r\n    });\r\n\r\n    exports.contextMenus = ContextMenus;\r\n\r\n});\r\n\n//# sourceURL=/menu/DefaultMenus.js'),eval('define(\'text!htmlContent/element-list-picker-dialog.html\',[],function () { return \'<div class="element-list-picker dialog modal" data-title="{{title}}">\\r\\n    <div class="dialog-body no-padding">\\r\\n        <div class="listview-wrapper">\\r\\n            <ul class="listview"></ul>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <div class="left" style="text-align: left;">\\r\\n            <label class="k-checkbox left">\\r\\n                <input class="unspecified" type="checkbox">\\r\\n                <div class="k-checkbox__checkmark"></div>\\r\\n                <span style="padding-left: 7px;">Do not specify</span>\\r\\n            </label>\\r\\n        </div>\\r\\n        <button class="k-button dialog-button primary" data-button-id="ok">{{Strings.OK}}</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/element-list-picker-dialog.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo, Mustache */\r\n\r\n/**\r\n * Element List Picker Dialog\r\n */\r\ndefine(\'dialogs/ElementListPickerDialog\',[\'require\',\'exports\',\'module\',\'utils/Helper\',\'utils/ViewUtils\',\'core/Repository\',\'engine/Engine\',\'strings\',\'dialogs/Dialogs\',\'text!htmlContent/element-list-picker-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Helper        = require("utils/Helper"),\r\n        ViewUtils     = require("utils/ViewUtils"),\r\n        Repository    = require("core/Repository"),\r\n        Engine        = require("engine/Engine"),\r\n        Strings       = require("strings"),\r\n        Dialogs       = require("dialogs/Dialogs");\r\n\r\n    var UI_ELEMENT_LIST_PICKER = "#ui-element-list-picker";\r\n\r\n    var dialogTemplate = require("text!htmlContent/element-list-picker-dialog.html");\r\n\r\n    /**\r\n     * DataSource for ListView\r\n     * @private\r\n     * @type {kendo.data.DataSource}\r\n     */\r\n    var dataSource = new kendo.data.DataSource();\r\n\r\n    var selectedElement = null;\r\n\r\n    /**\r\n     * Convert Core.Model to DataSource Item\r\n     * @private\r\n     * @type {kendo.data.DataSource}\r\n     */\r\n    function _toDataItem(elem) {\r\n        return {\r\n            id: elem._id,\r\n            icon: elem.getNodeIcon(),\r\n            text: elem.getNodeText(),\r\n            path: elem.getPathname()\r\n        };\r\n    }\r\n\r\n    function updateDataSource(elems) {\r\n        dataSource.data([]);\r\n        for (var i = 0, len = elems.length; i < len; i++) {\r\n            var item = elems[i];\r\n            dataSource.add(_toDataItem(item));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show Element List Picker Dialog.\r\n     *\r\n     * @param {string} title\r\n     * @param {Array.<Core.Model>} elems\r\n     */\r\n    function showDialog(title, elems) {\r\n        var context = {\r\n            Strings: Strings,\r\n            title: title\r\n        };\r\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(dialogTemplate, context), true, function ($dlg) {\r\n            $dlg.data("returnValue", selectedElement);\r\n        });\r\n\r\n        var $dlg = dialog.getElement(),\r\n            $listview = $dlg.find(".listview"),\r\n            $unspecified = $dlg.find(".unspecified");\r\n\r\n        var $wrapper = $dlg.find(".listview-wrapper");\r\n        ViewUtils.addScrollerShadow($wrapper, null, true);\r\n\r\n        // Setup ListView\r\n        selectedElement = null;\r\n        updateDataSource(elems);\r\n        $listview.kendoListView({\r\n            dataSource: dataSource,\r\n            template: "<div style=\'padding: 0.2em;\'><span class=\'k-sprite #=icon#\' style=\'margin-right: 3px\'></span>#:text# (#=path#)</div>",\r\n            selectable: true,\r\n            change: function (e) {\r\n                var selected = this.select();\r\n                if (selected && selected.length > 0) {\r\n                    var dataItem = dataSource.getByUid(selected[0].dataset.uid);\r\n                    selectedElement = Repository.get(dataItem.id);\r\n                    $unspecified.attr("checked", false);\r\n                }\r\n            }\r\n        });\r\n        var listview = $listview.data("kendoListView");\r\n\r\n        // Setup Unspecified\r\n        $unspecified.attr("checked", true);\r\n        $unspecified.change(function () {\r\n            var checked = $unspecified.is(":checked");\r\n            if (checked) {\r\n                listview.select($()); // clear selection\r\n                selectedElement = null;\r\n            }\r\n        });\r\n\r\n        return dialog;\r\n    }\r\n\r\n\r\n    // Public API\r\n    exports.showDialog = showDialog;\r\n\r\n});\r\n\n//# sourceURL=/dialogs/ElementListPickerDialog.js'),eval('define(\'text!htmlContent/print-dialog.html\',[],function () { return \'<div class="print-dialog dialog modal" data-title="Print to PDF">\\r\\n    <div class="dialog-body">\\r\\n        <table>\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <div>Print Range</div>\\r\\n                    <div style="margin: 5px;">\\r\\n                        <label class="k-radio-button">\\r\\n                            <input type="radio" name="print-range" value="all">\\r\\n                            <div class="k-radio-button__checkmark"></div>\\r\\n                            All Diagrams\\r\\n                        </label>\\r\\n                        <br>\\r\\n                        <label class="k-radio-button">\\r\\n                            <input type="radio" name="print-range" value="current">\\r\\n                            <div class="k-radio-button__checkmark"></div>\\r\\n                            Current Diagram\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div>Page Layout</div>\\r\\n                    <div style="margin: 5px;">\\r\\n                        <div class="radio-button-bar">\\r\\n                            <label class="radio-button-bar__item">\\r\\n                                <input id="print-dialog-layout-landscape" type="radio" name="page-layout" value="landscape">\\r\\n                                <label for="print-dialog-layout-landscape" class="k-button">Landscape</label>\\r\\n                            </label>\\r\\n                            <label class="radio-button-bar__item">\\r\\n                                <input id="print-dialog-layout-portrait" type="radio" name="page-layout" value="portrait">\\r\\n                                <label for="print-dialog-layout-portrait" class="k-button">Portrait</label>\\r\\n                            </label>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td>\\r\\n                    <div style="margin-top: 10px;">\\r\\n                        <label class="k-checkbox">\\r\\n                            <input type="checkbox" class="show-diagram-name">\\r\\n                            <div class="k-checkbox__checkmark"></div>\\r\\n                            Show Diagram Name\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <div>Page Size</div>\\r\\n                    <div style="margin: 5px;">\\r\\n                        <label class="k-select" style="width: 100px;">\\r\\n                            <select style="width: 100%;" class="page-size">\\r\\n                                <option value="4A0">4A0</option>\\r\\n                                <option value="2A0">2A0</option>\\r\\n                                <option value="A0">A0</option>\\r\\n                                <option value="A1">A1</option>\\r\\n                                <option value="A2">A2</option>\\r\\n                                <option value="A3">A3</option>\\r\\n                                <option value="A4">A4</option>\\r\\n                                <option value="A5">A5</option>\\r\\n                                <option value="A6">A6</option>\\r\\n                                <option value="A7">A7</option>\\r\\n                                <option value="A8">A8</option>\\r\\n                                <option value="A9">A9</option>\\r\\n                                <option value="A10">A10</option>\\r\\n                                <option value="B0">B0</option>\\r\\n                                <option value="B1">B1</option>\\r\\n                                <option value="B2">B2</option>\\r\\n                                <option value="B3">B3</option>\\r\\n                                <option value="B4">B4</option>\\r\\n                                <option value="B5">B5</option>\\r\\n                                <option value="B6">B6</option>\\r\\n                                <option value="B7">B7</option>\\r\\n                                <option value="B8">B8</option>\\r\\n                                <option value="B9">B9</option>\\r\\n                                <option value="B10">B10</option>\\r\\n                                <option value="C0">C0</option>\\r\\n                                <option value="C1">C1</option>\\r\\n                                <option value="C2">C2</option>\\r\\n                                <option value="C3">C3</option>\\r\\n                                <option value="C4">C4</option>\\r\\n                                <option value="C5">C5</option>\\r\\n                                <option value="C6">C6</option>\\r\\n                                <option value="C7">C7</option>\\r\\n                                <option value="C8">C8</option>\\r\\n                                <option value="C9">C9</option>\\r\\n                                <option value="C10">C10</option>\\r\\n                                <option value="RA0">RA0</option>\\r\\n                                <option value="RA1">RA1</option>\\r\\n                                <option value="RA2">RA2</option>\\r\\n                                <option value="RA3">RA3</option>\\r\\n                                <option value="RA4">RA4</option>\\r\\n                                <option value="SRA0">SRA0</option>\\r\\n                                <option value="SRA1">SRA1</option>\\r\\n                                <option value="SRA2">SRA2</option>\\r\\n                                <option value="SRA3">SRA3</option>\\r\\n                                <option value="SRA4">SRA4</option>\\r\\n                                <option value="EXECUTIVE">Executive</option>\\r\\n                                <option value="FOLIO">Folio</option>\\r\\n                                <option value="LEGAL">Legal</option>\\r\\n                                <option value="LETTER">Letter</option>\\r\\n                                <option value="TABLOID">Tabloid</option>\\r\\n                            </select>\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button primary" data-button-id="save">{{Strings.SAVE}}</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/print-dialog.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo, Mustache*/\r\n\r\ndefine(\'dialogs/PrintDialog\',[\'require\',\'exports\',\'module\',\'core/Global\',\'strings\',\'file/FileUtils\',\'dialogs/Dialogs\',\'core/PreferenceManager\',\'text!htmlContent/print-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global            = require("core/Global").global,\r\n        Strings           = require("strings"),\r\n        FileUtils         = require("file/FileUtils"),\r\n        Dialogs           = require("dialogs/Dialogs"),\r\n        PreferenceManager = require("core/PreferenceManager");\r\n\r\n    var printDialogTemplate = require("text!htmlContent/print-dialog.html");\r\n\r\n    /**\r\n     * Show Dialog\r\n     * @return {$.Promise}\r\n     */\r\n    function showDialog() {\r\n        var context = {\r\n            Strings: Strings\r\n        };\r\n\r\n        // Print Options (Default)\r\n        var printOptions = PreferenceManager.get("print.options");\r\n        if (!printOptions) {\r\n            printOptions = {\r\n                range: "all",\r\n                layout: "landscape",\r\n                size: "A4",\r\n                showName: true\r\n            };\r\n        }\r\n\r\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(printDialogTemplate, context), true, function ($dlg) {\r\n            $dlg.data("returnValue", printOptions);\r\n        });\r\n\r\n        var $dlg           = dialog.getElement(),\r\n            $rangeRadio    = $dlg.find("input[name=\'print-range\']"),\r\n            $layoutRadio   = $dlg.find("input[name=\'page-layout\']"),\r\n            $sizeSelect    = $dlg.find("select.page-size"),\r\n            $showNameCheck = $dlg.find("input.show-diagram-name");\r\n\r\n        // Set Default Values\r\n        $rangeRadio.val([printOptions.range]);\r\n        $layoutRadio.val([printOptions.layout]);\r\n        $sizeSelect.val(printOptions.size);\r\n        $showNameCheck.attr(\'checked\', printOptions.showName);\r\n\r\n        // On Changes\r\n        $rangeRadio.change(function () {\r\n            printOptions.range = this.value;\r\n            PreferenceManager.set("print.options", printOptions);\r\n        });\r\n        $layoutRadio.change(function () {\r\n            printOptions.layout = this.value;\r\n            PreferenceManager.set("print.options", printOptions);\r\n        });\r\n        $sizeSelect.change(function () {\r\n            printOptions.size = $sizeSelect.val();\r\n            PreferenceManager.set("print.options", printOptions);\r\n        });\r\n        $showNameCheck.change(function () {\r\n            printOptions.showName = $showNameCheck.is(":checked");\r\n            PreferenceManager.set("print.options", printOptions);\r\n        });\r\n\r\n        return dialog;\r\n    }\r\n\r\n    exports.showDialog = showDialog;\r\n\r\n});\r\n\n//# sourceURL=/dialogs/PrintDialog.js'),eval('define(\'text!htmlContent/enter-license-dialog.html\',[],function () { return \'<div class="enter-license-dialog dialog modal" data-title="Enter License">\\r\\n    <div class="dialog-body">\\r\\n        <div>Enter Name and License Key.</div>\\r\\n        <table>\\r\\n            <tr>\\r\\n                <td>Name</td>\\r\\n                <td><input type=\\\'text\\\' class=\\\'k-input k-textbox license-owner\\\'></td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td>License Key</td>\\r\\n                <td><textarea class=\\\'k-input k-textbox license-key\\\' rows="7"></textarea></td>\\r\\n            </tr>\\r\\n        </table>\\r\\n\\r\\n    </div>\\r\\n    <div class="dialog-footer">\\r\\n        <button class="k-button dialog-button left buy-now">Buy Now</button>\\r\\n        <button class="k-button dialog-button" data-button-id="cancel">{{Strings.CANCEL}}</button>\\r\\n        <button class="k-button dialog-button primary" data-button-id="ok">{{Strings.OK}}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\';});\n\n//# sourceURL=/text!htmlContent/enter-license-dialog.html'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, kendo, Mustache */\r\n\r\ndefine(\'license/EnterLicenseDialog\',[\'require\',\'exports\',\'module\',\'core/Global\',\'utils/Initializer\',\'strings\',\'dialogs/Dialogs\',\'license/LicenseManager\',\'text!htmlContent/enter-license-dialog.html\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global         = require("core/Global").global,\r\n        Initializer    = require("utils/Initializer"),\r\n        Strings        = require("strings"),\r\n        Dialogs        = require("dialogs/Dialogs"),\r\n        LicenseManager = require("license/LicenseManager");\r\n\r\n    var enterLicenseDialogTemplate = require("text!htmlContent/enter-license-dialog.html");\r\n\r\n    /**\r\n     * Show License Manager Dialog\r\n     * @return {$.Promise}\r\n     */\r\n    function showDialog() {\r\n        var context = {\r\n            Strings: Strings,\r\n            metadata: global.app.metadata\r\n        };\r\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(enterLicenseDialogTemplate, context));\r\n\r\n        var $dlg = dialog.getElement(),\r\n            $buyNow = $dlg.find(".buy-now"),\r\n            $licenseOwner = $dlg.find(".license-owner"),\r\n            $licenseKey = $dlg.find(".license-key");\r\n\r\n        $buyNow.click(function () {\r\n            appshell.app.openURLInDefaultBrowser(global.app.config.purchase_url);\r\n        });\r\n\r\n        dialog.done(function (buttonId) {\r\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                LicenseManager.register($licenseOwner.val().trim(), $licenseKey.val().trim())\r\n                    .done(function () {\r\n                        LicenseManager.validate()\r\n                            .done(function (status) {\r\n                                Dialogs.showInfoDialog("Congratulation! Your license is successfully registered.");\r\n                            })\r\n                            .fail(function (err) {\r\n                                Dialogs.showAlertDialog("Failed: " + err);\r\n                            });\r\n                    })\r\n                    .fail(function (err) {\r\n                        Dialogs.showAlertDialog("Failed to register License Key");\r\n                    });\r\n            }\r\n        });\r\n\r\n        return dialog;\r\n    }\r\n\r\n    exports.showDialog = showDialog;\r\n\r\n});\r\n\n//# sourceURL=/license/EnterLicenseDialog.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell, localStorage, type, setTimeout */\r\n\r\ndefine(\'command/DefaultCommandHandlers\',[\'require\',\'exports\',\'module\',\'core/Global\',\'utils/Initializer\',\'utils/AppInit\',\'utils/Helper\',\'utils/Constants\',\'core/Graphics\',\'core/Core\',\'core/Repository\',\'command/CommandManager\',\'command/Commands\',\'menu/MenuManager\',\'engine/ProjectManager\',\'engine/Engine\',\'engine/Factory\',\'engine/SelectionManager\',\'engine/ClipboardManager\',\'dialogs/Dialogs\',\'dialogs/ElementPickerDialog\',\'dialogs/ElementListPickerDialog\',\'filesystem/FileSystem\',\'filesystem/FileSystemError\',\'file/FileUtils\',\'strings\',\'diagrams/DiagramManager\',\'explorer/ModelExplorerView\',\'ui/StatusBar\',\'ui/Toast\',\'extensibility/ExtensionManagerDialog\',\'dialogs/AboutDialog\',\'preference/PreferenceDialog\',\'dialogs/PrintDialog\',\'utils/CheckUpdates\',\'metadata-json/MetadataJson\',\'license/LicenseManager\',\'license/EnterLicenseDialog\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global                  = require("core/Global").global,\r\n        Initializer             = require("utils/Initializer"),\r\n        AppInit                 = require("utils/AppInit"),\r\n        Helper                  = require("utils/Helper"),\r\n        Constants               = require("utils/Constants"),\r\n        Graphics                = require("core/Graphics"),\r\n        Core                    = require("core/Core"),\r\n        Repository              = require("core/Repository"),\r\n        CommandManager          = require("command/CommandManager"),\r\n        Commands                = require("command/Commands"),\r\n        MenuManager             = require("menu/MenuManager"),\r\n        ProjectManager          = require("engine/ProjectManager"),\r\n        Engine                  = require("engine/Engine"),\r\n        Factory                 = require("engine/Factory"),\r\n        SelectionManager        = require("engine/SelectionManager"),\r\n        ClipboardManager        = require("engine/ClipboardManager"),\r\n        Dialogs                 = require("dialogs/Dialogs"),\r\n        ElementPickerDialog     = require("dialogs/ElementPickerDialog"),\r\n        ElementListPickerDialog = require("dialogs/ElementListPickerDialog"),\r\n        FileSystem              = require("filesystem/FileSystem"),\r\n        FileSystemError         = require("filesystem/FileSystemError"),\r\n        FileUtils               = require("file/FileUtils"),\r\n        Strings                 = require("strings"),\r\n        DiagramManager          = require("diagrams/DiagramManager"),\r\n        ModelExplorerView       = require("explorer/ModelExplorerView"),\r\n        StatusBar               = require("ui/StatusBar"),\r\n        Toast                   = require("ui/Toast"),\r\n        ExtensionManagerDialog  = require("extensibility/ExtensionManagerDialog"),\r\n        AboutDialog             = require("dialogs/AboutDialog"),\r\n        PreferenceDialog        = require("preference/PreferenceDialog"),\r\n        PrintDialog             = require("dialogs/PrintDialog"),\r\n        CheckUpdates            = require("utils/CheckUpdates"),\r\n        MetadataJson            = require("metadata-json/MetadataJson"),\r\n        LicenseManager          = require("license/LicenseManager"),\r\n        EnterLicenseDialog      = require("license/EnterLicenseDialog");\r\n\r\n    /** Unique token used to indicate user-driven cancellation of Save As (as opposed to file IO error) */\r\n    var USER_CANCELED = { userCanceled: true };\r\n\r\n    function _showFileError(err) {\r\n        if (err === FileSystemError.NOT_READABLE) {\r\n            Dialogs.showErrorDialog("Cannot open the file. (Only UTF-8 encoded files are supported)");\r\n        } else if (err === FileSystemError.NOT_WRITABLE) {\r\n            Dialogs.showErrorDialog("Cannot save to file.");\r\n        } else if (err === FileSystemError.NOT_FOUND) {\r\n            Dialogs.showErrorDialog("File not found.");\r\n        } else {\r\n            Dialogs.showErrorDialog("File System Error (Error=" + err + ")");\r\n        }\r\n    }\r\n\r\n    /*\r\n     * File Command Handlers\r\n     */\r\n\r\n    /**\r\n     * New Project (from Template)\r\n     * @param {?string} template - Fullpath for a template to be loaded.\r\n     *      If not provided "<APP_BASE>/templates/Default.mdj" will be loaded.\r\n     * @return {$.Promise}\r\n     */\r\n    function _doFileNew(template) {\r\n        if (!template) {\r\n            template = FileUtils.getApplicationDirectoryPath() + "templates/" + app.config.defaultTemplate;\r\n        }\r\n        localStorage.removeItem("__working_filename");\r\n        return ProjectManager.loadAsTemplate(template);\r\n    }\r\n\r\n    /**\r\n     * Handler for File New\r\n     * @param {string} template\r\n     * @return {$.Promise}\r\n     */\r\n    function _handleFileNew(template) {\r\n        var result = new $.Deferred();\r\n        if (Repository.isModified()) {\r\n            Dialogs.showSaveConfirmDialog(ProjectManager.getFilename())\r\n                .done(function (buttonId) {\r\n                    switch (buttonId) {\r\n                    case Dialogs.DIALOG_BTN_DONTSAVE:\r\n                        _doFileNew(template).then(result.resolve, result.reject);\r\n                        break;\r\n                    case Dialogs.DIALOG_BTN_SAVE:\r\n                        _handleFileSave()\r\n                            .done(function () {\r\n                                _doFileNew(template).then(result.resolve, result.reject);\r\n                            })\r\n                            .fail(function (err) {\r\n                                result.reject(err);\r\n                            });\r\n                        break;\r\n                    case Dialogs.DIALOG_BTN_CANCEL:\r\n                        result.reject(USER_CANCELED);\r\n                        break;\r\n                    }\r\n                });\r\n        } else {\r\n            _doFileNew(template).then(result.resolve, result.reject);\r\n        }\r\n        return result.promise();\r\n    }\r\n\r\n    function _doFileSave(fullPath) {\r\n        var result = new $.Deferred();\r\n        ProjectManager.save(fullPath)\r\n            .done(function () {\r\n                result.resolve();\r\n            })\r\n            .fail(function (err) {\r\n                _showFileError(err);\r\n                console.error(err);\r\n                result.reject(err);\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Handler for File Save\r\n     * @param {string} fullPath\r\n     * @param {boolean} saveAs\r\n     * @return {$.Promise}\r\n     */\r\n    function _handleFileSave(fullPath, saveAs) {\r\n        var result = new $.Deferred();\r\n\r\n        // Set focus to body in order to apply changes of documentation editor\r\n        $("#diagram-canvas").focus();\r\n\r\n        if (fullPath) {\r\n            ProjectManager.save(fullPath).then(result.resolve, result.reject);\r\n        } else {\r\n            if (ProjectManager.getFilename() && !saveAs) {\r\n                return _doFileSave(ProjectManager.getFilename()).then(result.resolve, result.reject);\r\n            } else {\r\n                FileSystem.showSaveDialog("Save Project As", null, "Untitled." + Constants.APP_EXT, function (err, selectedPath) {\r\n                    if (!err) {\r\n                        if (selectedPath) {\r\n                            if (!FileUtils.getFileExtension(selectedPath)) {\r\n                                selectedPath = selectedPath + "." + Constants.APP_EXT;\r\n                            }\r\n                            _doFileSave(selectedPath).then(result.resolve, result.reject);\r\n                        } else {\r\n                            result.reject(USER_CANCELED);\r\n                        }\r\n                    } else {\r\n                        result.reject(err);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return result.promise();\r\n    }\r\n\r\n\r\n    function _doFileOpen(fullPath) {\r\n        var result = new $.Deferred();\r\n        if (Repository.isModified()) {\r\n            Dialogs.showSaveConfirmDialog(ProjectManager.getFilename())\r\n                .done(function (buttonId) {\r\n                    switch (buttonId) {\r\n                    case Dialogs.DIALOG_BTN_DONTSAVE:\r\n                        ProjectManager.load(fullPath).then(result.resolve, result.reject);\r\n                        break;\r\n                    case Dialogs.DIALOG_BTN_SAVE:\r\n                        _handleFileSave()\r\n                            .done(function () {\r\n                                ProjectManager.load(fullPath)\r\n                                    .done(function () {\r\n                                        result.resolve();\r\n                                    })\r\n                                    .fail(function (err) {\r\n                                        _showFileError(err);\r\n                                        console.error(err);\r\n                                        result.reject(err);\r\n                                    });\r\n                            })\r\n                            .fail(function (err) {\r\n                                result.reject(err);\r\n                            });\r\n                        break;\r\n                    case Dialogs.DIALOG_BTN_CANCEL:\r\n                        result.reject(USER_CANCELED);\r\n                        break;\r\n                    }\r\n                });\r\n        } else {\r\n            ProjectManager.load(fullPath).then(result.resolve, result.reject);\r\n        }\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Handler for File Open\r\n     * param {string} fullPath\r\n     * @return {$.Promise}\r\n     */\r\n    function _handleFileOpen(fullPath) {\r\n        var result = new $.Deferred();\r\n        if (fullPath) {\r\n            _doFileOpen(fullPath).then(result.resolve, result.reject);\r\n        } else {\r\n            FileSystem.showOpenDialog(false, false, "Select a model file...", null, ["umlj", Constants.APP_EXT], function (err, files) {\r\n                if (!err) {\r\n                    if (files.length > 0) {\r\n                        _doFileOpen(files[0]).then(result.resolve, result.reject);\r\n                    } else {\r\n                        result.reject(USER_CANCELED);\r\n                    }\r\n                } else {\r\n                    result.reject(err);\r\n                }\r\n            });\r\n        }\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Handler for Import Fragment\r\n     * param {string} fullPath\r\n     * @return {$.Promise}\r\n     */\r\n    function _handleImportFragment(fullPath) {\r\n        var result = new $.Deferred();\r\n        if (fullPath) {\r\n            ProjectManager.importFromFile(ProjectManager.getProject(), fullPath).then(result.resolve, result.reject);\r\n        } else {\r\n            FileSystem.showOpenDialog(false, false, "Select a model fragment to import...", null, ["umlf", Constants.FRAG_EXT], function (err, files) {\r\n                if (!err) {\r\n                    if (files.length > 0) {\r\n                        ProjectManager.importFromFile(ProjectManager.getProject(), files[0])\r\n                            .done(function () {\r\n                                result.resolve();\r\n                            })\r\n                            .fail(function (err) {\r\n                                _showFileError(err);\r\n                                console.error(err);\r\n                                result.reject(err);\r\n                            });\r\n                    } else {\r\n                        result.reject(USER_CANCELED);\r\n                    }\r\n                } else {\r\n                    result.reject(err);\r\n                }\r\n            });\r\n        }\r\n        return result.promise();\r\n    }\r\n\r\n\r\n    function _doFileExport(elem, filename) {\r\n        var result = new $.Deferred();\r\n        ProjectManager.exportToFile(elem, filename)\r\n            .done(function () {\r\n                result.resolve();\r\n            })\r\n            .fail(function (err) {\r\n                _showFileError(err);\r\n                console.error(err);\r\n                result.reject(err);\r\n            });\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Handler for Export Fragment\r\n     * param {Element} element\r\n     * param {string} fullPath\r\n     * @return {$.Promise}\r\n     */\r\n    function _handleExportFragment(element, fullPath) {\r\n        var result = new $.Deferred();\r\n        if (element) {\r\n            if (fullPath) {\r\n                ProjectManager.exportToFile(element, fullPath).then(result.resolve, result.reject);\r\n            } else {\r\n                FileSystem.showSaveDialog("Export Model Fragment", null, "Fragment." + Constants.FRAG_EXT, function (err, filename) {\r\n                    if (!err) {\r\n                        if (filename) {\r\n                            if (!FileUtils.getFileExtension(filename)) {\r\n                                filename = filename + "." + Constants.FRAG_EXT;\r\n                            }\r\n                            _doFileExport(element, filename).then(result.resolve, result.reject);\r\n                        } else {\r\n                            result.reject(USER_CANCELED);\r\n                        }\r\n                    } else {\r\n                        result.reject(err);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            if (fullPath) {\r\n                ElementPickerDialog.showDialog("Select Element to Export", null, null)\r\n                    .done(function (buttonId, selected) {\r\n                        if (buttonId === Dialogs.DIALOG_BTN_OK && selected !== null) {\r\n                            _doFileExport(selected, fullPath).then(result.resolve, result.reject);\r\n                        } else {\r\n                            result.reject(USER_CANCELED);\r\n                        }\r\n                    });\r\n            } else {\r\n                ElementPickerDialog.showDialog("Select Element to Export", null, null)\r\n                    .done(function (buttonId, selected) {\r\n                        if (buttonId === Dialogs.DIALOG_BTN_OK && selected !== null) {\r\n                            FileSystem.showSaveDialog("Export Model Fragment", null, "Fragment." + Constants.FRAG_EXT, function (err, filename) {\r\n                                if (!err) {\r\n                                    if (filename) {\r\n                                        if (!FileUtils.getFileExtension(filename)) {\r\n                                            filename = filename + "." + Constants.FRAG_EXT;\r\n                                        }\r\n                                        _doFileExport(selected, filename).then(result.resolve, result.reject);\r\n                                    } else {\r\n                                        result.reject(USER_CANCELED);\r\n                                    }\r\n                                } else {\r\n                                    result.reject(err);\r\n                                }\r\n                            });\r\n                        } else {\r\n                            result.reject(USER_CANCELED);\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Handler for File Close\r\n     * @return {$.Promise}\r\n     */\r\n    function _handleFileClose() {\r\n        var result = new $.Deferred();\r\n        if (Repository.isModified()) {\r\n            Dialogs.showSaveConfirmDialog(ProjectManager.getFilename())\r\n                .done(function (buttonId) {\r\n                    switch (buttonId) {\r\n                    case Dialogs.DIALOG_BTN_DONTSAVE:\r\n                        ProjectManager.closeProject();\r\n                        result.resolve();\r\n                        break;\r\n                    case Dialogs.DIALOG_BTN_SAVE:\r\n                        _handleFileSave()\r\n                            .then(function () {\r\n                                ProjectManager.closeProject();\r\n                                result.resolve();\r\n                            })\r\n                            .fail(function (err) {\r\n                                result.reject(err);\r\n                            });\r\n                        break;\r\n                    case Dialogs.DIALOG_BTN_CANCEL:\r\n                        result.reject();\r\n                        break;\r\n                    }\r\n                });\r\n        } else {\r\n            ProjectManager.closeProject();\r\n            result.resolve();\r\n        }\r\n        localStorage.removeItem("__working_filename");\r\n        return result.promise();\r\n    }\r\n\r\n    /**\r\n     * Handler for Preference\r\n     */\r\n    function _handlePreferences(preferenceId) {\r\n        PreferenceDialog.showDialog(preferenceId);\r\n    }\r\n\r\n    /**\r\n     * Handler for Print to PDF\r\n     */\r\n    function _handlePrintToPDF() {\r\n        var result = new $.Deferred();\r\n        if (Repository.isModified() || !ProjectManager.getFilename()) {\r\n            Dialogs.showInfoDialog("Save changes before printing").done(function () {\r\n                result.reject(USER_CANCELED);\r\n            });\r\n        } else {\r\n            PrintDialog.showDialog().done(function (buttonId, printOptions) {\r\n                if (buttonId === Dialogs.DIALOG_BTN_SAVE) {\r\n                    var diagrams = [];\r\n                    if (printOptions.range === "current") {\r\n                        var current = DiagramManager.getCurrentDiagram();\r\n                        if (current) {\r\n                            diagrams.push(current);\r\n                        }\r\n                    } else {\r\n                       diagrams = Repository.getInstancesOf("Diagram");\r\n                    }\r\n                    if (diagrams.length > 0) {\r\n                        var fn = FileUtils.convertToWindowsFilename(ProjectManager.getProject().name);\r\n                        FileSystem.showSaveDialog("Print to PDF", null, fn + ".pdf", function (err, filename) {\r\n                            if (!err) {\r\n                                if (filename) {\r\n                                    if (!FileUtils.getFileExtension(filename)) {\r\n                                        filename = filename + ".pdf";\r\n                                    }\r\n                                    MetadataJson.exportToPDF(ProjectManager.getFilename(), diagrams, filename, printOptions)\r\n                                        .done(function () {\r\n                                            result.resolve();\r\n                                        })\r\n                                        .fail(function (err) {\r\n                                            Dialogs.showErrorDialog("Failed to generate PDF. (Error=" + err + ")");\r\n                                            console.error(err);\r\n                                            result.reject();\r\n                                        });\r\n                                } else {\r\n                                    result.reject(USER_CANCELED);\r\n                                }\r\n                            } else {\r\n                                result.reject(err);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        Dialogs.showAlertDialog("No current diagram.").done(function () {\r\n                            result.reject(USER_CANCELED);\r\n                        });\r\n                    }\r\n                } else {\r\n                    result.reject(USER_CANCELED);\r\n                }\r\n            });\r\n\r\n        }\r\n        return result.promise();\r\n    }\r\n\r\n    function _beforeQuit() {\r\n        DiagramManager.saveWorkingDiagrams();\r\n        localStorage.removeItem("__backup_filename");\r\n    }\r\n\r\n    /**\r\n     * Handler for Close Window.\r\n     * Returning rejected promise will close application, otherwise application will not be closed.\r\n     */\r\n    function _handleFileCloseWindow() {\r\n        var result = new $.Deferred();\r\n        if (Repository.isModified()) {\r\n            _handleFileClose()\r\n                .done(function () {\r\n                    CommandManager.execute(Commands.FILE_QUIT);\r\n                });\r\n            result.resolve();\r\n        } else {\r\n            _beforeQuit();\r\n            result.reject();\r\n        }\r\n        return result.promise();\r\n    }\r\n\r\n    function _handleFileQuit() {\r\n        _beforeQuit();\r\n        appshell.app.quit();\r\n    }\r\n\r\n    /*\r\n     * Edit Command Handlers\r\n     */\r\n\r\n    function _handleUndo() {\r\n        Repository.undo();\r\n    }\r\n\r\n    function _handleRedo() {\r\n        Repository.redo();\r\n    }\r\n\r\n    function _handleCut() {\r\n        var models = SelectionManager.getSelectedModels(),\r\n            views  = SelectionManager.getSelectedViews();\r\n        // Cut Model\r\n        if (models.length === 1 && views.length === 0 && models[0].canCopy()) {\r\n            ClipboardManager.setModel(models[0]);\r\n            _handleDeleteFromModel();\r\n        }\r\n        // Cut Views\r\n        var diagram = DiagramManager.getEditor().diagram;\r\n        if (views.length > 0 && diagram && diagram.canCopyViews() && diagram.canDeleteViews()) {\r\n            ClipboardManager.setViews(views);\r\n            _handleDelete();\r\n        }\r\n    }\r\n\r\n    function _handleCopy() {\r\n        var models = SelectionManager.getSelectedModels(),\r\n            views  = SelectionManager.getSelectedViews();\r\n        // Copy Model\r\n        if (models.length === 1 && views.length === 0 && models[0].canCopy()) {\r\n            ClipboardManager.setModel(models[0]);\r\n        }\r\n        // Copy Views: remove views where canCopy() === false\r\n        if (views.length > 0) {\r\n            var diagram = DiagramManager.getEditor().diagram;\r\n            for (var i = views.length - 1; i >= 0; i--) {\r\n                if (!views[i].canCopy()) {\r\n                    diagram.deselectView(views[i]);\r\n                }\r\n            }\r\n            views = diagram.selectedViews;\r\n            if (views.length > 0 && diagram && diagram.canCopyViews()) {\r\n                ClipboardManager.setViews(views);\r\n            } else {\r\n                if (diagram instanceof type.UMLSequenceDiagram || diagram instanceof type.UMLCommunicationDiagram) {\r\n                    Dialogs.showInfoDialog("Copying view elements in Sequence or Communication Diagram is not supported.\\n To copy the entire Sequence or Communication Diagram, copy \'Interaction\' or \'Collaboration (or Classifier)\' containing the Diagram in Explorer.");\r\n                } else {\r\n                    Dialogs.showInfoDialog("No views to copy or some fo selected views cannot be copied.");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _handlePaste() {\r\n        var kind = ClipboardManager.getKind();\r\n        // Paste Model\r\n        if (kind === ClipboardManager.DK_MODEL) {\r\n            var parent  = SelectionManager.getSelected(),\r\n                context = ClipboardManager.getCopyContext();\r\n            if (parent && parent.canPaste(ClipboardManager.getElementType(), context)) {\r\n                var model = ClipboardManager.getModel();\r\n                Engine.addModel(parent, context.field, model);\r\n            }\r\n        // Paste Views\r\n        } else if (kind === ClipboardManager.DK_VIEWS) {\r\n            var views = ClipboardManager.getViews();\r\n            var diagram = DiagramManager.getEditor().diagram;\r\n\r\n            if (views.length > 0 && diagram) {\r\n\r\n                // Views in clipboard can be pasted in diagram\r\n                if (diagram.canPasteViews(views)) {\r\n                    // Deselect all views.\r\n                    DiagramManager.deselectAll();\r\n\r\n                    // Compute bounding box of views\r\n                    var boundingBox = views[0].getBoundingBox(),\r\n                        i, len;\r\n                    for (i = 0, len = views.length; i < len; i++) {\r\n                        boundingBox.union(views[i].getBoundingBox());\r\n                    }\r\n\r\n                    // Compute dx, dy to place pasted views on the center of screen\r\n                    var areaCenter = DiagramManager.getDiagramArea().getCenter(),\r\n                        boundCenter = boundingBox.getCenter(),\r\n                        dx = Math.round(areaCenter.x - boundCenter.x),\r\n                        dy = Math.round(areaCenter.y - boundCenter.y);\r\n\r\n                    // Move views to be paste as (dx, dy).\r\n                    for (i = 0, len = views.length; i < len; i++) {\r\n                        views[i].move(DiagramManager.getEditor().canvas, dx, dy);\r\n                    }\r\n\r\n                    Engine.addViews(diagram, views);\r\n                    // Select the pasted views.\r\n                    var newViews = [];\r\n                    for (i = 0, len = views.length; i < len; i++) {\r\n                        var v = Repository.get(views[i]._id);\r\n                        diagram.selectView(v);\r\n                        newViews.push(v);\r\n                    }\r\n                    SelectionManager.selectViews(newViews);\r\n                } else {\r\n                    Dialogs.showInfoDialog("Views in clipboard cannot be pasted in this diagram.");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _handleDelete() {\r\n        var diagram = DiagramManager.getEditor().diagram;\r\n        if (diagram && diagram.canDeleteViews()) {\r\n            var views = SelectionManager.getSelectedViews();\r\n            Engine.deleteElements([], views);\r\n            SelectionManager.deselectAll();\r\n        } else {\r\n            // Try to delete views only for the elements recommended to be deleted with models (e.g. Lifelines)\r\n            Dialogs.showModalDialog(\r\n                "",\r\n                "Delete Views Only",\r\n                "Do you want to delete views only?",\r\n                [\r\n                    { id: "delete-from-model", text: "Delete from Model", className: Dialogs.DIALOG_BTN_CLASS_LEFT },\r\n                    { id: "delete-views-only", text: "Delete Views Only", className: Dialogs.DIALOG_BTN_CLASS_PRIMARY },\r\n                    { id: Dialogs.DIALOG_BTN_CANCEL, text: Strings.CANCEL }\r\n                ]\r\n            ).done(function (buttonId) {\r\n                switch (buttonId) {\r\n                case "delete-from-model":\r\n                    CommandManager.execute(Commands.EDIT_DELETE_FROM_MODEL);\r\n                    break;\r\n                case "delete-views-only":\r\n                    var _views = SelectionManager.getSelectedViews();\r\n                    Engine.deleteElements([], _views);\r\n                    SelectionManager.deselectAll();\r\n                    break;\r\n                }\r\n                console.log(buttonId);\r\n            });\r\n            // Dialogs.showAlertDialog("Selected views should be deleted with models by \'Delete from Model\'");\r\n        }\r\n    }\r\n\r\n    function _handleDeleteFromModel() {\r\n        var models = _.clone(SelectionManager.getSelectedModels());\r\n        _.each(SelectionManager.getSelectedViews(), function (view) {\r\n            if (view.model && !_.contains(models, view.model)) {\r\n                models.push(view.model);\r\n            }\r\n        });\r\n        if (models.length > 0) {\r\n            _.each(models, function (e) {\r\n                if (e instanceof type.Diagram) {\r\n                    DiagramManager.closeDiagram(e);\r\n                }\r\n            });\r\n            Engine.deleteElements(models, []);\r\n            SelectionManager.deselectAll();\r\n        }\r\n    }\r\n\r\n    function _handleMoveUp() {\r\n        var elem = SelectionManager.getSelected();\r\n        if (elem) {\r\n            Engine.moveUp(elem._parent, elem.getParentField(), elem);\r\n        }\r\n    }\r\n\r\n    function _handleMoveDown() {\r\n        var elem = SelectionManager.getSelected();\r\n        if (elem) {\r\n            Engine.moveDown(elem._parent, elem.getParentField(), elem);\r\n        }\r\n    }\r\n\r\n    function _handleSelectAll() {\r\n        // Select text in focused <input>, <textarea> when press Ctrl+A.\r\n        var $focused = $(\'input:focus, textarea:focus\');\r\n        if ($focused.length > 0) {\r\n            $focused.select();\r\n        // Otherwise, select views in diagram.\r\n        } else {\r\n            DiagramManager.selectAll();\r\n        }\r\n    }\r\n\r\n    function _handleSelectInExplorer() {\r\n        var models = SelectionManager.getSelectedModels();\r\n        if (models.length > 0) {\r\n            ModelExplorerView.select(models[0], true);\r\n        }\r\n    }\r\n\r\n    function _handleSelectInDiagram() {\r\n        var models = SelectionManager.getSelectedModels();\r\n        if (models.length > 0) {\r\n            var views = _.reject(Repository.getViewsOf(models[0]), function (v) {\r\n                return !(v._parent instanceof type.Diagram);\r\n            });\r\n            if (views.length === 1) {\r\n                DiagramManager.selectInDiagram(views[0]);\r\n            } else if (views.length > 1) {\r\n                var diagrams   = [],\r\n                    diagramMap = {};\r\n                _.each(views, function (v) {\r\n                    var d = v.getDiagram();\r\n                    diagrams.push(d);\r\n                    diagramMap[d._id] = v;\r\n                });\r\n                ElementListPickerDialog.showDialog("Select Diagram to show", diagrams)\r\n                    .done(function (buttonId, selected) {\r\n                        if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                            if (selected) {\r\n                                var selectedDiagram = diagramMap[selected._id];\r\n                                DiagramManager.selectInDiagram(selectedDiagram);\r\n                            }\r\n                        }\r\n                    });\r\n            } else {\r\n                Toast.info("No diagrams to show");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Format Command Handlers\r\n     */\r\n\r\n    function _handleFont() {\r\n        var views = SelectionManager.getSelectedViews();\r\n        var fonts = _.map(views, function (view) { return view.font; });\r\n        var font = {\r\n            face: Helper.reduceValue(fonts, \'face\'),\r\n            size: Helper.reduceValue(fonts, \'size\'),\r\n            color: Helper.reduceValue(views, \'fontColor\')\r\n        };\r\n        Dialogs.showFontDialog(font).done(function (buttonId, result) {\r\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                if (result.size && !_.isNumber(result.size)) {\r\n                    result.size = parseInt(result.size);\r\n                }\r\n                Engine.setFont(DiagramManager.getEditor(), views, result.face, result.size, result.color);\r\n            }\r\n        });\r\n    }\r\n\r\n    function _handleFillColor() {\r\n        var views = SelectionManager.getSelectedViews();\r\n        var color = Helper.reduceValue(views, \'fillColor\');\r\n        Dialogs.showColorDialog(color).done(function (buttonId, result) {\r\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                Engine.setFillColor(DiagramManager.getEditor(), views, result);\r\n            }\r\n        });\r\n    }\r\n\r\n    function _handleLineColor() {\r\n        var views = SelectionManager.getSelectedViews();\r\n        var color = Helper.reduceValue(views, \'lineColor\');\r\n        Dialogs.showColorDialog(color).done(function (buttonId, result) {\r\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                Engine.setLineColor(DiagramManager.getEditor(), views, result);\r\n            }\r\n        });\r\n    }\r\n\r\n    function _handleLineStyleRectilinear() {\r\n        var views = SelectionManager.getSelectedViews();\r\n        Engine.setElemsProperty(views, \'lineStyle\', Core.LS_RECTILINEAR);\r\n    }\r\n\r\n    function _handleLineStyleOblique() {\r\n        var views = SelectionManager.getSelectedViews();\r\n        Engine.setElemsProperty(views, \'lineStyle\', Core.LS_OBLIQUE);\r\n    }\r\n\r\n    function _handleLineStyleRoundRect() {\r\n        var views = SelectionManager.getSelectedViews();\r\n        Engine.setElemsProperty(views, \'lineStyle\', Core.LS_ROUNDRECT);\r\n    }\r\n\r\n    function _handleLineStyleCurve() {\r\n        var views = SelectionManager.getSelectedViews();\r\n        Engine.setElemsProperty(views, \'lineStyle\', Core.LS_CURVE);\r\n    }\r\n\r\n    function _handleAutoResize() {\r\n        var views = SelectionManager.getSelectedViews();\r\n        var autoResize = Helper.reduceValue(views, \'autoResize\');\r\n        Engine.setElemsProperty(views, \'autoResize\', !autoResize);\r\n    }\r\n\r\n    function _handleShowShadow() {\r\n        var views = SelectionManager.getSelectedViews();\r\n        var showShadow = Helper.reduceValue(views, \'showShadow\');\r\n        Engine.setElemsProperty(views, \'showShadow\', !showShadow);\r\n    }\r\n\r\n    /*\r\n     * View Command Handlers\r\n     */\r\n\r\n    function _handleCloseDiagram() {\r\n        DiagramManager.closeDiagram(DiagramManager.getCurrentDiagram());\r\n    }\r\n\r\n    function _handleCloseOtherDiagrams() {\r\n        DiagramManager.closeOthers();\r\n    }\r\n\r\n    function _handleCloseAllDiagrams() {\r\n        DiagramManager.closeAll();\r\n    }\r\n\r\n    function _handleNextDiagram() {\r\n        DiagramManager.nextDiagram();\r\n    }\r\n\r\n    function _handlePreviousDiagram() {\r\n        DiagramManager.previousDiagram();\r\n    }\r\n\r\n    function _handleZoomIn() {\r\n        DiagramManager.setZoomLevel(DiagramManager.getZoomLevel() + 0.1);\r\n        StatusBar.setZoomLevel(DiagramManager.getZoomLevel());\r\n    }\r\n\r\n    function _handleZoomOut() {\r\n        DiagramManager.setZoomLevel(DiagramManager.getZoomLevel() - 0.1);\r\n        StatusBar.setZoomLevel(DiagramManager.getZoomLevel());\r\n    }\r\n\r\n    function _handleActualSize() {\r\n        DiagramManager.setZoomLevel(1);\r\n        StatusBar.setZoomLevel(DiagramManager.getZoomLevel());\r\n    }\r\n\r\n    function _handleFitToWindow() {\r\n        var diagram = DiagramManager.getCurrentDiagram();\r\n        if (diagram) {\r\n            var size = DiagramManager.getViewportSize(),\r\n                box  = diagram.getBoundingBox(),\r\n                hr   = size.x / box.x2,\r\n                wr   = size.y / box.y2,\r\n                zoom = Math.min(hr, wr);\r\n            if (zoom > 1) { zoom = 1; }\r\n            DiagramManager.setZoomLevel(zoom);\r\n            DiagramManager.scrollTo(0, 0, true);\r\n            StatusBar.setZoomLevel(DiagramManager.getZoomLevel());\r\n        }\r\n    }\r\n\r\n    function _handleShowGrid() {\r\n        DiagramManager.toggleGrid();\r\n    }\r\n\r\n    /*\r\n     * Tools Command Handlers\r\n     */\r\n\r\n    function _handleExtensionManager() {\r\n        ExtensionManagerDialog.showDialog();\r\n    }\r\n\r\n    /*\r\n     * Help Command Handlers\r\n     */\r\n\r\n    function _handleAbout() {\r\n        AboutDialog.showDialog();\r\n    }\r\n\r\n    function _handleCheckForUpdates() {\r\n        CheckUpdates.checkForUpdates()\r\n            .done(function (newRelease) {\r\n                CheckUpdates.showUpdateDialog(newRelease);\r\n            })\r\n            .fail(function (noUpdates) {\r\n                Dialogs.showInfoDialog(noUpdates);\r\n            });\r\n    }\r\n\r\n    function _handleEnterLicense() {\r\n        if (LicenseManager.getStatus() === LicenseManager.STAT_REGISTERED) {\r\n            Dialogs.showInfoDialog("You already have a valid license.");\r\n        } else {\r\n            EnterLicenseDialog.showDialog();\r\n        }\r\n    }\r\n\r\n    function _handleDocumentation() {\r\n        appshell.app.openURLInDefaultBrowser(global.app.config.documentation_url);\r\n    }\r\n\r\n    function _handleForum() {\r\n        appshell.app.openURLInDefaultBrowser(global.app.config.forum_url);\r\n    }\r\n\r\n    function _handleReleaseNotes() {\r\n        appshell.app.openURLInDefaultBrowser(global.app.config.release_notes_url);\r\n    }\r\n\r\n    function _handleRequestFeature() {\r\n        appshell.app.openURLInDefaultBrowser(global.app.config.feature_request_url);\r\n    }\r\n\r\n    /*\r\n     * Internal Command Handlers\r\n     */\r\n\r\n    function _handleReload() {\r\n        setTimeout(function () {\r\n            // Remove all menus before reload (One reason is to remove menus registered by extensions)\r\n            _.forEach(MenuManager.getAllMenus(), function (value, key) {\r\n                MenuManager.removeMenu(key);\r\n            });\r\n            window.location.reload(true);\r\n        }, 100);\r\n    }\r\n\r\n    function _updateCommands() {\r\n        try {\r\n            var models = SelectionManager.getSelectedModels(),\r\n                views = SelectionManager.getSelectedViews();\r\n\r\n            // The reason why we don\'t disable Copy, Cut, Paste, Delete Menus is to allow\r\n            // the browser\'s original actions. (e.g. editing in Input or TextArea)\r\n            // Update Delete From Model Menu\r\n            var _deleteFromModelCmd = CommandManager.get(Commands.EDIT_DELETE_FROM_MODEL);\r\n            if (models.length > 0 && models[0].canDelete()) {\r\n                _deleteFromModelCmd.setEnabled(true);\r\n            } else {\r\n                _deleteFromModelCmd.setEnabled(false);\r\n            }\r\n            // Update Font, Line Color, Fill Color Menus\r\n            CommandManager.get(Commands.FORMAT_FONT).setEnabled(views.length > 0);\r\n            CommandManager.get(Commands.FORMAT_FILL_COLOR).setEnabled(views.length > 0);\r\n            CommandManager.get(Commands.FORMAT_LINE_COLOR).setEnabled(views.length > 0);\r\n\r\n            // Update LineStyle Menu\r\n            CommandManager.get(Commands.FORMAT_LINE_STYLE).setEnabled(views.length > 0);\r\n            var lineStyle = Helper.reduceValue(views, "lineStyle");\r\n            CommandManager.get(Commands.FORMAT_LINE_STYLE_RECTILINEAR).setChecked(lineStyle === Core.LS_RECTILINEAR);\r\n            CommandManager.get(Commands.FORMAT_LINE_STYLE_OBLIQUE).setChecked(lineStyle === Core.LS_OBLIQUE);\r\n            CommandManager.get(Commands.FORMAT_LINE_STYLE_ROUNDRECT).setChecked(lineStyle === Core.LS_ROUNDRECT);\r\n            CommandManager.get(Commands.FORMAT_LINE_STYLE_CURVE).setChecked(lineStyle === Core.LS_CURVE);\r\n\r\n            // Update AutoResize Menu\r\n            CommandManager.get(Commands.FORMAT_AUTO_RESIZE).setEnabled(views.length > 0);\r\n            var autoResize = Helper.reduceValue(views, \'autoResize\');\r\n            CommandManager.get(Commands.FORMAT_AUTO_RESIZE).setChecked(autoResize === true);\r\n\r\n            // Update ShowShadow Menu\r\n            CommandManager.get(Commands.FORMAT_SHOW_SHADOW).setEnabled(views.length > 0);\r\n            var showShadow = Helper.reduceValue(views, \'showShadow\');\r\n            CommandManager.get(Commands.FORMAT_SHOW_SHADOW).setChecked(showShadow === true);\r\n\r\n            // TODO: Update Model > Add\r\n            /*\r\n            var i, len, _addEnable = false;\r\n            for (i = 0, len = addCommands.length; i < len; i++) {\r\n                if (CommandManager.get(addCommands[i]).getVisible()) {\r\n                    _addEnable = true;\r\n                }\r\n            }\r\n            CommandManager.get(UMLCommands.MODEL_ADD).setEnabled(_addEnable);\r\n            */\r\n\r\n            // TODO: Update Model > Add Diagram\r\n            /*\r\n            var _addDiagramEnable = false;\r\n            for (i = 0, len = addDiagramCommands.length; i < len; i++) {\r\n                if (CommandManager.get(addDiagramCommands[i]).getVisible()) {\r\n                    _addDiagramEnable = true;\r\n                }\r\n            }\r\n            CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM).setEnabled(_addDiagramEnable);\r\n            */\r\n\r\n            /*\r\n            var modelSize = models.length,\r\n                viewSize = views.length;\r\n            MenuManager.setCommonMenuItemEnable(Commands.EDIT_DELETE_FROM_MODEL, false);\r\n            MenuManager.setCommonMenuItemEnable(Commands.FORMAT, false);\r\n            if (viewSize > 0) {\r\n                MenuManager.setCommonMenuItemEnable(Commands.FORMAT, true);\r\n            }\r\n            var lineStyle = Helper.reduceValue(views, \'lineStyle\');\r\n            MenuManager.setCommonMenuItemChecked(Commands.FORMAT_LINE_STYLE_OBLIQUE, (lineStyle === Core.LS_OBLIQUE));\r\n            MenuManager.setCommonMenuItemChecked(Commands.FORMAT_LINE_STYLE_RECTILINEAR, (lineStyle === Core.LS_RECTILINEAR));\r\n            var autoResize = Helper.reduceValue(views, \'autoResize\');\r\n            MenuManager.setCommonMenuItemChecked(Commands.FORMAT_AUTO_RESIZE, (autoResize === true));\r\n            */\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    // Set some command strings\r\n    var quitString  = Strings.CMD_QUIT;\r\n    if (app.platform === "win") {\r\n        quitString  = Strings.CMD_EXIT;\r\n    }\r\n\r\n    // Register Commands\r\n    // File\r\n    CommandManager.register(Strings.CMD_FILE,                    Commands.FILE,                    CommandManager.doNothing);\r\n    CommandManager.register(Strings.CMD_FILE_NEW,                Commands.FILE_NEW,                _handleFileNew);\r\n    CommandManager.register(Strings.CMD_FILE_NEW_FROM_TEMPLATE,  Commands.FILE_NEW_FROM_TEMPLATE,  _handleFileNew);\r\n    CommandManager.register(Strings.CMD_FILE_OPEN,               Commands.FILE_OPEN,               _handleFileOpen);\r\n    CommandManager.register(Strings.CMD_FILE_SAVE,               Commands.FILE_SAVE,               _handleFileSave);\r\n    CommandManager.register(Strings.CMD_FILE_SAVE_AS,            Commands.FILE_SAVE_AS,            _.partial(_handleFileSave, undefined, true));\r\n    CommandManager.register(Strings.CMD_FILE_IMPORT,             Commands.FILE_IMPORT,             CommandManager.doNothing);\r\n    CommandManager.register(Strings.CMD_FILE_IMPORT_FRAGMENT,    Commands.FILE_IMPORT_FRAGMENT,    _handleImportFragment);\r\n    CommandManager.register(Strings.CMD_FILE_EXPORT,             Commands.FILE_EXPORT,             CommandManager.doNothing);\r\n    CommandManager.register(Strings.CMD_FILE_EXPORT_FRAGMENT,    Commands.FILE_EXPORT_FRAGMENT,    _handleExportFragment);\r\n    CommandManager.register(Strings.CMD_FILE_CLOSE,              Commands.FILE_CLOSE,              _handleFileClose);\r\n    CommandManager.register(Strings.CMD_FILE_PREFERENCES,        Commands.FILE_PREFERENCES,        _handlePreferences);\r\n    CommandManager.register(Strings.CMD_FILE_PREFERENCES,        "debug.openPrefsInSplitView",     _handlePreferences); // Mac OS X\'s Default Preferences Command ID\r\n    CommandManager.register(Strings.CMD_FILE_PRINT_TO_PDF,       Commands.FILE_PRINT_TO_PDF,       _handlePrintToPDF);\r\n    CommandManager.register(quitString,                          Commands.FILE_QUIT,               _handleFileQuit);\r\n\r\n    // Edit\r\n    CommandManager.register(Strings.CMD_EDIT,                    Commands.EDIT,                    CommandManager.doNothing);\r\n    CommandManager.register(Strings.CMD_EDIT_UNDO,               Commands.EDIT_UNDO,               _handleUndo);\r\n    CommandManager.register(Strings.CMD_EDIT_REDO,               Commands.EDIT_REDO,               _handleRedo);\r\n    CommandManager.register(Strings.CMD_EDIT_CUT,                Commands.EDIT_CUT,                _handleCut);\r\n    CommandManager.register(Strings.CMD_EDIT_COPY,               Commands.EDIT_COPY,               _handleCopy);\r\n    CommandManager.register(Strings.CMD_EDIT_PASTE,              Commands.EDIT_PASTE,              _handlePaste);\r\n    CommandManager.register(Strings.CMD_EDIT_DELETE,             Commands.EDIT_DELETE,             _handleDelete);\r\n    CommandManager.register(Strings.CMD_EDIT_DELETE_FROM_MODEL,  Commands.EDIT_DELETE_FROM_MODEL,  _handleDeleteFromModel);\r\n    CommandManager.register(Strings.CMD_EDIT_MOVE_UP,            Commands.EDIT_MOVE_UP,            _handleMoveUp);\r\n    CommandManager.register(Strings.CMD_EDIT_MOVE_DOWN,          Commands.EDIT_MOVE_DOWN,          _handleMoveDown);\r\n    CommandManager.register(Strings.CMD_EDIT_SELECT_ALL,         Commands.EDIT_SELECT_ALL,         _handleSelectAll);\r\n    CommandManager.register(Strings.CMD_EDIT_SELECT_IN_EXPLORER, Commands.EDIT_SELECT_IN_EXPLORER, _handleSelectInExplorer);\r\n    CommandManager.register(Strings.CMD_EDIT_SELECT_IN_DIAGRAM,  Commands.EDIT_SELECT_IN_DIAGRAM,  _handleSelectInDiagram);\r\n\r\n    // Format\r\n    CommandManager.register(Strings.CMD_FORMAT,                        Commands.FORMAT,            CommandManager.doNothing);\r\n    CommandManager.register(Strings.CMD_FORMAT_FONT,                   Commands.FORMAT_FONT,       _handleFont);\r\n    CommandManager.register(Strings.CMD_FORMAT_FILL_COLOR,             Commands.FORMAT_FILL_COLOR, _handleFillColor);\r\n    CommandManager.register(Strings.CMD_FORMAT_LINE_COLOR,             Commands.FORMAT_LINE_COLOR, _handleLineColor);\r\n    CommandManager.register(Strings.CMD_FORMAT_LINE_STYLE,             Commands.FORMAT_LINE_STYLE, CommandManager.doNothing);\r\n    CommandManager.register(Strings.CMD_FORMAT_LINE_STYLE_RECTILINEAR, Commands.FORMAT_LINE_STYLE_RECTILINEAR, _handleLineStyleRectilinear);\r\n    CommandManager.register(Strings.CMD_FORMAT_LINE_STYLE_OBLIQUE,     Commands.FORMAT_LINE_STYLE_OBLIQUE,     _handleLineStyleOblique);\r\n    CommandManager.register(Strings.CMD_FORMAT_LINE_STYLE_ROUNDRECT,   Commands.FORMAT_LINE_STYLE_ROUNDRECT,   _handleLineStyleRoundRect);\r\n    CommandManager.register(Strings.CMD_FORMAT_LINE_STYLE_CURVE,       Commands.FORMAT_LINE_STYLE_CURVE,       _handleLineStyleCurve);\r\n    CommandManager.register(Strings.CMD_FORMAT_AUTO_RESIZE,            Commands.FORMAT_AUTO_RESIZE, _handleAutoResize);\r\n    CommandManager.register(Strings.CMD_FORMAT_SHOW_SHADOW,            Commands.FORMAT_SHOW_SHADOW, _handleShowShadow);\r\n\r\n    // Model\r\n    CommandManager.register(Strings.CMD_MODEL,                         Commands.MODEL,             CommandManager.doNothing);\r\n    CommandManager.register(Strings.CMD_MODEL_ADD,                     Commands.MODEL_ADD,         Factory.createModel);\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM,             Commands.MODEL_ADD_DIAGRAM, Factory.createDiagram);\r\n\r\n    // Tools\r\n    CommandManager.register(Strings.CMD_TOOLS,                         Commands.TOOLS,                     CommandManager.doNothing);\r\n    CommandManager.register(Strings.CMD_TOOLS_EXTENSION_MANAGER,       Commands.TOOLS_EXTENSION_MANAGER,   _handleExtensionManager);\r\n\r\n    // View\r\n    CommandManager.register(Strings.CMD_VIEW,                          Commands.VIEW,                      CommandManager.doNothing);\r\n    CommandManager.register(Strings.CMD_VIEW_CLOSE_DIAGRAM,            Commands.VIEW_CLOSE_DIAGRAM,        _handleCloseDiagram);\r\n    CommandManager.register(Strings.CMD_VIEW_CLOSE_OTHER_DIAGRAMS,     Commands.VIEW_CLOSE_OTHER_DIAGRAMS, _handleCloseOtherDiagrams);\r\n    CommandManager.register(Strings.CMD_VIEW_CLOSE_ALL_DIAGRAMS,       Commands.VIEW_CLOSE_ALL_DIAGRAMS,   _handleCloseAllDiagrams);\r\n    CommandManager.register(Strings.CMD_VIEW_NEXT_DIAGRAM,             Commands.VIEW_NEXT_DIAGRAM,         _handleNextDiagram);\r\n    CommandManager.register(Strings.CMD_VIEW_PREVIOUS_DIAGRAM,         Commands.VIEW_PREVIOUS_DIAGRAM,     _handlePreviousDiagram);\r\n    CommandManager.register(Strings.CMD_VIEW_ZOOM_IN,                  Commands.VIEW_ZOOM_IN,              _handleZoomIn);\r\n    CommandManager.register(Strings.CMD_VIEW_ZOOM_OUT,                 Commands.VIEW_ZOOM_OUT,             _handleZoomOut);\r\n    CommandManager.register(Strings.CMD_VIEW_ACTUAL_SIZE,              Commands.VIEW_ACTUAL_SIZE,          _handleActualSize);\r\n    CommandManager.register(Strings.CMD_VIEW_FIT_TO_WINDOW,            Commands.VIEW_FIT_TO_WINDOW,        _handleFitToWindow);\r\n    CommandManager.register(Strings.CMD_VIEW_SHOW_GRID,                Commands.VIEW_SHOW_GRID,            _handleShowGrid);\r\n\r\n    // Help\r\n    CommandManager.register(Strings.CMD_HELP,                          Commands.HELP,                      CommandManager.doNothing);\r\n    CommandManager.register(Strings.CMD_HELP_ABOUT,                    Commands.HELP_ABOUT,                _handleAbout);\r\n    CommandManager.register(Strings.CMD_HELP_CHECK_FOR_UPDATES,        Commands.HELP_CHECK_FOR_UPDATES,    _handleCheckForUpdates);\r\n    CommandManager.register(Strings.CMD_HELP_ENTER_LICENSE,            Commands.HELP_ENTER_LICENSE,        _handleEnterLicense);\r\n    CommandManager.register(Strings.CMD_HELP_DOCUMENTATION,            Commands.HELP_DOCUMENTATION,        _handleDocumentation);\r\n    CommandManager.register(Strings.CMD_HELP_FORUM,                    Commands.HELP_FORUM,                _handleForum);\r\n    CommandManager.register(Strings.CMD_HELP_RELEASE_NOTE,             Commands.HELP_RELEASE_NOTE,         _handleReleaseNotes);\r\n    CommandManager.register(Strings.CMD_HELP_REQUEST_FEATURE,          Commands.HELP_REQUEST_FEATURE,      _handleRequestFeature);\r\n\r\n    // Register Internal Commands\r\n    CommandManager.registerInternal(Commands.FILE_CLOSE_WINDOW, _handleFileCloseWindow);\r\n    CommandManager.registerInternal(Commands.APP_RELOAD,        _handleReload);\r\n\r\n    // Update Commands\r\n    $(SelectionManager).on("selectionChanged", _updateCommands);\r\n    $(Repository).on("operationExecuted", _updateCommands);\r\n\r\n});\r\n\n//# sourceURL=/command/DefaultCommandHandlers.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, localStorage*/\r\ndefine(\'menu/RecentFiles\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'engine/ProjectManager\',\'command/Commands\',\'command/CommandManager\',\'menu/MenuManager\',\'strings\',\'menu/DefaultMenus\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit        = require("utils/AppInit"),\r\n        ProjectManager = require("engine/ProjectManager"),\r\n        Commands       = require("command/Commands"),\r\n        CommandManager = require("command/CommandManager"),\r\n        MenuManager    = require("menu/MenuManager"),\r\n        Strings        = require("strings");\r\n\r\n    require("menu/DefaultMenus");\r\n\r\n    /**\r\n     * Maxmimum number of recent files\r\n     * @const\r\n     */\r\n    var MAX_SIZE = 10;\r\n\r\n    /**\r\n     * Item Id of localStorage\r\n     * @const\r\n     */\r\n    var STORAGE_ITEM_ID = "staruml-recent-file-list";\r\n\r\n    /**\r\n     * List of Recent Files\r\n     * @type{Array.<string>}\r\n     */\r\n    var _recentFiles = [];\r\n\r\n    /**\r\n     * Return command id for index-th recent files.\r\n     */\r\n    function _getCommandId(index) {\r\n        return Commands.FILE_OPEN_RECENT + "_files_" + index;\r\n    }\r\n\r\n    /**\r\n     * Add a file to Recent file list.\r\n     *\r\n     */\r\n    function push(filename) {\r\n        if (filename) {\r\n\r\n            // Remove already existing filename to prevent duplicated filenames.\r\n            var idx = _.indexOf(_recentFiles, filename);\r\n            if (idx > -1) {\r\n                _recentFiles.splice(idx, 1);\r\n            }\r\n\r\n            // Add on top.\r\n            _recentFiles.push(filename);\r\n        }\r\n\r\n        // Keep total number of files less than MAX_SIZE\r\n        while (_recentFiles.length > MAX_SIZE) {\r\n            _recentFiles.splice(0, 1);\r\n        }\r\n\r\n        // Save the recent files to localStorage\r\n        localStorage.setItem(STORAGE_ITEM_ID, JSON.stringify(_recentFiles));\r\n    }\r\n\r\n    /**\r\n     * Remove a file from Recent file list.\r\n     */\r\n    function remove(filename) {\r\n        _recentFiles.remove(filename);\r\n\r\n        // Save the recent files to localStorage\r\n        localStorage.setItem(STORAGE_ITEM_ID, JSON.stringify(_recentFiles));\r\n    }\r\n\r\n\r\n    function _updateMenus() {\r\n        var menu = MenuManager.getMenuItem(Commands.FILE_OPEN_RECENT),\r\n            i,\r\n            id,\r\n            menuItem;\r\n\r\n        // Remove Recent File Menus\r\n        for (i = 0; i < MAX_SIZE; i++) {\r\n            id = _getCommandId(i);\r\n            menuItem = MenuManager.getMenuItem(id);\r\n            if (menuItem) {\r\n                menu.removeMenuItem(id);\r\n            }\r\n        }\r\n\r\n        // Add Recent File Menus (Most recent to be in top)\r\n        for (i = _recentFiles.length - 1; i >= 0; i--) {\r\n            id = _getCommandId(i);\r\n            var cmd = CommandManager.get(id);\r\n            if (cmd) {\r\n                menu.addMenuItem(id);\r\n                cmd.setName(_recentFiles[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        // Load recent files from localStorage\r\n        var data = localStorage.getItem(STORAGE_ITEM_ID);\r\n        if (data) {\r\n            _recentFiles = JSON.parse(data);\r\n        }\r\n\r\n        // Add Open Recent Menu\r\n        var menu = MenuManager.getMenu(Commands.FILE);\r\n        menu.addMenuItem(Commands.FILE_OPEN_RECENT, null, MenuManager.AFTER, Commands.FILE_OPEN);\r\n\r\n        // Update Menus\r\n        _updateMenus();\r\n    });\r\n\r\n    /**\r\n     * Handle Open Recent Files Command Execution\r\n     */\r\n    function _handleOpenRecent(index) {\r\n        var fullPath = _recentFiles[index];\r\n        if (fullPath) {\r\n            CommandManager.execute(Commands.FILE_OPEN, fullPath);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles event "projectLoaded" of ProjectManager.\r\n     * Add to the loaded file to recent file list.\r\n     */\r\n    function _handleProjectLoaded(event, filename, project) {\r\n        try {\r\n            if (filename && filename.length > 0) {\r\n                push(filename);\r\n                _updateMenus();\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    // Register Commands\r\n    CommandManager.register(Strings.CMD_FILE_OPEN_RECENT, Commands.FILE_OPEN_RECENT, _handleOpenRecent);\r\n    var i, len, commandID;\r\n    for (i = 0, len = MAX_SIZE; i < len; i++) {\r\n        commandID = _getCommandId(i);\r\n        CommandManager.register("-", commandID, _.partial(_handleOpenRecent, i));\r\n    }\r\n\r\n    // Update Recent Files\r\n    $(ProjectManager).on("projectLoaded", _handleProjectLoaded);\r\n\r\n});\r\n\n//# sourceURL=/menu/RecentFiles.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, loopfunc: true */\r\n/*global define, $, _, window, appshell, meta, type */\r\n\r\ndefine(\'uml/UML\',[\'require\',\'exports\',\'module\',\'core/Core\',\'core/MetaModelManager\',\'core/Repository\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Core             = require("core/Core"),\r\n        MetaModelManager = require("core/MetaModelManager"),\r\n        Repository       = require("core/Repository");\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                       CONSTANTS AND ENUMERATIONS                       *\r\n     *                                                                        *\r\n     *************************************************************************/\r\n\r\n    /**\r\n     * UMLVisibilityKind\r\n     * @enum\r\n     */\r\n    var VK_PUBLIC    = \'public\',\r\n        VK_PROTECTED = \'protected\',\r\n        VK_PRIVATE   = \'private\',\r\n        VK_PACKAGE   = \'package\';\r\n\r\n    /**\r\n     * UMLAggregationKind\r\n     * @enum\r\n     */\r\n    var AK_NONE      = \'none\',\r\n        AK_SHARED    = \'shared\',\r\n        AK_COMPOSITE = \'composite\';\r\n\r\n    /**\r\n     * UMLDirectionKind\r\n     * @enum\r\n     */\r\n    var DK_IN     = \'in\',\r\n        DK_INOUT  = \'inout\',\r\n        DK_OUT    = \'out\',\r\n        DK_RETURN = \'return\';\r\n\r\n    /**\r\n     * UMLCallConcurrencyKind\r\n     * @enum\r\n     */\r\n    var CCK_SEQUENTIAL = \'sequential\',\r\n        CCK_GUARDED    = \'guarded\',\r\n        CCK_CONCURRENT = \'concurrent\';\r\n\r\n    /**\r\n     * UMLConnectorKind\r\n     * @enum\r\n     */\r\n    var CK_ASSEMBLY   = \'assembly\',\r\n        CK_DELEGATION = \'delegation\';\r\n\r\n    /**\r\n     * UMLMessageSort\r\n     * @enum\r\n     */\r\n    var MS_SYNCHCALL     = \'synchCall\',\r\n        MS_ASYNCHCALL    = \'asynchCall\',\r\n        MS_ASYNCHSIGNAL  = \'asynchSignal\',\r\n        MS_CREATEMESSAGE = \'createMessage\',\r\n        MS_DELETEMESSAGE = \'deleteMessage\',\r\n        MS_REPLY         = \'reply\';\r\n\r\n    /**\r\n     * UMLPseudostateKind\r\n     * @enum\r\n     */\r\n    var PSK_INITIAL         = \'initial\',\r\n        PSK_DEEPHISTORY     = \'deepHistory\',\r\n        PSK_SHALLOWHISTORY  = \'shallowHistory\',\r\n        PSK_JOIN            = \'join\',\r\n        PSK_FORK            = \'fork\',\r\n        PSK_JUNCTION        = \'junction\',\r\n        PSK_CHOICE          = \'choice\',\r\n        PSK_ENTRYPOINT      = \'entryPoint\',\r\n        PSK_EXITPOINT       = \'exitPoint\',\r\n        PSK_TERMINATE       = \'terminate\';\r\n\r\n    /**\r\n     * UMLTransitionKind\r\n     * @enum\r\n     */\r\n    var TK_EXTERNAL = \'external\',\r\n        TK_INTERNAL = \'internal\',\r\n        TK_LOCAL    = \'local\';\r\n\r\n    /**\r\n     * UMLEventKind\r\n     * @enum\r\n     */\r\n    var EK_SIGNAL     = \'signal\',\r\n        EK_CALL       = \'call\',\r\n        EK_CHANGE     = \'change\',\r\n        EK_TIME       = \'time\',\r\n        EK_ANYRECEIVE = \'anyReceive\';\r\n\r\n    /**\r\n     * UMLInteractionOperatorKind\r\n     * @enum\r\n     */\r\n    var IOK_ALT      = \'alt\',\r\n        IOK_OPT      = \'opt\',\r\n        IOK_PAR      = \'par\',\r\n        IOK_LOOP     = \'loop\',\r\n        IOK_CRITICAL = \'critical\',\r\n        IOK_NEG      = \'neg\',\r\n        IOK_ASSERT   = \'assert\',\r\n        IOK_STRICT   = \'strict\',\r\n        IOK_SEQ      = \'seq\',\r\n        IOK_IGNORE   = \'ignore\',\r\n        IOK_CONSIDER = \'consider\',\r\n        IOK_BREAK    = \'break\';\r\n\r\n    /**\r\n     * UMLActionKind\r\n     * @enum\r\n     */\r\n    var ACK_OPAQUE       = "opaque",\r\n        ACK_CREATE       = "create",\r\n        ACK_DESTROY      = "destroy",\r\n        ACK_READ         = "read",\r\n        ACK_WRITE        = "write",\r\n        ACK_INSERT       = "insert",\r\n        ACK_DELETE       = "delete",\r\n        ACK_SENDSIGNAL   = "sendSignal",\r\n        ACK_ACCEPTSIGNAL = "acceptSignal",\r\n        ACK_TRIGGEREVENT = "triggerEvent",\r\n        ACK_ACCEPTEVENT  = "acceptEvent",\r\n        ACK_STRUCTURED   = "structured",\r\n        ACK_TIMEEVENT    = "timeEvent";\r\n\r\n    /**\r\n     * UMLObjectNodeOrderingKind\r\n     * @enum\r\n     */\r\n    var ONOK_UNORDERED = \'unordered\',\r\n        ONOK_ORDERED   = \'ordered\',\r\n        ONOK_LIFO      = \'LIFO\',\r\n        ONOK_FIFO      = \'FIFO\';\r\n\r\n    /**\r\n     * UMLExpansionKind\r\n     * @enum\r\n     */\r\n    var EK_PARALLEL  = \'parallel\',\r\n        EK_ITERATIVE = \'iterative\',\r\n        EK_STREAM    = \'stream\';\r\n\r\n    /**\r\n     * Stereotype Display\r\n     * @enum\r\n     */\r\n    var SD_NONE             = \'none\',\r\n        SD_LABEL            = \'label\',\r\n        SD_DECORATION       = \'decoration\',\r\n        SD_DECORATION_LABEL = \'decoration-label\',\r\n        SD_ICON             = \'icon\',\r\n        SD_ICON_LABEL       = \'icon-label\';\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                                 BACKBONE                               *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLElementMixin\r\n     *\r\n     * @mixin\r\n     */\r\n    var UMLElementMixin = {\r\n\r\n        /**\r\n         * Get class name for display\r\n         *\r\n         * @memberof UMLElementMixin\r\n         * @return {string}\r\n         */\r\n        getDisplayClassName: function () {\r\n            var name = this.getClassName();\r\n            return name.substring(3, name.length);\r\n        },\r\n\r\n        /**\r\n         * Get visibility string\r\n         *\r\n         * @memberof UMLElementMixin\r\n         * @return {string}\r\n         */\r\n        getVisibilityString: function () {\r\n            switch (this.visibility) {\r\n            case VK_PUBLIC:\r\n                return "+";\r\n            case VK_PROTECTED:\r\n                return "#";\r\n            case VK_PRIVATE:\r\n                return "-";\r\n            case VK_PACKAGE:\r\n                return "~";\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get string representation of this element\r\n         *\r\n         * @memberof UMLElementMixin\r\n         * @param {boolean} includeVisibility\r\n         * @return {string}\r\n         */\r\n        getString: function (includeVisibility) {\r\n            var _string = this.name;\r\n            if (includeVisibility) {\r\n                _string = this.getVisibilityString() + _string;\r\n            }\r\n            return _string;\r\n        },\r\n\r\n\r\n        /**\r\n         * Get stereotype string\r\n         *\r\n         * @memberof UMLElementMixin\r\n         * @return {string}\r\n         */\r\n        getStereotypeString: function () {\r\n            if (_.isString(this.stereotype) && (this.stereotype.length > 0)) {\r\n                return "«" + this.stereotype + "»";\r\n            } else if (this.stereotype instanceof type.Model) {\r\n                return "«" + this.stereotype.name + "»";\r\n            }\r\n            return "";\r\n        },\r\n\r\n        /**\r\n         * Get namespace string\r\n         *\r\n         * @memberof UMLElementMixin\r\n         * @return {string}\r\n         */\r\n        getNamespaceString: function () {\r\n            if (this._parent) {\r\n                return "(from " + this._parent.name + ")";\r\n            } else {\r\n                return "(from Root)";\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Return an array of tag strings\r\n         *\r\n         * @memberof UMLElementMixin\r\n         * @return {Array.<string>}\r\n         */\r\n        getTagStringArray: function () {\r\n            var tagArray = [];\r\n            if (this.tags && this.tags.length > 0) {\r\n                var i, len, tag;\r\n                for (i = 0, len = this.tags.length; i < len; i++) {\r\n                    tag = this.tags[i];\r\n                    switch (tag.kind) {\r\n                    case Core.TK_STRING:\r\n                        tagArray.push(tag.name + \'="\' + tag.value + \'"\');\r\n                        break;\r\n                    case Core.TK_REFERENCE:\r\n                        if (tag.reference instanceof Core.Model) {\r\n                            tagArray.push(tag.name + \'=\' + tag.reference.name);\r\n                        } else {\r\n                            tagArray.push(tag.name + \'=null\');\r\n                        }\r\n                        break;\r\n                    case Core.TK_BOOLEAN:\r\n                        tagArray.push(tag.name + \'=\' + tag.checked);\r\n                        break;\r\n                    case Core.TK_NUMBER:\r\n                        tagArray.push(tag.name + \'=\' + tag.number);\r\n                        break;\r\n                    // TK_HIDDEN is not shown in Diagram.\r\n                    }\r\n                }\r\n            }\r\n            return tagArray;\r\n        },\r\n\r\n        /**\r\n         * Return property string\r\n         *\r\n         * @return {string}\r\n         */\r\n        getPropertyString: function () {\r\n            var props = this.getTagStringArray();\r\n            if (props.length > 0) {\r\n                return "{" + props.join(", ") + "}";\r\n            }\r\n            return "";\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * UMLModelElement\r\n     *\r\n     * @constructor\r\n     * @extends ExtensibleModel\r\n     * @mixes UMLElementMixin\r\n     */\r\n    function UMLModelElement() {\r\n        type.ExtensibleModel.apply(this, arguments);\r\n\r\n        /** @member {UMLStereotype} */\r\n        this.stereotype = null;\r\n\r\n        /** @member {string} */\r\n        this.visibility = VK_PUBLIC;\r\n\r\n        /** @member {Array.<UMLTemplateParameter>} */\r\n        this.templateParameters = [];\r\n\r\n        // mixin UMLElementMixin\r\n        _.extend(UMLModelElement.prototype, UMLElementMixin);\r\n    }\r\n    // inherits from Model\r\n    UMLModelElement.prototype = Object.create(type.ExtensibleModel.prototype);\r\n    UMLModelElement.prototype.constructor = UMLModelElement;\r\n\r\n    UMLModelElement.prototype.getNodeText = function (options) {\r\n        var text = "";\r\n        options = options || {};\r\n        // stereotype\r\n        if (options.showStereotype !== false) {\r\n            text += this.getStereotypeString();\r\n        }\r\n        // name and type\r\n        if (this.name && this.name.length > 0) {\r\n            text += this.name;\r\n        } else {\r\n            text += "(" + this.getDisplayClassName() + ")";\r\n        }\r\n        return text;\r\n    };\r\n\r\n    UMLModelElement.prototype.getNodeIcon = function () {\r\n        if (this.stereotype && this.stereotype.icon && this.stereotype.icon.smallIcon && this.stereotype.icon.smallIcon.trim().length > 0) {\r\n            return this.stereotype.getIconClass();\r\n        }\r\n        return type.ExtensibleModel.prototype.getNodeIcon.call(this);\r\n    };\r\n\r\n    /**\r\n     * Get dependencies\r\n     *\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLModelElement.prototype.getDependencies = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLDependency) && (r.source === self);\r\n            });\r\n        return _.map(rels, function (g) { return g.target; });\r\n    };\r\n\r\n    /**\r\n     * Get dependants\r\n     *\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLModelElement.prototype.getDependants = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLDependency) && (r.target === self);\r\n            });\r\n        return _.map(rels, function (g) { return g.source; });\r\n    };\r\n\r\n    /**\r\n     * Get constraints of this element\r\n     *\r\n     * @return {Array.<UMLConstraint>}\r\n     */\r\n    UMLModelElement.prototype.getConstraints = function () {\r\n        return _.filter(this.ownedElements, function (e) { return (e instanceof type.UMLConstraint); });\r\n    };\r\n\r\n    /**\r\n     * UMLConstraint\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLConstraint() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.specification = \'\';\r\n\r\n        /** @member {Array.<UMLModelElement>} */\r\n        this.constrainedElements = [];\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLConstraint.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLConstraint.prototype.constructor = UMLConstraint;\r\n\r\n    UMLConstraint.prototype.getNodeText = function (options) {\r\n        var text = "";\r\n        options = options || {};\r\n        // stereotype\r\n        if (options.showStereotype !== false) {\r\n            if (_.isString(this.stereotype) && (this.stereotype.length > 0)) {\r\n                text += "«" + this.stereotype + "» ";\r\n            } else if (this.stereotype !== null) {\r\n                text += "«" + this.stereotype.name + "» ";\r\n            }\r\n        }\r\n        // name and type\r\n        if (this.name && this.name.length > 0) {\r\n            text += this.name;\r\n        } else {\r\n            text += "(" + this.getDisplayClassName() + ")";\r\n        }\r\n        // collection name\r\n        var collection = this.getParentField();\r\n        if (collection !== "ownedElements") {\r\n            text += " <@" + collection + ">";\r\n        }\r\n        return text;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLTemplateParameter\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLTemplateParameter() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.parameterType = \'\';\r\n\r\n        /** @member {string} */\r\n        this.defaultValue = \'\';\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLTemplateParameter.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLTemplateParameter.prototype.constructor = UMLTemplateParameter;\r\n\r\n    UMLTemplateParameter.prototype.getString = function (options) {\r\n        var text = "";\r\n        text += this.getStereotypeString();\r\n        text += this.name;\r\n        if (options && options.showType) {\r\n            text += (this.parameterType.length > 0 ? ": " + this.parameterType : "");\r\n        }\r\n        text += (this.defaultValue.length > 0 ? " = " + this.defaultValue : "");\r\n        return text;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLFeature\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLFeature() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.isStatic = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isLeaf = false;\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLFeature.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLFeature.prototype.constructor = UMLFeature;\r\n\r\n\r\n    /**\r\n     * UMLStructuralFeature\r\n     * @constructor\r\n     * @extends UMLFeature\r\n     */\r\n    function UMLStructuralFeature() {\r\n        UMLFeature.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.type = \'\';\r\n\r\n        /** @member {string} */\r\n        this.multiplicity = \'\';\r\n\r\n        /** @member {boolean} */\r\n        this.isReadOnly = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isOrdered = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isUnique = false;\r\n\r\n        /** @member {string} */\r\n        this.defaultValue = \'\';\r\n    }\r\n    // inherits from UMLFeature\r\n    UMLStructuralFeature.prototype = Object.create(UMLFeature.prototype);\r\n    UMLStructuralFeature.prototype.constructor = UMLStructuralFeature;\r\n\r\n    /**\r\n     * Get type string\r\n     *\r\n     * @return {string}\r\n     */\r\n    UMLStructuralFeature.prototype.getTypeString = function () {\r\n        if (this.type) {\r\n            if (_.isString(this.type) && (this.type.length > 0)) {\r\n                return this.type;\r\n            } else if ((this.type !== null) && (this.type.name)) {\r\n                return this.type.name;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    UMLStructuralFeature.prototype.getPropertyString = function () {\r\n        var props = [];\r\n        if (this.isReadOnly === true) { props.push("readOnly"); }\r\n        if (this.isOrdered === true) { props.push("ordered"); }\r\n        if (this.isUnique === true) { props.push("unique"); }\r\n        props = _.union(props, this.getTagStringArray());\r\n        if (props.length > 0) {\r\n            return "{" + props.join(", ") + "}";\r\n        }\r\n        return "";\r\n    };\r\n\r\n    UMLStructuralFeature.prototype.getString = function (options) {\r\n        var text = "";\r\n        text += this.name;\r\n        if (options && options.showType) {\r\n            text += (this.getTypeString() !== null ? ": " + this.getTypeString() : "");\r\n        }\r\n        if (options && options.showMultiplicity) {\r\n            text += (this.multiplicity.length > 0 ? "[" + this.multiplicity + "]" : "");\r\n        }\r\n        text += (this.defaultValue.length > 0 ? " = " + this.defaultValue : "");\r\n        if (options && options.showProperty) {\r\n            var prop = this.getPropertyString();\r\n            text += (prop.length > 0 ? " " + prop : "");\r\n        }\r\n        return text;\r\n    };\r\n\r\n    /**\r\n     * UMLParameter\r\n     * @constructor\r\n     * @extends UMLStructuralFeature\r\n     */\r\n    function UMLParameter() {\r\n        UMLStructuralFeature.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.direction = DK_IN;\r\n    }\r\n    // inherits from UMLStructuralFeature\r\n    UMLParameter.prototype = Object.create(UMLStructuralFeature.prototype);\r\n    UMLParameter.prototype.constructor = UMLParameter;\r\n\r\n    /**\r\n     * Get parameter direction string\r\n     *\r\n     * @return {string}\r\n     */\r\n    UMLParameter.prototype.getDirectionString = function (options) {\r\n        switch (this.direction) {\r\n        case DK_IN:\r\n            return "";\r\n        case DK_INOUT:\r\n            return "inout ";\r\n        case DK_OUT:\r\n            return "out ";\r\n        case DK_RETURN:\r\n            return "";\r\n        }\r\n    };\r\n\r\n    UMLParameter.prototype.getString = function (options) {\r\n        var text = "";\r\n        text += this.getDirectionString();\r\n        text += this.name;\r\n        if (options && options.showType) {\r\n            text += (this.getTypeString() !== null ? ": " + this.getTypeString() : "");\r\n        }\r\n        if (options && options.showMultiplicity) {\r\n            text += (this.multiplicity.length > 0 ? "[" + this.multiplicity + "]" : "");\r\n        }\r\n        text += (this.defaultValue.length > 0 ? " = " + this.defaultValue : "");\r\n        return text;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLBehavioralFeature\r\n     * @constructor\r\n     * @extends UMLFeature\r\n     */\r\n    function UMLBehavioralFeature() {\r\n        UMLFeature.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLParameter>} */\r\n        this.parameters = [];\r\n\r\n        /** @member {Array.<UMLSignal>} */\r\n        this.raisedExceptions = [];\r\n\r\n        /** @member {string} */\r\n        this.concurrency = CCK_SEQUENTIAL;\r\n    }\r\n    // inherits from UMLFeature\r\n    UMLBehavioralFeature.prototype = Object.create(UMLFeature.prototype);\r\n    UMLBehavioralFeature.prototype.constructor = UMLBehavioralFeature;\r\n\r\n    /**\r\n     * Get return parameter(s)\r\n     *\r\n     * @return {UMLParameter}\r\n     */\r\n    UMLBehavioralFeature.prototype.getReturnParameter = function () {\r\n        var i, len;\r\n        for (i = 0, len = this.parameters.length; i < len; i++) {\r\n            var param = this.parameters[i];\r\n            if (param.direction === DK_RETURN) {\r\n                return param;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Get non-return parameters\r\n     *\r\n     * @return {Array.<UMLParameter>}\r\n     */\r\n    UMLBehavioralFeature.prototype.getNonReturnParameters = function () {\r\n        var i, len, params = [];\r\n        for (i = 0, len = this.parameters.length; i < len; i++) {\r\n            var param = this.parameters[i];\r\n            if (param.direction !== DK_RETURN) {\r\n                params.push(param);\r\n            }\r\n        }\r\n        return params;\r\n    };\r\n\r\n    /**\r\n     * Get parameters string\r\n     *\r\n     * @return {string}\r\n     */\r\n    UMLBehavioralFeature.prototype.getParametersString = function (options) {\r\n        var i, len, terms = [],\r\n            params = this.getNonReturnParameters();\r\n        for (i = 0, len = params.length; i < len; i++) {\r\n            var param = params[i];\r\n            terms.push(param.getString(options));\r\n        }\r\n        return "(" + terms.join(", ") + ")";\r\n    };\r\n\r\n    /**\r\n     * Get return parameter string\r\n     *\r\n     * @return {string}\r\n     */\r\n    UMLBehavioralFeature.prototype.getReturnString = function (options) {\r\n        var returnParam = this.getReturnParameter();\r\n        var text = "";\r\n        if (returnParam) {\r\n            if (options && options.showType) {\r\n                text += returnParam.getTypeString();\r\n            }\r\n            if (options && options.showMultiplicity) {\r\n                text += (returnParam.multiplicity.length > 0 ? "[" + returnParam.multiplicity + "]" : "");\r\n            }\r\n        }\r\n        return text;\r\n    };\r\n\r\n    UMLBehavioralFeature.prototype.getString = function (options) {\r\n        var text = "";\r\n        if (options && (options.stereotypeDisplay === SD_LABEL || options.stereotypeDisplay === SD_DECORATION_LABEL || options.stereotypeDisplay === SD_ICON_LABEL)) {\r\n            text += this.getStereotypeString();\r\n        }\r\n        if (options && options.showVisibility) {\r\n            text += this.getVisibilityString();\r\n        }\r\n        text += this.name;\r\n        if (options && options.showOperationSignature) {\r\n            text += this.getParametersString(options);\r\n            text += (this.getReturnString(options).length > 0 ? ": " + this.getReturnString(options) : "");\r\n        } else {\r\n            text += "()";\r\n        }\r\n        if (options && options.showProperty) {\r\n            var prop = this.getPropertyString();\r\n            text += (prop.length > 0 ? " " + prop : "");\r\n        }\r\n        return text;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLAttribute\r\n     * @constructor\r\n     * @extends UMLStructuralFeature\r\n     */\r\n    function UMLAttribute() {\r\n        UMLStructuralFeature.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.isDerived = false;\r\n\r\n        /** @member {string} */\r\n        this.aggregation = AK_NONE;\r\n\r\n        /** @member {boolean} */\r\n        this.isID = false;\r\n    }\r\n    // inherits from UMLStructuralFeature\r\n    UMLAttribute.prototype = Object.create(UMLStructuralFeature.prototype);\r\n    UMLAttribute.prototype.constructor = UMLAttribute;\r\n\r\n    UMLAttribute.prototype.getPropertyString = function () {\r\n        var props = [];\r\n        if (this.isID === true) { props.push("id"); }\r\n        if (this.isReadOnly === true) { props.push("readOnly"); }\r\n        if (this.isOrdered === true) { props.push("ordered"); }\r\n        if (this.isUnique === true) { props.push("unique"); }\r\n        props = _.union(props, this.getTagStringArray());\r\n        if (props.length > 0) {\r\n            return "{" + props.join(", ") + "}";\r\n        }\r\n        return "";\r\n    };\r\n\r\n    UMLAttribute.prototype.getString = function (options) {\r\n        var text = "";\r\n        if (options && (options.stereotypeDisplay === SD_LABEL || options.stereotypeDisplay === SD_DECORATION_LABEL || options.stereotypeDisplay === SD_ICON_LABEL)) {\r\n            text += this.getStereotypeString();\r\n        }\r\n        if (options && options.showVisibility) {\r\n            text += this.getVisibilityString();\r\n        }\r\n        text += (this.isDerived === true ? "/" : "");\r\n        text += this.name;\r\n        if (options && options.showType) {\r\n            text += (this.getTypeString() !== null ? ": " + this.getTypeString() : "");\r\n        }\r\n        if (options && options.showMultiplicity) {\r\n            text += (this.multiplicity.length > 0 ? "[" + this.multiplicity + "]" : "");\r\n        }\r\n        text += (this.defaultValue.length > 0 ? " = " + this.defaultValue : "");\r\n        if (options && options.showProperty) {\r\n            var prop = this.getPropertyString();\r\n            text += (prop.length > 0 ? " " + prop : "");\r\n        }\r\n        return text;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLOperation\r\n     * @constructor\r\n     * @extends UMLBehavioralFeature\r\n     */\r\n    function UMLOperation() {\r\n        UMLBehavioralFeature.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.isQuery = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isAbstract = false;\r\n\r\n        /** @member {string} */\r\n        this.specification = \'\';\r\n\r\n        /** @member {Array.<UMLConstraint>} */\r\n        this.preconditions = [];\r\n\r\n        /** @member {Array.<UMLConstraint>} */\r\n        this.bodyConditions = [];\r\n\r\n        /** @member {Array.<UMLConstraint>} */\r\n        this.postconditions = [];\r\n    }\r\n    // inherits from UMLBehavioralFeature\r\n    UMLOperation.prototype = Object.create(UMLBehavioralFeature.prototype);\r\n    UMLOperation.prototype.constructor = UMLOperation;\r\n\r\n    UMLOperation.prototype.getPropertyString = function () {\r\n        var props = [];\r\n        if (this.isQuery === true) { props.push("query"); }\r\n        var returnParam = this.getReturnParameter();\r\n        if (returnParam) {\r\n            if (returnParam.isOrdered === true) { props.push("ordered"); }\r\n            if (returnParam.isUnique === true) { props.push("unique"); }\r\n        }\r\n        props = _.union(props, this.getTagStringArray());\r\n        if (props.length > 0) {\r\n            return "{" + props.join(", ") + "}";\r\n        }\r\n        return "";\r\n    };\r\n\r\n    /**\r\n     * UMLReception\r\n     * @constructor\r\n     * @extends UMLBehavioralFeature\r\n     */\r\n    function UMLReception() {\r\n        UMLBehavioralFeature.apply(this, arguments);\r\n\r\n        /** @member {UMLSignal} */\r\n        this.signal = null;\r\n    }\r\n    // inherits from UMLBehavioralFeature\r\n    UMLReception.prototype = Object.create(UMLBehavioralFeature.prototype);\r\n    UMLReception.prototype.constructor = UMLReception;\r\n\r\n    UMLReception.prototype.getNodeText = function (options) {\r\n        var text = "";\r\n        if (this.signal instanceof type.UMLSignal) {\r\n            return "(«signal» " + this.signal.name + ")";\r\n        }\r\n        return UMLModelElement.prototype.getNodeText.call(this);\r\n    };\r\n\r\n    UMLReception.prototype.getString = function (options) {\r\n        if (this.signal instanceof UMLSignal) {\r\n            var text = "";\r\n            if (options && (options.stereotypeDisplay === SD_LABEL || options.stereotypeDisplay === SD_DECORATION_LABEL || options.stereotypeDisplay === SD_ICON_LABEL)) {\r\n                text += "«signal»";\r\n            }\r\n            if (options && options.showVisibility) {\r\n                text += this.getVisibilityString();\r\n            }\r\n            text += this.signal.name;\r\n            if (options && options.showOperationSignature) {\r\n                var i, len, attr, term, _type, terms = [];\r\n                for (i = 0, len = this.signal.attributes.length; i < len; i++) {\r\n                    attr = this.signal.attributes[i];\r\n                    term = attr.name;\r\n                    if (options.showType) {\r\n                        _type = attr.getTypeString();\r\n                        if (_type) {\r\n                            term += ": " + attr.getTypeString();\r\n                        }\r\n                    }\r\n                    terms.push(term);\r\n                }\r\n                text += "(" + terms.join(", ") + ")";\r\n            } else {\r\n                text += "()";\r\n            }\r\n            if (options && options.showProperty) {\r\n                var prop = this.getPropertyString();\r\n                text += (prop.length > 0 ? " " + prop : "");\r\n            }\r\n            return text;\r\n        } else {\r\n            return UMLBehavioralFeature.prototype.getString.call(this, options);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * UMLClassifier\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLClassifier() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLAttribute>} */\r\n        this.attributes = [];\r\n\r\n        /** @member {Array.<UMLOperation>} */\r\n        this.operations = [];\r\n\r\n        /** @member {Array.<UMLReception>} */\r\n        this.receptions = [];\r\n\r\n        /** @member {Array.<UMLBehavior>} */\r\n        this.behaviors = [];\r\n\r\n        /** @member {boolean} */\r\n        this.isAbstract = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isFinalSpecialization = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isLeaf = false;\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLClassifier.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLClassifier.prototype.constructor = UMLClassifier;\r\n\r\n    UMLClassifier.prototype.getPropertyString = function () {\r\n        var props = [];\r\n        if (this.isLeaf === true) { props.push("leaf"); }\r\n        props = _.union(props, this.getTagStringArray());\r\n        if (props.length > 0) {\r\n            return "{" + props.join(", ") + "}";\r\n        }\r\n        return "";\r\n    };\r\n\r\n    /**\r\n     * Get general elements\r\n     *\r\n     * @param {boolean} includeInterfaces\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLClassifier.prototype.getGeneralElements = function (includeInterfaces) {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return ((r instanceof type.UMLGeneralization) && (r.source === self)) ||\r\n                       (includeInterfaces && (r instanceof type.UMLInterfaceRealization) && (r.source === self));\r\n            });\r\n        return _.map(rels, function (g) { return g.target; });\r\n    };\r\n\r\n    /**\r\n     * Get special elements\r\n     *\r\n     * @param {boolean} includeInterfaces\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLClassifier.prototype.getSpecialElements = function (includeInterfaces) {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return ((r instanceof type.UMLGeneralization) && (r.target === self)) ||\r\n                       (includeInterfaces && (r instanceof type.UMLInterfaceRealization) && (r.target === self));\r\n            });\r\n        return _.map(rels, function (g) { return g.source; });\r\n    };\r\n\r\n    /**\r\n     * Get ancestors\r\n     *\r\n     * @param {boolean} includeInterfaces\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLClassifier.prototype.getAncestors = function (includeInterfaces) {\r\n        var ancestors = this.getGeneralElements(includeInterfaces),\r\n            size = 0;\r\n        do {\r\n            size = ancestors.length;\r\n            _.each(ancestors, function (e) {\r\n                ancestors = _.union(ancestors, e.getGeneralElements(includeInterfaces));\r\n            });\r\n        } while (size < ancestors.length);\r\n        return ancestors;\r\n    };\r\n\r\n    /**\r\n     * Get descendants\r\n     *\r\n     * @param {boolean} includeInterfaces\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLClassifier.prototype.getDescendants = function (includeInterfaces) {\r\n        var descendants = this.getSpecialElements(includeInterfaces),\r\n            size = 0;\r\n        do {\r\n            size = descendants.length;\r\n            _.each(descendants, function (e) {\r\n                descendants = _.union(descendants, e.getSpecialElements(includeInterfaces));\r\n            });\r\n        } while (size < descendants.length);\r\n        return descendants;\r\n    };\r\n\r\n    /**\r\n     * Check a given element is a general element of this element\r\n     *\r\n     * @param {Element} elem\r\n     * @param {boolean} includeInterfaces\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLClassifier.prototype.isGeneralElement = function (elem, includeInterfaces) {\r\n        return _.contains(this.getGeneralElements(includeInterfaces), elem);\r\n    };\r\n\r\n    /**\r\n     * Check a given element is a special element of this element\r\n     *\r\n     * @param {Element} elem\r\n     * @param {boolean} includeInterfaces\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLClassifier.prototype.isSpecialElement = function (elem, includeInterfaces) {\r\n        return _.contains(this.getSpecialElements(includeInterfaces), elem);\r\n    };\r\n\r\n    /**\r\n     * Check a given element is an ancestor of this element\r\n     *\r\n     * @param {Element} elem\r\n     * @param {boolean} includeInterfaces\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLClassifier.prototype.isAncestor = function (elem, includeInterfaces) {\r\n        return _.contains(this.getAncestors(includeInterfaces), elem);\r\n    };\r\n\r\n    /**\r\n     * Check a given element is a descendant of this element\r\n     *\r\n     * @param {Element} elem\r\n     * @param {boolean} includeInterfaces\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLClassifier.prototype.isDescendant = function (elem, includeInterfaces) {\r\n        return _.contains(this.getDescendants(includeInterfaces), elem);\r\n    };\r\n\r\n    /**\r\n     * Get all inherited attributes\r\n     *\r\n     * @param {boolean} includeInterfaces\r\n     * @return {Array.<UMLAttribute>}\r\n     */\r\n    UMLClassifier.prototype.getInheritedAttributes = function (includeInterfaces) {\r\n        var ancestors = this.getAncestors(includeInterfaces),\r\n            inherited = [];\r\n        _.each(ancestors, function (e) {\r\n            if (Array.isArray(e.attributes)) {\r\n                Array.prototype.push.apply(inherited, e.attributes);\r\n            }\r\n        });\r\n        return inherited;\r\n    };\r\n\r\n    /**\r\n     * Get all inherited operations\r\n     *\r\n     * @param {boolean} includeInterfaces\r\n     * @return {Array.<UMLOperation>}\r\n     */\r\n    UMLClassifier.prototype.getInheritedOperations = function (includeInterfaces) {\r\n        var ancestors  = this.getAncestors(includeInterfaces),\r\n            interfaces = this.getInterfaces(),\r\n            inherited  = [];\r\n        _.each(ancestors, function (e) {\r\n            if (Array.isArray(e.operations)) {\r\n                Array.prototype.push.apply(inherited, e.operations);\r\n            }\r\n        });\r\n        if (includeInterfaces) {\r\n            _.each(interfaces, function (e) {\r\n                if (Array.isArray(e.operations)) {\r\n                    Array.prototype.push.apply(inherited, e.getInheritedOperations(includeInterfaces));\r\n                    Array.prototype.push.apply(inherited, e.operations);\r\n                }\r\n            });\r\n        }\r\n        return inherited;\r\n    };\r\n\r\n    /**\r\n     * Get all interfaces of this element is realizing\r\n     *\r\n     * @return {Array.<UMLInterface>}\r\n     */\r\n    UMLClassifier.prototype.getInterfaces = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLInterfaceRealization) && (r.source === self);\r\n            });\r\n        return _.map(rels, function (g) { return g.target; });\r\n    };\r\n\r\n    /**\r\n     * Get all components of this element is realizing\r\n     *\r\n     * @return {Array.<UMLComponent>}\r\n     */\r\n    UMLClassifier.prototype.getComponents = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLComponentRealization) && (r.source === self);\r\n            });\r\n        return _.map(rels, function (g) { return g.target; });\r\n    };\r\n\r\n    /**\r\n     * Get all interfaces of this element is realizing\r\n     *\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLClassifier.prototype.getDeploymentTargets = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLDeployment) && (r.source === self);\r\n            });\r\n        return _.map(rels, function (g) { return g.target; });\r\n    };\r\n\r\n    /**\r\n     * Get all association ends linked to this element\r\n     *\r\n     * @param {boolean} counterpart Returns whether counterpart (opposite-side) association ends or not.\r\n     * @return {Array.<UMLAssociationEnd>}\r\n     */\r\n    UMLClassifier.prototype.getAssociationEnds = function (counterpart) {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) { return (r instanceof type.UMLAssociation); }),\r\n            ends = _.map(rels, function (r) {\r\n                if (counterpart === true) {\r\n                    return (r.end1.reference === self ? r.end2 : r.end1);\r\n                } else {\r\n                    return (r.end1.reference === self ? r.end1 : r.end2);\r\n                }\r\n            });\r\n        return ends;\r\n    };\r\n\r\n    /**\r\n     * UMLDirectedRelationship\r\n     * @constructor\r\n     * @extends DirectedRelationship\r\n     * @mixes UMLElementMixin\r\n     */\r\n    function UMLDirectedRelationship() {\r\n        type.DirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {UMLStereotype} */\r\n        this.stereotype = null;\r\n\r\n        /** @member {string} */\r\n        this.visibility = VK_PUBLIC;\r\n        // mixin UMLElementMixin\r\n        _.extend(UMLDirectedRelationship.prototype, UMLElementMixin);\r\n    }\r\n    // inherits from DirectedRelationship\r\n    UMLDirectedRelationship.prototype = Object.create(type.DirectedRelationship.prototype);\r\n    UMLDirectedRelationship.prototype.constructor = UMLDirectedRelationship;\r\n\r\n\r\n    /**\r\n     * UMLRelationshipEnd\r\n     * @constructor\r\n     * @extends RelationshipEnd\r\n     * @mixes UMLElementMixin\r\n     */\r\n    function UMLRelationshipEnd() {\r\n        type.RelationshipEnd.apply(this, arguments);\r\n\r\n        /** @member {UMLStereotype} */\r\n        this.stereotype = null;\r\n\r\n        /** @member {string} */\r\n        this.visibility = VK_PUBLIC;\r\n\r\n        /** @member {boolean} */\r\n        this.navigable = true;\r\n\r\n        /** @member {string} */\r\n        this.aggregation = AK_NONE;\r\n\r\n        /** @member {string} */\r\n        this.multiplicity = \'\';\r\n\r\n        /** @member {string} */\r\n        this.defaultValue = \'\';\r\n\r\n        /** @member {boolean} */\r\n        this.isReadOnly = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isOrdered = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isUnique = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isDerived = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isID = false;\r\n\r\n        // mixin UMLElementMixin\r\n        _.extend(UMLRelationshipEnd.prototype, UMLElementMixin);\r\n    }\r\n    // inherits from RelationshipEnd\r\n    UMLRelationshipEnd.prototype = Object.create(type.RelationshipEnd.prototype);\r\n    UMLRelationshipEnd.prototype.constructor = UMLRelationshipEnd;\r\n\r\n    UMLRelationshipEnd.prototype.getPropertyString = function () {\r\n        var props = [];\r\n        if (this.isID === true) { props.push("id"); }\r\n        if (this.isReadOnly === true) { props.push("readOnly"); }\r\n        if (this.isOrdered === true) { props.push("ordered"); }\r\n        if (this.isUnique === true) { props.push("unique"); }\r\n        props = _.union(props, this.getTagStringArray());\r\n        if (props.length > 0) {\r\n            return "{" + props.join(", ") + "}";\r\n        }\r\n        return "";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLUndirectedRelationship\r\n     * @constructor\r\n     * @extends UndirectedRelationship\r\n     * @mixes UMLElementMixin\r\n     */\r\n    function UMLUndirectedRelationship() {\r\n        type.UndirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {UMLStereotype} */\r\n        this.stereotype = null;\r\n\r\n        /** @member {string} */\r\n        this.visibility = VK_PUBLIC;\r\n\r\n        // mixin UMLElementMixin\r\n        _.extend(UMLUndirectedRelationship.prototype, UMLElementMixin);\r\n    }\r\n    // inherits from UndirectedRelationship\r\n    UMLUndirectedRelationship.prototype = Object.create(type.UndirectedRelationship.prototype);\r\n    UMLUndirectedRelationship.prototype.constructor = UMLUndirectedRelationship;\r\n\r\n    UMLUndirectedRelationship.prototype.getNodeText = function (options) {\r\n        var text = "";\r\n        options = options || {};\r\n        // stereotype\r\n        if (options.showStereotype !== false) {\r\n            text += this.getStereotypeString();\r\n        }\r\n        // name and type\r\n        if (this.name && this.name.length > 0) {\r\n            text += this.name + " ";\r\n        }\r\n        // end1 and end2\r\n        text += "(" + this.end1.reference.name + "—" + this.end2.reference.name + ")";\r\n        return text.trim();\r\n    };\r\n\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                           COMMON BEHAVIORS                             *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n\r\n    /**\r\n     * UMLBehavior\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLBehavior() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.isReentrant = true;\r\n\r\n        /** @member {string} */\r\n        this.parameters = [];\r\n\r\n        /** @member {string} */\r\n        this.preconditions = [];\r\n\r\n        /** @member {string} */\r\n        this.postconditions = [];\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLBehavior.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLBehavior.prototype.constructor = UMLBehavior;\r\n\r\n\r\n    /**\r\n     * UMLOpaqueBehavior\r\n     * @constructor\r\n     * @extends UMLBehavior\r\n     */\r\n    function UMLOpaqueBehavior() {\r\n        UMLBehavior.apply(this, arguments);\r\n    }\r\n    // inherits from UMLBehavior\r\n    UMLOpaqueBehavior.prototype = Object.create(UMLBehavior.prototype);\r\n    UMLOpaqueBehavior.prototype.constructor = UMLOpaqueBehavior;\r\n\r\n\r\n    /**\r\n     * UMLEvent\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLEvent() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.kind = EK_ANYRECEIVE;\r\n\r\n        /** @member {string} */\r\n        this.value = \'\';\r\n\r\n        /** @member {string} */\r\n        this.expression = \'\';\r\n\r\n        /** @member {UMLOperation} */\r\n        this.targetOperation = null;\r\n\r\n        /** @member {UMLSignal} */\r\n        this.targetSignal = null;\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLEvent.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLEvent.prototype.constructor = UMLEvent;\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                                  CLASSES                               *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n\r\n    /**\r\n     * UMLPackage\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLPackage() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLModelElement>} */\r\n        this.importedElements = [];\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLPackage.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLPackage.prototype.constructor = UMLPackage;\r\n\r\n    UMLPackage.prototype.canContainDiagramKind = function (kind) {\r\n        return (kind === "UMLClassDiagram") ||\r\n               (kind === "UMLPackageDiagram") ||\r\n               (kind === "UMLObjectDiagram") ||\r\n               (kind === "UMLCompositeStructureDiagram") ||\r\n               (kind === "UMLComponentDiagram") ||\r\n               (kind === "UMLDeploymentDiagram") ||\r\n               (kind === "UMLUseCaseDiagram");\r\n    };\r\n\r\n    UMLPackage.prototype.canContainKind = function (kind) {\r\n        return MetaModelManager.isKindOf(kind, "UMLClassifier") ||\r\n               MetaModelManager.isKindOf(kind, "UMLPackage") ||\r\n               MetaModelManager.isKindOf(kind, "UMLInstance");\r\n    };\r\n\r\n    /**\r\n     * UMLModel\r\n     * @constructor\r\n     * @extends UMLPackage\r\n     */\r\n    function UMLModel() {\r\n        UMLPackage.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.viewpoint = \'\';\r\n    }\r\n    // inherits from UMLPackage\r\n    UMLModel.prototype = Object.create(UMLPackage.prototype);\r\n    UMLModel.prototype.constructor = UMLModel;\r\n\r\n\r\n    /**\r\n     * UMLClass\r\n     * @constructor\r\n     * @extends UMLClassifier\r\n     */\r\n    function UMLClass() {\r\n        UMLClassifier.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.isActive = false;\r\n    }\r\n    // inherits from UMLClassifier\r\n    UMLClass.prototype = Object.create(UMLClassifier.prototype);\r\n    UMLClass.prototype.constructor = UMLClass;\r\n\r\n\r\n    /**\r\n     * UMLInterface\r\n     * @constructor\r\n     * @extends UMLClassifier\r\n     */\r\n    function UMLInterface() {\r\n        UMLClassifier.apply(this, arguments);\r\n    }\r\n    // inherits from UMLClassifier\r\n    UMLInterface.prototype = Object.create(UMLClassifier.prototype);\r\n    UMLInterface.prototype.constructor = UMLInterface;\r\n\r\n    /**\r\n     * Get all implementing classifiers of this interfaces\r\n     *\r\n     * @return {Array.<UMLClassifier>}\r\n     */\r\n    UMLInterface.prototype.getImplementingClassifiers = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLInterfaceRealization) && (r.target === self);\r\n            });\r\n        return _.map(rels, function (g) { return g.source; });\r\n    };\r\n\r\n    /**\r\n     * UMLSignal\r\n     * @constructor\r\n     * @extends UMLClassifier\r\n     */\r\n    function UMLSignal() {\r\n        UMLClassifier.apply(this, arguments);\r\n    }\r\n    // inherits from UMLClassifier\r\n    UMLSignal.prototype = Object.create(UMLClassifier.prototype);\r\n    UMLSignal.prototype.constructor = UMLSignal;\r\n\r\n    /**\r\n     * UMLDataType\r\n     * @constructor\r\n     * @extends UMLClassifier\r\n     */\r\n    function UMLDataType() {\r\n        UMLClassifier.apply(this, arguments);\r\n    }\r\n    // inherits from UMLClassifier\r\n    UMLDataType.prototype = Object.create(UMLClassifier.prototype);\r\n    UMLDataType.prototype.constructor = UMLDataType;\r\n\r\n    /**\r\n     * UMLPrimitiveType\r\n     * @constructor\r\n     * @extends UMLDataType\r\n     */\r\n    function UMLPrimitiveType() {\r\n        UMLDataType.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDataType\r\n    UMLPrimitiveType.prototype = Object.create(UMLDataType.prototype);\r\n    UMLPrimitiveType.prototype.constructor = UMLPrimitiveType;\r\n\r\n    /**\r\n     * UMLEnumerationLiteral\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLEnumerationLiteral() {\r\n        UMLModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLEnumerationLiteral.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLEnumerationLiteral.prototype.constructor = UMLEnumerationLiteral;\r\n\r\n    UMLEnumerationLiteral.prototype.getString = function (options) {\r\n        var text = "";\r\n        if (options && (options.stereotypeDisplay === SD_LABEL || options.stereotypeDisplay === SD_DECORATION_LABEL || options.stereotypeDisplay === SD_ICON_LABEL)) {\r\n            text += this.getStereotypeString();\r\n        }\r\n        text += this.name;\r\n        if (options && options.showProperty) {\r\n            var prop = this.getPropertyString();\r\n            text += (prop.length > 0 ? " " + prop : "");\r\n        }\r\n        return text;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLEnumeration\r\n     * @constructor\r\n     * @extends UMLDataType\r\n     */\r\n    function UMLEnumeration() {\r\n        UMLDataType.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLEnumerationLiteral>} */\r\n        this.literals = [];\r\n    }\r\n    // inherits from UMLDataType\r\n    UMLEnumeration.prototype = Object.create(UMLDataType.prototype);\r\n    UMLEnumeration.prototype.constructor = UMLEnumeration;\r\n\r\n    /**\r\n     * UMLDependency\r\n     * @constructor\r\n     * @extends UMLDirectedRelationship\r\n     */\r\n    function UMLDependency() {\r\n        UMLDirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.mapping = \'\';\r\n    }\r\n    // inherits from UMLDirectedRelationship\r\n    UMLDependency.prototype = Object.create(UMLDirectedRelationship.prototype);\r\n    UMLDependency.prototype.constructor = UMLDependency;\r\n\r\n\r\n    /**\r\n     * UMLAbstraction\r\n     * @constructor\r\n     * @extends UMLDependency\r\n     */\r\n    function UMLAbstraction() {\r\n        UMLDependency.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDependency\r\n    UMLAbstraction.prototype = Object.create(UMLDependency.prototype);\r\n    UMLAbstraction.prototype.constructor = UMLAbstraction;\r\n\r\n\r\n    /**\r\n     * UMLRealization\r\n     * @constructor\r\n     * @extends UMLAbstraction\r\n     */\r\n    function UMLRealization() {\r\n        UMLAbstraction.apply(this, arguments);\r\n    }\r\n    // inherits from UMLAbstraction\r\n    UMLRealization.prototype = Object.create(UMLAbstraction.prototype);\r\n    UMLRealization.prototype.constructor = UMLRealization;\r\n\r\n\r\n    /**\r\n     * UMLGeneralization\r\n     * @constructor\r\n     * @extends UMLDirectedRelationship\r\n     */\r\n    function UMLGeneralization() {\r\n        UMLDirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.discriminator = \'\';\r\n    }\r\n    // inherits from UMLDirectedRelationship\r\n    UMLGeneralization.prototype = Object.create(UMLDirectedRelationship.prototype);\r\n    UMLGeneralization.prototype.constructor = UMLGeneralization;\r\n\r\n\r\n    /**\r\n     * UMLInterfaceRealization\r\n     * @constructor\r\n     * @extends UMLRealization\r\n     */\r\n    function UMLInterfaceRealization() {\r\n        UMLRealization.apply(this, arguments);\r\n    }\r\n    // inherits from UMLRealization\r\n    UMLInterfaceRealization.prototype = Object.create(UMLRealization.prototype);\r\n    UMLInterfaceRealization.prototype.constructor = UMLInterfaceRealization;\r\n\r\n\r\n    /**\r\n     * UMLComponentRealization\r\n     * @constructor\r\n     * @extends UMLRealization\r\n     */\r\n    function UMLComponentRealization() {\r\n        UMLRealization.apply(this, arguments);\r\n    }\r\n    // inherits from UMLRealization\r\n    UMLComponentRealization.prototype = Object.create(UMLRealization.prototype);\r\n    UMLComponentRealization.prototype.constructor = UMLComponentRealization;\r\n\r\n\r\n    /**\r\n     * UMLAssociationEnd\r\n     * @constructor\r\n     * @extends UMLRelationshipEnd\r\n     */\r\n    function UMLAssociationEnd() {\r\n        UMLRelationshipEnd.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLAttribute>} */\r\n        this.qualifiers = [];\r\n    }\r\n    // inherits from UMLRelationshipEnd\r\n    UMLAssociationEnd.prototype = Object.create(UMLRelationshipEnd.prototype);\r\n    UMLAssociationEnd.prototype.constructor = UMLAssociationEnd;\r\n\r\n    UMLAssociationEnd.prototype.getPropertyString = function () {\r\n        var props = [];\r\n        if (this.isID === true) { props.push("id"); }\r\n        if (this.isReadOnly === true) { props.push("readOnly"); }\r\n        if (this.isOrdered === true) { props.push("ordered"); }\r\n        if (this.isUnique === true) { props.push("unique"); }\r\n        props = _.union(props, this.getTagStringArray());\r\n        if (props.length > 0) {\r\n            return "{" + props.join(", ") + "}";\r\n        }\r\n        return "";\r\n    };\r\n\r\n    /**\r\n     * UMLAssociation\r\n     * @constructor\r\n     * @extends UMLUndirectedRelationship\r\n     */\r\n    function UMLAssociation() {\r\n        UMLUndirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {UMLAssociationEnd} */\r\n        this.end1 = new UMLAssociationEnd();\r\n        this.end1._parent = this;\r\n\r\n        /** @member {UMLAssociationEnd} */\r\n        this.end2 = new UMLAssociationEnd();\r\n        this.end2._parent = this;\r\n\r\n        /** @member {boolean} */\r\n        this.isDerived = false;\r\n    }\r\n    // inherits from UMLUndirectedRelationship\r\n    UMLAssociation.prototype = Object.create(UMLUndirectedRelationship.prototype);\r\n    UMLAssociation.prototype.constructor = UMLAssociation;\r\n\r\n\r\n    /**\r\n     * UMLAssociationClassLink\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLAssociationClassLink() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {UMLClass} */\r\n        this.classSide = null;\r\n\r\n        /** @member {UMLAssociation} */\r\n        this.associationSide = null;\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLAssociationClassLink.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLAssociationClassLink.prototype.constructor = UMLAssociationClassLink;\r\n\r\n    UMLAssociationClassLink.prototype.getNodeText = function () {\r\n        return "(" + this.classSide.name + ")";\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                               INSTANCES                                *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLSlot\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLSlot() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {UMLStructuralFeature} */\r\n        this.definingFeature = null;\r\n\r\n        /** @member {string|UMLClassifier} */\r\n        this.type = \'\';\r\n\r\n        /** @member {string} */\r\n        this.value = \'\';\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLSlot.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLSlot.prototype.constructor = UMLSlot;\r\n\r\n    /**\r\n     * Get type string\r\n     * @return {string}\r\n     */\r\n    UMLSlot.prototype.getTypeString = function () {\r\n        if (this.type) {\r\n            if (_.isString(this.type) && (this.type.length > 0)) {\r\n                return this.type;\r\n            } else if ((this.type !== null) && (this.type.name)) {\r\n                return this.type.name;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    UMLSlot.prototype.getString = function (options) {\r\n        var text = "";\r\n        if (options && (options.stereotypeDisplay === SD_LABEL || options.stereotypeDisplay === SD_DECORATION_LABEL || options.stereotypeDisplay === SD_ICON_LABEL)) {\r\n            text += this.getStereotypeString();\r\n        }\r\n        if (options && options.showVisibility) {\r\n            text += this.getVisibilityString();\r\n        }\r\n        var hasFeature = (this.definingFeature instanceof type.UMLStructuralFeature);\r\n        text += hasFeature ? this.definingFeature.name : this.name;\r\n        if (options && options.showType) {\r\n            var _type = (hasFeature ? this.definingFeature.getTypeString() : this.getTypeString()) || "";\r\n            text += (_type.length > 0 ? ": " + _type : "");\r\n            if (hasFeature) {\r\n                text += (this.definingFeature.multiplicity.length > 0 ? "[" + this.definingFeature.multiplicity + "]" : "");\r\n            }\r\n        }\r\n        text += (this.value.length > 0 ? " = " + this.value : "");\r\n        if (options && options.showProperty) {\r\n            var prop = (hasFeature ? this.definingFeature.getPropertyString() : this.getPropertyString());\r\n            text += (prop.length > 0 ? " " + prop : "");\r\n        }\r\n        return text;\r\n    };\r\n\r\n    /**\r\n     * UMLInstance\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLInstance() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {UMLClassifier} */\r\n        this.classifier = null;\r\n\r\n        /** @member {Array.<UMLSlot>} */\r\n        this.slots = [];\r\n\r\n        /** @member {string} */\r\n        this.value = null;\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLInstance.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLInstance.prototype.constructor = UMLInstance;\r\n\r\n    /**\r\n     * Get type string\r\n     *\r\n     * @return {string}\r\n     */\r\n    UMLInstance.prototype.getTypeString = function () {\r\n        if (this.classifier && this.classifier.name) {\r\n            return this.classifier.name;\r\n        } else if (_.isString(this.classifier) && (this.classifier.length > 0)) {\r\n            return this.classifier;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    UMLInstance.prototype.getString = function (options) {\r\n        var text = "";\r\n        text += this.name;\r\n        if (options && options.showType) {\r\n            text += (this.getTypeString() !== null ? ": " + this.getTypeString() : "");\r\n        }\r\n        return text;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLObject\r\n     * @constructor\r\n     * @extends UMLInstance\r\n     */\r\n    function UMLObject() {\r\n        UMLInstance.apply(this, arguments);\r\n    }\r\n    // inherits from UMLInstance\r\n    UMLObject.prototype = Object.create(UMLInstance.prototype);\r\n    UMLObject.prototype.constructor = UMLObject;\r\n\r\n\r\n    /**\r\n     * UMLArtifactInstance\r\n     * @constructor\r\n     * @extends UMLInstance\r\n     */\r\n    function UMLArtifactInstance() {\r\n        UMLInstance.apply(this, arguments);\r\n    }\r\n    // inherits from UMLInstance\r\n    UMLArtifactInstance.prototype = Object.create(UMLInstance.prototype);\r\n    UMLArtifactInstance.prototype.constructor = UMLArtifactInstance;\r\n\r\n    /**\r\n     * UMLComponentInstance\r\n     * @constructor\r\n     * @extends UMLInstance\r\n     */\r\n    function UMLComponentInstance() {\r\n        UMLInstance.apply(this, arguments);\r\n    }\r\n    // inherits from UMLInstance\r\n    UMLComponentInstance.prototype = Object.create(UMLInstance.prototype);\r\n    UMLComponentInstance.prototype.constructor = UMLComponentInstance;\r\n\r\n\r\n    /**\r\n     * UMLNodeInstance\r\n     * @constructor\r\n     * @extends UMLInstance\r\n     */\r\n    function UMLNodeInstance() {\r\n        UMLInstance.apply(this, arguments);\r\n    }\r\n    // inherits from UMLInstance\r\n    UMLNodeInstance.prototype = Object.create(UMLInstance.prototype);\r\n    UMLNodeInstance.prototype.constructor = UMLNodeInstance;\r\n\r\n\r\n    /**\r\n     * UMLLinkEnd\r\n     * @constructor\r\n     * @extends UMLRelationshipEnd\r\n     */\r\n    function UMLLinkEnd() {\r\n        UMLRelationshipEnd.apply(this, arguments);\r\n    }\r\n    // inherits from UMLRelationshipEnd\r\n    UMLLinkEnd.prototype = Object.create(UMLRelationshipEnd.prototype);\r\n    UMLLinkEnd.prototype.constructor = UMLLinkEnd;\r\n\r\n    UMLLinkEnd.prototype.getPropertyString = function () {\r\n        var props = [];\r\n        if (this.isID === true) { props.push("id"); }\r\n        if (this.isReadOnly === true) { props.push("readOnly"); }\r\n        if (this.isOrdered === true) { props.push("ordered"); }\r\n        if (this.isUnique === true) { props.push("unique"); }\r\n        props = _.union(props, this.getTagStringArray());\r\n        if (props.length > 0) {\r\n            return "{" + props.join(", ") + "}";\r\n        }\r\n        return "";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLLink\r\n     * @constructor\r\n     * @extends UMLUndirectedRelationship\r\n     */\r\n    function UMLLink() {\r\n        UMLUndirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {UMLLinkEnd} */\r\n        this.end1 = new UMLLinkEnd();\r\n        this.end1._parent = this;\r\n\r\n        /** @member {UMLLinkEnd} */\r\n        this.end2 = new UMLLinkEnd();\r\n        this.end2._parent = this;\r\n\r\n        /** @member {UMLAssociation} */\r\n        this.association = null;\r\n    }\r\n    // inherits from UMLUndirectedRelationship\r\n    UMLLink.prototype = Object.create(UMLUndirectedRelationship.prototype);\r\n    UMLLink.prototype.constructor = UMLLink;\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                          COMPOSITE STRUCTURES                          *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n\r\n    /**\r\n     * UMLPort\r\n     * @constructor\r\n     * @extends UMLAttribute\r\n     */\r\n    function UMLPort() {\r\n        UMLAttribute.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.isBehavior = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isService = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isConjugated = false;\r\n    }\r\n    // inherits from UMLAttribute\r\n    UMLPort.prototype = Object.create(UMLAttribute.prototype);\r\n    UMLPort.prototype.constructor = UMLPort;\r\n\r\n\r\n    /**\r\n     * UMLConnectorEnd\r\n     * @constructor\r\n     * @extends UMLRelationshipEnd\r\n     */\r\n    function UMLConnectorEnd() {\r\n        UMLRelationshipEnd.apply(this, arguments);\r\n    }\r\n    // inherits from UMLRelationshipEnd\r\n    UMLConnectorEnd.prototype = Object.create(UMLRelationshipEnd.prototype);\r\n    UMLConnectorEnd.prototype.constructor = UMLConnectorEnd;\r\n\r\n\r\n    /**\r\n     * UMLConnector\r\n     * @constructor\r\n     * @extends UMLUndirectedRelationship\r\n     */\r\n    function UMLConnector() {\r\n        UMLUndirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {UMLConnectorEnd} */\r\n        this.end1 = new UMLConnectorEnd();\r\n        this.end1._parent = this;\r\n\r\n        /** @member {UMLConnectorEnd} */\r\n        this.end2 = new UMLConnectorEnd();\r\n        this.end2._parent = this;\r\n\r\n        /** @member {UMLAssociation} */\r\n        this.type = null;\r\n\r\n        /** @member {UMLConnectorKind} */\r\n        this.kind = CK_ASSEMBLY;\r\n    }\r\n    // inherits from UMLUndirectedRelationship\r\n    UMLConnector.prototype = Object.create(UMLUndirectedRelationship.prototype);\r\n    UMLConnector.prototype.constructor = UMLConnector;\r\n\r\n\r\n    /**\r\n     * UMLCollaboration\r\n     * @constructor\r\n     * @extends UMLClassifier\r\n     */\r\n    function UMLCollaboration() {\r\n        UMLClassifier.apply(this, arguments);\r\n    }\r\n    // inherits from UMLClassifier\r\n    UMLCollaboration.prototype = Object.create(UMLClassifier.prototype);\r\n    UMLCollaboration.prototype.constructor = UMLCollaboration;\r\n\r\n\r\n    /**\r\n     * UMLCollaborationUse\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLCollaborationUse() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {UMLCollaboration} */\r\n        this.type = null;\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLCollaborationUse.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLCollaborationUse.prototype.constructor = UMLCollaborationUse;\r\n\r\n\r\n    /**\r\n     * UMLRoleBinding\r\n     * @constructor\r\n     * @extends UMLDependency\r\n     */\r\n    function UMLRoleBinding() {\r\n        UMLDependency.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.roleName = \'\';\r\n    }\r\n    // inherits from UMLDependency\r\n    UMLRoleBinding.prototype = Object.create(UMLDependency.prototype);\r\n    UMLRoleBinding.prototype.constructor = UMLRoleBinding;\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                               COMPONENTS                               *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLArtifact\r\n     * @constructor\r\n     * @extends UMLClassifier\r\n     */\r\n    function UMLArtifact() {\r\n        UMLClassifier.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.fileName = \'\';\r\n    }\r\n    // inherits from UMLClassifier\r\n    UMLArtifact.prototype = Object.create(UMLClassifier.prototype);\r\n    UMLArtifact.prototype.constructor = UMLArtifact;\r\n\r\n    /**\r\n     * UMLComponent\r\n     * @constructor\r\n     * @extends UMLClassifier\r\n     */\r\n    function UMLComponent() {\r\n        UMLClassifier.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.isIndirectlyInstantiated = true;\r\n    }\r\n    // inherits from UMLClassifier\r\n    UMLComponent.prototype = Object.create(UMLClassifier.prototype);\r\n    UMLComponent.prototype.constructor = UMLComponent;\r\n\r\n    /**\r\n     * Get all classifier realizing this component\r\n     *\r\n     * @return {Array.<UMLClassifier>}\r\n     */\r\n    UMLComponent.prototype.getRealizingClassifiers = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLComponentRealization) && (r.target === self);\r\n            });\r\n        return _.map(rels, function (g) { return g.source; });\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLSubsystem\r\n     * @constructor\r\n     * @extends UMLComponent\r\n     */\r\n    function UMLSubsystem() {\r\n        UMLComponent.apply(this, arguments);\r\n    }\r\n    // inherits from UMLComponent\r\n    UMLSubsystem.prototype = Object.create(UMLComponent.prototype);\r\n    UMLSubsystem.prototype.constructor = UMLSubsystem;\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                                DEPLOYMENTS                             *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLNode\r\n     * @constructor\r\n     * @extends UMLClassifier\r\n     */\r\n    function UMLNode() {\r\n        UMLClassifier.apply(this, arguments);\r\n    }\r\n    // inherits from UMLClassifier\r\n    UMLNode.prototype = Object.create(UMLClassifier.prototype);\r\n    UMLNode.prototype.constructor = UMLNode;\r\n\r\n    /**\r\n     * Get all element deployed in this node\r\n     *\r\n     * @return {Array.<Element>}\r\n     */\r\n    UMLNode.prototype.getDeployedElements = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLDeployment) && (r.target === self);\r\n            });\r\n        return _.map(rels, function (g) { return g.source; });\r\n    };\r\n\r\n    /**\r\n     * UMLDeployment\r\n     * @constructor\r\n     * @extends UMLDependency\r\n     */\r\n    function UMLDeployment() {\r\n        UMLDependency.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDependency\r\n    UMLDeployment.prototype = Object.create(UMLDependency.prototype);\r\n    UMLDeployment.prototype.constructor = UMLDeployment;\r\n\r\n\r\n    /**\r\n     * UMLCommunicationPath\r\n     * @constructor\r\n     * @extends UMLAssociation\r\n     */\r\n    function UMLCommunicationPath() {\r\n        UMLAssociation.apply(this, arguments);\r\n    }\r\n    // inherits from UMLAssociation\r\n    UMLCommunicationPath.prototype = Object.create(UMLAssociation.prototype);\r\n    UMLCommunicationPath.prototype.constructor = UMLCommunicationPath;\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                                USE CASES                               *\r\n     *                                                                        *\r\n     *************************************************************************/\r\n\r\n    /**\r\n     * UMLExtensionPoint\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLExtensionPoint() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.location = "";\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLExtensionPoint.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLExtensionPoint.prototype.constructor = UMLExtensionPoint;\r\n\r\n    UMLExtensionPoint.prototype.getString = function (options) {\r\n        var text = "";\r\n        if (options && (options.stereotypeDisplay === SD_LABEL || options.stereotypeDisplay === SD_DECORATION_LABEL || options.stereotypeDisplay === SD_ICON_LABEL)) {\r\n            text += this.getStereotypeString();\r\n        }\r\n        text += this.name;\r\n        text += (this.location ? ": " + this.location : "");\r\n        if (options && options.showProperty) {\r\n            var prop = this.getPropertyString();\r\n            text += (prop.length > 0 ? " " + prop : "");\r\n        }\r\n        return text;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLUseCase\r\n     * @constructor\r\n     * @extends UMLClassifier\r\n     */\r\n    function UMLUseCase() {\r\n        UMLClassifier.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLExtensionPoint>} */\r\n        this.extensionPoints = [];\r\n    }\r\n    // inherits from UMLClassifier\r\n    UMLUseCase.prototype = Object.create(UMLClassifier.prototype);\r\n    UMLUseCase.prototype.constructor = UMLUseCase;\r\n\r\n    /**\r\n     * Get all actors associated with this use case\r\n     *\r\n     * @return {Array.<UMLActor>}\r\n     */\r\n    UMLUseCase.prototype.getActors = function () {\r\n        var associated = _.map(this.getAssociationEnds(true), function (e) { return e.reference; });\r\n        return _.filter(associated, function (asso) { return (asso instanceof type.UMLActor); });\r\n    };\r\n\r\n    /**\r\n     * Get use cases directly included in this use case\r\n     *\r\n     * @return {Array.<UMLUseCase>}\r\n     */\r\n    UMLUseCase.prototype.getIncludedUseCases = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLInclude) && (r.source === self);\r\n            });\r\n        return _.map(rels, function (g) { return g.target; });\r\n    };\r\n\r\n    /**\r\n     * Get use cases extending this use case\r\n     *\r\n     * @return {Array.<UMLUseCase>}\r\n     */\r\n    UMLUseCase.prototype.getExtendingUseCases = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLExtend) && (r.target === self);\r\n            });\r\n        return _.map(rels, function (g) { return g.source; });\r\n    };\r\n\r\n    /**\r\n     * Get all included use cases\r\n     *\r\n     * @return {Array.<UMLUseCase>}\r\n     */\r\n    UMLUseCase.prototype.getAllIncludedUseCases = function () {\r\n        var includings = this.getIncludedUseCases(),\r\n            size = 0;\r\n        do {\r\n            size = includings.length;\r\n            _.each(includings, function (e) {\r\n                includings = _.union(includings, e.getIncludedUseCases());\r\n            });\r\n        } while (size < includings.length);\r\n        return includings;\r\n    };\r\n\r\n    /**\r\n     * UMLActor\r\n     * @constructor\r\n     * @extends UMLClassifier\r\n     */\r\n    function UMLActor() {\r\n        UMLClassifier.apply(this, arguments);\r\n    }\r\n    // inherits from UMLClassifier\r\n    UMLActor.prototype = Object.create(UMLClassifier.prototype);\r\n    UMLActor.prototype.constructor = UMLActor;\r\n\r\n    /**\r\n     * Get use cases associated with this actor\r\n     *\r\n     * @return {Array.<UMLUseCase>}\r\n     */\r\n    UMLActor.prototype.getUseCases = function () {\r\n        var associated = _.map(this.getAssociationEnds(true), function (e) { return e.reference; });\r\n        return _.filter(associated, function (asso) { return (asso instanceof type.UMLUseCase); });\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInclude\r\n     * @constructor\r\n     * @extends UMLDirectedRelationship\r\n     */\r\n    function UMLInclude() {\r\n        UMLDirectedRelationship.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDirectedRelationship\r\n    UMLInclude.prototype = Object.create(UMLDirectedRelationship.prototype);\r\n    UMLInclude.prototype.constructor = UMLInclude;\r\n\r\n\r\n    /**\r\n     * UMLExtend\r\n     * @constructor\r\n     * @extends UMLDirectedRelationship\r\n     */\r\n    function UMLExtend() {\r\n        UMLDirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.condition = "";\r\n\r\n        /** @member {Array.<UMLExtensionPoint>} */\r\n        this.extensionLocations = [];\r\n    }\r\n    // inherits from UMLDirectedRelationship\r\n    UMLExtend.prototype = Object.create(UMLDirectedRelationship.prototype);\r\n    UMLExtend.prototype.constructor = UMLExtend;\r\n\r\n    /**\r\n     * UMLUseCaseSubject\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLUseCaseSubject() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {UMLClassifier} */\r\n        this.represent = null;\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLUseCaseSubject.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLUseCaseSubject.prototype.constructor = UMLUseCaseSubject;\r\n\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                             STATE MACHINES                             *\r\n     *                                                                        *\r\n     *************************************************************************/\r\n\r\n\r\n    /**\r\n     * UMLStateMachine\r\n     * @constructor\r\n     * @extends UMLBehavior\r\n     */\r\n    function UMLStateMachine() {\r\n        UMLBehavior.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLRegion>} */\r\n        this.regions = [];\r\n    }\r\n    // inherits from UMLBehavior\r\n    UMLStateMachine.prototype = Object.create(UMLBehavior.prototype);\r\n    UMLStateMachine.prototype.constructor = UMLStateMachine;\r\n\r\n\r\n    /**\r\n     * UMLRegion\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLRegion() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLVertex>} */\r\n        this.vertices = [];\r\n\r\n        /** @member {Array.<UMLTransition>} */\r\n        this.transitions = [];\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLRegion.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLRegion.prototype.constructor = UMLRegion;\r\n\r\n    UMLRegion.prototype.canContainKind = function (kind) {\r\n        return MetaModelManager.isKindOf(kind, "UMLVertex");\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLVertex\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLVertex() {\r\n        UMLModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLVertex.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLVertex.prototype.constructor = UMLVertex;\r\n\r\n\r\n    /**\r\n     * Get incoming transitions\r\n     *\r\n     * @return {Array.<UMLTransition>}\r\n     */\r\n    UMLVertex.prototype.getIncomingTransitions = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLTransition) && (r.target === self);\r\n            });\r\n        return rels;\r\n    };\r\n\r\n    /**\r\n     * Get outgoing transitions\r\n     *\r\n     * @return {Array.<UMLTransition>}\r\n     */\r\n    UMLVertex.prototype.getOutgoingTransitions = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLTransition) && (r.source === self);\r\n            });\r\n        return rels;\r\n    };\r\n\r\n    /**\r\n     * UMLPseudostate\r\n     * @constructor\r\n     * @extends UMLVertex\r\n     */\r\n    function UMLPseudostate() {\r\n        UMLVertex.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.kind = PSK_INITIAL;\r\n    }\r\n    // inherits from UMLVertex\r\n    UMLPseudostate.prototype = Object.create(UMLVertex.prototype);\r\n    UMLPseudostate.prototype.constructor = UMLPseudostate;\r\n\r\n    UMLPseudostate.prototype.getNodeIcon = function () {\r\n        switch (this.kind) {\r\n        case PSK_INITIAL:\r\n            return "icon-UMLInitialState";\r\n        case PSK_DEEPHISTORY:\r\n            return "icon-UMLDeepHistory";\r\n        case PSK_SHALLOWHISTORY:\r\n            return "icon-UMLShallowHistory";\r\n        case PSK_JOIN:\r\n            return "icon-UMLJoin";\r\n        case PSK_FORK:\r\n            return "icon-UMLFork";\r\n        case PSK_JUNCTION:\r\n            return "icon-UMLJunction";\r\n        case PSK_CHOICE:\r\n            return "icon-UMLChoice";\r\n        case PSK_ENTRYPOINT:\r\n            return "icon-UMLEntryPoint";\r\n        case PSK_EXITPOINT:\r\n            return "icon-UMLExitPoint";\r\n        case PSK_TERMINATE:\r\n            return "icon-UMLTerminate";\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLConnectionPointReference\r\n     * @constructor\r\n     * @extends UMLVertex\r\n     */\r\n    function UMLConnectionPointReference() {\r\n        UMLVertex.apply(this, arguments);\r\n\r\n        /** @member {UMLPseudostate} */\r\n        this.entry = [];\r\n\r\n        /** @member {UMLPseudostate} */\r\n        this.exit = [];\r\n    }\r\n    // inherits from UMLVertex\r\n    UMLConnectionPointReference.prototype = Object.create(UMLVertex.prototype);\r\n    UMLConnectionPointReference.prototype.constructor = UMLConnectionPointReference;\r\n\r\n\r\n    /**\r\n     * UMLState\r\n     * @constructor\r\n     * @extends UMLVertex\r\n     */\r\n    function UMLState() {\r\n        UMLVertex.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLRegion>} */\r\n        this.regions = [];\r\n\r\n        /** @member {Array.<UMLBehavior>} */\r\n        this.entryActivities = [];\r\n\r\n        /** @member {Array.<UMLBehavior>} */\r\n        this.doActivities = [];\r\n\r\n        /** @member {Array.<UMLBehavior>} */\r\n        this.exitActivities = [];\r\n\r\n        /** @member {UMLStateMachine} */\r\n        this.submachine = null;\r\n\r\n        /** @member {UMLConnectionPointReference} */\r\n        this.connections = [];\r\n    }\r\n    // inherits from UMLVertex\r\n    UMLState.prototype = Object.create(UMLVertex.prototype);\r\n    UMLState.prototype.constructor = UMLState;\r\n\r\n    UMLState.prototype.getInternalTransitions = function () {\r\n        var self = this, internalTransitions = [];\r\n        _.each(this.regions, function (region) {\r\n            _.each(region.transitions, function (t) {\r\n                if (t.source === self && t.target === self && t.kind === TK_INTERNAL) {\r\n                    internalTransitions.push(t);\r\n                }\r\n            });\r\n        });\r\n        return internalTransitions;\r\n    };\r\n\r\n    /**\r\n     * UMLFinalState\r\n     * @constructor\r\n     * @extends UMLState\r\n     */\r\n    function UMLFinalState() {\r\n        UMLState.apply(this, arguments);\r\n    }\r\n    // inherits from UMLState\r\n    UMLFinalState.prototype = Object.create(UMLState.prototype);\r\n    UMLFinalState.prototype.constructor = UMLFinalState;\r\n\r\n\r\n    /**\r\n     * UMLTransition\r\n     * @constructor\r\n     * @extends UMLDirectedRelationship\r\n     */\r\n    function UMLTransition() {\r\n        UMLDirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.kind = TK_EXTERNAL;\r\n\r\n        /** @member {string} */\r\n        this.guard = \'\';\r\n\r\n        /** @member {Array.<UMLEvent>} */\r\n        this.triggers = [];\r\n\r\n        /** @member {Array.<UMLBehavior>} */\r\n        this.effects = [];\r\n    }\r\n    // inherits from UMLDirectedRelationship\r\n    UMLTransition.prototype = Object.create(UMLDirectedRelationship.prototype);\r\n    UMLTransition.prototype.constructor = UMLTransition;\r\n\r\n    UMLTransition.prototype.getString = function () {\r\n        var i, len, text = "";\r\n        // triggers\r\n        if (this.triggers.length > 0) {\r\n            var triggers = [];\r\n            for (i = 0, len = this.triggers.length; i < len; i++) {\r\n                triggers.push(this.triggers[i].name);\r\n            }\r\n            text += triggers.join(", ");\r\n        }\r\n        // guard\r\n        if (this.guard.length > 0) {\r\n            text += " [" + this.guard + "]";\r\n        }\r\n        // effects\r\n        if (this.effects.length > 0) {\r\n            var effects = [];\r\n            for (i = 0, len = this.effects.length; i < len; i++) {\r\n                effects.push(this.effects[i].name);\r\n            }\r\n            text += " / " + effects.join(", ");\r\n        }\r\n        if (text.length > 0) {\r\n            text = (this.name.length > 0 ? this.name + " : " + text : text);\r\n        } else {\r\n            text = this.name;\r\n        }\r\n        return text;\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                                ACTIVITIES                              *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLActivity\r\n     * @constructor\r\n     * @extends UMLActivity\r\n     */\r\n    function UMLActivity() {\r\n        UMLBehavior.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.isReadOnly = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isSingleExecution = false;\r\n\r\n        /** @member {Array.<UMLActivityNode>} */\r\n        this.nodes = [];\r\n\r\n        /** @member {Array.<UMLActivityEdge>} */\r\n        this.edges = [];\r\n\r\n        /** @member {Array.<UMLActivityGroup>} */\r\n        this.groups = [];\r\n    }\r\n    // inherits from UMLBehavior\r\n    UMLActivity.prototype = Object.create(UMLBehavior.prototype);\r\n    UMLActivity.prototype.constructor = UMLActivity;\r\n\r\n\r\n    /**\r\n     * UMLPin\r\n     * @constructor\r\n     * @extends UMLStructuralFeature\r\n     */\r\n    function UMLPin() {\r\n        UMLStructuralFeature.apply(this, arguments);\r\n    }\r\n    // inherits from UMLStructuralFeature\r\n    UMLPin.prototype = Object.create(UMLStructuralFeature.prototype);\r\n    UMLPin.prototype.constructor = UMLPin;\r\n\r\n\r\n    /**\r\n     * UMLInputPin\r\n     * @constructor\r\n     * @extends UMLPin\r\n     */\r\n    function UMLInputPin() {\r\n        UMLPin.apply(this, arguments);\r\n    }\r\n    // inherits from UMLPin\r\n    UMLInputPin.prototype = Object.create(UMLPin.prototype);\r\n    UMLInputPin.prototype.constructor = UMLInputPin;\r\n\r\n\r\n    /**\r\n     * UMLOutputPin\r\n     * @constructor\r\n     * @extends UMLPin\r\n     */\r\n    function UMLOutputPin() {\r\n        UMLPin.apply(this, arguments);\r\n    }\r\n    // inherits from UMLPin\r\n    UMLOutputPin.prototype = Object.create(UMLPin.prototype);\r\n    UMLOutputPin.prototype.constructor = UMLOutputPin;\r\n\r\n\r\n    /**\r\n     * UMLExpansionNode\r\n     * @constructor\r\n     * @extends UMLPin\r\n     */\r\n    function UMLExpansionNode() {\r\n        UMLPin.apply(this, arguments);\r\n    }\r\n    // inherits from UMLPin\r\n    UMLExpansionNode.prototype = Object.create(UMLPin.prototype);\r\n    UMLExpansionNode.prototype.constructor = UMLExpansionNode;\r\n\r\n\r\n    /**\r\n     * UMLActivityNode\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLActivityNode() {\r\n        UMLModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLActivityNode.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLActivityNode.prototype.constructor = UMLActivityNode;\r\n\r\n\r\n    /**\r\n     * Get incoming edges\r\n     *\r\n     * @return {Array.<UMLActivityEdge>}\r\n     */\r\n    UMLActivityNode.prototype.getIncomingEdges = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLActivityEdge) && (r.target === self);\r\n            });\r\n        return rels;\r\n    };\r\n\r\n    /**\r\n     * Get outgoing edges\r\n     *\r\n     * @return {Array.<UMLActivityEdge>}\r\n     */\r\n    UMLActivityNode.prototype.getOutgoingEdges = function () {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) {\r\n                return (r instanceof type.UMLActivityEdge) && (r.source === self);\r\n            });\r\n        return rels;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLAction\r\n     * @constructor\r\n     * @extends UMLActivityNode\r\n     */\r\n    function UMLAction() {\r\n        UMLActivityNode.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.kind = ACK_OPAQUE;\r\n\r\n        /** @member {Array.<UMLInputPin>} */\r\n        this.inputs = [];\r\n\r\n        /** @member {Array.<UMLOutputPin>} */\r\n        this.outputs = [];\r\n\r\n        /** @member {Array.<UMLEvent>} */\r\n        this.triggers = [];\r\n\r\n        /** @member {UMLModelElement} */\r\n        this.target = null;\r\n\r\n        /** @member {UMLActivity} */\r\n        this.subactivity = null;\r\n\r\n        /** @member {boolean} */\r\n        this.isLocallyReentrant = false;\r\n\r\n        /** @member {boolean} */\r\n        this.isSynchronous = true;\r\n\r\n        /** @member {string} */\r\n        this.language = \'\';\r\n\r\n        /** @member {string} */\r\n        this.body = \'\';\r\n\r\n        /** @member {Array.<UMLConstraint>} */\r\n        this.localPreconditions = [];\r\n\r\n        /** @member {Array.<UMLConstraint>} */\r\n        this.localPostconditions = [];\r\n    }\r\n    // inherits from UMLActivityNode\r\n    UMLAction.prototype = Object.create(UMLActivityNode.prototype);\r\n    UMLAction.prototype.constructor = UMLAction;\r\n\r\n    UMLAction.prototype.getNodeIcon = function () {\r\n        switch (this.kind) {\r\n        case ACK_OPAQUE:\r\n            return "icon-UMLAction";\r\n        case ACK_CREATE:\r\n            return "icon-UMLAction";\r\n        case ACK_DESTROY:\r\n            return "icon-UMLAction";\r\n        case ACK_READ:\r\n            return "icon-UMLAction";\r\n        case ACK_WRITE:\r\n            return "icon-UMLAction";\r\n        case ACK_INSERT:\r\n            return "icon-UMLAction";\r\n        case ACK_DELETE:\r\n            return "icon-UMLAction";\r\n        case ACK_STRUCTURED:\r\n            return "icon-UMLAction";\r\n        case ACK_SENDSIGNAL:\r\n            return "icon-UMLSendSignal";\r\n        case ACK_ACCEPTSIGNAL:\r\n            return "icon-UMLAcceptSignal";\r\n        case ACK_TRIGGEREVENT:\r\n            return "icon-UMLSendSignal";\r\n        case ACK_ACCEPTEVENT:\r\n            return "icon-UMLAcceptSignal";\r\n        case ACK_TIMEEVENT:\r\n            return "icon-UMLAcceptTimeEvent";\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLObjectNode\r\n     * @constructor\r\n     * @extends UMLActivityNode\r\n     */\r\n    function UMLObjectNode() {\r\n        UMLActivityNode.apply(this, arguments);\r\n\r\n        /** @member {UMLClassifier} */\r\n        this.type = null;\r\n\r\n        /** @member {boolean} */\r\n        this.isControlType = false;\r\n\r\n        /** @member {string} */\r\n        this.ordering = ONOK_FIFO;\r\n    }\r\n    // inherits from UMLActivityNode\r\n    UMLObjectNode.prototype = Object.create(UMLActivityNode.prototype);\r\n    UMLObjectNode.prototype.constructor = UMLObjectNode;\r\n\r\n    UMLObjectNode.prototype.getTypeString = function () {\r\n        if (_.isString(this.type) && (this.type.length > 0)) {\r\n            return this.type;\r\n        } else if ((this.type !== null) && (this.type.name)) {\r\n            return this.type.name;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    UMLObjectNode.prototype.getString = function () {\r\n        var text = "";\r\n        text += this.name;\r\n        text += (this.getTypeString() !== null ? ": " + this.getTypeString() : "");\r\n        return text;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLCentralBufferNode\r\n     * @constructor\r\n     * @extends UMLObjectNode\r\n     */\r\n    function UMLCentralBufferNode() {\r\n        UMLObjectNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLObjectNode\r\n    UMLCentralBufferNode.prototype = Object.create(UMLObjectNode.prototype);\r\n    UMLCentralBufferNode.prototype.constructor = UMLCentralBufferNode;\r\n\r\n\r\n    /**\r\n     * UMLDataStoreNode\r\n     * @constructor\r\n     * @extends UMLCentralBufferNode\r\n     */\r\n    function UMLDataStoreNode() {\r\n        UMLCentralBufferNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCentralBufferNode\r\n    UMLDataStoreNode.prototype = Object.create(UMLCentralBufferNode.prototype);\r\n    UMLDataStoreNode.prototype.constructor = UMLDataStoreNode;\r\n\r\n\r\n    /**\r\n     * UMLControlNode\r\n     * @constructor\r\n     * @extends UMLActivityNode\r\n     */\r\n    function UMLControlNode() {\r\n        UMLActivityNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLActivityNode\r\n    UMLControlNode.prototype = Object.create(UMLActivityNode.prototype);\r\n    UMLControlNode.prototype.constructor = UMLControlNode;\r\n\r\n\r\n    /**\r\n     * UMLInitialNode\r\n     * @constructor\r\n     * @extends UMLControlNode\r\n     */\r\n    function UMLInitialNode() {\r\n        UMLControlNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLControlNode\r\n    UMLInitialNode.prototype = Object.create(UMLControlNode.prototype);\r\n    UMLInitialNode.prototype.constructor = UMLInitialNode;\r\n\r\n\r\n    /**\r\n     * UMLFinalNode\r\n     * @constructor\r\n     * @extends UMLControlNode\r\n     */\r\n    function UMLFinalNode() {\r\n        UMLControlNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLControlNode\r\n    UMLFinalNode.prototype = Object.create(UMLControlNode.prototype);\r\n    UMLFinalNode.prototype.constructor = UMLFinalNode;\r\n\r\n\r\n    /**\r\n     * UMLActivityFinalNode\r\n     * @constructor\r\n     * @extends UMLFinalNode\r\n     */\r\n    function UMLActivityFinalNode() {\r\n        UMLFinalNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLFinalNode\r\n    UMLActivityFinalNode.prototype = Object.create(UMLFinalNode.prototype);\r\n    UMLActivityFinalNode.prototype.constructor = UMLActivityFinalNode;\r\n\r\n\r\n    /**\r\n     * UMLFlowFinalNode\r\n     * @constructor\r\n     * @extends UMLFinalNode\r\n     */\r\n    function UMLFlowFinalNode() {\r\n        UMLFinalNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLFinalNode\r\n    UMLFlowFinalNode.prototype = Object.create(UMLFinalNode.prototype);\r\n    UMLFlowFinalNode.prototype.constructor = UMLFlowFinalNode;\r\n\r\n\r\n    /**\r\n     * UMLForkNode\r\n     * @constructor\r\n     * @extends UMLControlNode\r\n     */\r\n    function UMLForkNode() {\r\n        UMLControlNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLControlNode\r\n    UMLForkNode.prototype = Object.create(UMLControlNode.prototype);\r\n    UMLForkNode.prototype.constructor = UMLForkNode;\r\n\r\n\r\n    /**\r\n     * UMLJoinNode\r\n     * @constructor\r\n     * @extends UMLControlNode\r\n     */\r\n    function UMLJoinNode() {\r\n        UMLControlNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLControlNode\r\n    UMLJoinNode.prototype = Object.create(UMLControlNode.prototype);\r\n    UMLJoinNode.prototype.constructor = UMLJoinNode;\r\n\r\n\r\n    /**\r\n     * UMLMergeNode\r\n     * @constructor\r\n     * @extends UMLControlNode\r\n     */\r\n    function UMLMergeNode() {\r\n        UMLControlNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLControlNode\r\n    UMLMergeNode.prototype = Object.create(UMLControlNode.prototype);\r\n    UMLMergeNode.prototype.constructor = UMLMergeNode;\r\n\r\n\r\n    /**\r\n     * UMLDecisionNode\r\n     * @constructor\r\n     * @extends UMLControlNode\r\n     */\r\n    function UMLDecisionNode() {\r\n        UMLControlNode.apply(this, arguments);\r\n    }\r\n    // inherits from UMLControlNode\r\n    UMLDecisionNode.prototype = Object.create(UMLControlNode.prototype);\r\n    UMLDecisionNode.prototype.constructor = UMLDecisionNode;\r\n\r\n\r\n    /**\r\n     * UMLActivityGroup\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLActivityGroup() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLActivityNode>} */\r\n        this.nodes = [];\r\n\r\n        /** @member {Array.<UMLActivityEdge>} */\r\n        this.edges = [];\r\n\r\n        /** @member {Array.<UMLActivityGroup>} */\r\n        this.subgroups = [];\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLActivityGroup.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLActivityGroup.prototype.constructor = UMLActivityGroup;\r\n\r\n\r\n    /**\r\n     * UMLActivityPartition\r\n     * @constructor\r\n     * @extends UMLActivityGroup\r\n     */\r\n    function UMLActivityPartition() {\r\n        UMLActivityGroup.apply(this, arguments);\r\n    }\r\n    // inherits from UMLActivityGroup\r\n    UMLActivityPartition.prototype = Object.create(UMLActivityGroup.prototype);\r\n    UMLActivityPartition.prototype.constructor = UMLActivityPartition;\r\n\r\n    UMLActivityPartition.prototype.getNodeIcon = function () {\r\n        return "icon-UMLSwimlaneVert";\r\n    };\r\n\r\n    UMLActivityPartition.prototype.canContainKind = function (kind) {\r\n        return MetaModelManager.isKindOf(kind, "UMLActivityNode");\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInterruptibleActivityRegion\r\n     * @constructor\r\n     * @extends UMLActivityGroup\r\n     */\r\n    function UMLInterruptibleActivityRegion() {\r\n        UMLActivityGroup.apply(this, arguments);\r\n    }\r\n    // inherits from UMLActivityGroup\r\n    UMLInterruptibleActivityRegion.prototype = Object.create(UMLActivityGroup.prototype);\r\n    UMLInterruptibleActivityRegion.prototype.constructor = UMLInterruptibleActivityRegion;\r\n\r\n    UMLInterruptibleActivityRegion.prototype.canContainKind = function (kind) {\r\n        return MetaModelManager.isKindOf(kind, "UMLActivityNode");\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLStructuredActivityNode\r\n     * @constructor\r\n     * @extends UMLAction\r\n     */\r\n    function UMLStructuredActivityNode() {\r\n        UMLAction.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.mustIsolate = false;\r\n\r\n        /** @member {Array.<UMLActivityNode>} */\r\n        this.nodes = [];\r\n\r\n        /** @member {Array.<UMLActivityEdge>} */\r\n        this.edges = [];\r\n    }\r\n    // inherits from UMLAction\r\n    UMLStructuredActivityNode.prototype = Object.create(UMLAction.prototype);\r\n    UMLStructuredActivityNode.prototype.constructor = UMLStructuredActivityNode;\r\n\r\n    UMLStructuredActivityNode.prototype.getNodeIcon = function () {\r\n        return "icon-UMLStructuredActivityNode";\r\n    };\r\n\r\n    UMLStructuredActivityNode.prototype.canContainKind = function (kind) {\r\n        return MetaModelManager.isKindOf(kind, "UMLActivityNode");\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLExpansionRegion\r\n     * @constructor\r\n     * @extends UMLStructuredActivityNode\r\n     */\r\n    function UMLExpansionRegion() {\r\n        UMLStructuredActivityNode.apply(this, arguments);\r\n\r\n        /** @member {UMLExpansionKind} */\r\n        this.mode = EK_ITERATIVE;\r\n    }\r\n    // inherits from UMLStructuredActivityNode\r\n    UMLExpansionRegion.prototype = Object.create(UMLStructuredActivityNode.prototype);\r\n    UMLExpansionRegion.prototype.constructor = UMLExpansionRegion;\r\n\r\n    UMLExpansionRegion.prototype.getNodeIcon = function () {\r\n        return "icon-UMLExpansionRegion";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLExceptionHandler\r\n     * @constructor\r\n     * @extends UMLDirectedRelationship\r\n     */\r\n    function UMLExceptionHandler() {\r\n        UMLDirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {Array.<UMLClassifier>} */\r\n        this.exceptionTypes = [];\r\n\r\n        /** @member {UMLActivityNode} */\r\n        this.handlerBody = null;\r\n    }\r\n    // inherits from UMLDirectedRelationship\r\n    UMLExceptionHandler.prototype = Object.create(UMLDirectedRelationship.prototype);\r\n    UMLExceptionHandler.prototype.constructor = UMLExceptionHandler;\r\n\r\n\r\n    /**\r\n     * UMLActivityEdge\r\n     * @constructor\r\n     * @extends UMLDirectedRelationship\r\n     */\r\n    function UMLActivityEdge() {\r\n        UMLDirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.guard = \'\';\r\n\r\n        /** @member {string} */\r\n        this.weight = \'\';\r\n    }\r\n    // inherits from UMLDirectedRelationship\r\n    UMLActivityEdge.prototype = Object.create(UMLDirectedRelationship.prototype);\r\n    UMLActivityEdge.prototype.constructor = UMLActivityEdge;\r\n\r\n    UMLActivityEdge.prototype.getString = function () {\r\n        var text = this.name;\r\n        // guard\r\n        if (this.guard.length > 0) {\r\n            text += " [" + this.guard + "]";\r\n        }\r\n        // weight\r\n        if (this.weight.length > 0) {\r\n            text += " {weight=" + this.weight + "}";\r\n        }\r\n        return text;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLControlFlow\r\n     * @constructor\r\n     * @extends UMLActivityEdge\r\n     */\r\n    function UMLControlFlow() {\r\n        UMLActivityEdge.apply(this, arguments);\r\n    }\r\n    // inherits from UMLActivityEdge\r\n    UMLControlFlow.prototype = Object.create(UMLActivityEdge.prototype);\r\n    UMLControlFlow.prototype.constructor = UMLControlFlow;\r\n\r\n\r\n    /**\r\n     * UMLObjectFlow\r\n     * @constructor\r\n     * @extends UMLActivityEdge\r\n     */\r\n    function UMLObjectFlow() {\r\n        UMLActivityEdge.apply(this, arguments);\r\n    }\r\n    // inherits from UMLActivityEdge\r\n    UMLObjectFlow.prototype = Object.create(UMLActivityEdge.prototype);\r\n    UMLObjectFlow.prototype.constructor = UMLObjectFlow;\r\n\r\n\r\n    /**\r\n     * UMLActivityInterrupt\r\n     * @constructor\r\n     * @extends UMLActivityEdge\r\n     */\r\n    function UMLActivityInterrupt() {\r\n        UMLActivityEdge.apply(this, arguments);\r\n    }\r\n    // inherits from UMLActivityEdge\r\n    UMLActivityInterrupt.prototype = Object.create(UMLActivityEdge.prototype);\r\n    UMLActivityInterrupt.prototype.constructor = UMLActivityInterrupt;\r\n\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                               INTERACTIONS                             *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLInteractionFragment\r\n     * @constructor\r\n     * @extends UMLBehavior\r\n     */\r\n    function UMLInteractionFragment() {\r\n        UMLBehavior.apply(this, arguments);\r\n    }\r\n    // inherits from UMLBehavior\r\n    UMLInteractionFragment.prototype = Object.create(UMLBehavior.prototype);\r\n    UMLInteractionFragment.prototype.constructor = UMLInteractionFragment;\r\n\r\n\r\n    /**\r\n     * UMLInteraction\r\n     * @constructor\r\n     * @extends UMLInteractionFragment\r\n     */\r\n    function UMLInteraction() {\r\n        UMLInteractionFragment.apply(this, arguments);\r\n\r\n        /** @member {UMLMessage} */\r\n        this.messages = [];\r\n\r\n        /** @member {UMLMessageEndpoint} */\r\n        this.participants = [];\r\n\r\n        /** @member {UMLInteractionFragment} */\r\n        this.fragments = [];\r\n    }\r\n    // inherits from UMLInteractionFragment\r\n    UMLInteraction.prototype = Object.create(UMLInteractionFragment.prototype);\r\n    UMLInteraction.prototype.constructor = UMLInteraction;\r\n\r\n\r\n    /**\r\n     * UMLStateInvariant\r\n     * @constructor\r\n     * @extends UMLInteractionFragment\r\n     */\r\n    function UMLStateInvariant() {\r\n        UMLInteractionFragment.apply(this, arguments);\r\n\r\n        /** @member {UMLLifeline} */\r\n        this.covered = null;\r\n\r\n        /** @member {string} */\r\n        this.invariant = \'\';\r\n    }\r\n    // inherits from UMLInteractionFragment\r\n    UMLStateInvariant.prototype = Object.create(UMLInteractionFragment.prototype);\r\n    UMLStateInvariant.prototype.constructor = UMLStateInvariant;\r\n\r\n\r\n    /**\r\n     * UMLContinuation\r\n     * @constructor\r\n     * @extends UMLInteractionFragment\r\n     */\r\n    function UMLContinuation() {\r\n        UMLInteractionFragment.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.setting = false;\r\n    }\r\n    // inherits from UMLInteractionFragment\r\n    UMLContinuation.prototype = Object.create(UMLInteractionFragment.prototype);\r\n    UMLContinuation.prototype.constructor = UMLContinuation;\r\n\r\n\r\n    /**\r\n     * UMLInteractionOperand\r\n     * @constructor\r\n     * @extends UMLInteractionFragment\r\n     */\r\n    function UMLInteractionOperand() {\r\n        UMLInteractionFragment.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.guard = \'\';\r\n    }\r\n    // inherits from UMLInteractionFragment\r\n    UMLInteractionOperand.prototype = Object.create(UMLInteractionFragment.prototype);\r\n    UMLInteractionOperand.prototype.constructor = UMLInteractionOperand;\r\n\r\n\r\n    /**\r\n     * UMLCombinedFragment\r\n     * @constructor\r\n     * @extends UMLInteractionFragment\r\n     */\r\n    function UMLCombinedFragment() {\r\n        UMLInteractionFragment.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.interactionOperator = IOK_SEQ;\r\n\r\n        /** @member {UMLInteractionOperand} */\r\n        this.operands = [];\r\n    }\r\n    // inherits from UMLInteractionFragment\r\n    UMLCombinedFragment.prototype = Object.create(UMLInteractionFragment.prototype);\r\n    UMLCombinedFragment.prototype.constructor = UMLCombinedFragment;\r\n\r\n\r\n    /**\r\n     * UMLInteractionUse\r\n     * @constructor\r\n     * @extends UMLInteractionFragment\r\n     */\r\n    function UMLInteractionUse() {\r\n        UMLInteractionFragment.apply(this, arguments);\r\n\r\n        /** @member {UMLInteraction} */\r\n        this.refersTo = null;\r\n\r\n        /** @member {string} */\r\n        this["arguments"] = \'\';\r\n\r\n        /** @member {string} */\r\n        this.returnValue = \'\';\r\n\r\n        /** @member {UMLStructuralFeature} */\r\n        this.returnValueRecipient = null;\r\n    }\r\n    // inherits from UMLInteractionFragment\r\n    UMLInteractionUse.prototype = Object.create(UMLInteractionFragment.prototype);\r\n    UMLInteractionUse.prototype.constructor = UMLInteractionUse;\r\n\r\n\r\n    /**\r\n     * UMLMessageEndpoint\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLMessageEndpoint() {\r\n        UMLModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLMessageEndpoint.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLMessageEndpoint.prototype.constructor = UMLMessageEndpoint;\r\n\r\n\r\n    /**\r\n     * UMLLifeline\r\n     * @constructor\r\n     * @extends UMLMessageEndpoint\r\n     */\r\n    function UMLLifeline() {\r\n        UMLMessageEndpoint.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.selector = \'\';\r\n\r\n        /** @member {UMLStructuralFeature} */\r\n        this.represent = null;\r\n\r\n        /** @member {boolean} */\r\n        this.isMultiInstance = false;\r\n    }\r\n    // inherits from UMLMessageEndpoint\r\n    UMLLifeline.prototype = Object.create(UMLMessageEndpoint.prototype);\r\n    UMLLifeline.prototype.constructor = UMLLifeline;\r\n\r\n    UMLLifeline.prototype.getTypeString = function () {\r\n        if (this.represent) {\r\n            if (_.isString(this.represent.type) && (this.represent.type.length > 0)) {\r\n                return this.represent.type;\r\n            } else if ((this.represent.type !== null) && (this.represent.type.name)) {\r\n                return this.represent.type.name;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    UMLLifeline.prototype.getString = function (options) {\r\n        var text = "";\r\n        text += this.name;\r\n        text += (this.selector.length > 0 ? "[" + this.selector + "]" : "");\r\n        if (options && options.showType) {\r\n            text += (this.getTypeString() !== null ? ": " + this.getTypeString() : "");\r\n        }\r\n        return text;\r\n    };\r\n\r\n    UMLLifeline.prototype.getNodeText = function (options) {\r\n        var text = "",\r\n            typeStr = this.getTypeString();\r\n        options = options || {};\r\n        if (options.showStereotype !== false) {\r\n            text += this.getStereotypeString();\r\n        }\r\n        text += this.name;\r\n        if (typeStr) {\r\n            text += ": " + typeStr;\r\n        }\r\n        if (!text) {\r\n            text = "(Lifeline)";\r\n        }\r\n        return text;\r\n    };\r\n\r\n    /**\r\n     * UMLGate\r\n     * @constructor\r\n     * @extends UMLMessageEndpoint\r\n     */\r\n    function UMLGate() {\r\n        UMLMessageEndpoint.apply(this, arguments);\r\n    }\r\n    // inherits from UMLMessageEndpoint\r\n    UMLGate.prototype = Object.create(UMLMessageEndpoint.prototype);\r\n    UMLGate.prototype.constructor = UMLGate;\r\n\r\n\r\n    /**\r\n     * UMLEndpoint\r\n     * @constructor\r\n     * @extends UMLMessageEndpoint\r\n     */\r\n    function UMLEndpoint() {\r\n        UMLMessageEndpoint.apply(this, arguments);\r\n    }\r\n    // inherits from UMLMessageEndpoint\r\n    UMLEndpoint.prototype = Object.create(UMLMessageEndpoint.prototype);\r\n    UMLEndpoint.prototype.constructor = UMLEndpoint;\r\n\r\n\r\n    /**\r\n     * UMLMessage\r\n     * @constructor\r\n     * @extends UMLDirectedRelationship\r\n     */\r\n    function UMLMessage() {\r\n        UMLDirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.messageSort = MS_SYNCHCALL;\r\n\r\n        /** @member {UMLOperation} */\r\n        this.signature = null;\r\n\r\n        /** @member {UMLConnector} */\r\n        this.connector = null;\r\n\r\n        /** @member {string} */\r\n        this["arguments"] = \'\';\r\n\r\n        /** @member {string} */\r\n        this.assignmentTarget = \'\';\r\n\r\n        /** @member {string} */\r\n        this.guard = \'\';\r\n\r\n        /** @member {string} */\r\n        this.iteration = \'\';\r\n\r\n        /** @member {boolean} */\r\n        this.isConcurrentIteration = false;\r\n    }\r\n    // inherits from UMLDirectedRelationship\r\n    UMLMessage.prototype = Object.create(UMLDirectedRelationship.prototype);\r\n    UMLMessage.prototype.constructor = UMLMessage;\r\n\r\n    UMLMessage.prototype.getString = function (options) {\r\n        var s = \'\';\r\n        // Sequence Number\r\n        if (options && options.showSequenceNumber && this._parent && this._parent.messages) {\r\n            s += _.indexOf(this._parent.messages, this) + 1;\r\n            s += \' \';\r\n        }\r\n        // Guard\r\n        if (this.guard.length > 0) {\r\n            s += \'[\' + this.guard + \'] \';\r\n        }\r\n        // Iteration\r\n        if (this.iteration.length > 0) {\r\n            s += (this.isConcurrentIteration ? \'*||[\' : \'*[\') + this.iteration + \'] \';\r\n        }\r\n        if (s.length > 0) {\r\n            s += ": ";\r\n        }\r\n        // Assignament Target\r\n        if (this.assignmentTarget.length > 0) {\r\n            s += this.assignmentTarget + " = ";\r\n        }\r\n        // Message Signature Part\r\n        if (this.signature instanceof type.UMLOperation) {\r\n            s += this.signature.name;\r\n            if (options && options.showSignature) {\r\n                if (this["arguments"].length > 0) {\r\n                    s += "(" + this["arguments"] + ")";\r\n                } else {\r\n                    s += this.signature.getParametersString(options);\r\n                    var r = this.signature.getReturnString();\r\n                    if (options.showType && r.length > 0) {\r\n                        s += ":" + r;\r\n                    }\r\n                }\r\n            } else {\r\n                s += "()";\r\n            }\r\n        } else if (this.signature instanceof type.UMLSignal) {\r\n            s += this.signature.getString();\r\n            if (options && options.showSignature && this["arguments"].length > 0) {\r\n                s += "(" + this["arguments"] + ")";\r\n            }\r\n        } else {\r\n            s += this.name;\r\n            if (options && options.showSignature && this["arguments"].length > 0) {\r\n                s += "(" + this["arguments"] + ")";\r\n            }\r\n        }\r\n        return s;\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                                 PROFILES                               *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLProfile\r\n     * @constructor\r\n     * @extends UMLPackage\r\n     */\r\n    function UMLProfile() {\r\n        UMLPackage.apply(this, arguments);\r\n    }\r\n    // inherits from UMLPackage\r\n    UMLProfile.prototype = Object.create(UMLPackage.prototype);\r\n    UMLProfile.prototype.constructor = UMLProfile;\r\n\r\n    UMLProfile.prototype.canContainDiagramKind = function (kind) {\r\n        return (kind === "UMLProfileDiagram");\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLImage\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLImage() {\r\n        UMLModelElement.apply(this, arguments);\r\n\r\n        /** @member {number} */\r\n        this.width = 40;\r\n\r\n        /** @member {number} */\r\n        this.height = 40;\r\n\r\n        /** @member {string} */\r\n        this.content = \'\';\r\n\r\n        /** @member {string} */\r\n        this.smallIcon = \'\';\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLImage.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLImage.prototype.constructor = UMLImage;\r\n\r\n\r\n    /**\r\n     * UMLStereotype\r\n     * @constructor\r\n     * @extends UMLClass\r\n     */\r\n    function UMLStereotype() {\r\n        UMLClass.apply(this, arguments);\r\n\r\n        /** @member {UMLImage} */\r\n        this.icon = new UMLImage();\r\n        this.icon._parent = this;\r\n    }\r\n    // inherits from UMLClass\r\n    UMLStereotype.prototype = Object.create(UMLClass.prototype);\r\n    UMLStereotype.prototype.constructor = UMLStereotype;\r\n\r\n    UMLStereotype.prototype.getIconClass = function () {\r\n        var name = this.getPathname().replace(/::/g, "-");\r\n        return "icon-" + name.replace(/[^a-zA-Z0-9_\\-]/g, "-");\r\n    };\r\n\r\n    /**\r\n     * UMLMetaClass\r\n     * @constructor\r\n     * @extends UMLModelElement\r\n     */\r\n    function UMLMetaClass() {\r\n        UMLModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from UMLModelElement\r\n    UMLMetaClass.prototype = Object.create(UMLModelElement.prototype);\r\n    UMLMetaClass.prototype.constructor = UMLMetaClass;\r\n\r\n    /**\r\n     * UMLExtension\r\n     * @constructor\r\n     * @extends UMLDirectedRelationship\r\n     */\r\n    function UMLExtension() {\r\n        UMLDirectedRelationship.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDirectedRelationship\r\n    UMLExtension.prototype = Object.create(UMLDirectedRelationship.prototype);\r\n    UMLExtension.prototype.constructor = UMLExtension;\r\n\r\n    /* ************************** Type definitions ***************************/\r\n\r\n    // Backbone\r\n    type.UMLModelElement             = UMLModelElement;\r\n    type.UMLConstraint               = UMLConstraint;\r\n    type.UMLTemplateParameter        = UMLTemplateParameter;\r\n    type.UMLFeature                  = UMLFeature;\r\n    type.UMLStructuralFeature        = UMLStructuralFeature;\r\n    type.UMLParameter                = UMLParameter;\r\n    type.UMLBehavioralFeature        = UMLBehavioralFeature;\r\n    type.UMLAttribute                = UMLAttribute;\r\n    type.UMLOperation                = UMLOperation;\r\n    type.UMLReception                = UMLReception;\r\n    type.UMLClassifier               = UMLClassifier;\r\n    type.UMLDirectedRelationship     = UMLDirectedRelationship;\r\n    type.UMLRelationshipEnd          = UMLRelationshipEnd;\r\n    type.UMLUndirectedRelationship   = UMLUndirectedRelationship;\r\n    // Common Behaviors\r\n    type.UMLBehavior                 = UMLBehavior;\r\n    type.UMLOpaqueBehavior           = UMLOpaqueBehavior;\r\n    type.UMLEvent                    = UMLEvent;\r\n    // Classes\r\n    type.UMLPackage                  = UMLPackage;\r\n    type.UMLModel                    = UMLModel;\r\n    type.UMLClass                    = UMLClass;\r\n    type.UMLInterface                = UMLInterface;\r\n    type.UMLSignal                   = UMLSignal;\r\n    type.UMLDataType                 = UMLDataType;\r\n    type.UMLPrimitiveType            = UMLPrimitiveType;\r\n    type.UMLEnumerationLiteral       = UMLEnumerationLiteral;\r\n    type.UMLEnumeration              = UMLEnumeration;\r\n    type.UMLDependency               = UMLDependency;\r\n    type.UMLAbstraction              = UMLAbstraction;\r\n    type.UMLRealization              = UMLRealization;\r\n    type.UMLGeneralization           = UMLGeneralization;\r\n    type.UMLInterfaceRealization     = UMLInterfaceRealization;\r\n    type.UMLAssociationEnd           = UMLAssociationEnd;\r\n    type.UMLAssociation              = UMLAssociation;\r\n    type.UMLAssociationClassLink     = UMLAssociationClassLink;\r\n    // Instances\r\n    type.UMLSlot                     = UMLSlot;\r\n    type.UMLInstance                 = UMLInstance;\r\n    type.UMLObject                   = UMLObject;\r\n    type.UMLArtifactInstance         = UMLArtifactInstance;\r\n    type.UMLComponentInstance        = UMLComponentInstance;\r\n    type.UMLNodeInstance             = UMLNodeInstance;\r\n    type.UMLLinkEnd                  = UMLLinkEnd;\r\n    type.UMLLink                     = UMLLink;\r\n    // Composite Structures\r\n    type.UMLPort                     = UMLPort;\r\n    type.UMLConnectorEnd             = UMLConnectorEnd;\r\n    type.UMLConnector                = UMLConnector;\r\n    type.UMLCollaboration            = UMLCollaboration;\r\n    type.UMLCollaborationUse         = UMLCollaborationUse;\r\n    type.UMLRoleBinding              = UMLRoleBinding;\r\n    // Components\r\n    type.UMLArtifact                 = UMLArtifact;\r\n    type.UMLComponent                = UMLComponent;\r\n    type.UMLSubsystem                = UMLSubsystem;\r\n    type.UMLComponentRealization     = UMLComponentRealization;\r\n    // Deployments\r\n    type.UMLNode                     = UMLNode;\r\n    type.UMLDeployment               = UMLDeployment;\r\n    type.UMLCommunicationPath        = UMLCommunicationPath;\r\n    // Use Cases\r\n    type.UMLExtensionPoint           = UMLExtensionPoint;\r\n    type.UMLUseCase                  = UMLUseCase;\r\n    type.UMLActor                    = UMLActor;\r\n    type.UMLInclude                  = UMLInclude;\r\n    type.UMLExtend                   = UMLExtend;\r\n    type.UMLUseCaseSubject           = UMLUseCaseSubject;\r\n    // State Machines\r\n    type.UMLStateMachine             = UMLStateMachine;\r\n    type.UMLRegion                   = UMLRegion;\r\n    type.UMLVertex                   = UMLVertex;\r\n    type.UMLConnectionPointReference = UMLConnectionPointReference;\r\n    type.UMLPseudostate              = UMLPseudostate;\r\n    type.UMLState                    = UMLState;\r\n    type.UMLFinalState               = UMLFinalState;\r\n    type.UMLTransition               = UMLTransition;\r\n    // Activity Graphs\r\n    type.UMLActivity                 = UMLActivity;\r\n    type.UMLPin                      = UMLPin;\r\n    type.UMLInputPin                 = UMLInputPin;\r\n    type.UMLOutputPin                = UMLOutputPin;\r\n    type.UMLExpansionNode            = UMLExpansionNode;\r\n    type.UMLActivityNode             = UMLActivityNode;\r\n    type.UMLAction                   = UMLAction;\r\n    type.UMLObjectNode               = UMLObjectNode;\r\n    type.UMLCentralBufferNode        = UMLCentralBufferNode;\r\n    type.UMLDataStoreNode            = UMLDataStoreNode;\r\n    type.UMLControlNode              = UMLControlNode;\r\n    type.UMLInitialNode              = UMLInitialNode;\r\n    type.UMLFinalNode                = UMLFinalNode;\r\n    type.UMLActivityFinalNode        = UMLActivityFinalNode;\r\n    type.UMLFlowFinalNode            = UMLFlowFinalNode;\r\n    type.UMLForkNode                 = UMLForkNode;\r\n    type.UMLJoinNode                 = UMLJoinNode;\r\n    type.UMLMergeNode                = UMLMergeNode;\r\n    type.UMLDecisionNode             = UMLDecisionNode;\r\n    type.UMLActivityGroup            = UMLActivityGroup;\r\n    type.UMLActivityPartition        = UMLActivityPartition;\r\n    type.UMLInterruptibleActivityRegion = UMLInterruptibleActivityRegion;\r\n    type.UMLStructuredActivityNode   = UMLStructuredActivityNode;\r\n    type.UMLExpansionRegion          = UMLExpansionRegion;\r\n    type.UMLExceptionHandler         = UMLExceptionHandler;\r\n    type.UMLActivityEdge             = UMLActivityEdge;\r\n    type.UMLControlFlow              = UMLControlFlow;\r\n    type.UMLObjectFlow               = UMLObjectFlow;\r\n    type.UMLActivityInterrupt        = UMLActivityInterrupt;\r\n    // Interactions\r\n    type.UMLInteractionFragment      = UMLInteractionFragment;\r\n    type.UMLInteraction              = UMLInteraction;\r\n    type.UMLStateInvariant           = UMLStateInvariant;\r\n    type.UMLContinuation             = UMLContinuation;\r\n    type.UMLInteractionOperand       = UMLInteractionOperand;\r\n    type.UMLCombinedFragment         = UMLCombinedFragment;\r\n    type.UMLInteractionUse           = UMLInteractionUse;\r\n    type.UMLMessageEndpoint          = UMLMessageEndpoint;\r\n    type.UMLLifeline                 = UMLLifeline;\r\n    type.UMLGate                     = UMLGate;\r\n    type.UMLEndpoint                 = UMLEndpoint;\r\n    type.UMLMessage                  = UMLMessage;\r\n    // Profiles\r\n    type.UMLProfile                  = UMLProfile;\r\n    type.UMLImage                    = UMLImage;\r\n    type.UMLStereotype               = UMLStereotype;\r\n    type.UMLMetaClass                = UMLMetaClass;\r\n    type.UMLExtension                = UMLExtension;\r\n\r\n    // Public API\r\n    exports.VK_PUBLIC          = VK_PUBLIC;\r\n    exports.VK_PROTECTED       = VK_PROTECTED;\r\n    exports.VK_PRIVATE         = VK_PRIVATE;\r\n    exports.VK_PACKAGE         = VK_PACKAGE;\r\n\r\n    exports.AK_NONE            = AK_NONE;\r\n    exports.AK_SHARED          = AK_SHARED;\r\n    exports.AK_COMPOSITE       = AK_COMPOSITE;\r\n\r\n    exports.DK_IN              = DK_IN;\r\n    exports.DK_INOUT           = DK_INOUT;\r\n    exports.DK_OUT             = DK_OUT;\r\n    exports.DK_RETURN          = DK_RETURN;\r\n\r\n    exports.CCK_SEQUENTIAL     = CCK_SEQUENTIAL;\r\n    exports.CCK_GUARDED        = CCK_GUARDED;\r\n    exports.CCK_CONCURRENT     = CCK_CONCURRENT;\r\n\r\n    exports.CK_ASSEMBLY        = CK_ASSEMBLY;\r\n    exports.CK_DELEGATION      = CK_DELEGATION;\r\n\r\n    exports.MS_SYNCHCALL       = MS_SYNCHCALL;\r\n    exports.MS_ASYNCHCALL      = MS_ASYNCHCALL;\r\n    exports.MS_ASYNCHSIGNAL    = MS_ASYNCHSIGNAL;\r\n    exports.MS_CREATEMESSAGE   = MS_CREATEMESSAGE;\r\n    exports.MS_DELETEMESSAGE   = MS_DELETEMESSAGE;\r\n    exports.MS_REPLY           = MS_REPLY;\r\n\r\n    exports.PSK_INITIAL         = PSK_INITIAL;\r\n    exports.PSK_DEEPHISTORY     = PSK_DEEPHISTORY;\r\n    exports.PSK_SHALLOWHISTORY  = PSK_SHALLOWHISTORY;\r\n    exports.PSK_JOIN            = PSK_JOIN;\r\n    exports.PSK_FORK            = PSK_FORK;\r\n    exports.PSK_JUNCTION        = PSK_JUNCTION;\r\n    exports.PSK_CHOICE          = PSK_CHOICE;\r\n    exports.PSK_ENTRYPOINT      = PSK_ENTRYPOINT;\r\n    exports.PSK_EXITPOINT       = PSK_EXITPOINT;\r\n    exports.PSK_TERMINATE       = PSK_TERMINATE;\r\n\r\n    exports.TK_EXTERNAL         = TK_EXTERNAL;\r\n    exports.TK_INTERNAL         = TK_INTERNAL;\r\n    exports.TK_LOCAL            = TK_LOCAL;\r\n\r\n    exports.EK_SIGNAL           = EK_SIGNAL;\r\n    exports.EK_CALL             = EK_CALL;\r\n    exports.EK_CHANGE           = EK_CHANGE;\r\n    exports.EK_TIME             = EK_TIME;\r\n    exports.EK_ANYRECEIVE       = EK_ANYRECEIVE;\r\n\r\n    exports.IOK_ALT            = IOK_ALT;\r\n    exports.IOK_OPT            = IOK_OPT;\r\n    exports.IOK_PAR            = IOK_PAR;\r\n    exports.IOK_LOOP           = IOK_LOOP;\r\n    exports.IOK_CRITICAL       = IOK_CRITICAL;\r\n    exports.IOK_NEG            = IOK_NEG;\r\n    exports.IOK_ASSERT         = IOK_ASSERT;\r\n    exports.IOK_STRICT         = IOK_STRICT;\r\n    exports.IOK_SEQ            = IOK_SEQ;\r\n    exports.IOK_IGNORE         = IOK_IGNORE;\r\n    exports.IOK_CONSIDER       = IOK_CONSIDER;\r\n\r\n    exports.ACK_OPAQUE       = ACK_OPAQUE;\r\n    exports.ACK_CREATE       = ACK_CREATE;\r\n    exports.ACK_DESTROY      = ACK_DESTROY;\r\n    exports.ACK_READ         = ACK_READ;\r\n    exports.ACK_WRITE        = ACK_WRITE;\r\n    exports.ACK_INSERT       = ACK_INSERT;\r\n    exports.ACK_DELETE       = ACK_DELETE;\r\n    exports.ACK_SENDSIGNAL   = ACK_SENDSIGNAL;\r\n    exports.ACK_ACCEPTSIGNAL = ACK_ACCEPTSIGNAL;\r\n    exports.ACK_TRIGGEREVENT = ACK_TRIGGEREVENT;\r\n    exports.ACK_ACCEPTEVENT  = ACK_ACCEPTEVENT;\r\n    exports.ACK_STRUCTURED   = ACK_STRUCTURED;\r\n    exports.ACK_TIMEEVENT    = ACK_TIMEEVENT;\r\n\r\n    exports.ONOK_UNORDERED = ONOK_UNORDERED;\r\n    exports.ONOK_ORDERED   = ONOK_ORDERED;\r\n    exports.ONOK_LIFO      = ONOK_LIFO;\r\n    exports.ONOK_FIFO      = ONOK_FIFO;\r\n\r\n    exports.EK_PARALLEL  = EK_PARALLEL;\r\n    exports.EK_ITERATIVE = EK_ITERATIVE;\r\n    exports.EK_STREAM    = EK_STREAM;\r\n\r\n    exports.SD_NONE             = SD_NONE;\r\n    exports.SD_LABEL            = SD_LABEL;\r\n    exports.SD_DECORATION       = SD_DECORATION;\r\n    exports.SD_DECORATION_LABEL = SD_DECORATION_LABEL;\r\n    exports.SD_ICON             = SD_ICON;\r\n    exports.SD_ICON_LABEL       = SD_ICON_LABEL;\r\n\r\n});\r\n\n//# sourceURL=/uml/UML.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, evil: true, loopfunc: true */\r\n/*global define, $, _, window, meta, type, appshell */\r\n\r\ndefine(\'uml/UMLDiagram\',[\'require\',\'exports\',\'module\',\'core/Global\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Toolkit\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/Core\',\'core/MetaModelManager\',\'core/PreferenceManager\',\'core/Repository\',\'uml/UML\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global            = require("core/Global").global,\r\n        Graphics          = require("core/Graphics"),\r\n        Point             = require("core/Graphics").Point,\r\n        Rect              = require("core/Graphics").Rect,\r\n        Color             = require("core/Graphics").Color,\r\n        Font              = require("core/Graphics").Font,\r\n        ZoomFactor        = require("core/Graphics").ZoomFactor,\r\n        GridFactor        = require("core/Graphics").GridFactor,\r\n        Points            = require("core/Graphics").Points,\r\n        Coord             = require("core/Graphics").Coord,\r\n        Canvas            = require("core/Graphics").Canvas,\r\n        Toolkit           = require("core/Toolkit"),\r\n        Core              = require("core/Core"),\r\n        Diagram           = require("core/Core").Diagram,\r\n        Cursor            = require("core/Core").Cursor,\r\n        MouseEvent        = require("core/Core").MouseEvent,\r\n        NodeView          = require("core/Core").NodeView,\r\n        EdgeView          = require("core/Core").EdgeView,\r\n        LabelView         = require("core/Core").LabelView,\r\n        ParasiticView     = require("core/Core").ParasiticView,\r\n        NodeParasiticView = require("core/Core").NodeParasiticView,\r\n        EdgeParasiticView = require("core/Core").EdgeParasiticView,\r\n        NodeLabelView     = require("core/Core").NodeLabelView,\r\n        EdgeLabelView     = require("core/Core").EdgeLabelView,\r\n        NodeNodeView      = require("core/Core").NodeNodeView,\r\n        EdgeNodeView      = require("core/Core").EdgeNodeView,\r\n        MetaModelManager  = require("core/MetaModelManager"),\r\n        PreferenceManager = require("core/PreferenceManager"),\r\n        Repository        = require("core/Repository"),\r\n        UML               = require("uml/UML");\r\n\r\n    /**\r\n     * View Constants\r\n     * @private\r\n     * @const {number}\r\n     */\r\n    var SHADOW_OFFSET = 7,\r\n        SHADOW_ALPHA = 0.2,\r\n        SHADOW_COLOR = Color.LIGHT_GRAY,\r\n\r\n        // When use a sequence of labels, leave space after LabelView\r\n        LABEL_INTERVAL = 3,\r\n\r\n        COMPARTMENT_ITEM_INTERVAL = 2,\r\n        COMPARTMENT_LEFT_PADDING = 5,\r\n        COMPARTMENT_RIGHT_PADDING = 5,\r\n        COMPARTMENT_TOP_PADDING = 5,\r\n        COMPARTMENT_BOTTOM_PADDING = 5,\r\n\r\n        DECORATION_ICON_WIDTH = 24,\r\n        DECORATION_ICON_HEIGHT = 24,\r\n\r\n        ICONICVIEW_ICONMINWIDTH = 24,\r\n        ICONICVIEW_ICONMINHEIGHT = 24,\r\n\r\n        TEMPLATEPARAMETERCOMPARTMENT_OVERLAP = 5,\r\n        TEMPLATEPARAMETERCOMPARTMENT_LEFT_MARGIN = 20,\r\n        TEMPLATEPARAMETERCOMPARTMENT_RIGHT_OCCUPY = 10,\r\n\r\n        CLASS_ACTIVE_VERTLINE_WIDTH = 3,\r\n\r\n        PACKAGE_MINWIDTH = 50,\r\n        PACKAGE_MINHEIGHT = 40,\r\n        PACKAGE_TAB_HEIGHT = 15,\r\n\r\n        INTERFACE_ICONMINWIDTH = 24,\r\n        INTERFACE_ICONMINHEIGHT = 24,\r\n\r\n        PORT_MINWIDTH = 14,\r\n        PORT_MINHEIGHT = 14,\r\n\r\n        ACTOR_ICON_MINHEIGHT = 55,\r\n        ACTOR_ICON_MINWIDTH = 26,\r\n        ACTOR_RATIO_PERCENT = (ACTOR_ICON_MINWIDTH / ACTOR_ICON_MINHEIGHT) * 100,\r\n\r\n        USECASE_MINWIDTH = 70,\r\n        USECASE_MINHEIGHT = 32,\r\n        USECASE_ICON_MINWIDTH = 70,\r\n        USECASE_ICON_MINHEIGHT = 32,\r\n        USECASE_RATIO_PERCENT = (USECASE_ICON_MINWIDTH / USECASE_ICON_MINHEIGHT) * 100,\r\n\r\n        ARTIFACT_ICON_MINWIDTH = 40,\r\n        ARTIFACT_ICON_MINHEIGHT = 50,\r\n        ARTIFACT_RATIO_PERCENT = (ARTIFACT_ICON_MINWIDTH / ARTIFACT_ICON_MINHEIGHT) * 100,\r\n\r\n        COMPONENT_MINWIDTH = 50,\r\n        COMPONENT_MINHEIGHT = 45,\r\n        COMPONENT_ICON_MINWIDTH = 50,\r\n        COMPONENT_ICON_MINHEIGHT = 45,\r\n        COMPONENT_RATIO_PERCENT = (COMPONENT_ICON_MINWIDTH / COMPONENT_ICON_MINHEIGHT) * 100,\r\n        COMPONENT_STATIC_MARGIN = 20,\r\n        COMPONENT_BALANCED_HEIGHT = 45,\r\n        COMPONENT_RECT_INDENT = 10,\r\n\r\n        NODE_MINWIDTH = 45,\r\n        NODE_MINHEIGHT = 45,\r\n        NODE_RATIO_PERCENT = (NODE_MINWIDTH / NODE_MINHEIGHT) * 100,\r\n        NODE_STATIC_MARGIN = 10,\r\n\r\n        // State Machines\r\n        STATE_MINWIDTH = 60,\r\n        STATE_MINHEIGHT = 40,\r\n        STATE_ROUND = 10,\r\n\r\n        REGION_MINWIDTH = 50,\r\n        REGION_MINHEIGHT = 50,\r\n\r\n        INITIALSTATE_MINWIDTHH = 20,\r\n        INITIALSTATE_MINHEIGHT = 20,\r\n        FINALSTATE_MINWIDTHH = 26,\r\n        FINALSTATE_MINHEIGHT = 26,\r\n        HISTORYSTATE_MINWIDTHH = 26,\r\n        HISTORYSTATE_MINHEIGHT = 26,\r\n        JOIN_MINLENGTH = 70,\r\n        JOIN_MINTHICK = 6,\r\n        FORK_MINLENGTH = 70,\r\n        FORK_MINTHICK = 6,\r\n        CHOICE_MINWIDTH = 23,\r\n        CHOICE_MINHEIGHT = 19,\r\n        JUNCTION_MINWIDTH = 15,\r\n        JUNCTION_MINHEIGHT = 15,\r\n        ENTRYPOINT_MINWIDTH = 15,\r\n        ENTRYPOINT_MINHEIGHT = 15,\r\n        EXITPOINT_MINWIDTH = 15,\r\n        EXITPOINT_MINHEIGHT = 15,\r\n        TERMINATE_MINWIDTH = 26,\r\n        TERMINATE_MINHEIGHT = 26,\r\n        SELFTRANSITION_DISTANCE = 30,\r\n\r\n        CONNECTIONPOINT_MINWIDTH = 14,\r\n        CONNECTIONPOINT_MINHEIGHT = 14,\r\n\r\n        // Activities\r\n        ACTION_MINWIDTH = 60,\r\n        ACTION_MINHEIGHT = 40,\r\n        ACTION_ROUND = 10,\r\n\r\n        PIN_MINWIDTH = 18,\r\n        PIN_MINHEIGHT = 18,\r\n\r\n        INITIALNODE_MINWIDTH = 20,\r\n        INITIALNODE_MINHEIGHT = 20,\r\n        ACTIVITYFINALNODE_MINWIDTH = 26,\r\n        ACTIVITYFINALNODE_MINHEIGHT = 26,\r\n        FLOWFINALNODE_MINWIDTH = 26,\r\n        FLOWFINALNODE_MINHEIGHT = 26,\r\n        FORKNODE_MINLENGTH = 70,\r\n        FORKNODE_MINTHICK = 6,\r\n        JOINNODE_MINLENGTH = 70,\r\n        JOINNODE_MINTHICK = 6,\r\n        MERGENODE_MINWIDTH = 23,\r\n        MERGENODE_MINHEIGHT = 19,\r\n        DECISIONNODE_MINWIDTH = 23,\r\n        DECISIONNODE_MINHEIGHT = 19,\r\n\r\n        SWIMLANE_HORIZ_LEFT = 50,\r\n        SWIMLANE_VERT_TOP = 50,\r\n        SWIMLANE_VERT_MINWIDTH = 50,\r\n        SWIMLANE_VERT_MINHEIGHT = 300,\r\n        SWIMLANE_HORIZ_MINWIDTH = SWIMLANE_VERT_MINHEIGHT,\r\n        SWIMLANE_HORIZ_MINHEIGHT = SWIMLANE_VERT_MINWIDTH,\r\n        SWIMLANE_HEADER_TOP_MARGIN = 4,\r\n        SWIMLANE_HEADER_BOTTOM_MARGIN = 4,\r\n        SWIMLANE_HEADER_LEFT_MARGIN = 10,\r\n        SWIMLANE_HEADER_RIGHT_MARGIN = 10,\r\n        SWIMLANE_PEN_WIDTH = 2,\r\n\r\n        // Interactions\r\n        COLLABORATION_MINHEIGHT = USECASE_MINHEIGHT,\r\n        COLLABORATION_MINWIDTH = USECASE_MINWIDTH,\r\n\r\n        ACTIVATION_MINWIDTH = 14,\r\n        ACTIVATION_MINHEIGHT = 25,\r\n        LIFELINE_MINWIDTH = 10, // should be even number\r\n        LIFELINE_MINHEIGHT = 50,\r\n        LIFELINE_TOP_POSITION = 40,\r\n        SEQ_OBJECT_MINHEIGHT = 40,\r\n        SEQ_OBJECT_MINWIDTH = 30,\r\n        MULTI_INSTANCE_MARGIN = 5,\r\n        SELF_MESSAGE_WIDTH = 30,\r\n        SELF_MESSAGE_HEIGHT = 20,\r\n        SEQ_OBJECT_MESSAGE_MIN_INTERVAL = 10,\r\n\r\n        STATEINVARIANT_MINWIDTH = 50,\r\n        STATEINVARIANT_MINHEIGHT = 20,\r\n\r\n        CONTINUATION_MINWIDTH = 50,\r\n        CONTINUATION_MINHEIGHT = 20,\r\n\r\n        FRAME_MINWIDTH = 80,\r\n        FRAME_MINHEIGHT = 50,\r\n        FRAME_CONTENT_MINWIDTH = 10,\r\n        FRAME_CONTENT_MINHEIGHT = 30,\r\n\r\n        COMBINEDFRAGMENT_MINWIDTH = FRAME_MINWIDTH,\r\n        COMBINEDFRAGMENT_MINHEIGHT = FRAME_MINHEIGHT,\r\n        COMBINEDFRAGMENT_CONTENT_MINWIDTH = FRAME_CONTENT_MINWIDTH,\r\n        COMBINEDFRAGMENT_CONTENT_MINHEIGHT = FRAME_CONTENT_MINHEIGHT,\r\n\r\n        INTERACTIONOPERAND_MINWIDTH = COMBINEDFRAGMENT_MINWIDTH,\r\n        INTERACTIONOPERAND_MINHEIGHT = COMBINEDFRAGMENT_CONTENT_MINHEIGHT,\r\n        INTERACTIONOPERAND_GUARD_HORZ_MARGIN = 20,\r\n        INTERACTIONOPERAND_GUARD_VERT_MARGIN = 15,\r\n\r\n        HYPERLINK_MINWIDTH = 100,\r\n        HYPERLINK_MINHEIGHT = 20,\r\n\r\n        CUSTOM_TEXT_MINWIDTH = 10,\r\n        CUSTOM_TEXT_MINHEIGHT = 10,\r\n\r\n        NOTE_MINWIDTH = 50,\r\n        NOTE_MINHEIGHT = 20,\r\n        NOTE_FOLDING_SIZE = 10;\r\n\r\n    function hasValue(value) {\r\n        return (value && value.length > 0);\r\n    }\r\n\r\n    function getValue(prefix, value, postfix) {\r\n        if (hasValue(value)) {\r\n            return prefix + value + postfix;\r\n        } else {\r\n            return "";\r\n        }\r\n    }\r\n\r\n    function getTypeName(prefix, type) {\r\n        if (_.isString(type) && (type.length > 0)) {\r\n            return prefix + type;\r\n        } else if (type instanceof global.type.Model) {\r\n            return prefix + type.name;\r\n        } else {\r\n            return "";\r\n        }\r\n    }\r\n\r\n    function getTheta(x1, y1, x2, y2) {\r\n        var x = x1 - x2;\r\n        var y = y1 - y2;\r\n        var th = Math.atan(Math.abs(y) / (Math.abs(x) + 0.0000000001));\r\n        if (x > 0) {\r\n            if (y > 0) {\r\n                th = Math.PI - th;\r\n            } else {\r\n                th = th + Math.PI;\r\n            }\r\n        } else if (y < 0) {\r\n            th = 2 * Math.PI - th;\r\n        }\r\n        return th;\r\n    }\r\n\r\n    /**\r\n     * Draw image\r\n     * @private\r\n     * @param {Canvas} canvas\r\n     * @param {Rect} rect\r\n     * @param {type.UMLImage} image\r\n     */\r\n    function drawImage(canvas, rect, image) {\r\n        if (image && image.content) {\r\n            try {\r\n                eval(image.content);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                               COMMON VIEWS                             *\r\n     *                                                                        *\r\n     *************************************************************************/\r\n\r\n    /**\r\n     * UMLDiagram\r\n     * @constructor\r\n     * @extends Diagram\r\n     */\r\n    function UMLDiagram() {\r\n        Diagram.apply(this, arguments);\r\n        this.name = null;\r\n    }\r\n    // inherits from Diagram\r\n    UMLDiagram.prototype = Object.create(Diagram.prototype);\r\n    UMLDiagram.prototype.constructor = UMLDiagram;\r\n\r\n    UMLDiagram.prototype.getDisplayClassName = function () {\r\n        var name = this.getClassName();\r\n        return name.substring(3, name.length);\r\n    };\r\n\r\n    /**\r\n     * UMLCompartmentView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLCompartmentView() {\r\n        NodeView.apply(this, arguments);\r\n        this.selectable = Core.SK_PROPAGATE;\r\n        this.parentStyle = true;\r\n\r\n        /* temporal */\r\n        this._leftPadding   = COMPARTMENT_LEFT_PADDING;\r\n        this._rightPadding  = COMPARTMENT_RIGHT_PADDING;\r\n        this._topPadding    = COMPARTMENT_TOP_PADDING;\r\n        this._bottomPadding = COMPARTMENT_BOTTOM_PADDING;\r\n        this._itemInterval  = COMPARTMENT_ITEM_INTERVAL;\r\n    }\r\n    // inherits from NodeView\r\n    UMLCompartmentView.prototype = Object.create(NodeView.prototype);\r\n    UMLCompartmentView.prototype.constructor = UMLCompartmentView;\r\n\r\n    /**\r\n     * size\r\n     */\r\n    UMLCompartmentView.prototype.size = function (canvas) {\r\n        var i, len, w = 0, h = this._topPadding;\r\n        for (i = 0, len = this.subViews.length; i < len; i++) {\r\n            var item = this.subViews[i];\r\n            if (item.parentStyle) {\r\n                item.font.size = item._parent.font.size;\r\n            }\r\n            item.size(canvas);\r\n            if (item.visible) {\r\n                if (w < item.minWidth) {\r\n                    w = item.minWidth;\r\n                }\r\n                if (i > 0) {\r\n                    h += this._itemInterval;\r\n                }\r\n                h += item.minHeight;\r\n            }\r\n        }\r\n        this.minWidth = w + this._leftPadding + this._rightPadding;\r\n        this.minHeight = h + this._bottomPadding;\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    /**\r\n     * arrange\r\n     */\r\n    UMLCompartmentView.prototype.arrange = function (canvas) {\r\n        var i, len, h = this._topPadding;\r\n        for (i = 0, len = this.subViews.length; i < len; i++) {\r\n            var item = this.subViews[i];\r\n            if (item.visible) {\r\n                if (i > 0) { h += this._itemInterval; }\r\n                item.left = this.left + this._leftPadding;\r\n                item.top = this.top + h;\r\n                item.width = this.width - this._leftPadding - this._rightPadding;\r\n                h += item.height;\r\n            }\r\n            item.arrange(canvas);\r\n        }\r\n        h += this._bottomPadding;\r\n        this.height = h;\r\n        this.sizeConstraints();\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLNameCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLNameCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n        this.selectable = Core.SK_NO;\r\n\r\n        /** @member {LabelView} */\r\n        this.stereotypeLabel = new LabelView();\r\n        this.stereotypeLabel.horizontalAlignment = Graphics.AL_CENTER;\r\n        this.stereotypeLabel.parentStyle = true;\r\n        this.addSubView(this.stereotypeLabel);\r\n\r\n        /** @member {LabelView} */\r\n        this.nameLabel = new LabelView();\r\n        this.nameLabel.horizontalAlignment = Graphics.AL_CENTER;\r\n        this.nameLabel.parentStyle = true;\r\n        this.addSubView(this.nameLabel);\r\n\r\n        /** @member {LabelView} */\r\n        this.namespaceLabel = new LabelView();\r\n        this.namespaceLabel.horizontalAlignment = Graphics.AL_CENTER;\r\n        this.namespaceLabel.parentStyle = true;\r\n        this.addSubView(this.namespaceLabel);\r\n\r\n        /** @member {LabelView} */\r\n        this.propertyLabel = new LabelView();\r\n        this.propertyLabel.horizontalAlignment = Graphics.AL_RIGHT;\r\n        this.propertyLabel.parentStyle = true;\r\n        this.addSubView(this.propertyLabel);\r\n\r\n        /** @member {boolean} */\r\n        this.wordWrap = false;\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLNameCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLNameCompartmentView.prototype.constructor = UMLNameCompartmentView;\r\n\r\n    UMLNameCompartmentView.prototype.update = function (canvas) {\r\n        this.namespaceLabel.font.size = this.font.size * 0.9;\r\n        if (this.model) {\r\n            if (this.model.isAbstract === true) {\r\n                this.nameLabel.font.style = Graphics.FS_BOLD_ITALIC;\r\n            } else {\r\n                this.nameLabel.font.style = Graphics.FS_BOLD;\r\n            }\r\n            if (this.model instanceof type.UMLInstance) {\r\n                this.nameLabel.underline = true;\r\n            }\r\n            this.nameLabel.wordWrap = this.wordWrap;\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLNameCompartmentView.prototype.size = function (canvas) {\r\n        UMLCompartmentView.prototype.size.call(this, canvas);\r\n        this.stereotypeLabel.height = this.stereotypeLabel.minHeight;\r\n        this.nameLabel.height = this.nameLabel.minHeight;\r\n        this.namespaceLabel.height = this.namespaceLabel.minHeight;\r\n        this.propertyLabel.height = this.propertyLabel.minHeight;\r\n        if (this._parent instanceof type.UMLGeneralNodeView && this._parent.stereotypeDisplay === UML.SD_DECORATION) {\r\n            this.minHeight = DECORATION_ICON_HEIGHT + COMPARTMENT_TOP_PADDING + COMPARTMENT_BOTTOM_PADDING;\r\n            this.sizeConstraints();\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLAttributeView\r\n     * @constructor\r\n     * @extends LabelView\r\n     */\r\n    function UMLAttributeView() {\r\n        LabelView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_NONE;\r\n        this.parentStyle = true;\r\n        this.horizontalAlignment = Graphics.AL_LEFT;\r\n    }\r\n    // inherits from LabelView\r\n    UMLAttributeView.prototype = Object.create(LabelView.prototype);\r\n    UMLAttributeView.prototype.constructor = UMLAttributeView;\r\n\r\n    UMLAttributeView.prototype.update = function (canvas) {\r\n        var options = {\r\n            showVisibility    : true,\r\n            stereotypeDisplay : UML.SD_LABEL,\r\n            showProperty      : true,\r\n            showType          : true,\r\n            showMultiplicity  : true\r\n        };\r\n        if (this._parent && this._parent._parent) {\r\n            options.showVisibility    = this._parent._parent.showVisibility;\r\n            options.stereotypeDisplay = this._parent._parent.stereotypeDisplay;\r\n            options.showProperty      = this._parent._parent.showProperty;\r\n            options.showType          = this._parent._parent.showType;\r\n            options.showMultiplicity  = this._parent._parent.showMultiplicity;\r\n        }\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n        if (this.model) {\r\n            this.text = this.model.getString(options);\r\n            this.underline = (this.model.isStatic === true);\r\n        }\r\n        LabelView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLAttributeView.prototype.size = function (canvas) {\r\n        LabelView.prototype.size.call(this, canvas);\r\n        this.height = this.minHeight;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLAttributeCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLAttributeCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLAttributeCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLAttributeCompartmentView.prototype.constructor = UMLAttributeCompartmentView;\r\n\r\n    UMLAttributeCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.attributes) {\r\n            var i, len, tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (i = 0, len = this.model.attributes.length; i < len; i++) {\r\n                var attr = this.model.attributes[i];\r\n                var attrView = _.find(tempViews, function (v) { return v.model === attr; });\r\n                if (!attrView) {\r\n                    attrView = new UMLAttributeView();\r\n                    attrView.model = attr;\r\n                    attrView._parent = this;\r\n                    // attrView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', attrView);\r\n                } else {\r\n                    this.addSubView(attrView);\r\n                }\r\n                attrView.setup(canvas);\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLOperationView\r\n     * @constructor\r\n     * @extends LabelView\r\n     */\r\n    function UMLOperationView() {\r\n        LabelView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_NONE;\r\n        this.parentStyle = true;\r\n        this.horizontalAlignment = Graphics.AL_LEFT;\r\n    }\r\n    // inherits from LabelView\r\n    UMLOperationView.prototype = Object.create(LabelView.prototype);\r\n    UMLOperationView.prototype.constructor = UMLOperationView;\r\n\r\n    UMLOperationView.prototype.update = function (canvas) {\r\n        var options = {\r\n            showVisibility         : true,\r\n            stereotypeDisplay      : UML.SD_LABEL,\r\n            showProperty           : true,\r\n            showType               : true,\r\n            showMultiplicity       : true,\r\n            showOperationSignature : true\r\n        };\r\n        if (this._parent && (this._parent._parent instanceof type.UMLClassifierView)) {\r\n            options.showVisibility         = this._parent._parent.showVisibility;\r\n            options.stereotypeDisplay      = this._parent._parent.stereotypeDisplay;\r\n            options.showProperty           = this._parent._parent.showProperty;\r\n            options.showType               = this._parent._parent.showType;\r\n            options.showMultiplicity       = this._parent._parent.showMultiplicity;\r\n            options.showOperationSignature = this._parent._parent.showOperationSignature;\r\n        }\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n        if (this.model) {\r\n            this.text = this.model.getString(options);\r\n            this.underline = (this.model.isStatic === true);\r\n            if (this.model.isAbstract) {\r\n                this.font.style = Graphics.FS_ITALIC;\r\n            } else {\r\n                this.font.style = Graphics.FS_NORMAL;\r\n            }\r\n        }\r\n        LabelView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLOperationView.prototype.size = function (canvas) {\r\n        LabelView.prototype.size.call(this, canvas);\r\n        this.height = this.minHeight;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLOperationCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLOperationCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLOperationCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLOperationCompartmentView.prototype.constructor = UMLOperationCompartmentView;\r\n\r\n    UMLOperationCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.operations) {\r\n            var i, len, tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (i = 0, len = this.model.operations.length; i < len; i++) {\r\n                var op = this.model.operations[i];\r\n                var opView = _.find(tempViews, function (v) { return v.model === op; });\r\n                if (!opView) {\r\n                    opView = new UMLOperationView();\r\n                    opView.model = op;\r\n                    opView._parent = this;\r\n                    // opView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', opView);\r\n                } else {\r\n                    this.addSubView(opView);\r\n                }\r\n                opView.setup(canvas);\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLReceptionView\r\n     * @constructor\r\n     * @extends LabelView\r\n     */\r\n    function UMLReceptionView() {\r\n        LabelView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_NONE;\r\n        this.parentStyle = true;\r\n        this.horizontalAlignment = Graphics.AL_LEFT;\r\n    }\r\n    // inherits from LabelView\r\n    UMLReceptionView.prototype = Object.create(LabelView.prototype);\r\n    UMLReceptionView.prototype.constructor = UMLReceptionView;\r\n\r\n    UMLReceptionView.prototype.update = function (canvas) {\r\n        var options = {\r\n            showVisibility         : true,\r\n            stereotypeDisplay      : UML.SD_LABEL,\r\n            showProperty           : true,\r\n            showType               : true,\r\n            showOperationSignature : true\r\n        };\r\n        if (this._parent && (this._parent._parent instanceof type.UMLClassifierView)) {\r\n            options.showVisibility         = this._parent._parent.showVisibility;\r\n            options.stereotypeDisplay      = this._parent._parent.stereotypeDisplay;\r\n            options.showProperty           = this._parent._parent.showProperty;\r\n            options.showType               = this._parent._parent.showType;\r\n            options.showOperationSignature = this._parent._parent.showOperationSignature;\r\n        }\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n        if (this.model) {\r\n            this.text = this.model.getString(options);\r\n            this.underline = (this.model.isStatic === true);\r\n        }\r\n        LabelView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLReceptionView.prototype.size = function (canvas) {\r\n        LabelView.prototype.size.call(this, canvas);\r\n        this.height = this.minHeight;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLReceptionCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLReceptionCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLReceptionCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLReceptionCompartmentView.prototype.constructor = UMLReceptionCompartmentView;\r\n\r\n    UMLReceptionCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.receptions) {\r\n            var i, len, tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (i = 0, len = this.model.receptions.length; i < len; i++) {\r\n                var rcp = this.model.receptions[i];\r\n                var rcpView = _.find(tempViews, function (v) { return v.model === rcp; });\r\n                if (!rcpView) {\r\n                    rcpView = new UMLReceptionView();\r\n                    rcpView.model = rcp;\r\n                    rcpView._parent = this;\r\n                    // opView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', rcpView);\r\n                } else {\r\n                    this.addSubView(rcpView);\r\n                }\r\n                rcpView.setup(canvas);\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLTemplateParameterView\r\n     * @constructor\r\n     * @extends LabelView\r\n     */\r\n    function UMLTemplateParameterView() {\r\n        LabelView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_NONE;\r\n        this.parentStyle = true;\r\n        this.horizontalAlignment = Graphics.AL_LEFT;\r\n    }\r\n    // inherits from LabelView\r\n    UMLTemplateParameterView.prototype = Object.create(LabelView.prototype);\r\n    UMLTemplateParameterView.prototype.constructor = UMLTemplateParameterView;\r\n\r\n    UMLTemplateParameterView.prototype.update = function (canvas) {\r\n        var options = {\r\n            showType : true\r\n        };\r\n        if (this._parent && (this._parent._parent instanceof type.UMLClassifierView)) {\r\n            options.showType = this._parent._parent.showType;\r\n        }\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n        if (this.model) {\r\n            this.text = this.model.getString(options);\r\n        }\r\n        LabelView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLTemplateParameterView.prototype.size = function (canvas) {\r\n        LabelView.prototype.size.call(this, canvas);\r\n        this.height = this.minHeight;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLTemplateParameterCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLTemplateParameterCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLTemplateParameterCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLTemplateParameterCompartmentView.prototype.constructor = UMLTemplateParameterCompartmentView;\r\n\r\n    UMLTemplateParameterCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.templateParameters) {\r\n            var i, len, tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (i = 0, len = this.model.templateParameters.length; i < len; i++) {\r\n                var tp = this.model.templateParameters[i];\r\n                var tpView = _.find(tempViews, function (v) { return v.model === tp; });\r\n                if (!tpView) {\r\n                    tpView = new UMLTemplateParameterView();\r\n                    tpView.model = tp;\r\n                    tpView._parent = this;\r\n                    // tpView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', tpView);\r\n                } else {\r\n                    this.addSubView(tpView);\r\n                }\r\n                tpView.setup(canvas);\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLTemplateParameterCompartmentView.prototype.drawShadow = function (canvas) {\r\n        canvas.storeState();\r\n        canvas.alpha = SHADOW_ALPHA;\r\n        canvas.fillColor = SHADOW_COLOR;\r\n        canvas.fillRect(\r\n            this.left + SHADOW_OFFSET,\r\n            this.top + SHADOW_OFFSET,\r\n            this.getRight() + SHADOW_OFFSET,\r\n            this.getBottom() + SHADOW_OFFSET\r\n        );\r\n        canvas.restoreState();\r\n    };\r\n\r\n    UMLTemplateParameterCompartmentView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom(), [3]);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLGeneralNodeView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLGeneralNodeView() {\r\n        NodeView.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.stereotypeDisplay = UML.SD_LABEL;\r\n\r\n        /** @member {boolean} */\r\n        this.showVisibility = true;\r\n\r\n        /** @member {boolean} */\r\n        this.showNamespace = false;\r\n\r\n        /** @member {boolean} */\r\n        this.showProperty = true;\r\n\r\n        /** @member {boolean} */\r\n        this.showType = true;\r\n\r\n        /** @member {boolean} */\r\n        this.wordWrap = false;\r\n\r\n        /** @member {UMLNameCompartmentView} */\r\n        this.nameCompartment = new UMLNameCompartmentView();\r\n        this.nameCompartment.parentStyle = true;\r\n        this.addSubView(this.nameCompartment);\r\n\r\n        /* temporal */\r\n        this.mainRect = new Rect(0, 0, 0, 0);\r\n        this.iconRect = new Rect(0, 0, 0, 0);\r\n        this.iconRatio = 100;\r\n    }\r\n    // inherits from NodeView\r\n    UMLGeneralNodeView.prototype = Object.create(NodeView.prototype);\r\n    UMLGeneralNodeView.prototype.constructor = UMLGeneralNodeView;\r\n\r\n    UMLGeneralNodeView.prototype.hasStereotypeIcon = function () {\r\n        return (this.model && this.model.stereotype && this.model.stereotype.icon && this.model.stereotype.icon.content.trim().length > 0);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.computeIconRect = function (rect, ratioPercent) {\r\n        var rr = rect.getRatioPercent(), ir = ratioPercent,\r\n            x = 0, y = 0, h = 0, w = 0;\r\n        if (rr >= ir) {\r\n            h = rect.getHeight();\r\n            w = h * ir / 100;\r\n            x = rect.x1 + (rect.x2 - rect.x1 - w) / 2;\r\n            y = rect.y1;\r\n        } else {\r\n            w = rect.getWidth();\r\n            h = w * 100 / ir;\r\n            y = rect.y1 + (rect.y2 - rect.y1 - h) / 2;\r\n            x = rect.x1;\r\n        }\r\n        return new Rect(x, y, x + w, y + h);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawIcon = function (canvas, rect) {\r\n        if (this.hasStereotypeIcon()) {\r\n            var ratioRect = this.computeIconRect(rect, (this.model.stereotype.icon.width / this.model.stereotype.icon.height) * 100);\r\n            drawImage(canvas, ratioRect, this.model.stereotype.icon);\r\n        } else {\r\n            canvas.rect(rect.x1, rect.y1, rect.x2, rect.y2);\r\n            canvas.line(rect.x1, rect.y1, rect.x2, rect.y2);\r\n            canvas.line(rect.x2, rect.y1, rect.x1, rect.y2);\r\n        }\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawDecorationIcon = function (canvas, rect) {\r\n        this.drawIcon(canvas, rect);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.getAllCompartments = function () {\r\n        var i, len, comps = [];\r\n        for (i = 0, len = this.subViews.length; i < len; i++) {\r\n            var v = this.subViews[i];\r\n            if (v instanceof UMLCompartmentView) {\r\n                comps.push(v);\r\n            }\r\n        }\r\n        return comps;\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.getSizeOfAllCompartments = function (canvas) {\r\n        var comps = this.getAllCompartments();\r\n        var i, len, w = 0, h = 0;\r\n        for (i = 0, len = comps.length; i < len; i++) {\r\n            var comp = comps[i];\r\n            comp.size(canvas);\r\n            if (comp.visible) {\r\n                if (w < comp.minWidth) {\r\n                    w = comp.minWidth;\r\n                }\r\n                h += comp.minHeight;\r\n            }\r\n        }\r\n        return new Point(w, h);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.arrangeAllCompartments = function (rect, canvas) {\r\n        var comps = this.getAllCompartments();\r\n        var i, len, _y = rect.y1;\r\n        for (i = 0, len = comps.length; i < len; i++) {\r\n            var comp = comps[i];\r\n            if (comp.visible) {\r\n                comp.left = rect.x1;\r\n                comp.top = _y;\r\n                comp.width = (rect.x2 - rect.x1) + 1;\r\n                comp.height = comp.minHeight;\r\n                comp.arrange(canvas);\r\n                _y += comp.height;\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.delimitContainingBoundary = function (canvas) {\r\n        var i, len, r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        for (i = 0, len = this.containedViews.length; i < len; i++) {\r\n            if (this.containedViews[i].containerExtending) {\r\n                var vr = this.containedViews[i].getBoundingBox(canvas);\r\n                vr = new Rect(vr.x1 - COMPARTMENT_LEFT_PADDING, vr.y1 - COMPARTMENT_TOP_PADDING,\r\n                              vr.x2 + COMPARTMENT_RIGHT_PADDING, vr.y2 + COMPARTMENT_BOTTOM_PADDING);\r\n                r = Coord.unionRect(r, vr);\r\n            }\r\n        }\r\n        this.left = r.x1;\r\n        this.top = r.y1;\r\n        this.setRight(r.x2);\r\n        this.setBottom(r.y2);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.getStereotypeLabelText = function () {\r\n        return this.model.getStereotypeString();\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.update = function (canvas) {\r\n        if (this.model) {\r\n            // nameCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.nameCompartment.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.nameCompartment, \'model\', this.model);\r\n            }\r\n            this.nameCompartment.stereotypeLabel.text = this.getStereotypeLabelText();\r\n            this.nameCompartment.nameLabel.text = this.model.name;\r\n            this.nameCompartment.namespaceLabel.text = this.model.getNamespaceString();\r\n            this.nameCompartment.propertyLabel.text = this.model.getPropertyString();\r\n            this.nameCompartment.namespaceLabel.visible = this.showNamespace;\r\n            this.nameCompartment.propertyLabel.visible = this.showProperty;\r\n            this.nameCompartment.wordWrap = this.wordWrap;\r\n            switch (this.stereotypeDisplay) {\r\n            case UML.SD_NONE:\r\n                this.nameCompartment.stereotypeLabel.visible = false;\r\n                break;\r\n            case UML.SD_LABEL:\r\n                this.nameCompartment.stereotypeLabel.visible = (this.nameCompartment.stereotypeLabel.text.length > 0);\r\n                break;\r\n            case UML.SD_DECORATION:\r\n                this.nameCompartment.stereotypeLabel.visible = false;\r\n                break;\r\n            case UML.SD_DECORATION_LABEL:\r\n                this.nameCompartment.stereotypeLabel.visible = true;\r\n                break;\r\n            case UML.SD_ICON:\r\n                this.nameCompartment.stereotypeLabel.visible = false;\r\n                break;\r\n            case UML.SD_ICON_LABEL:\r\n                this.nameCompartment.stereotypeLabel.visible = true;\r\n                break;\r\n            }\r\n            if (this.nameCompartment.propertyLabel.text.length === 0) {\r\n                this.nameCompartment.propertyLabel.visible = false;\r\n            }\r\n        }\r\n        NodeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.sizeCommon(canvas);\r\n        switch (this.stereotypeDisplay) {\r\n        case UML.SD_NONE:\r\n            this.sizeAsCanonicalForm(canvas, false);\r\n            break;\r\n        case UML.SD_LABEL:\r\n            this.sizeAsCanonicalForm(canvas, true);\r\n            break;\r\n        case UML.SD_DECORATION:\r\n            this.sizeAsDecorationForm(canvas, false);\r\n            break;\r\n        case UML.SD_DECORATION_LABEL:\r\n            this.sizeAsDecorationForm(canvas, true);\r\n            break;\r\n        case UML.SD_ICON:\r\n            this.sizeAsIconicForm(canvas, false);\r\n            break;\r\n        case UML.SD_ICON_LABEL:\r\n            this.sizeAsIconicForm(canvas, true);\r\n            break;\r\n        }\r\n        this.delimitContainingBoundary(canvas);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.sizeCommon = function (canvas) {\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.sizeAsCanonicalForm = function (canvas, showLabel) {\r\n        var sz = this.getSizeOfAllCompartments(canvas);\r\n        this.minWidth = sz.x;\r\n        this.minHeight = sz.y;\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.sizeAsDecorationForm = function (canvas, showLabel) {\r\n        var sz = this.getSizeOfAllCompartments(canvas);\r\n        this.minWidth = Math.max(this.nameCompartment.minWidth + DECORATION_ICON_WIDTH + COMPARTMENT_RIGHT_PADDING + COMPARTMENT_LEFT_PADDING, sz.x);\r\n        this.minHeight = sz.y;\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.sizeAsIconicForm = function (canvas, showLabel) {\r\n        var sz = this.getSizeOfAllCompartments(canvas);\r\n        if (this.hasStereotypeIcon()) {\r\n            this.minWidth = Math.max(sz.x, this.model.stereotype.icon.width);\r\n            this.minHeight = this.model.stereotype.icon.height + sz.y;\r\n        } else {\r\n            this.minWidth = Math.max(sz.x, ICONICVIEW_ICONMINWIDTH);\r\n            this.minHeight = ICONICVIEW_ICONMINHEIGHT + sz.y;\r\n        }\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.arrangeObject = function (canvas) {\r\n        this.arrangeCommon(canvas);\r\n        switch (this.stereotypeDisplay) {\r\n        case UML.SD_NONE:\r\n            this.arrangeAsCanonicalForm(canvas, false);\r\n            break;\r\n        case UML.SD_LABEL:\r\n            this.arrangeAsCanonicalForm(canvas, true);\r\n            break;\r\n        case UML.SD_DECORATION:\r\n            this.arrangeAsDecorationForm(canvas, false);\r\n            break;\r\n        case UML.SD_DECORATION_LABEL:\r\n            this.arrangeAsDecorationForm(canvas, true);\r\n            break;\r\n        case UML.SD_ICON:\r\n            this.arrangeAsIconicForm(canvas, false);\r\n            break;\r\n        case UML.SD_ICON_LABEL:\r\n            this.arrangeAsIconicForm(canvas, true);\r\n            break;\r\n        }\r\n        NodeView.prototype.arrangeObject.call(this, canvas);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.arrangeCommon = function (canvas) {\r\n         this.mainRect.setRect(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.arrangeAsCanonicalForm = function (canvas, showLabel) {\r\n        this.arrangeAllCompartments(this.mainRect, canvas);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.arrangeAsDecorationForm = function (canvas, showLabel) {\r\n        this.arrangeAllCompartments(this.mainRect, canvas);\r\n        this.nameCompartment.width = this.width - DECORATION_ICON_WIDTH - COMPARTMENT_LEFT_PADDING + COMPARTMENT_RIGHT_PADDING;\r\n        this.nameCompartment.arrange(canvas);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.arrangeAsIconicForm = function (canvas, showLabel) {\r\n        var sz = this.getSizeOfAllCompartments(canvas);\r\n        var r  = new Rect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2 - sz.y);\r\n        this.iconRect = this.computeIconRect(r, this.iconRatio);\r\n        var r2 = new Rect(this.mainRect.x1, this.mainRect.y1 + this.iconRect.getHeight(), this.mainRect.x2, this.mainRect.y2);\r\n        this.arrangeAllCompartments(r2, canvas);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawShadow = function (canvas) {\r\n        canvas.storeState();\r\n        canvas.alpha = SHADOW_ALPHA;\r\n        canvas.lineColor = "#ffffff00";\r\n        canvas.fillColor = SHADOW_COLOR;\r\n        this.drawShadowCommon(canvas);\r\n        switch (this.stereotypeDisplay) {\r\n        case UML.SD_NONE:\r\n            this.drawShadowAsCanonicalForm(canvas, false);\r\n            break;\r\n        case UML.SD_LABEL:\r\n            this.drawShadowAsCanonicalForm(canvas, true);\r\n            break;\r\n        case UML.SD_DECORATION:\r\n            this.drawShadowAsDecorationForm(canvas, false);\r\n            break;\r\n        case UML.SD_DECORATION_LABEL:\r\n            this.drawShadowAsDecorationForm(canvas, true);\r\n            break;\r\n        case UML.SD_ICON:\r\n            this.drawShadowAsIconicForm(canvas, false);\r\n            break;\r\n        case UML.SD_ICON_LABEL:\r\n            this.drawShadowAsIconicForm(canvas, true);\r\n            break;\r\n        }\r\n        canvas.restoreState();\r\n        NodeView.prototype.drawShadow.call(this, canvas);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawShadowCommon = function (canvas) {\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawShadowAsCanonicalForm = function (canvas, showLabel) {\r\n        canvas.fillRect(\r\n            this.mainRect.x1 + SHADOW_OFFSET,\r\n            this.mainRect.y1 + SHADOW_OFFSET,\r\n            this.mainRect.x2 + SHADOW_OFFSET,\r\n            this.mainRect.y2 + SHADOW_OFFSET\r\n        );\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawShadowAsDecorationForm = function (canvas, showLabel) {\r\n        this.drawShadowAsCanonicalForm(canvas);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawShadowAsIconicForm = function (canvas, showLabel) {\r\n        /*\r\n        canvas.fillRect(\r\n            this.iconRect.x1 + SHADOW_OFFSET,\r\n            this.iconRect.y1 + SHADOW_OFFSET,\r\n            this.iconRect.x2 + SHADOW_OFFSET,\r\n            this.iconRect.y2 + SHADOW_OFFSET\r\n        );\r\n        */\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawObject = function (canvas) {\r\n        this.drawCommon(canvas);\r\n        switch (this.stereotypeDisplay) {\r\n        case UML.SD_NONE:\r\n            this.drawAsCanonicalForm(canvas, false);\r\n            break;\r\n        case UML.SD_LABEL:\r\n            this.drawAsCanonicalForm(canvas, true);\r\n            break;\r\n        case UML.SD_DECORATION:\r\n            this.drawAsDecorationForm(canvas, false);\r\n            break;\r\n        case UML.SD_DECORATION_LABEL:\r\n            this.drawAsDecorationForm(canvas, true);\r\n            break;\r\n        case UML.SD_ICON:\r\n            this.drawAsIconicForm(canvas, false);\r\n            break;\r\n        case UML.SD_ICON_LABEL:\r\n            this.drawAsIconicForm(canvas, true);\r\n            break;\r\n        }\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawCommon = function (canvas) {\r\n        if ((this.stereotypeDisplay !== UML.SD_ICON) && (this.stereotypeDisplay !== UML.SD_ICON_LABEL)) {\r\n            canvas.fillRect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n            canvas.rect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n        }\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawAsCanonicalForm = function (canvas, showLabel) {\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawAsDecorationForm = function (canvas, showLabel) {\r\n        var r   = new Rect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2),\r\n            icon_x = r.x2 - COMPARTMENT_RIGHT_PADDING - DECORATION_ICON_WIDTH,\r\n            icon_y  = r.y1 + COMPARTMENT_TOP_PADDING;\r\n        this.iconRect = this.computeIconRect(new Rect(icon_x, icon_y, icon_x + DECORATION_ICON_WIDTH, icon_y + DECORATION_ICON_HEIGHT), this.iconRatio);\r\n        this.drawDecorationIcon(canvas, this.iconRect);\r\n    };\r\n\r\n    UMLGeneralNodeView.prototype.drawAsIconicForm = function (canvas, showLabel) {\r\n        var _iconWidth  = this.iconRect.getWidth(),\r\n            _iconHeight = this.iconRect.getHeight(),\r\n            _x          = (this.left + this.getRight()) / 2;\r\n        this.drawIcon(canvas, new Rect(_x - (_iconWidth / 2), this.top, _x + (_iconWidth / 2), this.top + _iconHeight));\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLFloatingNodeView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLFloatingNodeView() {\r\n        NodeView.apply(this, arguments);\r\n        this.containerChangeable = false;\r\n        this.containerExtending = false;\r\n\r\n        /** @member {NodeLabelView} */\r\n        this.nameLabel = new NodeLabelView();\r\n        this.nameLabel.distance = 20;\r\n        this.nameLabel.alpha = 3 * Math.PI / 4;\r\n        this.addSubView(this.nameLabel);\r\n\r\n        /** @member {NodeLabelView} */\r\n        this.stereotypeLabel = new NodeLabelView();\r\n        this.stereotypeLabel.distance = 35;\r\n        this.stereotypeLabel.alpha = 3 * Math.PI / 4;\r\n        this.addSubView(this.stereotypeLabel);\r\n\r\n        /** @member {NodeLabelView} */\r\n        this.propertyLabel = new NodeLabelView();\r\n        this.propertyLabel.distance = 20;\r\n        this.propertyLabel.alpha = -3 * Math.PI / 4;\r\n        this.addSubView(this.propertyLabel);\r\n\r\n        /** @member {boolean} */\r\n        this.showProperty = true;\r\n\r\n    }\r\n    // inherits from LabelView\r\n    UMLFloatingNodeView.prototype = Object.create(NodeView.prototype);\r\n    UMLFloatingNodeView.prototype.constructor = UMLFloatingNodeView;\r\n\r\n    UMLFloatingNodeView.prototype.update = function (canvas) {\r\n        NodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameLabel.text = this.model.name;\r\n            if (this.model.stereotype !== null) {\r\n                this.stereotypeLabel.text = this.model.getStereotypeString();\r\n            }\r\n            // propertyLabel\r\n            this.propertyLabel.text = this.model.getPropertyString();\r\n            this.propertyLabel.visible = (this.showProperty ? this.propertyLabel.text.length > 0 : false);\r\n            // nameLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.nameLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.nameLabel, \'model\', this.model);\r\n            }\r\n            // stereotypeLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.stereotypeLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.stereotypeLabel, \'model\', this.model);\r\n            }\r\n            // propertyLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.propertyLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.propertyLabel, \'model\', this.model);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Compute Junction Point\r\n     *\r\n     * @param {Rect} r\r\n     * @param {Point} p\r\n     * @return {Point}\r\n     */\r\n    UMLFloatingNodeView.prototype._junction2 = function (r, p) {\r\n        var c = new Point();\r\n        c.x = (r.x1 + r.x2) / 2;\r\n        c.y = (r.y1 + r.y2) / 2;\r\n        if ((c.x === p.x) || (c.y === p.y)) {\r\n            return Coord.orthoJunction(r, p);\r\n        }\r\n        var lean = (p.y - c.y) / (p.x - c.x);\r\n        // contact points\r\n        var cp = [];\r\n        cp[0] = new Point(r.x1, Math.round(lean * (r.x1 - c.x) + c.y)); // left\r\n        cp[1] = new Point(r.x2, Math.round(lean * (r.x2 - c.x) + c.y)); // right\r\n        cp[2] = new Point(Math.round((r.y1 - c.y) / lean + c.x), r.y1); // top\r\n        cp[3] = new Point(Math.round((r.y2 - c.y) / lean + c.x), r.y2); // bottom\r\n\r\n        var i;\r\n        if (Coord.ptInRect2(p, r)) {\r\n            var idx = 0;\r\n            var md = Math.sqrt(Math.square(cp[0].x - p.x) + Math.square(cp[0].y - p.y));\r\n            for (i = 1; i <= 3; i++) {\r\n                var d = Math.sqrt(Math.square(cp[i].x - p.x) + Math.square(cp[i].y - p.y));\r\n                if (d < md) {\r\n                    md = d;\r\n                    idx = i;\r\n                }\r\n            }\r\n            return cp[idx];\r\n        } else {\r\n            var cpRect = new Rect(c.x, c.y, p.x, p.y);\r\n            Coord.normalizeRect(cpRect);\r\n            c.x = cpRect.x1; c.y = cpRect.y1;\r\n            p.x = cpRect.x2; p.y = cpRect.y2;\r\n            i = -1;\r\n            do {\r\n                i++;\r\n            } while (!(((r.x1 <= cp[i].x) && (cp[i].x <= r.x2) &&\r\n                        (r.y1 <= cp[i].y) && (cp[i].y <= r.y2) &&\r\n                        (c.x <= cp[i].x)  && (cp[i].x <= p.x)  &&\r\n                        (c.y <= cp[i].y)  && (cp[i].y <= p.y)) || (i > 4)));\r\n            if (i > 3) {\r\n                return new Point((r.x1 + r.x2) / 2, (r.y1 + r.y2) / 2);\r\n            } else {\r\n                return cp[i];\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLFloatingNodeView.prototype.arrange = function (canvas) {\r\n        this.nameLabel.visible = (this.nameLabel.text.length > 0);\r\n        this.stereotypeLabel.visible = (this.stereotypeLabel.text.length > 0);\r\n        NodeView.prototype.arrange.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLGeneralEdgeView\r\n     * @constructor\r\n     * @extends EdgeView\r\n     */\r\n    function UMLGeneralEdgeView() {\r\n        EdgeView.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.stereotypeDisplay = UML.SD_LABEL;\r\n\r\n        /** @member {boolean} */\r\n        this.showVisibility = true;\r\n\r\n        /** @member {boolean} */\r\n        this.showProperty = true;\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.nameLabel = new EdgeLabelView();\r\n        this.nameLabel.hostEdge = this;\r\n        this.nameLabel.edgePosition = Core.EP_MIDDLE;\r\n        this.nameLabel.distance = 15;\r\n        this.nameLabel.alpha = Math.PI / 2;\r\n        this.addSubView(this.nameLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.stereotypeLabel = new EdgeLabelView();\r\n        this.stereotypeLabel.hostEdge = this;\r\n        this.stereotypeLabel.edgePosition = Core.EP_MIDDLE;\r\n        this.stereotypeLabel.distance = 30;\r\n        this.stereotypeLabel.alpha = Math.PI / 2;\r\n        this.addSubView(this.stereotypeLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.propertyLabel = new EdgeLabelView();\r\n        this.propertyLabel.hostEdge = this;\r\n        this.propertyLabel.edgePosition = Core.EP_MIDDLE;\r\n        this.propertyLabel.distance = 15;\r\n        this.propertyLabel.alpha = -Math.PI / 2;\r\n        this.addSubView(this.propertyLabel);\r\n    }\r\n    // inherits from EdgeView\r\n    UMLGeneralEdgeView.prototype = Object.create(EdgeView.prototype);\r\n    UMLGeneralEdgeView.prototype.constructor = UMLGeneralEdgeView;\r\n\r\n    UMLGeneralEdgeView.prototype.update = function (canvas) {\r\n        if (this.model) {\r\n            // nameLabel\r\n            this.nameLabel.visible = (this.model.name.length > 0);\r\n            if (this.model.name) {\r\n                this.nameLabel.text = this.model.getString(this.showVisibility);\r\n            }\r\n            // stereotypeLabel\r\n            this.stereotypeLabel.visible =\r\n                this.model.stereotype && (this.stereotypeDisplay === UML.SD_LABEL ||\r\n                                          this.stereotypeDisplay === UML.SD_DECORATION_LABEL ||\r\n                                          this.stereotypeDisplay === UML.SD_ICON_LABEL);\r\n            if (this.model.stereotype) {\r\n                this.stereotypeLabel.text = this.model.getStereotypeString();\r\n            }\r\n            // propertyLabel\r\n            this.propertyLabel.text = this.model.getPropertyString();\r\n            this.propertyLabel.visible = (this.showProperty ? this.propertyLabel.text.length > 0 : false);\r\n            // nameLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.nameLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.nameLabel, \'model\', this.model);\r\n            }\r\n            // stereotypeLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.stereotypeLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.stereotypeLabel, \'model\', this.model);\r\n            }\r\n            // propertyLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.propertyLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.propertyLabel, \'model\', this.model);\r\n            }\r\n        }\r\n        EdgeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLClassifierView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLClassifierView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.containerChangeable = true;\r\n\r\n        /** @member {boolean} */\r\n        this.suppressAttributes = false;\r\n\r\n        /** @member {boolean} */\r\n        this.suppressOperations = false;\r\n\r\n        /** @member {boolean} */\r\n        this.suppressReceptions = true;\r\n\r\n        /** @member {boolean} */\r\n        this.showMultiplicity = true;\r\n\r\n        /** @member {boolean} */\r\n        this.showOperationSignature = true;\r\n\r\n        /** @member {UMLAttributeCompartmentView} */\r\n        this.attributeCompartment = new UMLAttributeCompartmentView();\r\n        this.attributeCompartment.parentStyle = true;\r\n        this.addSubView(this.attributeCompartment);\r\n\r\n        /** @member {UMLOperationCompartmentView} */\r\n        this.operationCompartment = new UMLOperationCompartmentView();\r\n        this.operationCompartment.parentStyle = true;\r\n        this.addSubView(this.operationCompartment);\r\n\r\n        /** @member {UMLReceptionCompartmentView} */\r\n        this.receptionCompartment = new UMLReceptionCompartmentView();\r\n        this.receptionCompartment.parentStyle = true;\r\n        this.addSubView(this.receptionCompartment);\r\n\r\n        /** @member {UMLTemplateParameterCompartmentView} */\r\n        this.templateParameterCompartment = new UMLTemplateParameterCompartmentView();\r\n        this.templateParameterCompartment.parentStyle = true;\r\n        this.addSubView(this.templateParameterCompartment);\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLClassifierView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLClassifierView.prototype.constructor = UMLClassifierView;\r\n\r\n    UMLClassifierView.prototype.getAllCompartments = function () {\r\n        return [\r\n            this.nameCompartment,\r\n            this.attributeCompartment,\r\n            this.operationCompartment,\r\n            this.receptionCompartment\r\n        ];\r\n    };\r\n\r\n    UMLClassifierView.prototype.update = function (canvas) {\r\n        // attributeCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.attributeCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.attributeCompartment, \'model\', this.model);\r\n        }\r\n        // operationCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.operationCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.operationCompartment, \'model\', this.model);\r\n        }\r\n        // receptionCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.receptionCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.receptionCompartment, \'model\', this.model);\r\n        }\r\n        // templateParameterCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.templateParameterCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.templateParameterCompartment, \'model\', this.model);\r\n        }\r\n        if (this.model) {\r\n            if (this.model.templateParameters && this.model.templateParameters.length > 0) {\r\n                this.templateParameterCompartment.visible = true;\r\n            } else {\r\n                this.templateParameterCompartment.visible = false;\r\n            }\r\n        }\r\n        if ((this.stereotypeDisplay === UML.SD_ICON) || (this.stereotypeDisplay === UML.SD_ICON_LABEL)) {\r\n            this.templateParameterCompartment.visible = false;\r\n        }\r\n        this.attributeCompartment.visible = !this.suppressAttributes;\r\n        this.operationCompartment.visible = !this.suppressOperations;\r\n        this.receptionCompartment.visible = !this.suppressReceptions;\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLClassifierView.prototype.sizeObject = function (canvas) {\r\n        UMLGeneralNodeView.prototype.sizeObject.call(this, canvas);\r\n        if (this.templateParameterCompartment.visible) {\r\n            this.templateParameterCompartment.size(canvas);\r\n            this.templateParameterCompartment.width = this.templateParameterCompartment.minWidth;\r\n            this.templateParameterCompartment.height = this.templateParameterCompartment.minHeight;\r\n            this.minWidth = Math.max(this.minWidth, this.templateParameterCompartment.width) + TEMPLATEPARAMETERCOMPARTMENT_LEFT_MARGIN + TEMPLATEPARAMETERCOMPARTMENT_RIGHT_OCCUPY;\r\n            this.minHeight = this.minHeight + this.templateParameterCompartment.height - TEMPLATEPARAMETERCOMPARTMENT_OVERLAP;\r\n        }\r\n    };\r\n\r\n\r\n    UMLClassifierView.prototype.arrangeCommon = function (canvas) {\r\n        UMLGeneralNodeView.prototype.arrangeCommon.call(this, canvas);\r\n        if (this.templateParameterCompartment.visible) {\r\n            this.templateParameterCompartment.left = this.getRight() - this.templateParameterCompartment.width;\r\n            this.templateParameterCompartment.top = this.top;\r\n            this.templateParameterCompartment.arrange(canvas);\r\n            var x1 = this.left,\r\n                y1 = this.top + this.templateParameterCompartment.height - TEMPLATEPARAMETERCOMPARTMENT_OVERLAP,\r\n                x2 = this.getRight() - TEMPLATEPARAMETERCOMPARTMENT_RIGHT_OCCUPY,\r\n                y2 = this.getBottom();\r\n            this.mainRect.setRect(x1, y1, x2, y2);\r\n        }\r\n    };\r\n\r\n    UMLClassifierView.prototype.drawObject = function (canvas) {\r\n        UMLGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n        if (this.attributeCompartment.visible) {\r\n            canvas.line(\r\n                this.attributeCompartment.left,\r\n                this.attributeCompartment.top,\r\n                this.attributeCompartment.getRight(),\r\n                this.attributeCompartment.top);\r\n        }\r\n        if (this.operationCompartment.visible) {\r\n            canvas.line(\r\n                this.operationCompartment.left,\r\n                this.operationCompartment.top,\r\n                this.operationCompartment.getRight(),\r\n                this.operationCompartment.top);\r\n        }\r\n        if (this.receptionCompartment.visible) {\r\n            canvas.line(\r\n                this.receptionCompartment.left,\r\n                this.receptionCompartment.top,\r\n                this.receptionCompartment.getRight(),\r\n                this.receptionCompartment.top);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLUndirectedRelationshipView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLUndirectedRelationshipView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_FLAT;\r\n        this.lineMode = Core.LM_SOLID;\r\n\r\n        /** @member {boolean} */\r\n        this.showMultiplicity = true;\r\n\r\n        /** @member {boolean} */\r\n        this.showType = true;\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.tailRoleNameLabel = new EdgeLabelView();\r\n        this.tailRoleNameLabel.hostEdge = this;\r\n        this.tailRoleNameLabel.edgePosition = Core.EP_TAIL;\r\n        this.tailRoleNameLabel.alpha = Math.PI / 6;\r\n        this.tailRoleNameLabel.distance = 30;\r\n        this.addSubView(this.tailRoleNameLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.tailPropertyLabel = new EdgeLabelView();\r\n        this.tailPropertyLabel.hostEdge = this;\r\n        this.tailPropertyLabel.edgePosition = Core.EP_TAIL;\r\n        this.tailPropertyLabel.alpha = Math.PI / 4;\r\n        this.tailPropertyLabel.distance = 40;\r\n        this.addSubView(this.tailPropertyLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.tailMultiplicityLabel = new EdgeLabelView();\r\n        this.tailMultiplicityLabel.hostEdge = this;\r\n        this.tailMultiplicityLabel.edgePosition = Core.EP_TAIL;\r\n        this.tailMultiplicityLabel.alpha = -Math.PI / 6;\r\n        this.tailMultiplicityLabel.distance = 25;\r\n        this.addSubView(this.tailMultiplicityLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.headRoleNameLabel = new EdgeLabelView();\r\n        this.headRoleNameLabel.hostEdge = this;\r\n        this.headRoleNameLabel.edgePosition = Core.EP_HEAD;\r\n        this.headRoleNameLabel.alpha = -Math.PI / 6;\r\n        this.headRoleNameLabel.distance = 30;\r\n        this.addSubView(this.headRoleNameLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.headPropertyLabel = new EdgeLabelView();\r\n        this.headPropertyLabel.hostEdge = this;\r\n        this.headPropertyLabel.edgePosition = Core.EP_HEAD;\r\n        this.headPropertyLabel.alpha = -Math.PI / 4;\r\n        this.headPropertyLabel.distance = 40;\r\n        this.addSubView(this.headPropertyLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.headMultiplicityLabel = new EdgeLabelView();\r\n        this.headMultiplicityLabel.hostEdge = this;\r\n        this.headMultiplicityLabel.edgePosition = Core.EP_HEAD;\r\n        this.headMultiplicityLabel.alpha = Math.PI / 6;\r\n        this.headMultiplicityLabel.distance = 25;\r\n        this.addSubView(this.headMultiplicityLabel);\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLUndirectedRelationshipView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLUndirectedRelationshipView.prototype.constructor = UMLUndirectedRelationshipView;\r\n\r\n    UMLUndirectedRelationshipView.prototype.update = function (canvas) {\r\n        if (this.model) {\r\n            // RoleName Labels\r\n            this.tailRoleNameLabel.visible = (this.model.end1.name.length > 0);\r\n            if (this.model.end1.name) {\r\n                this.tailRoleNameLabel.text = this.model.end1.getString(this.showVisibility);\r\n            }\r\n            this.headRoleNameLabel.visible = (this.model.end2.name.length > 0);\r\n            if (this.model.end2.name) {\r\n                this.headRoleNameLabel.text = this.model.end2.getString(this.showVisibility);\r\n            }\r\n            // isDerived\r\n            if (this.model.end1.isDerived === true) {\r\n                this.tailRoleNameLabel.text = "/ " + this.tailRoleNameLabel.text;\r\n            }\r\n            if (this.model.end2.isDerived === true) {\r\n                this.headRoleNameLabel.text = "/ " + this.headRoleNameLabel.text;\r\n            }\r\n\r\n            // Property Labels\r\n            this.tailPropertyLabel.text = this.model.end1.getPropertyString();\r\n            this.headPropertyLabel.text = this.model.end2.getPropertyString();\r\n            this.tailPropertyLabel.visible = (this.showProperty ? this.tailPropertyLabel.text.length > 0 : false);\r\n            this.headPropertyLabel.visible = (this.showProperty ? this.headPropertyLabel.text.length > 0 : false);\r\n\r\n            // Multiplicity Labels\r\n            this.tailMultiplicityLabel.visible = (this.showMultiplicity && this.model.end1.multiplicity.length > 0);\r\n            if (this.model.end1.multiplicity) {\r\n                this.tailMultiplicityLabel.text = this.model.end1.multiplicity;\r\n            }\r\n            this.headMultiplicityLabel.visible = (this.showMultiplicity && this.model.end2.multiplicity.length > 0);\r\n            if (this.model.end2.multiplicity) {\r\n                this.headMultiplicityLabel.text = this.model.end2.multiplicity;\r\n            }\r\n            // Set End Styles\r\n            var tailNavigable = this.model.end1.navigable;\r\n            var headNavigable = this.model.end2.navigable;\r\n            if (tailNavigable && !headNavigable) {\r\n                this.tailEndStyle = Core.ES_STICK_ARROW;\r\n                this.headEndStyle = Core.ES_FLAT;\r\n                switch (this.model.end1.aggregation) {\r\n                case UML.AK_SHARED:\r\n                    this.tailEndStyle = Core.ES_ARROW_DIAMOND;\r\n                    break;\r\n                case UML.AK_COMPOSITE:\r\n                    this.tailEndStyle = Core.ES_ARROW_FILLED_DIAMOND;\r\n                    break;\r\n                }\r\n                switch (this.model.end2.aggregation) {\r\n                case UML.AK_SHARED:\r\n                    this.headEndStyle = Core.ES_DIAMOND;\r\n                    break;\r\n                case UML.AK_COMPOSITE:\r\n                    this.headEndStyle = Core.ES_FILLED_DIAMOND;\r\n                    break;\r\n                }\r\n            } else if (!tailNavigable && headNavigable) {\r\n                this.tailEndStyle = Core.ES_FLAT;\r\n                this.headEndStyle = Core.ES_STICK_ARROW;\r\n                switch (this.model.end1.aggregation) {\r\n                case UML.AK_SHARED:\r\n                    this.tailEndStyle = Core.ES_DIAMOND;\r\n                    break;\r\n                case UML.AK_COMPOSITE:\r\n                    this.tailEndStyle = Core.ES_FILLED_DIAMOND;\r\n                    break;\r\n                }\r\n                switch (this.model.end2.aggregation) {\r\n                case UML.AK_SHARED:\r\n                    this.headEndStyle = Core.ES_ARROW_DIAMOND;\r\n                    break;\r\n                case UML.AK_COMPOSITE:\r\n                    this.headEndStyle = Core.ES_ARROW_FILLED_DIAMOND;\r\n                    break;\r\n                }\r\n            } else {\r\n                this.tailEndStyle = Core.ES_FLAT;\r\n                this.headEndStyle = Core.ES_FLAT;\r\n                switch (this.model.end1.aggregation) {\r\n                case UML.AK_SHARED:\r\n                    this.tailEndStyle = Core.ES_DIAMOND;\r\n                    break;\r\n                case UML.AK_COMPOSITE:\r\n                    this.tailEndStyle = Core.ES_FILLED_DIAMOND;\r\n                    break;\r\n                }\r\n                switch (this.model.end2.aggregation) {\r\n                case UML.AK_SHARED:\r\n                    this.headEndStyle = Core.ES_DIAMOND;\r\n                    break;\r\n                case UML.AK_COMPOSITE:\r\n                    this.headEndStyle = Core.ES_FILLED_DIAMOND;\r\n                    break;\r\n                }\r\n            }\r\n            // tailRoleNameLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.tailRoleNameLabel.model !== this.model.end1) {\r\n                Repository.bypassFieldAssign(this.tailRoleNameLabel, \'model\', this.model.end1);\r\n            }\r\n            // tailPropertyLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.tailPropertyLabel.model !== this.model.end1) {\r\n                Repository.bypassFieldAssign(this.tailPropertyLabel, \'model\', this.model.end1);\r\n            }\r\n            // tailMultiplicityLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.tailMultiplicityLabel.model !== this.model.end1) {\r\n                Repository.bypassFieldAssign(this.tailMultiplicityLabel, \'model\', this.model.end1);\r\n            }\r\n            // headRoleNameLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.headRoleNameLabel.model !== this.model.end1) {\r\n                Repository.bypassFieldAssign(this.headRoleNameLabel, \'model\', this.model.end2);\r\n            }\r\n            // headPropertyLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.headPropertyLabel.model !== this.model.end1) {\r\n                Repository.bypassFieldAssign(this.headPropertyLabel, \'model\', this.model.end2);\r\n            }\r\n            // headMultiplicityLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.headMultiplicityLabel.model !== this.model.end1) {\r\n                Repository.bypassFieldAssign(this.headMultiplicityLabel, \'model\', this.model.end2);\r\n            }\r\n        }\r\n        UMLGeneralEdgeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                            CLASS DIAGRAM VIEWS                         *\r\n     *                                                                        *\r\n     *************************************************************************/\r\n\r\n    /**\r\n     * UMLClassDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLClassDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLClassDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLClassDiagram.prototype.constructor = UMLClassDiagram;\r\n\r\n    UMLClassDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.UMLConstraint) ||\r\n               (model instanceof type.UMLPackage) ||\r\n               (model instanceof type.UMLClassifier) ||\r\n               (model instanceof type.UMLInstance) ||\r\n               (model instanceof type.UMLPort) ||\r\n               (model instanceof type.UMLAttribute) ||\r\n               (model instanceof type.UMLGeneralization) ||\r\n               (model instanceof type.UMLDependency) ||\r\n               (model instanceof type.UMLInterfaceRealization) ||\r\n               (model instanceof type.UMLComponentRealization) ||\r\n               (model instanceof type.UMLAssociation) ||\r\n               (model instanceof type.UMLLink) ||\r\n               (model instanceof type.UMLConnector);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLClassView\r\n     * @constructor\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLClassView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n        this.fillColor  = PreferenceManager.get("uml.class.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay  = PreferenceManager.get("uml.class.stereotypeDisplay", UML.SD_LABEL);\r\n        this.suppressAttributes = PreferenceManager.get("uml.class.suppressAttributes", false);\r\n        this.suppressOperations = PreferenceManager.get("uml.class.suppressOperations", false);\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLClassView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLClassView.prototype.constructor = UMLClassView;\r\n\r\n    UMLClassView.prototype.drawCommon = function (canvas) {\r\n        UMLClassifierView.prototype.drawCommon.call(this, canvas);\r\n        if (this.model && this.model.isActive) {\r\n            canvas.line(this.mainRect.x1 + CLASS_ACTIVE_VERTLINE_WIDTH, this.mainRect.y1, this.mainRect.x1 + CLASS_ACTIVE_VERTLINE_WIDTH, this.mainRect.y2);\r\n            canvas.line(this.mainRect.x2 - CLASS_ACTIVE_VERTLINE_WIDTH, this.mainRect.y1, this.mainRect.x2 - CLASS_ACTIVE_VERTLINE_WIDTH, this.mainRect.y2);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInterfaceView\r\n     * @constructor\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLInterfaceView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n\r\n        /** temporal */\r\n        this.depViews = null;\r\n        this.relViews = null;\r\n\r\n        this.fillColor  = PreferenceManager.get("uml.interface.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay  = PreferenceManager.get("uml.interface.stereotypeDisplay", UML.SD_ICON);\r\n        this.suppressAttributes = PreferenceManager.get("uml.interface.suppressAttributes", true);\r\n        this.suppressOperations = PreferenceManager.get("uml.interface.suppressOperations", true);\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLInterfaceView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLInterfaceView.prototype.constructor = UMLInterfaceView;\r\n\r\n    UMLInterfaceView.prototype.collectSupplierDependencyViews = function () {\r\n        var views = [];\r\n        for (var i = 0, len = this.getDiagram().ownedViews.length; i < len; i++) {\r\n            var v = this.getDiagram().ownedViews[i];\r\n            if ((v instanceof UMLDependencyView) && (v.head === this)) {\r\n                views.push(v);\r\n            }\r\n        }\r\n        return views;\r\n    };\r\n\r\n    UMLInterfaceView.prototype.collectSupplierRealizationViews = function () {\r\n        var views = [];\r\n        for (var i = 0, len = this.getDiagram().ownedViews.length; i < len; i++) {\r\n            var v = this.getDiagram().ownedViews[i];\r\n            if ((v instanceof UMLInterfaceRealizationView) && (v.head === this)) {\r\n                views.push(v);\r\n            }\r\n        }\r\n        return views;\r\n    };\r\n\r\n    UMLInterfaceView.prototype.getStereotypeLabelText = function () {\r\n        return "«interface»";\r\n    };\r\n\r\n    UMLInterfaceView.prototype.update = function (canvas) {\r\n        UMLClassifierView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLInterfaceView.prototype.arrangeCommon = function (canvas) {\r\n        this.depViews = this.collectSupplierDependencyViews();\r\n        this.relViews = this.collectSupplierRealizationViews();\r\n        UMLClassifierView.prototype.arrangeCommon.call(this, canvas);\r\n    };\r\n\r\n    UMLInterfaceView.prototype.drawShadowAsIconicForm = function (canvas) {\r\n        if ((this.relViews.length > 0) || (this.depViews.length === 0)) {\r\n            canvas.fillEllipse(\r\n                this.iconRect.x1 + SHADOW_OFFSET,\r\n                this.iconRect.y1 + SHADOW_OFFSET,\r\n                this.iconRect.x2 + SHADOW_OFFSET,\r\n                this.iconRect.y2 + SHADOW_OFFSET\r\n            );\r\n        }\r\n    };\r\n\r\n    UMLInterfaceView.prototype.drawIcon = function (canvas, rect) {\r\n        if ((this.depViews.length > 0) && (this.relViews.length > 0)) {\r\n            this.drawBallAndSocketNotation(canvas, rect, this.depViews);\r\n        } else if (this.depViews.length > 0) {\r\n            this.drawSocketNotation(canvas, rect, this.depViews);\r\n        } else {\r\n            this.drawBallNotation(canvas, rect);\r\n        }\r\n    };\r\n\r\n    UMLInterfaceView.prototype.drawDecorationIcon = function (canvas, rect) {\r\n        this.drawBallNotation(canvas, new Rect(rect.x1 + 3, rect.y1 + 3, rect.x2 - 3, rect.y2 - 3));\r\n    };\r\n\r\n    UMLInterfaceView.prototype.drawBallNotation = function (canvas, rect) {\r\n        canvas.fillEllipse(rect.x1, rect.y1, rect.x2, rect.y2);\r\n        canvas.ellipse(rect.x1, rect.y1, rect.x2, rect.y2);\r\n    };\r\n\r\n    UMLInterfaceView.prototype.drawSocketNotation = function (canvas, rect, supplierDependencyViews) {\r\n        var i, len, v, c = Coord.getCenter(rect);\r\n        for (i = 0, len = supplierDependencyViews.length; i < len; i++) {\r\n            v = supplierDependencyViews[i];\r\n            v.arrange(canvas);\r\n            var b      = Coord.junction(rect, v.points.getPoint(v.points.count() - 1)),\r\n                theta  = Coord.getAngle(c.x, c.y, b.x, b.y),\r\n                radius = Math.min(rect.getWidth() / 2, rect.getHeight() / 2);\r\n            canvas.arc(c.x, c.y, radius, theta - Math.PI / 2, theta + Math.PI / 2, false);\r\n        }\r\n    };\r\n\r\n    UMLInterfaceView.prototype.drawBallAndSocketNotation = function (canvas, rect, supplierDependencyViews) {\r\n        this.drawSocketNotation(canvas, rect, supplierDependencyViews);\r\n        var r = new Rect(rect.x1 + 3, rect.y1 + 3, rect.x2 - 3, rect.y2 - 3);\r\n        this.drawBallNotation(canvas, r);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLSignalView\r\n     * @constructor\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLSignalView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("uml.signal.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLSignalView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLSignalView.prototype.constructor = UMLSignalView;\r\n\r\n    UMLSignalView.prototype.getStereotypeLabelText = function () {\r\n        return "«signal»";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLDataTypeView\r\n     * @constructor\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLDataTypeView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("uml.datatype.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.suppressAttributes = true;\r\n        this.suppressOperations = true;\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLDataTypeView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLDataTypeView.prototype.constructor = UMLDataTypeView;\r\n\r\n    UMLDataTypeView.prototype.getStereotypeLabelText = function () {\r\n        return "«dataType»";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLPrimitiveTypeView\r\n     * @constructor\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLPrimitiveTypeView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("uml.datatype.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.suppressAttributes = true;\r\n        this.suppressOperations = true;\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLPrimitiveTypeView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLPrimitiveTypeView.prototype.constructor = UMLPrimitiveTypeView;\r\n\r\n    UMLPrimitiveTypeView.prototype.getStereotypeLabelText = function () {\r\n        return "«primitiveType»";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLEnumerationLiteralView\r\n     * @constructor\r\n     * @extends LabelView\r\n     */\r\n    function UMLEnumerationLiteralView() {\r\n        LabelView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_NONE;\r\n        this.parentStyle = true;\r\n        this.horizontalAlignment = Graphics.AL_LEFT;\r\n    }\r\n    // inherits from LabelView\r\n    UMLEnumerationLiteralView.prototype = Object.create(LabelView.prototype);\r\n    UMLEnumerationLiteralView.prototype.constructor = UMLEnumerationLiteralView;\r\n\r\n    UMLEnumerationLiteralView.prototype.update = function (canvas) {\r\n        var options = {\r\n            showVisibility    : true,\r\n            stereotypeDisplay : UML.SD_LABEL,\r\n            showProperty      : true\r\n        };\r\n        if (this._parent && (this._parent._parent instanceof UMLClassifierView)) {\r\n            options.showVisibility    = this._parent._parent.showVisibility;\r\n            options.stereotypeDisplay = this._parent._parent.stereotypeDisplay;\r\n            options.showProperty      = this._parent._parent.showProperty;\r\n        }\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n        if (this.model) {\r\n            this.text = this.model.getString(options);\r\n        }\r\n        LabelView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLEnumerationLiteralView.prototype.size = function (canvas) {\r\n        LabelView.prototype.size.call(this, canvas);\r\n        this.height = this.minHeight;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLEnumerationLiteralCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLEnumerationLiteralCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLEnumerationLiteralCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLEnumerationLiteralCompartmentView.prototype.constructor = UMLEnumerationLiteralCompartmentView;\r\n\r\n    UMLEnumerationLiteralCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.literals) {\r\n            var tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (var i = 0, len = this.model.literals.length; i < len; i++) {\r\n                var literal = this.model.literals[i];\r\n                var literalView = _.find(tempViews, function (v) { return v.model === literal; });\r\n                if (!literalView) {\r\n                    literalView = new UMLEnumerationLiteralView();\r\n                    literalView.model = literal;\r\n                    literalView._parent = this;\r\n                    literalView._parent = this;\r\n                    // literalView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', literalView);\r\n                } else {\r\n                    this.addSubView(literalView);\r\n                }\r\n                literalView.setup(canvas);\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLEnumerationView\r\n     * @constructor\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLEnumerationView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.suppressLiterals = false;\r\n\r\n        /** @member {UMLEnumerationLiteralCompartmentView} */\r\n        this.enumerationLiteralCompartment = new UMLEnumerationLiteralCompartmentView();\r\n        this.enumerationLiteralCompartment.parentStyle = true;\r\n        this.addSubView(this.enumerationLiteralCompartment);\r\n\r\n        this.fillColor  = PreferenceManager.get("uml.enumeration.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay  = PreferenceManager.get("uml.enumeration.stereotypeDisplay", UML.SD_LABEL);\r\n        this.suppressAttributes = PreferenceManager.get("uml.enumeration.suppressAttributes", true);\r\n        this.suppressOperations = PreferenceManager.get("uml.enumeration.suppressOperations", true);\r\n        this.suppressLiterals   = PreferenceManager.get("uml.enumeration.suppressLiterals", false);\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLEnumerationView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLEnumerationView.prototype.constructor = UMLEnumerationView;\r\n\r\n    UMLEnumerationView.prototype.getAllCompartments = function () {\r\n        return [\r\n            this.nameCompartment,\r\n            this.enumerationLiteralCompartment,\r\n            this.attributeCompartment,\r\n            this.operationCompartment\r\n        ];\r\n    };\r\n\r\n    UMLEnumerationView.prototype.getStereotypeLabelText = function () {\r\n        return "«enumeration»";\r\n    };\r\n\r\n    UMLEnumerationView.prototype.update = function (canvas) {\r\n        // enumerationLiteralCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.enumerationLiteralCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.enumerationLiteralCompartment, \'model\', this.model);\r\n        }\r\n        this.enumerationLiteralCompartment.visible = !this.suppressLiterals;\r\n        UMLClassifierView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLEnumerationView.prototype.drawObject = function (canvas) {\r\n        UMLClassifierView.prototype.drawObject.call(this, canvas);\r\n        if (this.enumerationLiteralCompartment.visible) {\r\n            canvas.line(\r\n                this.enumerationLiteralCompartment.left,\r\n                this.enumerationLiteralCompartment.top,\r\n                this.enumerationLiteralCompartment.getRight(),\r\n                this.enumerationLiteralCompartment.top);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLGeneralizationView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLGeneralizationView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_TRIANGLE;\r\n        this.lineMode = Core.LM_SOLID;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLGeneralizationView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLGeneralizationView.prototype.constructor = UMLGeneralizationView;\r\n\r\n    UMLGeneralizationView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLClassifier);\r\n    };\r\n\r\n    /**\r\n     * UMLDependencyView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLDependencyView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        this.lineMode = Core.LM_DOT;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLDependencyView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLDependencyView.prototype.constructor = UMLDependencyView;\r\n\r\n    UMLDependencyView.prototype.arrangeObject = function (canvas) {\r\n        UMLGeneralEdgeView.prototype.arrangeObject.call(this, canvas);\r\n        this.lineMode = Core.LM_DOT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        if (this.head instanceof UMLInterfaceView) {\r\n            var v = this.head;\r\n            if ((v.stereotypeDisplay === UML.SD_ICON) || (v.stereotypeDisplay === UML.SD_ICON_LABEL)) {\r\n                this.lineMode = Core.LM_SOLID;\r\n                this.headEndStyle = Core.ES_FLAT;\r\n                var c = this.points.count();\r\n                var p = Coord.junction(v.iconRect, this.points.getPoint(c - 1));\r\n                this.points.setPoint(c - 1, p);\r\n                if ((this.lineStyle === Core.LS_RECTILINEAR || this.lineStyle === Core.LS_ROUNDRECT) && (c >= 2)) {\r\n                    var p2 = this.points.getPoint(c - 2);\r\n                    if (Math.abs(p2.x - p.x) > Math.abs(p2.y - p.y)) {\r\n                        p2.y = p.y;\r\n                    } else {\r\n                        p2.x = p.x;\r\n                    }\r\n                    this.points.setPoint(c - 2, p2);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLDependencyView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLModelElement);\r\n    };\r\n\r\n    /**\r\n     * UMLRealizationView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLRealizationView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_TRIANGLE;\r\n        this.lineMode = Core.LM_DOT;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLRealizationView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLRealizationView.prototype.constructor = UMLRealizationView;\r\n\r\n    /**\r\n     * UMLInterfaceRealizationView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLInterfaceRealizationView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_TRIANGLE;\r\n        this.lineMode = Core.LM_DOT;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLInterfaceRealizationView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLInterfaceRealizationView.prototype.constructor = UMLInterfaceRealizationView;\r\n\r\n    UMLInterfaceRealizationView.prototype.arrangeObject = function (canvas) {\r\n        UMLGeneralEdgeView.prototype.arrangeObject.call(this, canvas);\r\n        this.lineMode = Core.LM_DOT;\r\n        this.headEndStyle = Core.ES_TRIANGLE;\r\n        if (this.head instanceof UMLInterfaceView) {\r\n            var v = this.head;\r\n            if ((v.stereotypeDisplay === UML.SD_ICON) || (v.stereotypeDisplay === UML.SD_ICON_LABEL)) {\r\n                this.lineMode = Core.LM_SOLID;\r\n                this.headEndStyle = Core.ES_FLAT;\r\n                var c = this.points.count();\r\n                var p = Coord.junction(v.iconRect, this.points.getPoint(c - 1));\r\n                this.points.setPoint(c - 1, p);\r\n                if ((this.lineStyle === Core.LS_RECTILINEAR || this.lineStyle === Core.LS_ROUNDRECT) && (c >= 2)) {\r\n                    var p2 = this.points.getPoint(c - 2);\r\n                    if (Math.abs(p2.x - p.x) > Math.abs(p2.y - p.y)) {\r\n                        p2.y = p.y;\r\n                    } else {\r\n                        p2.x = p.x;\r\n                    }\r\n                    this.points.setPoint(c - 2, p2);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLInterfaceRealizationView.prototype.canConnectTo = function (view, isTail) {\r\n        return (isTail && view.model instanceof type.UMLClassifier) ||\r\n               (!isTail && view.model instanceof type.UMLInterface);\r\n    };\r\n\r\n    /**\r\n     * UMLQualifierCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLQualifierCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLQualifierCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLQualifierCompartmentView.prototype.constructor = UMLQualifierCompartmentView;\r\n\r\n    UMLQualifierCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.qualifiers) {\r\n            var tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (var i = 0, len = this.model.qualifiers.length; i < len; i++) {\r\n                var attr = this.model.qualifiers[i];\r\n                var attrView = _.find(tempViews, function (v) { return v.model == attr; });\r\n                if (!attrView) {\r\n                    attrView = new UMLAttributeView();\r\n                    attrView.model = attr;\r\n                    attrView._parent = this;\r\n                    // attrView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', attrView);\r\n                } else {\r\n                    this.addSubView(attrView);\r\n                }\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLQualifierCompartmentView.prototype.drawShadow = function (canvas) {\r\n        canvas.storeState();\r\n        canvas.alpha = SHADOW_ALPHA;\r\n        canvas.fillColor = SHADOW_COLOR;\r\n        canvas.fillRect(\r\n            this.left + SHADOW_OFFSET,\r\n            this.top + SHADOW_OFFSET,\r\n            this.getRight() + SHADOW_OFFSET,\r\n            this.getBottom() + SHADOW_OFFSET\r\n        );\r\n        canvas.restoreState();\r\n    };\r\n\r\n    UMLQualifierCompartmentView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLAssociationView\r\n     * @constructor\r\n     * @extends UMLUndirectedRelationshipView\r\n     */\r\n    function UMLAssociationView() {\r\n        UMLUndirectedRelationshipView.apply(this, arguments);\r\n\r\n        /** @member {} */\r\n        this.tailQualifiersCompartment = new UMLQualifierCompartmentView();\r\n        this.addSubView(this.tailQualifiersCompartment);\r\n\r\n        /** @member {} */\r\n        this.headQualifiersCompartment = new UMLQualifierCompartmentView();\r\n        this.addSubView(this.headQualifiersCompartment);\r\n    }\r\n    // inherits from UMLUndirectedRelationshipView\r\n    UMLAssociationView.prototype = Object.create(UMLUndirectedRelationshipView.prototype);\r\n    UMLAssociationView.prototype.constructor = UMLAssociationView;\r\n\r\n    UMLAssociationView.prototype.update = function (canvas) {\r\n        if (this.model) {\r\n            this.tailQualifiersCompartment.visible = this.model.end1.qualifiers.length > 0;\r\n            this.headQualifiersCompartment.visible = this.model.end2.qualifiers.length > 0;\r\n            // tailQualifiersCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.tailQualifiersCompartment.model !== this.model.end1) {\r\n                Repository.bypassFieldAssign(this.tailQualifiersCompartment, \'model\', this.model.end1);\r\n            }\r\n            // headQualifiersCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.headQualifiersCompartment.model !== this.model.end2) {\r\n                Repository.bypassFieldAssign(this.headQualifiersCompartment, \'model\', this.model.end2);\r\n            }\r\n        }\r\n        UMLUndirectedRelationshipView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLAssociationView.prototype.sizeObject = function (canvas) {\r\n        UMLUndirectedRelationshipView.prototype.sizeObject.call(this, canvas);\r\n        this.tailQualifiersCompartment.sizeObject(canvas);\r\n        this.headQualifiersCompartment.sizeObject(canvas);\r\n    };\r\n\r\n    UMLAssociationView.prototype.arrangeQualifierCompartment = function (canvas, qv, isTail) {\r\n        var jp, nv, p1, pn;\r\n        if (isTail) {\r\n            nv = this.tail;\r\n            p1 = this.points.getPoint(1);\r\n            jp = 0;\r\n        } else {\r\n            nv = this.head;\r\n            p1 = this.points.getPoint(this.points.count() - 2);\r\n            jp = this.points.count() - 1;\r\n        }\r\n        if (qv.visible) {\r\n            qv.width = qv.minWidth;\r\n            qv.height = qv.minHeight;\r\n            pn = Coord.junction(nv.getBoundingBox(canvas), p1);\r\n            var dx = Math.abs(p1.x - pn.x),\r\n                dy = Math.abs(p1.y - pn.y);\r\n            if ((pn.x <= p1.x) && (dx >= dy)) {\r\n                qv.left = nv.getRight();\r\n                qv.top = pn.y - qv.height / 2;\r\n            } else if ((pn.y >= p1.y) && (dy > dx)) {\r\n                qv.left = pn.x - qv.width / 2;\r\n                qv.top = nv.top - qv.height + 1;\r\n            } else if ((pn.x > p1.x) && (dx >= dy)) {\r\n                qv.left = nv.left - qv.width + 1;\r\n                qv.top = pn.y - qv.height / 2;\r\n            } else if ((pn.y < p1.y) && (dy > dx)) {\r\n                qv.left = pn.x - qv.width / 2;\r\n                qv.top = nv.getBottom();\r\n            }\r\n            var p = Coord.junction(qv.getBoundingBox(canvas), p1);\r\n            this.points.setPoint(jp, p);\r\n        }\r\n    };\r\n\r\n    UMLAssociationView.prototype.arrange = function (canvas) {\r\n        this.recalcPoints(canvas);\r\n        this.arrangeQualifierCompartment(canvas, this.tailQualifiersCompartment, true);\r\n        this.arrangeQualifierCompartment(canvas, this.headQualifiersCompartment, false);\r\n        UMLUndirectedRelationshipView.prototype.arrange.call(this, canvas);\r\n        var t = null, h = null;\r\n        if (this.tailQualifiersCompartment.visible) {\r\n            t = this.tail;\r\n            this.tail = this.tailQualifiersCompartment;\r\n        }\r\n        if (this.headQualifiersCompartment.visible) {\r\n            h = this.head;\r\n            this.head = this.headQualifiersCompartment;\r\n        }\r\n        this.recalcPoints(canvas);\r\n        if (this.tailQualifiersCompartment.visible) {\r\n            this.tail = t;\r\n        }\r\n        if (this.headQualifiersCompartment.visible) {\r\n            this.head = h;\r\n        }\r\n    };\r\n\r\n    UMLAssociationView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLClassifier);\r\n    };\r\n\r\n    /**\r\n     * UMLAssociationClassLinkView\r\n     * @constructor\r\n     * @extends EdgeView\r\n     */\r\n    function UMLAssociationClassLinkView() {\r\n        EdgeView.apply(this, arguments);\r\n        this.lineMode = Core.LM_DOT;\r\n    }\r\n    // inherits from EdgeView\r\n    UMLAssociationClassLinkView.prototype = Object.create(EdgeView.prototype);\r\n    UMLAssociationClassLinkView.prototype.constructor = UMLAssociationClassLinkView;\r\n\r\n    UMLAssociationClassLinkView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLClass || view.model instanceof type.UMLAssociation);\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                        PACKAGE DIAGRAM VIEWS                           *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLPackageDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLPackageDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLPackageDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLPackageDiagram.prototype.constructor = UMLPackageDiagram;\r\n\r\n    UMLPackageDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.UMLConstraint) ||\r\n               (model instanceof type.UMLPackage) ||\r\n               (model instanceof type.UMLSubsystem) ||\r\n               (model instanceof type.UMLDependency);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLPackageView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLPackageView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.containerChangeable = true;\r\n        this.fillColor = PreferenceManager.get("uml.package.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLPackageView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLPackageView.prototype.constructor = UMLPackageView;\r\n\r\n    UMLPackageView.prototype.canContainViewKind = function (kind) {\r\n        return MetaModelManager.isKindOf(kind, "UMLClassifierView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLPackageView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLObjectView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLArtifactInstanceView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLComponentInstanceView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLNodeInstanceView");\r\n    };\r\n\r\n    UMLPackageView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLPackageView.prototype.sizeObject = function (canvas) {\r\n        UMLGeneralNodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = Math.max(this.minWidth, PACKAGE_MINWIDTH);\r\n        this.minHeight = Math.max(PACKAGE_TAB_HEIGHT + this.minHeight, PACKAGE_MINHEIGHT);\r\n    };\r\n\r\n    UMLPackageView.prototype.arrangeCommon = function (canvas) {\r\n        UMLGeneralNodeView.prototype.arrangeCommon.call(this, canvas);\r\n        if ((this.stereotypeDisplay !== UML.SD_ICON) && (this.stereotypeDisplay !== UML.SD_ICON_LABEL)) {\r\n            this.mainRect.setRect(this.left, this.top + PACKAGE_TAB_HEIGHT, this.getRight(), this.getBottom());\r\n        }\r\n    };\r\n\r\n    UMLPackageView.prototype.drawShadowAsCanonicalForm = function (canvas, showLabel) {\r\n        var tabRightX = this.left + (this.getRight() - this.left) * 2 / 5,\r\n            tabBottomY = this.top + PACKAGE_TAB_HEIGHT;\r\n        canvas.fillRect(this.left + SHADOW_OFFSET, this.top + SHADOW_OFFSET, tabRightX + SHADOW_OFFSET, tabBottomY + SHADOW_OFFSET);\r\n        canvas.fillRect(this.left + SHADOW_OFFSET, tabBottomY - 1 + SHADOW_OFFSET, this.getRight() + SHADOW_OFFSET, this.getBottom() + SHADOW_OFFSET);\r\n    };\r\n\r\n    UMLPackageView.prototype.drawAsCanonicalForm = function (canvas, showLabel) {\r\n        var tabRightX = this.left + (this.getRight() - this.left) * 2 / 5,\r\n            tabBottomY = this.top + PACKAGE_TAB_HEIGHT;\r\n        canvas.fillRect(this.left, this.top, tabRightX, tabBottomY);\r\n        canvas.rect(this.left, this.top, tabRightX, tabBottomY);\r\n        canvas.fillRect(this.left, tabBottomY - 1, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, tabBottomY - 1, this.getRight(), this.getBottom());\r\n        UMLGeneralNodeView.prototype.drawAsCanonicalForm.call(this, canvas, showLabel);\r\n    };\r\n\r\n    UMLPackageView.prototype.drawAsDecorationForm = function (canvas, showLabel) {\r\n        this.drawAsCanonicalForm(canvas, showLabel);\r\n        UMLGeneralNodeView.prototype.drawAsDecorationForm.call(this, canvas, showLabel);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLModelView\r\n     * @constructor\r\n     * @extends UMLPackageView\r\n     */\r\n    function UMLModelView() {\r\n        UMLPackageView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("uml.model.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLPackageView\r\n    UMLModelView.prototype = Object.create(UMLPackageView.prototype);\r\n    UMLModelView.prototype.constructor = UMLModelView;\r\n\r\n    UMLModelView.prototype.drawAsCanonicalForm = function (canvas, showLabel) {\r\n        UMLPackageView.prototype.drawAsCanonicalForm.call(this, canvas, showLabel);\r\n        var tabRightX = this.left + (this.getRight() - this.left) * 2 / 5;\r\n        canvas.polyline([new Point(tabRightX - 9, this.top + 3), new Point(tabRightX - 15, this.top + 10), new Point(tabRightX - 3, this.top + 10), new Point(tabRightX - 9, this.top + 3)]);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLSubsystemView\r\n     * @constructor\r\n     * @extends UMLPackageView\r\n     */\r\n    function UMLSubsystemView() {\r\n        UMLPackageView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("uml.subsystem.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLPackageView\r\n    UMLSubsystemView.prototype = Object.create(UMLPackageView.prototype);\r\n    UMLSubsystemView.prototype.constructor = UMLSubsystemView;\r\n\r\n    UMLSubsystemView.prototype.drawAsCanonicalForm = function (canvas, showLabel) {\r\n        UMLPackageView.prototype.drawAsCanonicalForm.call(this, canvas, showLabel);\r\n        var tabRightX = this.left + (this.getRight() - this.left) * 2 / 5;\r\n        canvas.polyline([new Point(tabRightX - 8, this.top + 3), new Point(tabRightX - 8, this.top + 7)]);\r\n        canvas.polyline([new Point(tabRightX - 11, this.top + 11), new Point(tabRightX - 11, this.top + 7), new Point(tabRightX - 5, this.top + 7)]);\r\n        canvas.polyline([new Point(tabRightX - 5, this.top + 11), new Point(tabRightX - 5, this.top + 7), new Point(tabRightX - 11, this.top + 7)]);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLContainmentView\r\n     * @constructor\r\n     * @extends EdgeView\r\n     */\r\n    function UMLContainmentView() {\r\n        EdgeView.apply(this, arguments);\r\n        this.headEndStyle = Core.ES_CIRCLE_PLUS;\r\n    }\r\n    // inherits from EdgeView\r\n    UMLContainmentView.prototype = Object.create(EdgeView.prototype);\r\n    UMLContainmentView.prototype.constructor = UMLContainmentView;\r\n\r\n    UMLContainmentView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLModelElement);\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                  COMPOSITE STRUCTURE DIAGRAM VIEWS                     *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n\r\n    /**\r\n     * UMLCompositeStructureDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLCompositeStructureDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLCompositeStructureDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLCompositeStructureDiagram.prototype.constructor = UMLCompositeStructureDiagram;\r\n\r\n    UMLCompositeStructureDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.UMLConstraint) ||\r\n               (model instanceof type.UMLPackage) ||\r\n               (model instanceof type.UMLClassifier) ||\r\n               (model instanceof type.UMLPort) ||\r\n               (model instanceof type.UMLAttribute) ||\r\n               (model instanceof type.UMLCollaborationUse) ||\r\n               (model instanceof type.UMLGeneralization) ||\r\n               (model instanceof type.UMLDependency) ||\r\n               (model instanceof type.UMLInterfaceRealization) ||\r\n               (model instanceof type.UMLComponentRealization) ||\r\n               (model instanceof type.UMLAssociation) ||\r\n               (model instanceof type.UMLLink) ||\r\n               (model instanceof type.UMLConnector);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLPortView\r\n     * @constructor\r\n     * @extends UMLFloatingNodeView\r\n     */\r\n    function UMLPortView() {\r\n        UMLFloatingNodeView.apply(this, arguments);\r\n        this.sizable = Core.SZ_NONE;\r\n        this.fillColor = PreferenceManager.get("uml.port.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n\r\n        /** @member {boolean} */\r\n        this.showVisibility = false;\r\n\r\n        /** @member {boolean} */\r\n        this.showType = true;\r\n\r\n        /** @member {boolean} */\r\n        this.showMultiplicity = true;\r\n    }\r\n    // inherits from LabelView\r\n    UMLPortView.prototype = Object.create(UMLFloatingNodeView.prototype);\r\n    UMLPortView.prototype.constructor = UMLPortView;\r\n\r\n    UMLPortView.prototype.update = function (canvas) {\r\n        UMLFloatingNodeView.prototype.update.call(this, canvas);\r\n        var options = {\r\n            showVisibility   : this.showVisibility,\r\n            showType         : this.showType,\r\n            showMultiplicity : this.showMultiplicity,\r\n            showProperty     : false\r\n        };\r\n        this.nameLabel.text = this.model.getString(options);\r\n        this.nameLabel.underline = (this.model.isStatic === true);\r\n    };\r\n\r\n    UMLPortView.prototype.sizeObject = function (canvas) {\r\n        UMLFloatingNodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = PORT_MINWIDTH;\r\n        this.minHeight = PORT_MINHEIGHT;\r\n    };\r\n\r\n    UMLPortView.prototype.arrange = function (canvas) {\r\n        if (this.containerView) {\r\n            var r = this.containerView.getBoundingBox(canvas);\r\n            var c = Coord.getCenter(new Rect(this.left, this.top, this.getRight(), this.getBottom()));\r\n            var p = this._junction2(r, c);\r\n            this.left = p.x - PORT_MINWIDTH / 2;\r\n            this.top = p.y - PORT_MINHEIGHT / 2;\r\n            this.setRight(p.x + PORT_MINWIDTH / 2);\r\n            this.setBottom(p.y + PORT_MINHEIGHT / 2);\r\n        }\r\n        UMLFloatingNodeView.prototype.arrange.call(this, canvas);\r\n    };\r\n\r\n    UMLPortView.prototype.drawObject = function (canvas) {\r\n        UMLFloatingNodeView.prototype.drawObject.call(this, canvas);\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLPartView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLPartView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.containerChangeable = false;\r\n        this.showVisibility = false;\r\n\r\n        /** @member {boolean} */\r\n        this.showMultiplicity = true;\r\n\r\n        this.fillColor = PreferenceManager.get("uml.part.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLPartView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLPartView.prototype.constructor = UMLPartView;\r\n\r\n    UMLPartView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model && (this.model instanceof type.UMLAttribute)) {\r\n            this.nameCompartment.nameLabel.text = this.model.getString(this);\r\n            this.nameCompartment.nameLabel.underline = (this.model.isStatic === true);\r\n        }\r\n    };\r\n\r\n    UMLPartView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        UMLGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLConnectorView\r\n     * @constructor\r\n     * @extends UMLUndirectedRelationshipView\r\n     */\r\n    function UMLConnectorView() {\r\n        UMLUndirectedRelationshipView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLUndirectedRelationshipView\r\n    UMLConnectorView.prototype = Object.create(UMLUndirectedRelationshipView.prototype);\r\n    UMLConnectorView.prototype.constructor = UMLConnectorView;\r\n\r\n    UMLConnectorView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLModelElement);\r\n    };\r\n\r\n    UMLConnectorView.prototype.update = function (canvas) {\r\n        UMLUndirectedRelationshipView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            // nameLabel\r\n            var text = "";\r\n            if (this.model.name) {\r\n                text += this.model.getString(this.showVisibility);\r\n            }\r\n            if (this.model.type && this.showType) {\r\n                text += ": " + this.model.type.name;\r\n            }\r\n            this.nameLabel.text = text;\r\n            this.nameLabel.visible = (text.length > 0);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * UMLCollaborationView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLCollaborationView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.iconRatio = USECASE_RATIO_PERCENT;\r\n\r\n        /** @member {UMLTemplateParameterCompartmentView} */\r\n        this.templateParameterCompartment = new UMLTemplateParameterCompartmentView();\r\n        this.templateParameterCompartment.selectable = Core.SK_PROPAGATE;\r\n        this.templateParameterCompartment.parentStyle = true;\r\n        this.addSubView(this.templateParameterCompartment);\r\n\r\n        this.fillColor = PreferenceManager.get("uml.collaboration.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLCollaborationView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLCollaborationView.prototype.constructor = UMLCollaborationView;\r\n\r\n    UMLCollaborationView.prototype.update = function (canvas) {\r\n        // templateParameterCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.templateParameterCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.templateParameterCompartment, \'model\', this.model);\r\n        }\r\n        if (this.model) {\r\n            if (this.model.templateParameters && this.model.templateParameters.length > 0) {\r\n                this.templateParameterCompartment.visible = true;\r\n            } else {\r\n                this.templateParameterCompartment.visible = false;\r\n            }\r\n        }\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLCollaborationView.prototype.drawShadowAsCanonicalForm = function (canvas, showLabel) {\r\n        canvas.fillEllipse(\r\n            this.mainRect.x1 + SHADOW_OFFSET,\r\n            this.mainRect.y1 + SHADOW_OFFSET,\r\n            this.mainRect.x2 + SHADOW_OFFSET,\r\n            this.mainRect.y2 + SHADOW_OFFSET);\r\n    };\r\n\r\n    UMLCollaborationView.prototype.drawShadowAsDecorationForm = function (canvas) {\r\n        canvas.fillRect(\r\n            this.mainRect.x1 + SHADOW_OFFSET,\r\n            this.mainRect.y1 + SHADOW_OFFSET,\r\n            this.mainRect.x2 + SHADOW_OFFSET,\r\n            this.mainRect.y2 + SHADOW_OFFSET\r\n        );\r\n    };\r\n\r\n    UMLCollaborationView.prototype.sizeObjectAsCanonicalForm = function (canvas) {\r\n        UMLGeneralNodeView.prototype.sizeObjectAsCanonicalForm.call(this, canvas);\r\n        // Calculating minimum size <= minimum Nampcompartment\'s circumscription size\r\n        // rectangle\'s circumscription\'s height and width are Sqrt(2) times of rectangle\'s height and width\r\n        var w = Math.max(Math.trunc(Math.sqrt(2) * this.nameCompartment.minWidth), COLLABORATION_MINWIDTH);\r\n        var h = Math.max(Math.trunc(Math.sqrt(2) * this.nameCompartment.minHeight), COLLABORATION_MINHEIGHT);\r\n        if (this.templateParameterCompartment.visible) {\r\n            this.templateParameterCompartment.size(canvas);\r\n            w = Math.max(w, this.templateParameterCompartment.minWidth);\r\n            w = w + TEMPLATEPARAMETERCOMPARTMENT_LEFT_MARGIN + TEMPLATEPARAMETERCOMPARTMENT_RIGHT_OCCUPY;\r\n            h = h + this.templateParameterCompartment.minHeight - TEMPLATEPARAMETERCOMPARTMENT_OVERLAP;\r\n        }\r\n        this.minWidth = w;\r\n        this.minHeight = h;\r\n    };\r\n\r\n    UMLCollaborationView.prototype.sizeAsIconicForm = function (canvas, showLabel) {\r\n        if (this.hasStereotypeIcon()) {\r\n            UMLGeneralNodeView.prototype.sizeAsIconicForm.call(this, canvas, showLabel);\r\n        } else {\r\n            var sz = this.getSizeOfAllCompartments(canvas);\r\n            this.minWidth = Math.max(sz.x, USECASE_ICON_MINWIDTH);\r\n            this.minHeight = USECASE_ICON_MINHEIGHT + sz.y;\r\n        }\r\n    };\r\n\r\n    UMLCollaborationView.prototype.arrangeObjectAsCanonicalForm = function (canvas) {\r\n        UMLGeneralNodeView.prototype.arrangeObjectAsCanonicalForm.call(this, canvas);\r\n        // Arranging view objects.\r\n        if (this.templateParameterCompartment.visible) {\r\n            this.templateParameterCompartment.left = this.getRight() - TEMPLATEPARAMETERCOMPARTMENT_RIGHT_OCCUPY - this.templateParameterCompartment.minWidth;\r\n            this.templateParameterCompartment.top = this.top;\r\n            this.templateParameterCompartment.setRight(this.getRight());\r\n            this.templateParameterCompartment.arrange(canvas);\r\n            this.nameCompartment.left = this.left;\r\n            this.nameCompartment.top = ((this.getBottom() + this.top + this.templateParameterCompartment.height - TEMPLATEPARAMETERCOMPARTMENT_OVERLAP) / 2) - (this.nameCompartment.height / 2);\r\n            this.nameCompartment.setRight(this.getRight() - TEMPLATEPARAMETERCOMPARTMENT_RIGHT_OCCUPY);\r\n            this.nameCompartment.arrange(canvas);\r\n            var x1 = this.left,\r\n                y1 = this.top + this.templateParameterCompartment.height - TEMPLATEPARAMETERCOMPARTMENT_OVERLAP,\r\n                x2 = this.getRight() - TEMPLATEPARAMETERCOMPARTMENT_RIGHT_OCCUPY,\r\n                y2 = this.getBottom();\r\n            this.mainRect.setRect(x1, y1, x2, y2);\r\n        } else {\r\n            this.nameCompartment.left = this.left;\r\n            this.nameCompartment.top = ((this.getBottom() + this.top) / 2) - (this.nameCompartment.height / 2);\r\n            this.nameCompartment.setRight(this.getRight());\r\n            this.nameCompartment.arrange(canvas);\r\n        }\r\n    };\r\n\r\n    UMLCollaborationView.prototype.drawIcon = function (canvas, rect) {\r\n        if (this.hasStereotypeIcon()) {\r\n            var ratioRect = this.computeIconRect(rect, (this.model.stereotype.icon.width / this.model.stereotype.icon.height) * 100);\r\n            drawImage(canvas, ratioRect, this.model.stereotype.icon);\r\n        } else {\r\n            var r = rect;\r\n            var x, y;\r\n            var w = r.x2 - r.x1;\r\n            var h = r.y2 - r.y1;\r\n            var rr = w * 100 / h;\r\n            var ir = USECASE_ICON_MINWIDTH * 100 / USECASE_ICON_MINHEIGHT;\r\n            if (rr >= ir) {\r\n                h = (r.y2 - r.y1);\r\n                w = h * ir / 100;\r\n                x = r.x1 + (r.x2 - r.x1 - w) / 2;\r\n                y = r.y1;\r\n            } else {\r\n                w = (r.x2 - r.x1);\r\n                h = w * 100 / ir;\r\n                y = r.y1 + (r.y2 - r.y1 - h) / 2;\r\n                x = r.x1;\r\n            }\r\n            canvas.fillEllipse(x, y, x + w, y + h);\r\n            canvas.ellipse(x, y, x + w, y + h, [5]);\r\n        }\r\n    };\r\n\r\n    UMLCollaborationView.prototype.drawCommon = function (canvas) {\r\n        if (this.stereotypeDisplay === UML.SD_DECORATION || this.stereotypeDisplay === UML.SD_DECORATION_LABEL) {\r\n            canvas.fillRect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n            canvas.rect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n        }\r\n    };\r\n\r\n    UMLCollaborationView.prototype.drawAsCanonicalForm = function (canvas) {\r\n        var r = new Rect();\r\n        if (this.templateParameterCompartment.visible) {\r\n            r.x1 = this.left;\r\n            r.y1 = this.top + this.templateParameterCompartment.height - TEMPLATEPARAMETERCOMPARTMENT_OVERLAP;\r\n            r.x2 = this.getRight() - TEMPLATEPARAMETERCOMPARTMENT_RIGHT_OCCUPY;\r\n            r.y2 = this.getBottom();\r\n        } else {\r\n            r.setRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        }\r\n        canvas.fillEllipse(r.x1, r.y1, r.x2, r.y2);\r\n        canvas.ellipse(r.x1, r.y1, r.x2, r.y2, [5]);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLCollaborationUseView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLCollaborationUseView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("uml.collaborationuse.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLCollaborationUseView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLCollaborationUseView.prototype.constructor = UMLCollaborationUseView;\r\n\r\n    UMLCollaborationUseView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model.type && this.model.type.name) {\r\n            this.nameCompartment.nameLabel.text = this.model.name + ": " + this.model.type.name;\r\n        }\r\n    };\r\n\r\n    UMLCollaborationUseView.prototype.drawShadowAsCanonicalForm = function (canvas) {\r\n        canvas.fillEllipse(\r\n            this.mainRect.x1 + SHADOW_OFFSET,\r\n            this.mainRect.y1 + SHADOW_OFFSET,\r\n            this.mainRect.x2 + SHADOW_OFFSET,\r\n            this.mainRect.y2 + SHADOW_OFFSET);\r\n    };\r\n\r\n    UMLCollaborationUseView.prototype.sizeObject = function (canvas) {\r\n        UMLGeneralNodeView.prototype.sizeObject.call(this, canvas);\r\n        // Calculating minimum size <= minimum Nampcompartment\'s circumscription size\r\n        // rectangle\'s circumscription\'s height and width are Sqrt(2) times of rectangle\'s height and width\r\n        var w = Math.max(Math.trunc(Math.sqrt(2) * this.nameCompartment.minWidth), COLLABORATION_MINWIDTH);\r\n        var h = Math.max(Math.trunc(Math.sqrt(2) * this.nameCompartment.minHeight), COLLABORATION_MINHEIGHT);\r\n        this.minWidth = w;\r\n        this.minHeight = h;\r\n    };\r\n\r\n    UMLCollaborationUseView.prototype.arrangeObject = function (canvas) {\r\n        UMLGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.nameCompartment.left = this.left;\r\n        this.nameCompartment.top = ((this.getBottom() + this.top) / 2) - (this.nameCompartment.height / 2);\r\n        this.nameCompartment.setRight(this.getRight());\r\n        this.nameCompartment.arrange(canvas);\r\n    };\r\n\r\n    UMLCollaborationUseView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.fillEllipse(r.x1, r.y1, r.x2, r.y2);\r\n        canvas.ellipse(r.x1, r.y1, r.x2, r.y2, [5]);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLRoleBindingView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLRoleBindingView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        this.lineMode = Core.LM_DOT;\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.roleNameLabel = new EdgeLabelView();\r\n        this.roleNameLabel.hostEdge = this;\r\n        this.roleNameLabel.edgePosition = Core.EP_HEAD;\r\n        this.roleNameLabel.alpha = -Math.PI / 6;\r\n        this.roleNameLabel.distance = 30;\r\n        this.addSubView(this.roleNameLabel);\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLRoleBindingView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLRoleBindingView.prototype.constructor = UMLRoleBindingView;\r\n\r\n    UMLRoleBindingView.prototype.update = function (canvas) {\r\n        if (this.model) {\r\n            this.roleNameLabel.visible = (this.model.roleName && this.model.roleName.length > 0);\r\n            if (this.model.roleName) {\r\n                this.roleNameLabel.text = this.model.roleName;\r\n            }\r\n            // roleNameLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.roleNameLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.roleNameLabel, \'model\', this.model);\r\n            }\r\n        }\r\n        UMLGeneralEdgeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLRoleBindingView.prototype.canConnectTo = function (view, isTail) {\r\n        return (isTail && view.model instanceof type.UMLCollaborationUse) ||\r\n               (!isTail && view.model instanceof type.UMLAttribute);\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                           OBJECT DIAGRAM VIEWS                         *\r\n     *                                                                        *\r\n     *************************************************************************/\r\n\r\n    /**\r\n     * UMLObjectDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLObjectDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLObjectDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLObjectDiagram.prototype.constructor = UMLObjectDiagram;\r\n\r\n    UMLObjectDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.UMLConstraint) ||\r\n               (model instanceof type.UMLClassifier) ||\r\n               (model instanceof type.UMLInstance) ||\r\n               (model instanceof type.UMLDependency) ||\r\n               (model instanceof type.UMLLink);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLSlotView\r\n     * @constructor\r\n     * @extends LabelView\r\n     */\r\n    function UMLSlotView() {\r\n        LabelView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_NONE;\r\n        this.parentStyle = true;\r\n        this.horizontalAlignment = Graphics.AL_LEFT;\r\n    }\r\n    // inherits from LabelView\r\n    UMLSlotView.prototype = Object.create(LabelView.prototype);\r\n    UMLSlotView.prototype.constructor = UMLSlotView;\r\n\r\n    UMLSlotView.prototype.update = function (canvas) {\r\n        var options = {\r\n            showVisibility    : true,\r\n            stereotypeDisplay : UML.SD_LABEL,\r\n            showProperty      : true,\r\n            showType          : true\r\n        };\r\n        if (this._parent && this._parent._parent) {\r\n            options.showVisibility    = this._parent._parent.showVisibility;\r\n            options.stereotypeDisplay = this._parent._parent.stereotypeDisplay;\r\n            options.showProperty      = this._parent._parent.showProperty;\r\n            options.showType          = this._parent._parent.showType;\r\n        }\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n        if (this.model) {\r\n            this.text = this.model.getString(options);\r\n        }\r\n        LabelView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    UMLSlotView.prototype.size = function (canvas) {\r\n        LabelView.prototype.size.call(this, canvas);\r\n        this.height = this.minHeight;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLSlotCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLSlotCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLSlotCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLSlotCompartmentView.prototype.constructor = UMLSlotCompartmentView;\r\n\r\n    UMLSlotCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.slots) {\r\n            var tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (var i = 0, len = this.model.slots.length; i < len; i++) {\r\n                var slot = this.model.slots[i];\r\n                var slotView = _.find(tempViews, function (v) { return v.model == slot; });\r\n                if (!slotView) {\r\n                    slotView = new UMLSlotView();\r\n                    slotView.model = slot;\r\n                    slotView._parent = this;\r\n                    // slotView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', slotView);\r\n                } else {\r\n                    this.addSubView(slotView);\r\n                }\r\n                slotView.setup(canvas);\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLObjectView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLObjectView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.containerChangeable = true;\r\n\r\n        /** @member {UMLSlotCompartmentView} */\r\n        this.slotCompartment = new UMLSlotCompartmentView();\r\n        this.slotCompartment.selectable = Core.SK_PROPAGATE;\r\n        this.slotCompartment.parentStyle = true;\r\n        this.addSubView(this.slotCompartment);\r\n\r\n        this.fillColor = PreferenceManager.get("uml.object.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLObjectView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLObjectView.prototype.constructor = UMLObjectView;\r\n\r\n    UMLObjectView.prototype.update = function (canvas) {\r\n        // slotCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.slotCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.slotCompartment, \'model\', this.model);\r\n        }\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameCompartment.nameLabel.text = this.model.getString(this);\r\n            if (this.model.slots && this.model.slots.length > 0) {\r\n                this.slotCompartment.visible = true;\r\n            } else {\r\n                this.slotCompartment.visible = false;\r\n            }\r\n            if (this.model.value !== null && this.model.value.length > 0) {\r\n                this.nameCompartment.namespaceLabel.text = this.model.value;\r\n                this.nameCompartment.namespaceLabel.visible = true;\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLObjectView.prototype.drawObject = function (canvas) {\r\n        UMLGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        if (this.model.isMultiInstance) {\r\n            canvas.rect(r.x1 + MULTI_INSTANCE_MARGIN, r.y1 + MULTI_INSTANCE_MARGIN, r.x2 + MULTI_INSTANCE_MARGIN, r.y2 + MULTI_INSTANCE_MARGIN);\r\n        }\r\n        canvas.fillRect(r.x1, r.y1, r.x2, r.y2);\r\n        canvas.rect(r.x1, r.y1, r.x2, r.y2);\r\n        if (this.model.classifier && this.model.classifier.isActive) {\r\n            canvas.line(this.left + CLASS_ACTIVE_VERTLINE_WIDTH, this.top, this.left + CLASS_ACTIVE_VERTLINE_WIDTH, this.getBottom());\r\n            canvas.line(this.getRight() - CLASS_ACTIVE_VERTLINE_WIDTH, this.top, this.getRight() - CLASS_ACTIVE_VERTLINE_WIDTH, this.getBottom());\r\n        }\r\n        if (this.slotCompartment.visible) {\r\n            canvas.line(\r\n                this.slotCompartment.left,\r\n                this.slotCompartment.top,\r\n                this.slotCompartment.getRight(),\r\n                this.slotCompartment.top);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLLinkView\r\n     * @constructor\r\n     * @extends UMLUndirectedRelationshipView\r\n     */\r\n    function UMLLinkView() {\r\n        UMLUndirectedRelationshipView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLUndirectedRelationshipView\r\n    UMLLinkView.prototype = Object.create(UMLUndirectedRelationshipView.prototype);\r\n    UMLLinkView.prototype.constructor = UMLLinkView;\r\n\r\n    UMLLinkView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLInstance);\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                         COMPONENT DIAGRAM VIEWS                        *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLComponentDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLComponentDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLComponentDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLComponentDiagram.prototype.constructor = UMLComponentDiagram;\r\n\r\n    UMLComponentDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.UMLConstraint) ||\r\n               (model instanceof type.UMLPackage) ||\r\n               (model instanceof type.UMLClassifier) ||\r\n               (model instanceof type.UMLInstance) ||\r\n               (model instanceof type.UMLPort) ||\r\n               (model instanceof type.UMLAttribute) ||\r\n               (model instanceof type.UMLGeneralization) ||\r\n               (model instanceof type.UMLDependency) ||\r\n               (model instanceof type.UMLInterfaceRealization) ||\r\n               (model instanceof type.UMLComponentRealization) ||\r\n               (model instanceof type.UMLAssociation) ||\r\n               (model instanceof type.UMLLink) ||\r\n               (model instanceof type.UMLConnector);\r\n    };\r\n\r\n    /**\r\n     * UMLArtifactViewMixin\r\n     * @mixin\r\n     */\r\n    var UMLArtifactViewMixin = {\r\n\r\n        sizeAsIconicForm: function (canvas, showLabel) {\r\n            var sz = this.getSizeOfAllCompartments(canvas);\r\n            this.minWidth = Math.max(sz.x, ARTIFACT_ICON_MINWIDTH);\r\n            this.minHeight = ARTIFACT_ICON_MINHEIGHT + sz.y;\r\n        },\r\n\r\n        drawShadowAsIconicForm: function (canvas) {\r\n            var w = this.iconRect.x2 - this.iconRect.x1,\r\n                h = this.iconRect.y2 - this.iconRect.y1,\r\n                x = this.iconRect.x2 - w * 30 / 100,\r\n                y = this.iconRect.y1 + w * 30 / 100;\r\n            canvas.fillPolygon([\r\n                new Point(this.iconRect.x1 + SHADOW_OFFSET, this.iconRect.y1 + SHADOW_OFFSET),\r\n                new Point(x + SHADOW_OFFSET, this.iconRect.y1 + SHADOW_OFFSET),\r\n                new Point(this.iconRect.x2 + SHADOW_OFFSET, y + SHADOW_OFFSET),\r\n                new Point(this.iconRect.x2 + SHADOW_OFFSET, this.iconRect.y2 + SHADOW_OFFSET),\r\n                new Point(this.iconRect.x1 + SHADOW_OFFSET, this.iconRect.y2 + SHADOW_OFFSET)]);\r\n        },\r\n\r\n        drawIcon: function (canvas, rect) {\r\n            var w = rect.x2 - rect.x1,\r\n                h = rect.y2 - rect.y1,\r\n                x = rect.x2 - w * 30 / 100,\r\n                y = rect.y1 + w * 30 / 100;\r\n            canvas.fillPolygon([new Point(rect.x1, rect.y1), new Point(x, rect.y1), new Point(rect.x2, y), new Point(rect.x2, rect.y2), new Point(rect.x1, rect.y2)]);\r\n            canvas.polygon([new Point(rect.x1, rect.y1), new Point(x, rect.y1), new Point(rect.x2, y), new Point(rect.x2, rect.y2), new Point(rect.x1, rect.y2)]);\r\n            canvas.polygon([new Point(x, rect.y1), new Point(x, y), new Point(rect.x2, y)]);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLArtifactView\r\n     * @constructor\r\n     * @mixes UMLArtifactViewMixin\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLArtifactView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n        this.iconRatio = ARTIFACT_RATIO_PERCENT;\r\n        // mixin UMLArtifactViewMixin\r\n        _.extend(UMLArtifactView.prototype, UMLArtifactViewMixin);\r\n\r\n        this.fillColor  = PreferenceManager.get("uml.artifact.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay  = PreferenceManager.get("uml.artifact.stereotypeDisplay", UML.SD_ICON);\r\n        this.suppressAttributes = PreferenceManager.get("uml.artifact.suppressAttributes", true);\r\n        this.suppressOperations = PreferenceManager.get("uml.artifact.suppressOperations", true);\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLArtifactView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLArtifactView.prototype.constructor = UMLArtifactView;\r\n\r\n    UMLArtifactView.prototype.getStereotypeLabelText = function () {\r\n        return "«artifact»";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLArtifactInstanceView\r\n     * @constructor\r\n     * @mixes UMLArtifactViewMixin\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLArtifactInstanceView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.iconRatio = ARTIFACT_RATIO_PERCENT;\r\n        this.containerChangeable = true;\r\n        // mixin UMLArtifactViewMixin\r\n        _.extend(UMLArtifactInstanceView.prototype, UMLArtifactViewMixin);\r\n\r\n        this.fillColor = PreferenceManager.get("uml.artifactinstance.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay = PreferenceManager.get("uml.artifact.stereotypeDisplay", UML.SD_ICON);\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLArtifactInstanceView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLArtifactInstanceView.prototype.constructor = UMLArtifactInstanceView;\r\n\r\n    UMLArtifactInstanceView.prototype.getStereotypeLabelText = function () {\r\n        return "«artifact»";\r\n    };\r\n\r\n    UMLArtifactInstanceView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameCompartment.nameLabel.text = this.model.getString(this);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * UMLComponentViewMixin\r\n     * @mixin\r\n     */\r\n    var UMLComponentViewMixin = {\r\n\r\n        sizeAsCanonicalForm: function (canvas, showLabel) {\r\n            var sz = this.getSizeOfAllCompartments(canvas);\r\n            this.minWidth = Math.max(sz.x + COMPONENT_STATIC_MARGIN, COMPONENT_MINWIDTH);\r\n            this.minHeight = Math.max(sz.y, COMPONENT_MINHEIGHT);\r\n        },\r\n\r\n        sizeAsIconicForm: function (canvas, showLabel) {\r\n            var sz = this.getSizeOfAllCompartments(canvas);\r\n            this.minWidth = Math.max(sz.x, COMPONENT_ICON_MINWIDTH);\r\n            this.minHeight = COMPONENT_ICON_MINHEIGHT + sz.y;\r\n        },\r\n\r\n        arrangeCommon: function (canvas) {\r\n            UMLGeneralNodeView.prototype.arrangeCommon.call(this, canvas);\r\n            if (this.stereotypeDisplay == UML.SD_NONE || this.stereotypeDisplay == UML.SD_LABEL) {\r\n                this.mainRect.setRect(this.left + COMPONENT_STATIC_MARGIN, this.top, this.getRight(), this.getBottom());\r\n            }\r\n        },\r\n\r\n        drawShadowAsCanonicalForm: function (canvas) {\r\n            canvas.fillRect(\r\n                this.left + COMPONENT_RECT_INDENT + SHADOW_OFFSET,\r\n                this.top + SHADOW_OFFSET,\r\n                this.getRight() + SHADOW_OFFSET,\r\n                this.getBottom() + SHADOW_OFFSET);\r\n        },\r\n\r\n        drawCommon: function (canvas) {\r\n            if (this.stereotypeDisplay == UML.SD_DECORATION) {\r\n                canvas.fillRect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n                canvas.rect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n            }\r\n        },\r\n\r\n        drawIcon: function (canvas, rect) {\r\n            canvas.fillRect(rect.x1 + COMPONENT_RECT_INDENT, rect.y1, rect.x2, rect.y2);\r\n            canvas.rect(rect.x1 + COMPONENT_RECT_INDENT, rect.y1, rect.x2, rect.y2);\r\n            canvas.fillRect(rect.x1, rect.y1 + 7, rect.x1 + 20, rect.y1 + 17);\r\n            canvas.rect(rect.x1, rect.y1 + 7, rect.x1 + 20, rect.y1 + 17);\r\n            canvas.fillRect(rect.x1, rect.y1 + 27, rect.x1 + 20, rect.y1 + 37);\r\n            canvas.rect(rect.x1, rect.y1 + 27, rect.x1 + 20, rect.y1 + 37);\r\n        },\r\n\r\n        drawDecorationIcon: function (canvas, rect) {\r\n            canvas.fillRect(rect.x1 + 9, rect.y1 + 5,  rect.x1 + 22, rect.y1 + 21);\r\n            canvas.rect(rect.x1 + 9, rect.y1 + 5,  rect.x1 + 22, rect.y1 + 21);\r\n            canvas.fillRect(rect.x1 + 6, rect.y1 + 8,  rect.x1 + 13, rect.y1 + 12);\r\n            canvas.rect(rect.x1 + 6, rect.y1 + 8,  rect.x1 + 13, rect.y1 + 12);\r\n            canvas.fillRect(rect.x1 + 6, rect.y1 + 14, rect.x1 + 13, rect.y1 + 18);\r\n            canvas.rect(rect.x1 + 6, rect.y1 + 14, rect.x1 + 13, rect.y1 + 18);\r\n        },\r\n\r\n        drawAsCanonicalForm: function (canvas, showLabel) {\r\n            UMLGeneralNodeView.prototype.drawAsCanonicalForm.call(this, canvas, showLabel);\r\n            canvas.fillRect(this.left + COMPONENT_RECT_INDENT, this.top, this.getRight(), this.getBottom());\r\n            canvas.rect(this.left + COMPONENT_RECT_INDENT, this.top, this.getRight(), this.getBottom());\r\n            canvas.fillRect(this.left, this.top + 7, this.left + 20, this.top + 17);\r\n            canvas.rect(this.left, this.top + 7, this.left + 20, this.top + 17);\r\n            canvas.fillRect(this.left, this.top + 27, this.left + 20, this.top + 37);\r\n            canvas.rect(this.left, this.top + 27, this.left + 20, this.top + 37);\r\n        },\r\n\r\n        drawAsDecorationForm: function (canvas, showLabel) {\r\n            canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n            UMLGeneralNodeView.prototype.drawAsDecorationForm.call(this, canvas, showLabel);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLComponentView\r\n     * @constructor\r\n     * @mixes UMLComponentViewMixin\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLComponentView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n\r\n        // mixin UMLComponentViewMixin\r\n        _.extend(UMLComponentView.prototype, UMLComponentViewMixin);\r\n\r\n        this.fillColor = PreferenceManager.get("uml.component.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay  = PreferenceManager.get("uml.component.stereotypeDisplay", UML.SD_LABEL);\r\n        this.suppressAttributes = PreferenceManager.get("uml.component.suppressAttributes", true);\r\n        this.suppressOperations = PreferenceManager.get("uml.component.suppressOperations", true);\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLComponentView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLComponentView.prototype.constructor = UMLComponentView;\r\n\r\n\r\n    /**\r\n     * UMLComponentInstanceView\r\n     * @constructor\r\n     * @mixes UMLComponentViewMixin\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLComponentInstanceView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.containerChangeable = true;\r\n        // mixin UMLComponentViewMixin\r\n        _.extend(UMLComponentInstanceView.prototype, UMLComponentViewMixin);\r\n\r\n        this.fillColor = PreferenceManager.get("uml.componentinstance.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay  = PreferenceManager.get("uml.component.stereotypeDisplay", UML.SD_LABEL);\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLComponentInstanceView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLComponentInstanceView.prototype.constructor = UMLComponentInstanceView;\r\n\r\n    UMLComponentInstanceView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameCompartment.nameLabel.text = this.model.getString(this);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLComponentRealizationView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLComponentRealizationView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_TRIANGLE;\r\n        this.lineMode = Core.LM_DOT;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLComponentRealizationView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLComponentRealizationView.prototype.constructor = UMLComponentRealizationView;\r\n\r\n    UMLComponentRealizationView.prototype.canConnectTo = function (view, isTail) {\r\n        return (isTail && view.model instanceof type.UMLClassifier) ||\r\n               (!isTail && view.model instanceof type.UMLComponent);\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                        DEPLOYMENT DIAGRAM VIEWS                        *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLDeploymentDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLDeploymentDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLDeploymentDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLDeploymentDiagram.prototype.constructor = UMLDeploymentDiagram;\r\n\r\n    UMLDeploymentDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.UMLConstraint) ||\r\n               (model instanceof type.UMLPackage) ||\r\n               (model instanceof type.UMLClassifier) ||\r\n               (model instanceof type.UMLInstance) ||\r\n               (model instanceof type.UMLPort) ||\r\n               (model instanceof type.UMLAttribute) ||\r\n               (model instanceof type.UMLGeneralization) ||\r\n               (model instanceof type.UMLDependency) ||\r\n               (model instanceof type.UMLInterfaceRealization) ||\r\n               (model instanceof type.UMLComponentRealization) ||\r\n               (model instanceof type.UMLAssociation) ||\r\n               (model instanceof type.UMLLink) ||\r\n               (model instanceof type.UMLConnector);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLNodeViewMixin\r\n     * @mixin\r\n     */\r\n    var UMLNodeViewMixin = {\r\n\r\n        sizeAsCanonicalForm: function (canvas, showLabel) {\r\n            var sz = this.getSizeOfAllCompartments(canvas);\r\n            this.minWidth = Math.max(sz.x + NODE_STATIC_MARGIN, NODE_MINWIDTH);\r\n            this.minHeight = Math.max(sz.y + NODE_STATIC_MARGIN, NODE_MINHEIGHT);\r\n        },\r\n\r\n        sizeAsIconicForm: function (canvas, showLabel) {\r\n            var sz = this.getSizeOfAllCompartments(canvas);\r\n            this.minWidth = Math.max(sz.x, NODE_MINWIDTH);\r\n            this.minHeight = NODE_MINHEIGHT + sz.y;\r\n        },\r\n\r\n        arrangeCommon: function (canvas) {\r\n            UMLGeneralNodeView.prototype.arrangeCommon.call(this, canvas);\r\n            if (this.stereotypeDisplay == UML.SD_NONE || this.stereotypeDisplay == UML.SD_LABEL) {\r\n                this.mainRect.setRect(this.left, this.top + NODE_STATIC_MARGIN, this.getRight() - NODE_STATIC_MARGIN, this.getBottom());\r\n            }\r\n        },\r\n\r\n        drawShadowAsCanonicalForm: function (canvas) {\r\n            var r = this.getRight() - 1, b = this.getBottom()- 1;\r\n            canvas.fillPolygon([\r\n                new Point(this.left + SHADOW_OFFSET, this.top + NODE_STATIC_MARGIN + SHADOW_OFFSET),\r\n                new Point(r - NODE_STATIC_MARGIN + SHADOW_OFFSET, this.top + NODE_STATIC_MARGIN + SHADOW_OFFSET),\r\n                new Point(r - NODE_STATIC_MARGIN + SHADOW_OFFSET, b + SHADOW_OFFSET),\r\n                new Point(this.left + SHADOW_OFFSET, b + SHADOW_OFFSET)]);\r\n            canvas.fillPolygon([\r\n                new Point(this.left + SHADOW_OFFSET, this.top + NODE_STATIC_MARGIN + SHADOW_OFFSET),\r\n                new Point(this.left + NODE_STATIC_MARGIN + SHADOW_OFFSET, this.top + SHADOW_OFFSET),\r\n                new Point(r + SHADOW_OFFSET, this.top + SHADOW_OFFSET),\r\n                new Point(r - NODE_STATIC_MARGIN + SHADOW_OFFSET, this.top + NODE_STATIC_MARGIN + SHADOW_OFFSET)]);\r\n            canvas.fillPolygon([\r\n                new Point(r + SHADOW_OFFSET, this.top + SHADOW_OFFSET),\r\n                new Point(r - NODE_STATIC_MARGIN + SHADOW_OFFSET, this.top + NODE_STATIC_MARGIN + SHADOW_OFFSET),\r\n                new Point(r - NODE_STATIC_MARGIN + SHADOW_OFFSET, b + SHADOW_OFFSET),\r\n                new Point(r + SHADOW_OFFSET, b - NODE_STATIC_MARGIN + SHADOW_OFFSET)]);\r\n        },\r\n\r\n        drawShadowAsIconicForm: function (canvas) {\r\n            var r = this.iconRect.x2 - 1, b = this.iconRect.y2 - 1;\r\n            canvas.fillPolygon([\r\n                new Point(this.iconRect.x1 + SHADOW_OFFSET, this.iconRect.y1+NODE_STATIC_MARGIN + SHADOW_OFFSET),\r\n                new Point(r-NODE_STATIC_MARGIN + SHADOW_OFFSET, this.iconRect.y1+NODE_STATIC_MARGIN + SHADOW_OFFSET),\r\n                new Point(r-NODE_STATIC_MARGIN + SHADOW_OFFSET, b + SHADOW_OFFSET),\r\n                new Point(this.iconRect.x1 + SHADOW_OFFSET, b + SHADOW_OFFSET)]);\r\n            canvas.fillPolygon([\r\n                new Point(this.iconRect.x1 + SHADOW_OFFSET, this.iconRect.y1+NODE_STATIC_MARGIN + SHADOW_OFFSET),\r\n                new Point(this.iconRect.x1+NODE_STATIC_MARGIN + SHADOW_OFFSET, this.iconRect.y1 + SHADOW_OFFSET),\r\n                new Point(r + SHADOW_OFFSET, this.iconRect.y1 + SHADOW_OFFSET),\r\n                new Point(r-NODE_STATIC_MARGIN + SHADOW_OFFSET, this.iconRect.y1+NODE_STATIC_MARGIN + SHADOW_OFFSET)]);\r\n            canvas.fillPolygon([\r\n                new Point(r + SHADOW_OFFSET, this.iconRect.y1 + SHADOW_OFFSET),\r\n                new Point(r-NODE_STATIC_MARGIN + SHADOW_OFFSET, this.iconRect.y1+NODE_STATIC_MARGIN + SHADOW_OFFSET),\r\n                new Point(r-NODE_STATIC_MARGIN + SHADOW_OFFSET, b + SHADOW_OFFSET),\r\n                new Point(r + SHADOW_OFFSET, b-NODE_STATIC_MARGIN + SHADOW_OFFSET)]);\r\n        },\r\n\r\n        drawCommon: function (canvas) {\r\n            if (this.stereotypeDisplay == UML.SD_DECORATION) {\r\n                canvas.fillRect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n                canvas.rect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n            }\r\n        },\r\n\r\n        drawIcon: function (canvas, rect) {\r\n            var r = rect.x2 - 1, b = rect.y2 - 1;\r\n            canvas.fillPolygon([new Point(rect.x1, rect.y1+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, rect.y1+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, b), new Point(rect.x1, b)]);\r\n            canvas.fillPolygon([new Point(rect.x1, rect.y1+NODE_STATIC_MARGIN), new Point(rect.x1+NODE_STATIC_MARGIN, rect.y1), new Point(r, rect.y1), new Point(r-NODE_STATIC_MARGIN, rect.y1+NODE_STATIC_MARGIN)]);\r\n            canvas.fillPolygon([new Point(r, rect.y1), new Point(r-NODE_STATIC_MARGIN, rect.y1+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, b), new Point(r, b-NODE_STATIC_MARGIN)]);\r\n            canvas.polygon([new Point(rect.x1, rect.y1+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, rect.y1+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, b), new Point(rect.x1, b)]);\r\n            canvas.polygon([new Point(rect.x1, rect.y1+NODE_STATIC_MARGIN), new Point(rect.x1+NODE_STATIC_MARGIN, rect.y1), new Point(r, rect.y1), new Point(r-NODE_STATIC_MARGIN, rect.y1+NODE_STATIC_MARGIN)]);\r\n            canvas.polygon([new Point(r, rect.y1), new Point(r-NODE_STATIC_MARGIN, rect.y1+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, b), new Point(r, b-NODE_STATIC_MARGIN)]);\r\n        },\r\n\r\n        drawDecorationIcon: function (canvas, rect) {\r\n            canvas.rect(rect.x1 + 3, rect.y1 + 10, rect.x1 + 19, rect.y1 + 20);\r\n            canvas.polygon([new Point(rect.x1 + 3, rect.y1 + 10), new Point(rect.x1 + 8, rect.y1 + 5), new Point(rect.x1 + 24, rect.y1 + 5), new Point(rect.x1 + 19, rect.y1 + 10)]);\r\n            canvas.polygon([new Point(rect.x1 + 19, rect.y1 + 10), new Point(rect.x1 + 24, rect.y1 + 5), new Point(rect.x1 + 24, rect.y1 + 15), new Point(rect.x1 + 19, rect.y1 + 20)]);\r\n        },\r\n\r\n        drawAsCanonicalForm: function (canvas) {\r\n            UMLGeneralNodeView.prototype.drawAsCanonicalForm.call(this, canvas);\r\n            var r = this.getRight() - 1, b = this.getBottom()- 1;\r\n            canvas.fillPolygon([new Point(this.left, this.top+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, this.top+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, b), new Point(this.left, b)]);\r\n            canvas.fillPolygon([new Point(this.left, this.top+NODE_STATIC_MARGIN), new Point(this.left+NODE_STATIC_MARGIN, this.top), new Point(r, this.top), new Point(r-NODE_STATIC_MARGIN, this.top+NODE_STATIC_MARGIN)]);\r\n            canvas.fillPolygon([new Point(r, this.top), new Point(r-NODE_STATIC_MARGIN, this.top+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, b), new Point(r, b-NODE_STATIC_MARGIN)]);\r\n            canvas.polygon([new Point(this.left, this.top+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, this.top+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, b), new Point(this.left, b)]);\r\n            canvas.polygon([new Point(this.left, this.top+NODE_STATIC_MARGIN), new Point(this.left+NODE_STATIC_MARGIN, this.top), new Point(r, this.top), new Point(r-NODE_STATIC_MARGIN, this.top+NODE_STATIC_MARGIN)]);\r\n            canvas.polygon([new Point(r, this.top), new Point(r-NODE_STATIC_MARGIN, this.top+NODE_STATIC_MARGIN), new Point(r-NODE_STATIC_MARGIN, b), new Point(r, b-NODE_STATIC_MARGIN)]);\r\n        },\r\n\r\n        drawAsDecorationForm: function (canvas, showLabel) {\r\n            canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n            UMLGeneralNodeView.prototype.drawAsDecorationForm.call(this, canvas, showLabel);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLNodeView\r\n     * @constructor\r\n     * @mixes UMLNodeViewMixin\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLNodeView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n\r\n        this.iconRatio = NODE_RATIO_PERCENT;\r\n        // mixin UMLNodeViewMixin\r\n        _.extend(UMLNodeView.prototype, UMLNodeViewMixin);\r\n\r\n        this.fillColor = PreferenceManager.get("uml.node.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay  = PreferenceManager.get("uml.node.stereotypeDisplay", UML.SD_LABEL);\r\n        this.suppressAttributes = PreferenceManager.get("uml.node.suppressAttributes", true);\r\n        this.suppressOperations = PreferenceManager.get("uml.node.suppressOperations", true);\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLNodeView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLNodeView.prototype.constructor = UMLNodeView;\r\n\r\n\r\n    /**\r\n     * UMLNodeInstanceView\r\n     * @constructor\r\n     * @mixes UMLNodeViewMixin\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLNodeInstanceView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.iconRatio = NODE_RATIO_PERCENT;\r\n        this.containerChangeable = true;\r\n        // mixin UMLNodeViewMixin\r\n        _.extend(UMLNodeInstanceView.prototype, UMLNodeViewMixin);\r\n\r\n        this.fillColor = PreferenceManager.get("uml.nodeinstance.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay  = PreferenceManager.get("uml.node.stereotypeDisplay", UML.SD_LABEL);\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLNodeInstanceView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLNodeInstanceView.prototype.constructor = UMLNodeInstanceView;\r\n\r\n    UMLNodeInstanceView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameCompartment.nameLabel.text = this.model.getString(this);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLDeploymentView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLDeploymentView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        this.lineMode = Core.LM_DOT;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLDeploymentView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLDeploymentView.prototype.constructor = UMLDeploymentView;\r\n\r\n    UMLDeploymentView.prototype.update = function (canvas) {\r\n        UMLGeneralEdgeView.prototype.update.call(this, canvas);\r\n        this.stereotypeLabel.visible = true;\r\n        this.stereotypeLabel.text = "«deploy»";\r\n    };\r\n\r\n    UMLDeploymentView.prototype.canConnectTo = function (view, isTail) {\r\n        return (isTail && view.model instanceof type.UMLClassifier) ||\r\n               (!isTail && view.model instanceof type.UMLNode);\r\n    };\r\n\r\n    /**\r\n     * UMLCommunicationPathView\r\n     * @constructor\r\n     * @extends UMLAssociationView\r\n     */\r\n    function UMLCommunicationPathView() {\r\n        UMLAssociationView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLAssociationView\r\n    UMLCommunicationPathView.prototype = Object.create(UMLAssociationView.prototype);\r\n    UMLCommunicationPathView.prototype.constructor = UMLCommunicationPathView;\r\n\r\n    UMLCommunicationPathView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLNode);\r\n    };\r\n\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                         USE-CASE DIAGRAM VIEWS                         *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLUseCaseDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLUseCaseDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLUseCaseDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLUseCaseDiagram.prototype.constructor = UMLUseCaseDiagram;\r\n\r\n    UMLUseCaseDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.UMLConstraint) ||\r\n               (model instanceof type.UMLPackage) ||\r\n               (model instanceof type.UMLClassifier) ||\r\n               (model instanceof type.UMLUseCaseSubject) ||\r\n               (model instanceof type.UMLInstance) ||\r\n               (model instanceof type.UMLGeneralization) ||\r\n               (model instanceof type.UMLDependency) ||\r\n               (model instanceof type.UMLInterfaceRealization) ||\r\n               (model instanceof type.UMLComponentRealization) ||\r\n               (model instanceof type.UMLAssociation) ||\r\n               (model instanceof type.UMLLink) ||\r\n               (model instanceof type.UMLConnector);\r\n    };\r\n\r\n    UMLUseCaseDiagram.prototype.layout = function (direction, separations) {\r\n        if (!direction) {\r\n            direction = Core.DIRECTION_RL;\r\n        }\r\n        UMLDiagram.prototype.layout.call(this, direction, separations);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLExtensionPointView\r\n     * @constructor\r\n     * @extends LabelView\r\n     */\r\n    function UMLExtensionPointView() {\r\n        LabelView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_NONE;\r\n        this.parentStyle = true;\r\n        this.horizontalAlignment = Graphics.AL_LEFT;\r\n    }\r\n    // inherits from LabelView\r\n    UMLExtensionPointView.prototype = Object.create(LabelView.prototype);\r\n    UMLExtensionPointView.prototype.constructor = UMLExtensionPointView;\r\n\r\n    UMLExtensionPointView.prototype.update = function (canvas) {\r\n        var options = {\r\n            stereotypeDisplay : UML.SD_LABEL,\r\n            showProperty      : true\r\n        };\r\n        if (this._parent && this._parent._parent) {\r\n            options.stereotypeDisplay = this._parent._parent.stereotypeDisplay;\r\n            options.showProperty      = this._parent._parent.showProperty;\r\n        }\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n        if (this.model) {\r\n            this.text = this.model.getString(options);\r\n        }\r\n        LabelView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLExtensionPointView.prototype.size = function (canvas) {\r\n        LabelView.prototype.size.call(this, canvas);\r\n        this.height = this.minHeight;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLExtensionPointCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLExtensionPointCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLExtensionPointCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLExtensionPointCompartmentView.prototype.constructor = UMLExtensionPointCompartmentView;\r\n\r\n    UMLExtensionPointCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.extensionPoints) {\r\n            var tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (var i = 0, len = this.model.extensionPoints.length; i < len; i++) {\r\n                var ep = this.model.extensionPoints[i];\r\n                var epView = _.find(tempViews, function (v) { return v.model == ep; });\r\n                if (!epView) {\r\n                    epView = new UMLExtensionPointView();\r\n                    epView.model = ep;\r\n                    epView._parent = this;\r\n                    // epView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', epView);\r\n                } else {\r\n                    this.addSubView(epView);\r\n                }\r\n                epView.setup(canvas);\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLUseCaseView\r\n     * @constructor\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLUseCaseView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n        this.iconRatio = USECASE_RATIO_PERCENT;\r\n\r\n        /** @member {UMLExtensionPointCompartmentView} */\r\n        this.extensionPointCompartment = new UMLExtensionPointCompartmentView();\r\n        this.extensionPointCompartment.parentStyle = true;\r\n        this.addSubView(this.extensionPointCompartment);\r\n\r\n        this.fillColor = PreferenceManager.get("uml.usecase.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay  = PreferenceManager.get("uml.usecase.stereotypeDisplay", UML.SD_LABEL);\r\n        this.suppressAttributes = PreferenceManager.get("uml.usecase.suppressAttributes", true);\r\n        this.suppressOperations = PreferenceManager.get("uml.usecase.suppressOperations", true);\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLUseCaseView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLUseCaseView.prototype.constructor = UMLUseCaseView;\r\n\r\n    UMLUseCaseView.prototype.getAllCompartments = function () {\r\n        return [\r\n            this.nameCompartment,\r\n            this.attributeCompartment,\r\n            this.operationCompartment,\r\n            this.extensionPointCompartment\r\n        ];\r\n    };\r\n\r\n    UMLUseCaseView.prototype.update = function (canvas) {\r\n        // extensionPointCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.extensionPointCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.extensionPointCompartment, \'model\', this.model);\r\n        }\r\n        if (this.model) {\r\n            if (this.model.extensionPoints && this.model.extensionPoints.length > 0) {\r\n                this.extensionPointCompartment.visible = true;\r\n            } else {\r\n                this.extensionPointCompartment.visible = false;\r\n            }\r\n        }\r\n        UMLClassifierView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLUseCaseView.prototype.sizeAsCanonicalForm = function (canvas, showLabel) {\r\n        UMLClassifierView.prototype.sizeAsCanonicalForm.call(this, canvas, showLabel);\r\n        // Calculating minimum size <= minimum Namecompartment circumscription size\r\n        // rectangle\'s circumscription ellipse height and width are rectangle\'s height and width * Sqrt(2)\r\n        var w = Math.max(Math.trunc(Math.sqrt(2) * this.nameCompartment.minWidth), USECASE_ICON_MINWIDTH);\r\n        if (this.attributeCompartment.visible) {\r\n            w = Math.max(w, this.attributeCompartment.minWidth);\r\n        }\r\n        if (this.operationCompartment.visible) {\r\n            w = Math.max(w, this.operationCompartment.minWidth);\r\n        }\r\n        if (this.extensionPointCompartment.visible) {\r\n            w = Math.max(w, this.extensionPointCompartment.minWidth);\r\n        }\r\n        this.minWidth = w;\r\n        var h = Math.max(Math.trunc(Math.sqrt(2) * this.nameCompartment.minHeight), USECASE_ICON_MINHEIGHT);\r\n        if (this.attributeCompartment.visible) {\r\n            h = h + this.attributeCompartment.minHeight;\r\n        }\r\n        if (this.operationCompartment.visible) {\r\n            h = h + this.operationCompartment.minHeight;\r\n        }\r\n        if (this.extensionPointCompartment.visible) {\r\n            h = h + this.extensionPointCompartment.minHeight;\r\n        }\r\n        this.minHeight = h;\r\n    };\r\n\r\n    UMLUseCaseView.prototype.sizeAsIconicForm = function (canvas, showLabel) {\r\n        if (this.hasStereotypeIcon()) {\r\n            UMLClassifierView.prototype.sizeAsIconicForm.call(this, canvas, showLabel);\r\n        } else {\r\n            var sz = this.getSizeOfAllCompartments(canvas);\r\n            this.minWidth = Math.max(sz.x, USECASE_ICON_MINWIDTH);\r\n            this.minHeight = USECASE_ICON_MINHEIGHT + sz.y;\r\n        }\r\n    };\r\n\r\n    UMLUseCaseView.prototype.arrangeAsCanonicalForm = function (canvas, showLabel) {\r\n        UMLClassifierView.prototype.arrangeAsCanonicalForm.call(this, canvas, showLabel);\r\n        var y = this.getBottom();\r\n        if (this.extensionPointCompartment.visible) {\r\n            y = y - this.extensionPointCompartment.height;\r\n            this.extensionPointCompartment.left = this.left;\r\n            this.extensionPointCompartment.setRight(this.getRight());\r\n            this.extensionPointCompartment.top = y;\r\n            this.extensionPointCompartment.arrange(canvas);\r\n        }\r\n        if (this.operationCompartment.visible) {\r\n            y = y - this.operationCompartment.height;\r\n            this.operationCompartment.left = this.left;\r\n            this.operationCompartment.setRight(this.getRight());\r\n            this.operationCompartment.top = y;\r\n            this.operationCompartment.arrange(canvas);\r\n        }\r\n        if (this.attributeCompartment.visible) {\r\n            y = y - this.attributeCompartment.height;\r\n            this.attributeCompartment.left = this.left;\r\n            this.attributeCompartment.setRight(this.getRight());\r\n            this.attributeCompartment.top = y;\r\n            this.attributeCompartment.arrange(canvas);\r\n        }\r\n        this.nameCompartment.width = Math.trunc(1 / Math.sqrt(2) * this.width);\r\n        this.nameCompartment.left = this.left + (this.width - this.nameCompartment.width) / 2;\r\n        this.nameCompartment.top = ((y + this.top) / 2) - (this.nameCompartment.height / 2);\r\n        this.nameCompartment.arrange(canvas);\r\n    };\r\n\r\n    UMLUseCaseView.prototype.drawShadowAsCanonicalForm = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        var EXTENSIONPOINTS_MARGIN_TOP = 5;\r\n        if (this.extensionPointCompartment.visible) {\r\n            r.y2 = r.y2 - this.extensionPointCompartment.height - EXTENSIONPOINTS_MARGIN_TOP;\r\n        }\r\n        if (this.operationCompartment.visible) {\r\n            r.y2 = r.y2 - this.operationCompartment.height;\r\n        }\r\n        if (this.attributeCompartment.visible) {\r\n            r.y2 = r.y2 - this.attributeCompartment.height;\r\n        }\r\n        canvas.fillEllipse(\r\n            r.x1 + SHADOW_OFFSET,\r\n            r.y1 + SHADOW_OFFSET,\r\n            r.x2 + SHADOW_OFFSET,\r\n            r.y2 + SHADOW_OFFSET);\r\n    };\r\n\r\n    UMLUseCaseView.prototype.drawShadowAsDecorationForm = function (canvas) {\r\n        canvas.fillRect(\r\n            this.mainRect.x1 + SHADOW_OFFSET,\r\n            this.mainRect.y1 + SHADOW_OFFSET,\r\n            this.mainRect.x2 + SHADOW_OFFSET,\r\n            this.mainRect.y2 + SHADOW_OFFSET\r\n        );\r\n    };\r\n\r\n    UMLUseCaseView.prototype.drawShadowAsIconicForm = function (canvas) {\r\n        if (this.hasStereotypeIcon()) {\r\n            UMLClassifierView.prototype.drawShadowAsIconicForm.call(this, canvas);\r\n        } else {\r\n            canvas.fillEllipse(\r\n                this.iconRect.x1 + SHADOW_OFFSET,\r\n                this.iconRect.y1 + SHADOW_OFFSET,\r\n                this.iconRect.x2 + SHADOW_OFFSET,\r\n                this.iconRect.y2 + SHADOW_OFFSET\r\n            );\r\n        }\r\n    };\r\n\r\n    UMLUseCaseView.prototype.drawIcon = function (canvas, rect) {\r\n        if (this.hasStereotypeIcon()) {\r\n            var ratioRect = this.computeIconRect(rect, (this.model.stereotype.icon.width / this.model.stereotype.icon.height) * 100);\r\n            drawImage(canvas, ratioRect, this.model.stereotype.icon);\r\n        } else {\r\n            var r = rect;\r\n            var x, y;\r\n            var w = r.x2 - r.x1;\r\n            var h = r.y2 - r.y1;\r\n            var rr = w * 100 / h;\r\n            var ir = USECASE_ICON_MINWIDTH * 100 / USECASE_ICON_MINHEIGHT;\r\n            if (rr >= ir) {\r\n                h = (r.y2 - r.y1);\r\n                w = h * ir / 100;\r\n                x = r.x1 + (r.x2 - r.x1 - w) / 2;\r\n                y = r.y1;\r\n            } else {\r\n                w = (r.x2 - r.x1);\r\n                h = w * 100 / ir;\r\n                y = r.y1 + (r.y2 - r.y1 - h) / 2;\r\n                x = r.x1;\r\n            }\r\n            canvas.fillEllipse(x, y, x + w, y + h);\r\n            canvas.ellipse(x, y, x + w, y + h);\r\n        }\r\n    };\r\n\r\n    UMLUseCaseView.prototype.drawObject = function (canvas) {\r\n        UMLClassifierView.prototype.drawObject.call(this, canvas);\r\n        if (this.extensionPointCompartment.visible) {\r\n            canvas.line(\r\n                this.extensionPointCompartment.left,\r\n                this.extensionPointCompartment.top,\r\n                this.extensionPointCompartment.getRight(),\r\n                this.extensionPointCompartment.top);\r\n        }\r\n    };\r\n\r\n    UMLUseCaseView.prototype.drawCommon = function (canvas) {\r\n        if (this.stereotypeDisplay === UML.SD_DECORATION || this.stereotypeDisplay === UML.SD_DECORATION_LABEL) {\r\n            canvas.fillRect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n            canvas.rect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n        }\r\n    };\r\n\r\n    UMLUseCaseView.prototype.drawAsCanonicalForm = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        var EXTENSIONPOINTS_MARGIN_TOP = 5;\r\n        if (this.extensionPointCompartment.visible) {\r\n            r.y2 = r.y2 - this.extensionPointCompartment.height - EXTENSIONPOINTS_MARGIN_TOP;\r\n        }\r\n        if (this.operationCompartment.visible) {\r\n            r.y2 = r.y2 - this.operationCompartment.height;\r\n        }\r\n        if (this.attributeCompartment.visible) {\r\n            r.y2 = r.y2 - this.attributeCompartment.height;\r\n        }\r\n        canvas.fillEllipse(r.x1, r.y1, r.x2, r.y2);\r\n        canvas.ellipse(r.x1, r.y1, r.x2, r.y2);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLActorView\r\n     * @constructor\r\n     * @extends UMLClassifierView\r\n     */\r\n    function UMLActorView() {\r\n        UMLClassifierView.apply(this, arguments);\r\n        this.iconRatio = ACTOR_RATIO_PERCENT;\r\n\r\n        this.fillColor = PreferenceManager.get("uml.actor.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this.stereotypeDisplay  = PreferenceManager.get("uml.actor.stereotypeDisplay", UML.SD_LABEL);\r\n        this.suppressAttributes = PreferenceManager.get("uml.actor.suppressAttributes", true);\r\n        this.suppressOperations = PreferenceManager.get("uml.actor.suppressOperations", true);\r\n    }\r\n    // inherits from UMLClassifierView\r\n    UMLActorView.prototype = Object.create(UMLClassifierView.prototype);\r\n    UMLActorView.prototype.constructor = UMLActorView;\r\n\r\n    UMLActorView.prototype.sizeAsCanonicalForm = function (canvas, showLabel) {\r\n        this.sizeAsIconicForm(canvas, showLabel);\r\n    };\r\n\r\n    UMLActorView.prototype.sizeAsIconicForm = function (canvas, showLabel) {\r\n        if (this.hasStereotypeIcon()) {\r\n            UMLClassifierView.prototype.sizeAsIconicForm.call(this, canvas, showLabel);\r\n        } else {\r\n            var sz = this.getSizeOfAllCompartments(canvas);\r\n            this.minWidth = Math.max(sz.x, ACTOR_ICON_MINWIDTH);\r\n            this.minHeight = ACTOR_ICON_MINHEIGHT + sz.y;\r\n        }\r\n    };\r\n\r\n    UMLActorView.prototype.arrangeAsCanonicalForm = function (canvas, showLabel) {\r\n        this.arrangeAsIconicForm(canvas, showLabel);\r\n    };\r\n\r\n    UMLActorView.prototype.drawShadowAsCanonicalForm = function (canvas) {};\r\n\r\n    UMLActorView.prototype.drawShadowAsDecorationForm = function (canvas) {\r\n        canvas.fillRect(\r\n            this.mainRect.x1 + SHADOW_OFFSET,\r\n            this.mainRect.y1 + SHADOW_OFFSET,\r\n            this.mainRect.x2 + SHADOW_OFFSET,\r\n            this.mainRect.y2 + SHADOW_OFFSET\r\n        );\r\n    };\r\n\r\n    UMLActorView.prototype.drawShadowAsIconicForm = function (canvas) {};\r\n\r\n    UMLActorView.prototype.drawIcon = function (canvas, rect) {\r\n        if (this.hasStereotypeIcon()) {\r\n            var ratioRect = this.computeIconRect(rect, (this.model.stereotype.icon.width / this.model.stereotype.icon.height) * 100);\r\n            drawImage(canvas, ratioRect, this.model.stereotype.icon);\r\n        } else {\r\n            var cx, h, w, xa, xh, ya, yh, yl;\r\n            w = rect.x2 - rect.x1;\r\n            h = rect.y2 - rect.y1;\r\n            xh = w * 16 / 100;\r\n            xa = w * 14 / 100;\r\n            yh = rect.y1 + h * 34 / 100;\r\n            ya = rect.y1 + h * 46 / 100;\r\n            yl = rect.y1 + h * 66 / 100;\r\n            cx = rect.x1 + w / 2;\r\n            canvas.fillEllipse(rect.x1 + xh, rect.y1 + 1, rect.x2 - xh, yh);\r\n            canvas.ellipse(rect.x1 + xh, rect.y1 + 1, rect.x2 - xh, yh);\r\n            canvas.polyline([new Point(cx, yh), new Point(cx, yl)]);\r\n            canvas.polyline([new Point(rect.x1 + xa, ya), new Point(rect.x2 - xa, ya)]);\r\n            canvas.polyline([new Point(cx, yl), new Point(rect.x1, rect.y2 - 1)]);\r\n            canvas.polyline([new Point(cx, yl), new Point(rect.x2, rect.y2 - 1)]);\r\n        }\r\n    };\r\n\r\n    UMLActorView.prototype.drawCommon = function (canvas) {\r\n        if (this.stereotypeDisplay === UML.SD_DECORATION || this.stereotypeDisplay === UML.SD_DECORATION_LABEL) {\r\n            canvas.fillRect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n            canvas.rect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2);\r\n        }\r\n    };\r\n\r\n    UMLActorView.prototype.drawAsCanonicalForm = function (canvas) {\r\n        this.drawAsIconicForm(canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLIncludeView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLIncludeView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        this.lineMode = Core.LM_DOT;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLIncludeView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLIncludeView.prototype.constructor = UMLIncludeView;\r\n\r\n    UMLIncludeView.prototype.update = function (canvas) {\r\n        UMLGeneralEdgeView.prototype.update.call(this, canvas);\r\n        this.stereotypeLabel.visible = true;\r\n        this.stereotypeLabel.text = "«include»";\r\n    };\r\n\r\n    UMLIncludeView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLUseCase);\r\n    };\r\n\r\n    /**\r\n     * UMLExtendView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLExtendView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        this.lineMode = Core.LM_DOT;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLExtendView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLExtendView.prototype.constructor = UMLExtendView;\r\n\r\n    UMLExtendView.prototype.update = function (canvas) {\r\n        UMLGeneralEdgeView.prototype.update.call(this, canvas);\r\n        this.stereotypeLabel.visible = true;\r\n        this.stereotypeLabel.text = "«extend»";\r\n    };\r\n\r\n    UMLExtendView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLUseCase);\r\n    };\r\n\r\n    /**\r\n     * UMLUseCaseSubjectView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLUseCaseSubjectView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.zIndex = -1;\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLUseCaseSubjectView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLUseCaseSubjectView.prototype.constructor = UMLUseCaseSubjectView;\r\n\r\n    UMLUseCaseSubjectView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model.represent && this.model.represent.name) {\r\n            this.nameCompartment.nameLabel.text = this.model.represent.name;\r\n        }\r\n    };\r\n\r\n    UMLUseCaseSubjectView.prototype.drawShadowAsCanonicalForm = function (canvas) {\r\n        canvas.fillRect(\r\n            this.mainRect.x1 + SHADOW_OFFSET,\r\n            this.mainRect.y1 + SHADOW_OFFSET,\r\n            this.mainRect.x2 + SHADOW_OFFSET,\r\n            this.mainRect.y2 + SHADOW_OFFSET);\r\n    };\r\n\r\n    UMLUseCaseSubjectView.prototype.arrangeObject = function (canvas) {\r\n        UMLGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n    };\r\n\r\n    UMLUseCaseSubjectView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.fillRect(r.x1, r.y1, r.x2, r.y2);\r\n        canvas.rect(r.x1, r.y1, r.x2, r.y2);\r\n    };\r\n\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                        STATECHART DIAGRAM VIEWS                        *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLStatechartDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLStatechartDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLStatechartDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLStatechartDiagram.prototype.constructor = UMLStatechartDiagram;\r\n\r\n    UMLStatechartDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.UMLConstraint) ||\r\n               (model instanceof type.UMLState) ||\r\n               (model instanceof type.UMLPseudostate) ||\r\n               (model instanceof type.UMLConnectionPointReference) ||\r\n               (model instanceof type.UMLStateMachine);\r\n    };\r\n\r\n    UMLStatechartDiagram.prototype.layout = function (direction, separations) {\r\n        if (!direction) {\r\n            direction = Core.DIRECTION_RL;\r\n        }\r\n        UMLDiagram.prototype.layout.call(this, direction, separations);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLPseudostateView\r\n     * @constructor\r\n     * @extends UMLFloatingNodeView\r\n     */\r\n    function UMLPseudostateView() {\r\n        UMLFloatingNodeView.apply(this, arguments);\r\n        this.sizable = Core.SZ_FREE;\r\n        this.containerChangeable = true;\r\n    }\r\n    // inherits from UMLFloatingNodeView\r\n    UMLPseudostateView.prototype = Object.create(UMLFloatingNodeView.prototype);\r\n    UMLPseudostateView.prototype.constructor = UMLPseudostateView;\r\n\r\n    UMLPseudostateView.prototype.sizeObject = function (canvas) {\r\n        UMLFloatingNodeView.prototype.sizeObject.call(this, canvas);\r\n        switch (this.model.kind) {\r\n        case UML.PSK_INITIAL:\r\n            this.minWidth = INITIALSTATE_MINWIDTHH;\r\n            this.minHeight = INITIALSTATE_MINHEIGHT;\r\n            break;\r\n        case UML.PSK_DEEPHISTORY:\r\n            this.minWidth = HISTORYSTATE_MINWIDTHH;\r\n            this.minHeight = HISTORYSTATE_MINHEIGHT;\r\n            break;\r\n        case UML.PSK_SHALLOWHISTORY:\r\n            this.minWidth = HISTORYSTATE_MINWIDTHH;\r\n            this.minHeight = HISTORYSTATE_MINHEIGHT;\r\n            break;\r\n        case UML.PSK_JOIN:\r\n            if (this.height > this.width) {\r\n                // Vertical Synchronization\r\n                this.minWidth = JOIN_MINTHICK;\r\n                this.minHeight = JOIN_MINLENGTH;\r\n                this.width = this.minWidth;\r\n            } else {\r\n                // Horizontal Synchronization\r\n                this.minWidth = JOIN_MINLENGTH;\r\n                this.minHeight = JOIN_MINTHICK;\r\n                this.height = this.minHeight;\r\n            }\r\n            break;\r\n        case UML.PSK_FORK:\r\n            if (this.height > this.width) {\r\n                // Vertical Synchronization\r\n                this.minWidth = FORK_MINTHICK;\r\n                this.minHeight = FORK_MINLENGTH;\r\n                this.width = this.minWidth;\r\n            } else {\r\n                // Horizontal Synchronization\r\n                this.minWidth = FORK_MINLENGTH;\r\n                this.minHeight = FORK_MINTHICK;\r\n                this.height = this.minHeight;\r\n            }\r\n            break;\r\n        case UML.PSK_JUNCTION:\r\n            this.minWidth = JUNCTION_MINWIDTH;\r\n            this.minHeight = JUNCTION_MINHEIGHT;\r\n            break;\r\n        case UML.PSK_CHOICE:\r\n            this.minWidth = CHOICE_MINWIDTH;\r\n            this.minHeight = CHOICE_MINHEIGHT;\r\n            break;\r\n        case UML.PSK_ENTRYPOINT:\r\n            this.minWidth = ENTRYPOINT_MINWIDTH;\r\n            this.minHeight = ENTRYPOINT_MINHEIGHT;\r\n            break;\r\n        case UML.PSK_EXITPOINT:\r\n            this.minWidth = EXITPOINT_MINWIDTH;\r\n            this.minHeight = EXITPOINT_MINHEIGHT;\r\n            break;\r\n        case UML.PSK_TERMINATE:\r\n            this.minWidth = TERMINATE_MINWIDTH;\r\n            this.minHeight = TERMINATE_MINHEIGHT;\r\n            break;\r\n        }\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLPseudostateView.prototype.arrange = function (canvas) {\r\n        UMLFloatingNodeView.prototype.arrange.call(this, canvas);\r\n        this.stereotypeLabel.visible = false;\r\n        this.nameLabel.visible = false;\r\n    };\r\n\r\n    UMLPseudostateView.prototype.drawShadow = function (canvas) {\r\n        canvas.storeState();\r\n        canvas.alpha = SHADOW_ALPHA;\r\n        canvas.fillColor = SHADOW_COLOR;\r\n        switch (this.model.kind) {\r\n        case UML.PSK_INITIAL:\r\n        case UML.PSK_DEEPHISTORY:\r\n        case UML.PSK_SHALLOWHISTORY:\r\n        case UML.PSK_JUNCTION:\r\n        case UML.PSK_ENTRYPOINT:\r\n        case UML.PSK_EXITPOINT:\r\n            canvas.fillEllipse(\r\n                this.left        + SHADOW_OFFSET,\r\n                this.top         + SHADOW_OFFSET,\r\n                this.getRight()  + SHADOW_OFFSET,\r\n                this.getBottom() + SHADOW_OFFSET\r\n            );\r\n            break;\r\n        case UML.PSK_JOIN:\r\n        case UML.PSK_FORK:\r\n            canvas.fillRoundRect(this.left + SHADOW_OFFSET, this.top + SHADOW_OFFSET, this.getRight() + SHADOW_OFFSET, this.getBottom() + SHADOW_OFFSET, 3);\r\n            break;\r\n        case UML.PSK_CHOICE:\r\n            var x = this.left + (this.width / 2);\r\n            var y = this.top + (this.height / 2);\r\n            canvas.fillPolygon([\r\n                new Point(this.left + SHADOW_OFFSET, y + SHADOW_OFFSET),\r\n                new Point(x + SHADOW_OFFSET, this.top + SHADOW_OFFSET),\r\n                new Point(this.getRight() + SHADOW_OFFSET, y + SHADOW_OFFSET),\r\n                new Point(x + SHADOW_OFFSET, this.getBottom() + SHADOW_OFFSET),\r\n                new Point(this.left + SHADOW_OFFSET, y + SHADOW_OFFSET)]);\r\n            break;\r\n        case UML.PSK_TERMINATE:\r\n            // No shadow\r\n            break;\r\n        }\r\n        canvas.restoreState();\r\n        UMLFloatingNodeView.prototype.drawShadow.call(this, canvas);\r\n    };\r\n\r\n    UMLPseudostateView.prototype.drawObject = function (canvas) {\r\n        var x, y, sz, p, d;\r\n        switch (this.model.kind) {\r\n        case UML.PSK_INITIAL:\r\n            canvas.fillColor = this.lineColor;\r\n            canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            break;\r\n        case UML.PSK_DEEPHISTORY:\r\n            canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            sz = canvas.textExtent(\'H*\');\r\n            x = this.left + (this.width - sz.x) / 2;\r\n            y = this.top + (this.height - sz.y) / 2;\r\n            canvas.textOut(x, y, \'H*\');\r\n            break;\r\n        case UML.PSK_SHALLOWHISTORY:\r\n            canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            sz = canvas.textExtent(\'H\');\r\n            x = this.left + (this.width - sz.x) / 2;\r\n            y = this.top + (this.height - sz.y) / 2;\r\n            canvas.textOut(x, y, \'H\');\r\n            break;\r\n        case UML.PSK_JOIN:\r\n            canvas.fillColor = this.lineColor;\r\n            if (Math.abs(this.getRight() - this.left) >= Math.abs(this.getBottom() - this.top)) {\r\n                canvas.fillRoundRect(this.left, this.top, this.getRight(), this.top + JOIN_MINTHICK, 3);\r\n            } else {\r\n                canvas.fillRoundRect(this.left, this.top, this.left + JOIN_MINTHICK, this.getBottom(), 3);\r\n            }\r\n            break;\r\n        case UML.PSK_FORK:\r\n            canvas.fillColor = this.lineColor;\r\n            if (Math.abs(this.getRight() - this.left) >= Math.abs(this.getBottom() - this.top)) {\r\n                canvas.fillRoundRect(this.left, this.top, this.getRight(), this.top + FORK_MINTHICK, 3);\r\n            } else {\r\n                canvas.fillRoundRect(this.left, this.top, this.left + FORK_MINTHICK, this.getBottom(), 3);\r\n            }\r\n            break;\r\n        case UML.PSK_JUNCTION:\r\n            canvas.fillColor = this.lineColor;\r\n            canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            break;\r\n        case UML.PSK_CHOICE:\r\n            x = (this.left + this.getRight()) / 2;\r\n            y = (this.top + this.getBottom()) / 2;\r\n            canvas.fillPolygon([new Point(this.left, y), new Point(x, this.top), new Point(this.getRight(), y), new Point(x, this.getBottom()), new Point(this.left, y)]);\r\n            canvas.polygon([new Point(this.left, y), new Point(x, this.top), new Point(this.getRight(), y), new Point(x, this.getBottom()), new Point(this.left, y)]);\r\n            break;\r\n        case UML.PSK_ENTRYPOINT:\r\n            canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            break;\r\n        case UML.PSK_EXITPOINT:\r\n            canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            p = Coord.getCenter(new Rect(this.left, this.top, this.getRight(), this.getBottom()));\r\n            d = Math.round(Math.sqrt(2) * this.width / 4);\r\n            canvas.line(p.x - d, p.y - d, p.x + d, p.y + d);\r\n            canvas.line(p.x + d, p.y - d, p.x - d, p.y + d);\r\n            break;\r\n        case UML.PSK_TERMINATE:\r\n            p = Coord.getCenter(new Rect(this.left, this.top, this.getRight(), this.getBottom()));\r\n            d = Math.round(Math.sqrt(2) * this.width / 4);\r\n            canvas.line(p.x - d, p.y - d, p.x + d, p.y + d);\r\n            canvas.line(p.x + d, p.y - d, p.x - d, p.y + d);\r\n            break;\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLFinalStateView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLFinalStateView() {\r\n        NodeView.apply(this, arguments);\r\n        this.sizable = Core.SZ_FREE;\r\n        this.containerChangeable = true;\r\n    }\r\n    // inherits from NodeView\r\n    UMLFinalStateView.prototype = Object.create(NodeView.prototype);\r\n    UMLFinalStateView.prototype.constructor = UMLFinalStateView;\r\n\r\n    UMLFinalStateView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = FINALSTATE_MINWIDTHH;\r\n        this.minHeight = FINALSTATE_MINHEIGHT;\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLFinalStateView.prototype.drawShadow = function (canvas) {\r\n        canvas.storeState();\r\n        canvas.alpha = SHADOW_ALPHA;\r\n        canvas.fillColor = SHADOW_COLOR;\r\n        canvas.fillEllipse(\r\n            this.left        + SHADOW_OFFSET,\r\n            this.top         + SHADOW_OFFSET,\r\n            this.getRight()  + SHADOW_OFFSET,\r\n            this.getBottom() + SHADOW_OFFSET\r\n        );\r\n        canvas.restoreState();\r\n        NodeView.prototype.drawShadow.call(this, canvas);\r\n    };\r\n\r\n    UMLFinalStateView.prototype.drawObject = function (canvas) {\r\n        canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.fillColor = this.lineColor;\r\n        canvas.fillEllipse(this.left+5, this.top+5, this.getRight()-5, this.getBottom()-5);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLConnectionPointReferenceView\r\n     * @constructor\r\n     * @extends UMLFloatingNodeView\r\n     */\r\n    function UMLConnectionPointReferenceView() {\r\n        UMLFloatingNodeView.apply(this, arguments);\r\n        this.sizable = Core.SZ_NONE;\r\n    }\r\n    // inherits from LabelView\r\n    UMLConnectionPointReferenceView.prototype = Object.create(UMLFloatingNodeView.prototype);\r\n    UMLConnectionPointReferenceView.prototype.constructor = UMLConnectionPointReferenceView;\r\n\r\n    UMLConnectionPointReferenceView.prototype.update = function (canvas) {\r\n        UMLFloatingNodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            var connectedPoints = [];\r\n            _.each(this.model.entry, function (point) {\r\n                if (point.name && point.name.length > 0) {\r\n                    connectedPoints.push(point.name);\r\n                }\r\n            });\r\n            _.each(this.model.exit, function (point) {\r\n                if (point.name && point.name.length > 0) {\r\n                    connectedPoints.push(point.name);\r\n                }\r\n            });\r\n            if (connectedPoints.length > 0) {\r\n                this.nameLabel.text = connectedPoints.join(", ");\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLConnectionPointReferenceView.prototype.sizeObject = function (canvas) {\r\n        UMLFloatingNodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = CONNECTIONPOINT_MINWIDTH;\r\n        this.minHeight = CONNECTIONPOINT_MINHEIGHT;\r\n    };\r\n\r\n    UMLConnectionPointReferenceView.prototype.arrange = function (canvas) {\r\n        if (this.containerView) {\r\n            var r = this.containerView.getBoundingBox(canvas);\r\n            var c = Coord.getCenter(new Rect(this.left, this.top, this.getRight(), this.getBottom()));\r\n            var p = this._junction2(r, c);\r\n            this.left = p.x - CONNECTIONPOINT_MINWIDTH / 2;\r\n            this.top = p.y - CONNECTIONPOINT_MINHEIGHT / 2;\r\n            this.setRight(p.x + CONNECTIONPOINT_MINWIDTH / 2);\r\n            this.setBottom(p.y + CONNECTIONPOINT_MINHEIGHT / 2);\r\n        }\r\n        UMLFloatingNodeView.prototype.arrange.call(this, canvas);\r\n    };\r\n\r\n    UMLConnectionPointReferenceView.prototype.drawObject = function (canvas) {\r\n        UMLFloatingNodeView.prototype.drawObject.call(this, canvas);\r\n        if (this.model.exit.length > 0) {\r\n            // draw exitPoint\r\n            canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            var p = Coord.getCenter(new Rect(this.left, this.top, this.getRight(), this.getBottom()));\r\n            var d = Math.round(Math.sqrt(2) * this.width / 4);\r\n            canvas.line(p.x - d, p.y - d, p.x + d, p.y + d);\r\n            canvas.line(p.x + d, p.y - d, p.x - d, p.y + d);\r\n        } else {\r\n            // draw entryPoint\r\n            canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInternalActivityView\r\n     * @constructor\r\n     * @extends LabelView\r\n     */\r\n    function UMLInternalActivityView() {\r\n        LabelView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_NONE;\r\n        this.parentStyle = true;\r\n        this.horizontalAlignment = Graphics.AL_LEFT;\r\n    }\r\n    // inherits from LabelView\r\n    UMLInternalActivityView.prototype = Object.create(LabelView.prototype);\r\n    UMLInternalActivityView.prototype.constructor = UMLInternalActivityView;\r\n\r\n    UMLInternalActivityView.prototype.update = function (canvas) {\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n        if (this.model) {\r\n            var text = "";\r\n            if (_.contains(this.model._parent.entryActivities, this.model)) {\r\n                text += "entry/";\r\n            } else if (_.contains(this.model._parent.doActivities, this.model)) {\r\n                text += "do/";\r\n            } else if (_.contains(this.model._parent.exitActivities, this.model)) {\r\n                text += "exit/";\r\n            }\r\n            text += this.model.name;\r\n            this.text = text;\r\n        }\r\n        LabelView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLInternalActivityView.prototype.size = function (canvas) {\r\n        LabelView.prototype.size.call(this, canvas);\r\n        this.height = this.minHeight;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInternalActivityCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLInternalActivityCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLInternalActivityCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLInternalActivityCompartmentView.prototype.constructor = UMLInternalActivityCompartmentView;\r\n\r\n    UMLInternalActivityCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.entryActivities && this.model.doActivities && this.model.exitActivities) {\r\n            var tempViews = this.subViews;\r\n            this.subViews = [];\r\n            var actions = _.union(this.model.entryActivities, this.model.doActivities, this.model.exitActivities);\r\n            for (var i = 0, len = actions.length; i < len; i++) {\r\n                var action = actions[i];\r\n                var actionView = _.find(tempViews, function (v) { return v.model == action; });\r\n                if (!actionView) {\r\n                    actionView = new UMLInternalActivityView();\r\n                    actionView.model = action;\r\n                    actionView._parent = this;\r\n                    // actionView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', actionView);\r\n                } else {\r\n                    this.addSubView(actionView);\r\n                }\r\n                actionView.setup(canvas);\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInternalTransitionView\r\n     * @constructor\r\n     * @extends LabelView\r\n     */\r\n    function UMLInternalTransitionView() {\r\n        LabelView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_NONE;\r\n        this.parentStyle = true;\r\n        this.horizontalAlignment = Graphics.AL_LEFT;\r\n    }\r\n    // inherits from LabelView\r\n    UMLInternalTransitionView.prototype = Object.create(LabelView.prototype);\r\n    UMLInternalTransitionView.prototype.constructor = UMLInternalTransitionView;\r\n\r\n    UMLInternalTransitionView.prototype.update = function (canvas) {\r\n        LabelView.prototype.update.call(this, canvas);\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n        if (this.model) {\r\n            this.text = this.model.getString();\r\n        }\r\n    };\r\n\r\n    UMLInternalTransitionView.prototype.size = function (canvas) {\r\n        LabelView.prototype.size.call(this, canvas);\r\n        this.height = this.minHeight;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInternalTransitionCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLInternalTransitionCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLInternalTransitionCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLInternalTransitionCompartmentView.prototype.constructor = UMLInternalTransitionCompartmentView;\r\n\r\n    UMLInternalTransitionCompartmentView.prototype.update = function (canvas) {\r\n        var tempViews = this.subViews;\r\n        this.subViews = [];\r\n        var internals = this.model.getInternalTransitions();\r\n        for (var i = 0, len = internals.length; i < len; i++) {\r\n            var trans = internals[i];\r\n            var transView = _.find(tempViews, function (v) { return v.model === trans; });\r\n            if (!transView) {\r\n                transView = new UMLInternalTransitionView();\r\n                transView.model = trans;\r\n                transView._parent = this;\r\n                // actionView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                Repository.bypassInsert(this, \'subViews\', transView);\r\n            } else {\r\n                this.addSubView(transView);\r\n            }\r\n            transView.setup(canvas);\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLRegionView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLRegionView() {\r\n        NodeView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.movable = Core.MM_NONE;\r\n        this.sizable = Core.SZ_VERT;\r\n        this.parentStyle = true;\r\n    }\r\n    // inherits from LabelView\r\n    UMLRegionView.prototype = Object.create(NodeView.prototype);\r\n    UMLRegionView.prototype.constructor = UMLRegionView;\r\n\r\n    UMLRegionView.prototype._isTopRegionView = function () {\r\n        var result = true;\r\n        if (this._parent !== null) {\r\n            for (var i = 0, len = this._parent.subViews.length; i < len; i++) {\r\n                var v = this._parent.subViews[i];\r\n                if ((v instanceof UMLRegionView) && (v !== this)) {\r\n                    if (v.top < this.top) {\r\n                        result = false;\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    UMLRegionView.prototype.update = function (canvas) {\r\n        NodeView.prototype.update.call(this, canvas);\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n    };\r\n\r\n    UMLRegionView.prototype.sizeObject = function (canvas) {\r\n        this.minWidth = REGION_MINWIDTH;\r\n        this.minHeight = REGION_MINHEIGHT;\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n    };\r\n\r\n    UMLRegionView.prototype.drawObject = function (canvas) {\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n        if (!this._isTopRegionView()) {\r\n            canvas.line(this.left, this.top, this.getRight(), this.top, [10,3]);\r\n        }\r\n    };\r\n\r\n    UMLRegionView.prototype.canContainViewKind = function (kind) {\r\n        return MetaModelManager.isKindOf(kind, "UMLStateView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLPseudostateView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLFinalStateView");\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLDecompositionCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLDecompositionCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n        this.minHeight = 15;\r\n\r\n        /* temporal */\r\n        this._leftPadding   = 0;\r\n        this._rightPadding  = 0;\r\n        this._topPadding    = 0;\r\n        this._bottomPadding = 0;\r\n        this._itemInterval  = 0;\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLDecompositionCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLDecompositionCompartmentView.prototype.constructor = UMLDecompositionCompartmentView;\r\n\r\n    UMLDecompositionCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.regions) {\r\n            var tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (var i = 0, len = this.model.regions.length; i < len; i++) {\r\n                var region = this.model.regions[i];\r\n                var regionView = _.find(tempViews, function (v) { return v.model == region; });\r\n                if (!regionView) {\r\n                    regionView = new UMLRegionView();\r\n                    regionView.model = region;\r\n                    regionView._parent = this;\r\n                    regionView._parent = this;\r\n                    // UMLRegionView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', regionView);\r\n                } else {\r\n                    this.addSubView(regionView);\r\n                }\r\n                regionView.setup(canvas);\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLDecompositionCompartmentView.prototype.sizeObject = function (canvas) {\r\n        UMLCompartmentView.prototype.sizeObject.call(this, canvas);\r\n        var h = 0;\r\n        for (var i = 0, len = this.subViews.length; i < len; i++) {\r\n            var regionView = this.subViews[i];\r\n            h += regionView.height;\r\n        }\r\n        this.minHeight = h;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLStateView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLStateView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.containerChangeable = true;\r\n\r\n        /** @member {UMLInternalActivityCompartmentView} */\r\n        this.internalActivityCompartment = new UMLInternalActivityCompartmentView();\r\n        this.internalActivityCompartment.parentStyle = true;\r\n        this.addSubView(this.internalActivityCompartment);\r\n\r\n        /** @member {UMLInternalTransitionCompartmentView} */\r\n        this.internalTransitionCompartment = new UMLInternalTransitionCompartmentView();\r\n        this.internalTransitionCompartment.parentStyle = true;\r\n        this.addSubView(this.internalTransitionCompartment);\r\n\r\n        /** @member {UMLDecompositionCompartmentView} */\r\n        this.decompositionCompartment = new UMLDecompositionCompartmentView();\r\n        this.decompositionCompartment.parentStyle = true;\r\n        this.addSubView(this.decompositionCompartment);\r\n\r\n        this.fillColor = PreferenceManager.get("uml.state.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLStateView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLStateView.prototype.constructor = UMLStateView;\r\n\r\n    UMLStateView.prototype.getAllCompartments = function () {\r\n        return [\r\n            this.nameCompartment,\r\n            this.internalActivityCompartment,\r\n            this.internalTransitionCompartment,\r\n            this.decompositionCompartment\r\n        ];\r\n    };\r\n\r\n    UMLStateView.prototype.update = function (canvas) {\r\n        // internalActivityCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.internalActivityCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.internalActivityCompartment, \'model\', this.model);\r\n        }\r\n        // internalTransitionCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.internalTransitionCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.internalTransitionCompartment, \'model\', this.model);\r\n        }\r\n        // decompositionCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.decompositionCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.decompositionCompartment, \'model\', this.model);\r\n        }\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.sizable = Core.SZ_FREE;\r\n            if (this.model.entryActivities.length + this.model.doActivities.length + this.model.exitActivities.length > 0) {\r\n                this.internalActivityCompartment.visible = true;\r\n            } else {\r\n                this.internalActivityCompartment.visible = false;\r\n            }\r\n            if (this.model.getInternalTransitions().length > 0) {\r\n                this.internalTransitionCompartment.visible = true;\r\n            } else {\r\n                this.internalTransitionCompartment.visible = false;\r\n            }\r\n\r\n            if (this.model.submachine !== null && this.showType) {\r\n                this.nameCompartment.nameLabel.text = this.model.name + ": " + this.model.submachine.name;\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLStateView.prototype.sizeObject = function (canvas) {\r\n        UMLGeneralNodeView.prototype.sizeObject.call(this, canvas);\r\n        var sz = this.getSizeOfAllCompartments(canvas);\r\n        this.minWidth = Math.max(sz.x, STATE_MINWIDTH);\r\n        if (this.model.submachine !== null) {\r\n            this.minHeight = Math.max(sz.y + 16, STATE_MINHEIGHT);\r\n        } else {\r\n            this.minHeight = Math.max(sz.y, STATE_MINHEIGHT);\r\n        }\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLStateView.prototype.drawShadowAsCanonicalForm = function (canvas, showLabel) {\r\n        canvas.fillRoundRect(\r\n            this.mainRect.x1 + SHADOW_OFFSET,\r\n            this.mainRect.y1 + SHADOW_OFFSET,\r\n            this.mainRect.x2 + SHADOW_OFFSET,\r\n            this.mainRect.y2 + SHADOW_OFFSET,\r\n            STATE_ROUND\r\n        );\r\n    };\r\n\r\n    UMLStateView.prototype.drawShadowAsDecorationForm = function (canvas) {\r\n        this.drawShadowAsCanonicalForm(canvas);\r\n    };\r\n\r\n    UMLStateView.prototype.drawShadowAsIconicForm = function (canvas) {\r\n        this.drawShadowAsCanonicalForm(canvas);\r\n    };\r\n\r\n    UMLStateView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRoundRect(this.left, this.top, this.getRight(), this.getBottom(), STATE_ROUND);\r\n        canvas.roundRect(this.left, this.top, this.getRight(), this.getBottom(), STATE_ROUND);\r\n        if (this.internalActivityCompartment.visible) {\r\n            canvas.line(\r\n                this.internalActivityCompartment.left,\r\n                this.internalActivityCompartment.top,\r\n                this.internalActivityCompartment.getRight(),\r\n                this.internalActivityCompartment.top);\r\n        }\r\n        if (this.internalTransitionCompartment.visible) {\r\n            canvas.line(\r\n                this.internalTransitionCompartment.left,\r\n                this.internalTransitionCompartment.top,\r\n                this.internalTransitionCompartment.getRight(),\r\n                this.internalTransitionCompartment.top);\r\n        }\r\n        if (this.decompositionCompartment.visible && this.decompositionCompartment.subViews.length > 0) {\r\n            canvas.line(\r\n                this.decompositionCompartment.left,\r\n                this.decompositionCompartment.top,\r\n                this.decompositionCompartment.getRight(),\r\n                this.decompositionCompartment.top);\r\n        }\r\n        if (this.model.submachine !== null) {\r\n            canvas.ellipse(this.getRight()-26, this.getBottom()-16, this.getRight()-20, this.getBottom()-10);\r\n            canvas.line(this.getRight()-20, this.getBottom()-13, this.getRight()-14, this.getBottom()-13);\r\n            canvas.ellipse(this.getRight()-14, this.getBottom()-16, this.getRight()-8, this.getBottom()-10);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLTransitionView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLTransitionView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        this.lineMode = Core.LM_SOLID;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLTransitionView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLTransitionView.prototype.constructor = UMLTransitionView;\r\n\r\n    UMLTransitionView.prototype.update = function (canvas) {\r\n        UMLGeneralEdgeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameLabel.text = this.model.getString();\r\n            this.nameLabel.visible = (this.nameLabel.text.length > 0);\r\n        }\r\n    };\r\n\r\n    UMLTransitionView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLVertex);\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                         ACTIVITY DIAGRAM VIEWS                         *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLActivityDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLActivityDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLActivityDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLActivityDiagram.prototype.constructor = UMLActivityDiagram;\r\n\r\n    UMLActivityDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.UMLConstraint) ||\r\n               (model instanceof type.UMLActivity) ||\r\n               (model instanceof type.UMLAction) ||\r\n               (model instanceof type.UMLActivityNode) ||\r\n               (model instanceof type.UMLActivityPartition) ||\r\n               (model instanceof type.UMLPin);\r\n    };\r\n\r\n    UMLActivityDiagram.prototype.layout = function (direction, separations) {\r\n        if (!direction) {\r\n            direction = Core.DIRECTION_BT;\r\n        }\r\n        UMLDiagram.prototype.layout.call(this, direction, separations);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLPinView\r\n     * @constructor\r\n     * @extends UMLFloatingNodeView\r\n     */\r\n    function UMLPinView() {\r\n        UMLFloatingNodeView.apply(this, arguments);\r\n        this.sizable = Core.SZ_NONE;\r\n    }\r\n    // inherits from UMLFloatingNodeView\r\n    UMLPinView.prototype = Object.create(UMLFloatingNodeView.prototype);\r\n    UMLPinView.prototype.constructor = UMLPinView;\r\n\r\n    UMLPinView.prototype.update = function (canvas) {\r\n        UMLFloatingNodeView.prototype.update.call(this, canvas);\r\n        var options = {\r\n            showProperty      : true,\r\n            showType          : true,\r\n            showMultiplicity  : true\r\n        };\r\n        if (this.model) {\r\n            this.nameLabel.text = this.model.getString(options);\r\n            this.nameLabel.underline = (this.model.isStatic === true);\r\n        }\r\n    };\r\n\r\n    UMLPinView.prototype.sizeObject = function (canvas) {\r\n        UMLFloatingNodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = PIN_MINWIDTH;\r\n        this.minHeight = PIN_MINHEIGHT;\r\n    };\r\n\r\n    UMLPinView.prototype.getPosition = function (canvas) {\r\n        var RANGE = Math.round(PIN_MINWIDTH / 2);\r\n        if (this.containerView) {\r\n            var r = this.containerView.getBoundingBox(canvas);\r\n            var b = this.getBoundingBox(canvas);\r\n            if (r.y1-RANGE <= b.y2 && b.y2 <= r.y1+RANGE) {\r\n                return "top";\r\n            } else if (r.y2-RANGE <= b.y1 && b.y1 <= r.y2+RANGE) {\r\n                return "bottom";\r\n            } else if (r.x1-RANGE <= b.x2 && b.x2 <= r.x1+RANGE) {\r\n                return "left";\r\n            } else if (r.x2-RANGE <= b.x1 && b.x1 <= r.x2+RANGE) {\r\n                return "right";\r\n            }\r\n        }\r\n        return "else"; // default\r\n    };\r\n\r\n    UMLPinView.prototype.drawArrow = function (canvas, direction) {\r\n        var MARGIN = 2;\r\n        var rect = this.getBoundingBox(canvas),\r\n            c = Coord.getCenter(rect),\r\n            t = new Point(c.x, rect.y1 + MARGIN),\r\n            b = new Point(c.x, rect.y2 - MARGIN),\r\n            l = new Point(rect.x1 + MARGIN, c.y),\r\n            r = new Point(rect.x2 - MARGIN, c.y);\r\n        switch (direction) {\r\n        case "up":\r\n            canvas.line(b.x, b.y, t.x, t.y);\r\n            canvas.line(t.x, t.y, t.x - 3, t.y + 3);\r\n            canvas.line(t.x, t.y, t.x + 3, t.y + 3);\r\n            break;\r\n        case "down":\r\n            canvas.line(b.x, b.y, t.x, t.y);\r\n            canvas.line(b.x, b.y, b.x - 3, b.y - 3);\r\n            canvas.line(b.x, b.y, b.x + 3, b.y - 3);\r\n            break;\r\n        case "left":\r\n            canvas.line(l.x, l.y, r.x, r.y);\r\n            canvas.line(l.x, l.y, l.x + 3, l.y - 3);\r\n            canvas.line(l.x, l.y, l.x + 3, l.y + 3);\r\n            break;\r\n        case "right":\r\n            canvas.line(l.x, l.y, r.x, r.y);\r\n            canvas.line(r.x, r.y, r.x - 3, r.y - 3);\r\n            canvas.line(r.x, r.y, r.x - 3, r.y + 3);\r\n            break;\r\n        }\r\n    };\r\n\r\n    UMLPinView.prototype.arrange = function (canvas) {\r\n        if (this.containerView) {\r\n            var r = this.containerView.getBoundingBox(canvas);\r\n            var box = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n            var c = Coord.getCenter(box);\r\n            var p = this._junction2(r, c);\r\n            if (!Coord.ptInRect2(p, box)) {\r\n                if (r.x1 < p.x) {\r\n                    this.left = p.x;\r\n                } else {\r\n                    this.left = p.x - PIN_MINWIDTH + 1;\r\n                }\r\n                if (r.y1 < p.y) {\r\n                    this.top = p.y;\r\n                } else {\r\n                    this.top = p.y - PIN_MINHEIGHT + 1;\r\n                }\r\n            }\r\n            this.width = this.minWidth;\r\n            this.height = this.minHeight;\r\n        }\r\n        UMLFloatingNodeView.prototype.arrange.call(this, canvas);\r\n    };\r\n\r\n    UMLPinView.prototype.drawObject = function (canvas) {\r\n        UMLFloatingNodeView.prototype.drawObject.call(this, canvas);\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInputPinView\r\n     * @constructor\r\n     * @extends UMLPinView\r\n     */\r\n    function UMLInputPinView() {\r\n        UMLPinView.apply(this, arguments);\r\n        this.sizable = Core.SZ_NONE;\r\n    }\r\n    // inherits from LabelView\r\n    UMLInputPinView.prototype = Object.create(UMLPinView.prototype);\r\n    UMLInputPinView.prototype.constructor = UMLInputPinView;\r\n\r\n    UMLInputPinView.prototype.drawObject = function (canvas) {\r\n        UMLPinView.prototype.drawObject.call(this, canvas);\r\n        switch (this.getPosition(canvas)) {\r\n        case "top":    this.drawArrow(canvas, "down");  break;\r\n        case "bottom": this.drawArrow(canvas, "up");    break;\r\n        case "left":   this.drawArrow(canvas, "right"); break;\r\n        case "right":  this.drawArrow(canvas, "left");  break;\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLOutputPinView\r\n     * @constructor\r\n     * @extends UMLPinView\r\n     */\r\n    function UMLOutputPinView() {\r\n        UMLPinView.apply(this, arguments);\r\n        this.sizable = Core.SZ_NONE;\r\n    }\r\n    // inherits from LabelView\r\n    UMLOutputPinView.prototype = Object.create(UMLPinView.prototype);\r\n    UMLOutputPinView.prototype.constructor = UMLOutputPinView;\r\n\r\n    UMLOutputPinView.prototype.drawObject = function (canvas) {\r\n        UMLPinView.prototype.drawObject.call(this, canvas);\r\n        switch (this.getPosition(canvas)) {\r\n        case "top":    this.drawArrow(canvas, "up");  break;\r\n        case "bottom": this.drawArrow(canvas, "down");    break;\r\n        case "left":   this.drawArrow(canvas, "left"); break;\r\n        case "right":  this.drawArrow(canvas, "right");  break;\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLExpansionNodeView\r\n     * @constructor\r\n     * @extends UMLPinView\r\n     */\r\n    function UMLExpansionNodeView() {\r\n        UMLPinView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLPinView\r\n    UMLExpansionNodeView.prototype = Object.create(UMLPinView.prototype);\r\n    UMLExpansionNodeView.prototype.constructor = UMLExpansionNodeView;\r\n\r\n    UMLExpansionNodeView.prototype.sizeObject = function (canvas) {\r\n        UMLPinView.prototype.sizeObject.call(this, canvas);\r\n        switch (this.getPosition(canvas)) {\r\n        case "top":\r\n        case "bottom":\r\n            this.minWidth = PIN_MINHEIGHT * 4;\r\n            this.minHeight = PIN_MINHEIGHT;\r\n            break;\r\n        case "left":\r\n        case "right":\r\n            this.minWidth = PIN_MINWIDTH;\r\n            this.minHeight = PIN_MINWIDTH * 4;\r\n            break;\r\n        }\r\n    };\r\n\r\n    UMLExpansionNodeView.prototype.drawObject = function (canvas) {\r\n        UMLPinView.prototype.drawObject.call(this, canvas);\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        switch (this.getPosition(canvas)) {\r\n        case "top":\r\n        case "bottom":\r\n            canvas.line(this.left + PIN_MINHEIGHT, this.top, this.left + PIN_MINHEIGHT, this.getBottom());\r\n            canvas.line(this.left + PIN_MINHEIGHT * 2, this.top, this.left + PIN_MINHEIGHT * 2, this.getBottom());\r\n            canvas.line(this.left + PIN_MINHEIGHT * 3, this.top, this.left + PIN_MINHEIGHT * 3, this.getBottom());\r\n            break;\r\n        case "left":\r\n        case "right":\r\n            canvas.line(this.left, this.top + PIN_MINWIDTH, this.getRight(), this.top + PIN_MINWIDTH);\r\n            canvas.line(this.left, this.top + PIN_MINWIDTH * 2, this.getRight(), this.top + PIN_MINWIDTH * 2);\r\n            canvas.line(this.left, this.top + PIN_MINWIDTH * 3, this.getRight(), this.top + PIN_MINWIDTH * 3);\r\n            break;\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLActionView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLActionView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.containerChangeable = true;\r\n        this.fillColor = PreferenceManager.get("uml.action.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLActionView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLActionView.prototype.constructor = UMLActionView;\r\n\r\n    UMLActionView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            if (this.model.subactivity instanceof type.UMLActivity) {\r\n                this.nameCompartment.nameLabel.text = this.model.name + ":" + this.model.subactivity.name;\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLActionView.prototype.sizeObject = function (canvas) {\r\n        UMLGeneralNodeView.prototype.sizeObject.call(this, canvas);\r\n        var sz = this.getSizeOfAllCompartments(canvas);\r\n        if (this.model.kind === UML.ACK_TIMEEVENT) {\r\n            this.minWidth = Math.max(sz.x, ICONICVIEW_ICONMINWIDTH);\r\n            this.minHeight = ICONICVIEW_ICONMINHEIGHT + sz.y;\r\n        } else {\r\n            this.minWidth = Math.max(sz.x, ACTION_MINWIDTH);\r\n            if (this.model.submachine !== null) {\r\n                this.minHeight = Math.max(sz.y + 16, ACTION_MINHEIGHT);\r\n            } else {\r\n                this.minHeight = Math.max(sz.y, ACTION_MINHEIGHT);\r\n            }\r\n        }\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLActionView.prototype.arrangeObject = function (canvas) {\r\n        UMLGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        if (this.model.kind === UML.ACK_TIMEEVENT) {\r\n            var sz = this.getSizeOfAllCompartments(canvas);\r\n            var r  = new Rect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y2 - sz.y);\r\n            this.iconRect = this.computeIconRect(r, this.iconRatio);\r\n            var r2 = new Rect(this.mainRect.x1, this.mainRect.y1 + this.iconRect.getHeight(), this.mainRect.x2, this.mainRect.y2);\r\n            this.arrangeAllCompartments(r2, canvas);\r\n        }\r\n    };\r\n\r\n    UMLActionView.prototype.drawShadowAsCanonicalForm = function (canvas, showLabel) {\r\n        var p;\r\n        switch (this.model.kind) {\r\n        case UML.ACK_OPAQUE:\r\n        case UML.ACK_CREATE:\r\n        case UML.ACK_DESTROY:\r\n        case UML.ACK_READ:\r\n        case UML.ACK_WRITE:\r\n        case UML.ACK_INSERT:\r\n        case UML.ACK_DELETE:\r\n        case UML.ACK_TRIGGEREVENT:\r\n        case UML.ACK_STRUCTURED:\r\n            canvas.fillRoundRect(\r\n                this.mainRect.x1 + SHADOW_OFFSET,\r\n                this.mainRect.y1 + SHADOW_OFFSET,\r\n                this.mainRect.x2 + SHADOW_OFFSET,\r\n                this.mainRect.y2 + SHADOW_OFFSET,\r\n                STATE_ROUND\r\n            );\r\n            break;\r\n        case UML.ACK_SENDSIGNAL:\r\n            p = [\r\n                new Point(this.left + SHADOW_OFFSET, this.top + SHADOW_OFFSET),\r\n                new Point(this.left + SHADOW_OFFSET, this.getBottom() + SHADOW_OFFSET),\r\n                new Point(this.getRight() - this.height / 4 + SHADOW_OFFSET, this.getBottom() + SHADOW_OFFSET),\r\n                new Point(this.getRight() + SHADOW_OFFSET, this.top + this.height / 2 + SHADOW_OFFSET),\r\n                new Point(this.getRight() - this.height / 4 + SHADOW_OFFSET, this.top + SHADOW_OFFSET)\r\n            ];\r\n            canvas.fillPolygon(p);\r\n            break;\r\n        case UML.ACK_ACCEPTSIGNAL:\r\n        case UML.ACK_ACCEPTEVENT:\r\n            p = [\r\n                new Point(this.left + SHADOW_OFFSET, this.top + SHADOW_OFFSET),\r\n                new Point(this.getRight() + SHADOW_OFFSET, this.top + SHADOW_OFFSET),\r\n                new Point(this.getRight() + SHADOW_OFFSET, this.getBottom() + SHADOW_OFFSET),\r\n                new Point(this.left + SHADOW_OFFSET, this.getBottom() + SHADOW_OFFSET),\r\n                new Point(this.left + this.height / 4 + SHADOW_OFFSET, this.top + this.height / 2 + SHADOW_OFFSET)\r\n                ];\r\n            canvas.fillPolygon(p);\r\n            break;\r\n        case UML.ACK_TIMEEVENT:\r\n            break;\r\n        }\r\n\r\n    };\r\n\r\n    UMLActionView.prototype.drawShadowAsDecorationForm = function (canvas) {\r\n        this.drawShadowAsCanonicalForm(canvas);\r\n    };\r\n\r\n    UMLActionView.prototype.drawShadowAsIconicForm = function (canvas) {\r\n        this.drawShadowAsCanonicalForm(canvas);\r\n    };\r\n\r\n    UMLActionView.prototype.drawObject = function (canvas) {\r\n        switch (this.model.kind) {\r\n        case UML.ACK_OPAQUE:\r\n        case UML.ACK_CREATE:\r\n        case UML.ACK_DESTROY:\r\n        case UML.ACK_READ:\r\n        case UML.ACK_WRITE:\r\n        case UML.ACK_INSERT:\r\n        case UML.ACK_DELETE:\r\n        case UML.ACK_TRIGGEREVENT:\r\n        case UML.ACK_STRUCTURED:\r\n            canvas.fillRoundRect(this.left, this.top, this.getRight(), this.getBottom(), ACTION_ROUND);\r\n            canvas.roundRect(this.left, this.top, this.getRight(), this.getBottom(), ACTION_ROUND);\r\n            if (this.model.subactivity !== null) {\r\n                canvas.ellipse(this.getRight()-26, this.getBottom()-16, this.getRight()-20, this.getBottom()-10);\r\n                canvas.line(this.getRight()-20, this.getBottom()-13, this.getRight()-14, this.getBottom()-13);\r\n                canvas.ellipse(this.getRight()-14, this.getBottom()-16, this.getRight()-8, this.getBottom()-10);\r\n            }\r\n            break;\r\n        case UML.ACK_SENDSIGNAL:\r\n            var polygon = [\r\n                new Point(this.left, this.top),\r\n                new Point(this.left, this.getBottom()),\r\n                new Point(this.getRight() - this.height / 4, this.getBottom()),\r\n                new Point(this.getRight(), this.top + this.height / 2),\r\n                new Point(this.getRight() - this.height / 4, this.top)\r\n            ];\r\n            canvas.fillPolygon(polygon);\r\n            canvas.polygon(polygon);\r\n            break;\r\n        case UML.ACK_ACCEPTSIGNAL:\r\n        case UML.ACK_ACCEPTEVENT:\r\n            var p = [\r\n                new Point(this.left, this.top),\r\n                new Point(this.getRight(), this.top),\r\n                new Point(this.getRight(), this.getBottom()),\r\n                new Point(this.left, this.getBottom()),\r\n                new Point(this.left + this.height / 4, this.top + this.height / 2)\r\n                ];\r\n            canvas.fillPolygon(p);\r\n            canvas.polygon(p);\r\n            break;\r\n        case UML.ACK_TIMEEVENT:\r\n            var _iconWidth  = this.iconRect.getWidth(),\r\n                _iconHeight = this.iconRect.getHeight(),\r\n                _x          = (this.left + this.getRight()) / 2,\r\n                _r          = new Rect(_x - (_iconWidth / 2), this.top, _x + (_iconWidth / 2), this.top + _iconHeight);\r\n            var p2 = [\r\n                new Point(_r.x1, _r.y1),\r\n                new Point(_r.x2, _r.y1),\r\n                new Point(_r.x1, _r.y2),\r\n                new Point(_r.x2, _r.y2),\r\n                new Point(_r.x1, _r.y1)\r\n            ];\r\n            canvas.fillPolygon(p2);\r\n            canvas.polygon(p2);\r\n            break;\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLObjectNodeView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLObjectNodeView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.containerChangeable = true;\r\n        this.fillColor = PreferenceManager.get("uml.objectnode.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLObjectNodeView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLObjectNodeView.prototype.constructor = UMLObjectNodeView;\r\n\r\n    UMLObjectNodeView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameCompartment.nameLabel.text = this.model.getString();\r\n        }\r\n    };\r\n\r\n    UMLObjectNodeView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        UMLGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLCentralBufferNodeView\r\n     * @constructor\r\n     * @extends UMLObjectNodeView\r\n     */\r\n    function UMLCentralBufferNodeView() {\r\n        UMLObjectNodeView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLObjectNodeView\r\n    UMLCentralBufferNodeView.prototype = Object.create(UMLObjectNodeView.prototype);\r\n    UMLCentralBufferNodeView.prototype.constructor = UMLCentralBufferNodeView;\r\n\r\n    UMLCentralBufferNodeView.prototype.getStereotypeLabelText = function () {\r\n        return "«centralBuffer»";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLDataStoreNodeView\r\n     * @constructor\r\n     * @extends UMLObjectNodeView\r\n     */\r\n    function UMLDataStoreNodeView() {\r\n        UMLObjectNodeView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLObjectNodeView\r\n    UMLDataStoreNodeView.prototype = Object.create(UMLObjectNodeView.prototype);\r\n    UMLDataStoreNodeView.prototype.constructor = UMLDataStoreNodeView;\r\n\r\n    UMLDataStoreNodeView.prototype.getStereotypeLabelText = function () {\r\n        return "«datastore»";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLControlNodeView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLControlNodeView() {\r\n        NodeView.apply(this, arguments);\r\n        this.containerChangeable = true;\r\n        this.sizable = Core.SZ_FREE;\r\n    }\r\n    // inherits from NodeView\r\n    UMLControlNodeView.prototype = Object.create(NodeView.prototype);\r\n    UMLControlNodeView.prototype.constructor = UMLControlNodeView;\r\n\r\n    UMLControlNodeView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        if (this.model instanceof type.UMLInitialNode) {\r\n            this.minWidth = INITIALNODE_MINWIDTH;\r\n            this.minHeight = INITIALNODE_MINHEIGHT;\r\n        } else if (this.model instanceof type.UMLActivityFinalNode) {\r\n            this.minWidth = ACTIVITYFINALNODE_MINWIDTH;\r\n            this.minHeight = ACTIVITYFINALNODE_MINHEIGHT;\r\n        } else if (this.model instanceof type.UMLFlowFinalNode) {\r\n            this.minWidth = FLOWFINALNODE_MINWIDTH;\r\n            this.minHeight = FLOWFINALNODE_MINHEIGHT;\r\n        } else if (this.model instanceof type.UMLForkNode) {\r\n            if (this.height > this.width) {\r\n                // Vertical Synchronization\r\n                this.minWidth = FORKNODE_MINTHICK;\r\n                this.minHeight = FORKNODE_MINLENGTH;\r\n                this.width = this.minWidth;\r\n            } else {\r\n                // Horizontal Synchronization\r\n                this.minWidth = FORKNODE_MINLENGTH;\r\n                this.minHeight = FORKNODE_MINTHICK;\r\n                this.height = this.minHeight;\r\n            }\r\n        } else if (this.model instanceof type.UMLJoinNode) {\r\n            if (this.height > this.width) {\r\n                // Vertical Synchronization\r\n                this.minWidth = JOINNODE_MINTHICK;\r\n                this.minHeight = JOINNODE_MINLENGTH;\r\n                this.width = this.minWidth;\r\n            } else {\r\n                // Horizontal Synchronization\r\n                this.minWidth = JOINNODE_MINLENGTH;\r\n                this.minHeight = JOINNODE_MINTHICK;\r\n                this.height = this.minHeight;\r\n            }\r\n        } else if (this.model instanceof type.UMLMergeNode) {\r\n            this.minWidth = MERGENODE_MINWIDTH;\r\n            this.minHeight = MERGENODE_MINHEIGHT;\r\n        } else if (this.model instanceof type.UMLDecisionNode) {\r\n            this.minWidth = DECISIONNODE_MINWIDTH;\r\n            this.minHeight = DECISIONNODE_MINHEIGHT;\r\n        }\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLControlNodeView.prototype.drawShadow = function (canvas) {\r\n        canvas.storeState();\r\n        canvas.alpha = SHADOW_ALPHA;\r\n        canvas.fillColor = SHADOW_COLOR;\r\n        if ((this.model instanceof type.UMLInitialNode) ||\r\n            (this.model instanceof type.UMLActivityFinalNode) ||\r\n            (this.model instanceof type.UMLFlowFinalNode)) {\r\n            canvas.fillEllipse(\r\n                this.left        + SHADOW_OFFSET,\r\n                this.top         + SHADOW_OFFSET,\r\n                this.getRight()  + SHADOW_OFFSET,\r\n                this.getBottom() + SHADOW_OFFSET\r\n            );\r\n        } else if ((this.model instanceof type.UMLForkNode) || (this.model instanceof type.UMLJoinNode)) {\r\n            canvas.fillRoundRect(this.left + SHADOW_OFFSET, this.top + SHADOW_OFFSET, this.getRight() + SHADOW_OFFSET, this.getBottom() + SHADOW_OFFSET, 3);\r\n        } else if ((this.model instanceof type.UMLMergeNode) || (this.model instanceof type.UMLDecisionNode)) {\r\n            var x = this.left + (this.width / 2);\r\n            var y = this.top + (this.height / 2);\r\n            canvas.fillPolygon([\r\n                new Point(this.left + SHADOW_OFFSET, y + SHADOW_OFFSET),\r\n                new Point(x + SHADOW_OFFSET, this.top + SHADOW_OFFSET),\r\n                new Point(this.getRight() + SHADOW_OFFSET, y + SHADOW_OFFSET),\r\n                new Point(x + SHADOW_OFFSET, this.getBottom() + SHADOW_OFFSET),\r\n                new Point(this.left + SHADOW_OFFSET, y + SHADOW_OFFSET)]);\r\n        }\r\n        canvas.restoreState();\r\n        NodeView.prototype.drawShadow.call(this, canvas);\r\n    };\r\n\r\n    UMLControlNodeView.prototype.drawObject = function (canvas) {\r\n        var x, y, sz;\r\n        if (this.model instanceof type.UMLInitialNode) {\r\n            canvas.fillColor = this.lineColor;\r\n            canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n        } else if (this.model instanceof type.UMLActivityFinalNode) {\r\n            canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.fillColor = this.lineColor;\r\n            canvas.fillEllipse(this.left+5, this.top+5, this.getRight()-5, this.getBottom()-5);\r\n        } else if (this.model instanceof type.UMLFlowFinalNode) {\r\n            canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n            var p = Coord.getCenter(new Rect(this.left, this.top, this.getRight(), this.getBottom()));\r\n            var d = Math.round(Math.sqrt(2) * this.width / 4);\r\n            canvas.line(p.x - d, p.y - d, p.x + d, p.y + d);\r\n            canvas.line(p.x + d, p.y - d, p.x - d, p.y + d);\r\n        } else if (this.model instanceof type.UMLForkNode) {\r\n            canvas.fillColor = this.lineColor;\r\n            if (Math.abs(this.getRight() - this.left) >= Math.abs(this.getBottom() - this.top)) {\r\n                canvas.fillRoundRect(this.left, this.top, this.getRight(), this.top + FORKNODE_MINTHICK, 3);\r\n            } else {\r\n                canvas.fillRoundRect(this.left, this.top, this.left + FORKNODE_MINTHICK, this.getBottom(), 3);\r\n            }\r\n        } else if (this.model instanceof type.UMLJoinNode) {\r\n            canvas.fillColor = this.lineColor;\r\n            if (Math.abs(this.getRight() - this.left) >= Math.abs(this.getBottom() - this.top)) {\r\n                canvas.fillRoundRect(this.left, this.top, this.getRight(), this.top + JOINNODE_MINTHICK, 3);\r\n            } else {\r\n                canvas.fillRoundRect(this.left, this.top, this.left + JOINNODE_MINTHICK, this.getBottom(), 3);\r\n            }\r\n        } else if ((this.model instanceof type.UMLMergeNode) || (this.model instanceof type.UMLDecisionNode)) {\r\n            x = (this.left + this.getRight()) / 2;\r\n            y = (this.top + this.getBottom()) / 2;\r\n            canvas.fillPolygon([new Point(this.left, y), new Point(x, this.top), new Point(this.getRight(), y), new Point(x, this.getBottom()), new Point(this.left, y)]);\r\n            canvas.polygon([new Point(this.left, y), new Point(x, this.top), new Point(this.getRight(), y), new Point(x, this.getBottom()), new Point(this.left, y)]);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLControlFlowView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLControlFlowView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        this.lineMode = Core.LM_SOLID;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLControlFlowView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLControlFlowView.prototype.constructor = UMLControlFlowView;\r\n\r\n    UMLControlFlowView.prototype.update = function (canvas) {\r\n        UMLGeneralEdgeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameLabel.text = this.model.getString();\r\n            this.nameLabel.visible = (this.nameLabel.text.length > 0);\r\n        }\r\n    };\r\n\r\n    UMLControlFlowView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLActivityNode);\r\n    };\r\n\r\n    /**\r\n     * UMLObjectFlowView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLObjectFlowView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        this.lineMode = Core.LM_SOLID;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLObjectFlowView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLObjectFlowView.prototype.constructor = UMLObjectFlowView;\r\n\r\n    UMLObjectFlowView.prototype.update = function (canvas) {\r\n        UMLGeneralEdgeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameLabel.text = this.model.getString();\r\n            this.nameLabel.visible = (this.nameLabel.text.length > 0);\r\n        }\r\n    };\r\n\r\n    UMLObjectFlowView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLActivityNode || view.model instanceof type.UMLPin);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLZigZagAdornmentView\r\n     * @constructor\r\n     * @extends EdgeNodeView\r\n     */\r\n    function UMLZigZagAdornmentView() {\r\n        EdgeNodeView.apply(this, arguments);\r\n        this.edgePosition = Core.EP_MIDDLE;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_FREE;\r\n        this.alpha = Math.PI / 2;\r\n        this.distance = 20;\r\n    }\r\n    // inherits from EdgeNodeView\r\n    UMLZigZagAdornmentView.prototype = Object.create(EdgeNodeView.prototype);\r\n    UMLZigZagAdornmentView.prototype.constructor = UMLZigZagAdornmentView;\r\n\r\n\r\n    UMLZigZagAdornmentView.prototype.update = function () {\r\n        EdgeNodeView.prototype.update.call(this);\r\n    };\r\n\r\n    UMLZigZagAdornmentView.prototype.sizeObject = function (canvas) {\r\n        EdgeNodeView.prototype.sizeObject.call(this, canvas);\r\n        this.width = 25;\r\n        this.height = 20;\r\n    };\r\n\r\n    UMLZigZagAdornmentView.prototype.arrangeObject = function (canvas) {\r\n        EdgeNodeView.prototype.arrangeObject.call(this, canvas);\r\n    };\r\n\r\n    UMLZigZagAdornmentView.prototype.drawObject = function (canvas) {\r\n        EdgeNodeView.prototype.drawObject.call(this, canvas);\r\n        canvas.line(this.left, this.top, this.getRight(), this.top);\r\n        canvas.line(this.getRight(), this.top, this.left, this.getBottom() - 5);\r\n        canvas.line(this.left, this.getBottom() - 5, this.getRight(), this.getBottom() - 5);\r\n        canvas.line(this.getRight(), this.getBottom() - 5, this.getRight() - 5, this.getBottom());\r\n        canvas.line(this.getRight(), this.getBottom() - 5, this.getRight() - 5, this.getBottom() - 10);\r\n    };\r\n\r\n    /** Cannot be copied to clipboard. */\r\n    UMLZigZagAdornmentView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /** Cannnot be deleted view only. */\r\n    UMLZigZagAdornmentView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLExceptionHandlerView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLExceptionHandlerView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        this.lineMode = Core.LM_SOLID;\r\n\r\n        /** @member {UMLZigZagAdornmentView} */\r\n        this.adornment = new UMLZigZagAdornmentView();\r\n        this.adornment.parentStyle = true;\r\n        this.addSubView(this.adornment);\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLExceptionHandlerView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLExceptionHandlerView.prototype.constructor = UMLExceptionHandlerView;\r\n\r\n    UMLExceptionHandlerView.prototype.update = function () {\r\n        UMLGeneralEdgeView.prototype.update.call(this);\r\n        // adornment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.adornment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.adornment, \'model\', this.model);\r\n        }\r\n    };\r\n\r\n    UMLExceptionHandlerView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLActivityNode);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLActivityInterruptView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLActivityInterruptView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_STICK_ARROW;\r\n        this.lineMode = Core.LM_SOLID;\r\n\r\n        /** @member {UMLZigZagAdornmentView} */\r\n        this.adornment = new UMLZigZagAdornmentView();\r\n        this.adornment.parentStyle = true;\r\n        this.addSubView(this.adornment);\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLActivityInterruptView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLActivityInterruptView.prototype.constructor = UMLActivityInterruptView;\r\n\r\n    UMLActivityInterruptView.prototype.update = function () {\r\n        UMLGeneralEdgeView.prototype.update.call(this);\r\n        // adornment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.adornment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.adornment, \'model\', this.model);\r\n        }\r\n    };\r\n\r\n    UMLActivityInterruptView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof type.UMLActivityNode);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLSwimlaneView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLSwimlaneView() {\r\n        NodeView.apply(this, arguments);\r\n\r\n        /** @member {Boolean} */\r\n        this.isVertical = true;\r\n\r\n        /** @member {LabelView} */\r\n        this.nameLabel = new LabelView();\r\n        this.nameLabel.horizontalAlignment = Graphics.AL_CENTER;\r\n        this.nameLabel.verticalAlignment = Graphics.AL_TOP;\r\n        this.nameLabel.selectable = Core.SK_NO;\r\n        this.nameLabel.parentStyle = true;\r\n        this.addSubView(this.nameLabel);\r\n    }\r\n    // inherits from NodeView\r\n    UMLSwimlaneView.prototype = Object.create(NodeView.prototype);\r\n    UMLSwimlaneView.prototype.constructor = UMLSwimlaneView;\r\n\r\n    UMLSwimlaneView.prototype.canContainViewKind = function (kind) {\r\n        return MetaModelManager.isKindOf(kind, "UMLActionView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLControlNodeView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLObjectNodeView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLFinalStateView");\r\n    };\r\n\r\n    UMLSwimlaneView.prototype.update = function (canvas) {\r\n        if (this.model) {\r\n            this.nameLabel.text = this.model.name;\r\n            this.nameLabel.visible = (this.model.name.length > 0);\r\n            if (this.isVertical) {\r\n                this.nameLabel.direction = Core.DK_HORZ;\r\n            } else {\r\n                this.nameLabel.direction = Core.DK_VERT;\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLSwimlaneView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        var w, h;\r\n        if (this.isVertical) {\r\n            w = this.nameLabel.minWidth + SWIMLANE_HEADER_LEFT_MARGIN + SWIMLANE_HEADER_RIGHT_MARGIN;\r\n            this.minWidth = Math.max(w, SWIMLANE_VERT_MINWIDTH);\r\n            h = this.nameLabel.minHeight + SWIMLANE_HEADER_TOP_MARGIN + SWIMLANE_HEADER_BOTTOM_MARGIN;\r\n            this.minHeight = Math.max(h, SWIMLANE_VERT_MINHEIGHT);\r\n        } else {\r\n            w = this.nameLabel.minWidth + SWIMLANE_HEADER_TOP_MARGIN + SWIMLANE_HEADER_BOTTOM_MARGIN;\r\n            this.minWidth = Math.max(w, SWIMLANE_HORIZ_MINWIDTH);\r\n            h = this.nameLabel.minHeight + SWIMLANE_HEADER_LEFT_MARGIN + SWIMLANE_HEADER_RIGHT_MARGIN;\r\n            this.minHeight = Math.max(h, SWIMLANE_HORIZ_MINHEIGHT);\r\n        }\r\n    };\r\n\r\n    UMLSwimlaneView.prototype.arrangeObject = function (canvas) {\r\n        // not inherited (SwimlaneView must not be affected by \'AutoResize\' attribute.\r\n        if (this.isVertical) {\r\n            this.nameLabel.direction = Core.DK_HORZ;\r\n            this.nameLabel.width = this.nameLabel.minWidth;\r\n            this.nameLabel.height = this.nameLabel.minHeight;\r\n            this.nameLabel.left = this.left;\r\n            this.nameLabel.setRight(this.getRight());\r\n            this.nameLabel.top = this.top + SWIMLANE_HEADER_TOP_MARGIN;\r\n        } else {\r\n            this.nameLabel.direction = Core.DK_VERT;\r\n            this.nameLabel.width = this.nameLabel.minWidth;\r\n            this.nameLabel.height = this.nameLabel.minHeight;\r\n            this.nameLabel.left = this.left + SWIMLANE_HEADER_TOP_MARGIN;\r\n            this.nameLabel.top = this.top;\r\n            this.nameLabel.setBottom(this.getBottom());\r\n        }\r\n    };\r\n\r\n    UMLSwimlaneView.prototype.drawObject = function (canvas) {\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n        canvas.lineWidth = SWIMLANE_PEN_WIDTH;\r\n        if (this.isVertical) {\r\n            var h = this.top + this.nameLabel.height + SWIMLANE_HEADER_TOP_MARGIN + SWIMLANE_HEADER_BOTTOM_MARGIN;\r\n            canvas.fillRect(this.left, this.top, this.getRight(), h);\r\n            canvas.rect(this.left, this.top, this.getRight(), h);\r\n            canvas.polyline([new Point(this.left, this.getBottom()), new Point(this.left, this.top), new Point(this.getRight(), this.top), new Point(this.getRight(), this.getBottom())]);\r\n        } else {\r\n            var w = this.left + this.nameLabel.width + SWIMLANE_HEADER_TOP_MARGIN + SWIMLANE_HEADER_BOTTOM_MARGIN;\r\n            canvas.fillRect(this.left, this.top, w, this.getBottom());\r\n            canvas.rect(this.left, this.top, w, this.getBottom());\r\n            canvas.polyline([new Point(this.getRight(), this.top), new Point(this.left, this.top), new Point(this.left, this.getBottom()), new Point(this.getRight(), this.getBottom())]);\r\n        }\r\n        canvas.lineWidth = 1;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInterruptibleActivityRegionView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLInterruptibleActivityRegionView() {\r\n        NodeView.apply(this, arguments);\r\n    }\r\n    // inherits from NodeView\r\n    UMLInterruptibleActivityRegionView.prototype = Object.create(NodeView.prototype);\r\n    UMLInterruptibleActivityRegionView.prototype.constructor = UMLInterruptibleActivityRegionView;\r\n\r\n    UMLInterruptibleActivityRegionView.prototype.canContainViewKind = function (kind) {\r\n        return MetaModelManager.isKindOf(kind, "UMLActionView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLControlNodeView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLObjectNodeView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLFinalStateView");\r\n    };\r\n\r\n    UMLInterruptibleActivityRegionView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = 30;\r\n        this.minHeight = 30;\r\n    };\r\n\r\n    UMLInterruptibleActivityRegionView.prototype.drawObject = function (canvas) {\r\n        canvas.roundRect(this.left, this.top, this.getRight(), this.getBottom(), ACTION_ROUND, [3]);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLStructuredActivityNodeView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLStructuredActivityNodeView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.containerChangeable = true;\r\n        this.fillColor = PreferenceManager.get("uml.action.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLStructuredActivityNodeView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLStructuredActivityNodeView.prototype.constructor = UMLStructuredActivityNodeView;\r\n\r\n    UMLStructuredActivityNodeView.prototype.getStereotypeLabelText = function () {\r\n        return "«structured»";\r\n    };\r\n\r\n    UMLStructuredActivityNodeView.prototype.canContainViewKind = function (kind) {\r\n        return MetaModelManager.isKindOf(kind, "UMLActionView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLControlNodeView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLObjectNodeView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLFinalStateView") ||\r\n               MetaModelManager.isKindOf(kind, "UMLStructuredActivityNodeView");\r\n    };\r\n\r\n    UMLStructuredActivityNodeView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        this.nameCompartment.stereotypeLabel.horizontalAlignment = Graphics.AL_LEFT;\r\n        if (this.model) {\r\n            if (this.model.subactivity instanceof type.UMLActivity) {\r\n                this.nameCompartment.nameLabel.text = this.model.name + ":" + this.model.subactivity.name;\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLStructuredActivityNodeView.prototype.drawShadowAsCanonicalForm = function (canvas, showLabel) {\r\n        canvas.fillRoundRect(\r\n            this.mainRect.x1 + SHADOW_OFFSET,\r\n            this.mainRect.y1 + SHADOW_OFFSET,\r\n            this.mainRect.x2 + SHADOW_OFFSET,\r\n            this.mainRect.y2 + SHADOW_OFFSET,\r\n            STATE_ROUND\r\n        );\r\n    };\r\n\r\n    UMLStructuredActivityNodeView.prototype.drawShadowAsDecorationForm = function (canvas) {\r\n        this.drawShadowAsCanonicalForm(canvas);\r\n    };\r\n\r\n    UMLStructuredActivityNodeView.prototype.drawShadowAsIconicForm = function (canvas) {\r\n        this.drawShadowAsCanonicalForm(canvas);\r\n    };\r\n\r\n    UMLStructuredActivityNodeView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRoundRect(this.left, this.top, this.getRight(), this.getBottom(), ACTION_ROUND);\r\n        canvas.roundRect(this.left, this.top, this.getRight(), this.getBottom(), ACTION_ROUND, [3]);\r\n        if (this.model.subactivity !== null) {\r\n            canvas.ellipse(this.getRight()-26, this.getBottom()-16, this.getRight()-20, this.getBottom()-10);\r\n            canvas.line(this.getRight()-20, this.getBottom()-13, this.getRight()-14, this.getBottom()-13);\r\n            canvas.ellipse(this.getRight()-14, this.getBottom()-16, this.getRight()-8, this.getBottom()-10);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLExpansionRegionView\r\n     * @constructor\r\n     * @extends UMLStructuredActivityNodeView\r\n     */\r\n    function UMLExpansionRegionView() {\r\n        UMLStructuredActivityNodeView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLStructuredActivityNodeView\r\n    UMLExpansionRegionView.prototype = Object.create(UMLStructuredActivityNodeView.prototype);\r\n    UMLExpansionRegionView.prototype.constructor = UMLExpansionRegionView;\r\n\r\n    UMLExpansionRegionView.prototype.getStereotypeLabelText = function () {\r\n        switch (this.model.mode) {\r\n        case UML.EK_PARALLEL:\r\n            return "«parallel»";\r\n        case UML.EK_ITERATIVE:\r\n            return "«iterative»";\r\n        case UML.EK_STREAM:\r\n            return "«stream»";\r\n        }\r\n        return this.model.getStereotypeString();\r\n    };\r\n\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                         SEQUENCE DIAGRAM VIEWS                         *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLSequenceDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLSequenceDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n        this.showSequenceNumber = true;\r\n        this.showSignature = true;\r\n        this.showActivation = true;\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLSequenceDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLSequenceDiagram.prototype.constructor = UMLSequenceDiagram;\r\n\r\n    UMLSequenceDiagram.prototype.canAcceptModel = function (model) {\r\n        if (model instanceof type.Hyperlink || model instanceof type.Diagram) {\r\n            return true;\r\n        } else if (model instanceof type.UMLMessageEndpoint ||\r\n            model instanceof type.UMLCombinedFragment ||\r\n            model instanceof type.UMLStateInvariant ||\r\n            model instanceof type.UMLInteraction ||\r\n            model instanceof type.UMLInteractionUse ||\r\n            model instanceof type.UMLContinuation ||\r\n            model instanceof type.UMLMessage) {\r\n            return _.every(this.ownedViews, function (v) { return v.model !== model; });\r\n        } else {\r\n            return (model instanceof type.UMLConstraint) ||\r\n                   (model instanceof type.UMLClassifier);\r\n        }\r\n    };\r\n\r\n    UMLSequenceDiagram.prototype.drawDiagram = function (canvas, drawSelection) {\r\n        var i,\r\n            len,\r\n            view;\r\n\r\n        // Regulate sequence number of message views\r\n        for (i = 0, len = this.ownedViews.length; i < len; i++) {\r\n            view = this.ownedViews[i];\r\n            if (view instanceof UMLSeqMessageView) {\r\n                view.regulateSequenceNumber();\r\n            }\r\n        }\r\n        UMLDiagram.prototype.drawDiagram.call(this, canvas, drawSelection);\r\n    };\r\n\r\n    UMLSequenceDiagram.prototype.layout = function (direction, separations) {\r\n        // TODO: Layout for Sequence Diagram\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLLinePartView (Line Part of LifelineView)\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLLinePartView() {\r\n        NodeView.apply(this, arguments);\r\n        this.movable = Core.MM_NONE;\r\n        this.sizable = Core.SZ_VERT;\r\n        this.selectable = Core.SK_NO;\r\n    }\r\n    // inherits from NodeView\r\n    UMLLinePartView.prototype = Object.create(NodeView.prototype);\r\n    UMLLinePartView.prototype.constructor = UMLLinePartView;\r\n\r\n    /**\r\n     * @param {number} yPosition\r\n     * @return {UMLActivationView}\r\n     */\r\n    UMLLinePartView.prototype.getActivationAt = function (yPosition) {\r\n        var frontMostActivation = null;\r\n        // find the most extruded Activation(FrontMostActivation)\r\n        // regard Activation whose Top position is the lowest as the most extruded Activation\r\n        for (var i = 0, len = this.getDiagram().ownedViews.length; i < len; i++) {\r\n            if (this.getDiagram().ownedViews[i] instanceof UMLSeqMessageView) {\r\n                var msg = this.getDiagram().ownedViews[i];\r\n                if (msg.head === this) {\r\n                    if (msg.activation.visible && (msg.activation.top <= yPosition) && (msg.activation.getBottom() > yPosition)) {\r\n                        if (frontMostActivation !== null) {\r\n                            if (msg.activation.top > frontMostActivation.top) {\r\n                                frontMostActivation = msg.activation;\r\n                            }\r\n                        } else {\r\n                            frontMostActivation = msg.activation;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return frontMostActivation;\r\n    };\r\n\r\n    UMLLinePartView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        // Auto-expanding Lifeline\r\n        var bottomMost = 0;\r\n        for (var i = 0, len = this.getDiagram().ownedViews.length; i < len; i++) {\r\n            if (this.getDiagram().ownedViews[i] instanceof UMLSeqMessageView) {\r\n                var msg = this.getDiagram().ownedViews[i];\r\n                if (msg.model && (msg.model.source === this.model || msg.model.target === this.model)) {\r\n                    var box = msg.getBoundingBox(canvas);\r\n                    if (bottomMost < box.y2) {\r\n                        bottomMost = box.y2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.minWidth = 1;\r\n        if (bottomMost > (this.minHeight + this.top)) {\r\n            this.minHeight = (bottomMost - this.top) + 15;\r\n        } else {\r\n            this.minHeight = LIFELINE_MINHEIGHT;\r\n        }\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLLinePartView.prototype.arrangeObject = function (canvas) {\r\n        NodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.width = this.minWidth;\r\n    };\r\n\r\n    UMLLinePartView.prototype.drawObject = function (canvas) {\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n        var c = this.left + (this.width / 2);\r\n        canvas.line(c, this.top, c, this.getBottom(), [3]);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLSeqLifelineView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLSeqLifelineView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.movable = Core.MM_HORZ;\r\n\r\n        /** @member {UMLLinePartView} */\r\n        this.linePart = new UMLLinePartView();\r\n        this.addSubView(this.linePart);\r\n\r\n        this.fillColor = PreferenceManager.get("uml.lifeline.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLSeqLifelineView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLSeqLifelineView.prototype.constructor = UMLSeqLifelineView;\r\n\r\n    UMLSeqLifelineView.prototype.drawIcon = function (canvas, rect) {\r\n        if (this.model) {\r\n            if (this.model.stereotype && this.model.stereotype.icon) {\r\n                UMLGeneralNodeView.prototype.drawIcon.call(this, canvas, rect);\r\n            } else if (this.model.represent && (this.model.represent.type instanceof type.Model)) {\r\n                var iconRatioBackup = this.iconRatio;\r\n                if (this.model.represent.type instanceof type.UMLActor) {\r\n                    this.iconRatio = ACTOR_RATIO_PERCENT;\r\n                    this.arrangeObject(canvas);\r\n                    UMLActorView.prototype.drawIcon.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type instanceof type.UMLUseCase) {\r\n                    this.iconRatio = USECASE_RATIO_PERCENT;\r\n                    this.arrangeObject(canvas);\r\n                    UMLUseCaseView.prototype.drawIcon.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type instanceof type.UMLInterface) {\r\n                    this.iconRatio = 100;\r\n                    this.arrangeObject(canvas);\r\n                    UMLInterfaceView.prototype.drawBallNotation.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type instanceof type.UMLArtifact) {\r\n                    this.iconRatio = ARTIFACT_RATIO_PERCENT;\r\n                    this.arrangeObject(canvas);\r\n                    UMLArtifactViewMixin.drawIcon.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type instanceof type.UMLComponent) {\r\n                    this.iconRatio = COMPONENT_RATIO_PERCENT;\r\n                    this.arrangeObject(canvas);\r\n                    UMLComponentViewMixin.drawIcon.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type instanceof type.UMLNode) {\r\n                    this.iconRatio = NODE_RATIO_PERCENT;\r\n                    this.arrangeObject(canvas);\r\n                    UMLNodeViewMixin.drawIcon.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type.stereotype && this.model.represent.type.stereotype.icon) {\r\n                    var _icon = this.model.represent.type.stereotype.icon;\r\n                    var _rect = this.computeIconRect(rect, (_icon.width / _icon.height) * 100);\r\n                    drawImage(canvas, _rect, _icon);\r\n                } else {\r\n                    UMLGeneralNodeView.prototype.drawIcon.call(this, canvas, rect);\r\n                }\r\n                this.iconRatio = iconRatioBackup;\r\n                this.arrangeObject(canvas);\r\n            } else {\r\n                UMLGeneralNodeView.prototype.drawIcon.call(this, canvas, rect);\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.update = function () {\r\n        UMLGeneralNodeView.prototype.update.call(this);\r\n        // linePart가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n        if (this.linePart.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.linePart, \'model\', this.model);\r\n        }\r\n        if (this.model) {\r\n            this.nameCompartment.nameLabel.text = this.model.getString(this);\r\n            this.nameCompartment.nameLabel.underline = false;\r\n        }\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.sizeAsCanonicalForm = function (canvas, showLabel) {\r\n        var sz = this.getSizeOfAllCompartments(canvas);\r\n        this.minWidth = Math.max(SEQ_OBJECT_MINWIDTH, sz.x + COMPARTMENT_LEFT_PADDING + COMPARTMENT_RIGHT_PADDING);\r\n        this.minHeight = Math.max(SEQ_OBJECT_MINHEIGHT, sz.y) + this.linePart.minHeight;\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.sizeAsDecorationForm = function (canvas, showLabel) {\r\n        var sz = this.getSizeOfAllCompartments(canvas);\r\n        this.minWidth = Math.max(SEQ_OBJECT_MINWIDTH, this.nameCompartment.minWidth + DECORATION_ICON_WIDTH + COMPARTMENT_LEFT_PADDING + COMPARTMENT_RIGHT_PADDING);\r\n        this.minHeight = Math.max(SEQ_OBJECT_MINHEIGHT, sz.y) + this.linePart.minHeight;\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.sizeAsIconicForm = function (canvas, showLabel) {\r\n        var sz = this.getSizeOfAllCompartments(canvas);\r\n        this.minWidth = Math.max(sz.x, ICONICVIEW_ICONMINWIDTH);\r\n        this.minHeight = ICONICVIEW_ICONMINHEIGHT + sz.y + this.linePart.minHeight;\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.arrangeCommon = function (canvas) {\r\n        // If a create message is connected, Y position should be determined by the Message\'s Y position.\r\n        var _createMessage = null;\r\n        for (var i = 0, len = this.getDiagram().ownedViews.length; i < len; i++) {\r\n            var v = this.getDiagram().ownedViews[i];\r\n            if (v instanceof UMLSeqMessageView &&\r\n                v.model.messageSort === UML.MS_CREATEMESSAGE &&\r\n                v.head === this.linePart) {\r\n                _createMessage = v;\r\n                break;\r\n            }\r\n        }\r\n        if (_createMessage) {\r\n            this.top = Math.round(_createMessage.points.getPoint(1).y - (SEQ_OBJECT_MINHEIGHT / 2));\r\n        } else {\r\n            this.top = LIFELINE_TOP_POSITION;\r\n        }\r\n        this.mainRect.setRect(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.arrangeAsCanonicalForm = function (canvas, showLabel) {\r\n        // not inherited: must not be affected by \'AutoResize\' attribute.\r\n        UMLGeneralNodeView.prototype.arrangeAsCanonicalForm.call(this, canvas, showLabel);\r\n        this.nameCompartment.height = SEQ_OBJECT_MINHEIGHT;\r\n        this.linePart.top = this.nameCompartment.getBottom() + 1;\r\n        this.linePart.left = Math.round(this.left + (this.width / 2));\r\n        this.linePart.setBottom(this.getBottom());\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.arrangeAsDecorationForm = function (canvas, showLabel) {\r\n        // not inherited: must not be affected by \'AutoResize\' attribute.\r\n        UMLGeneralNodeView.prototype.arrangeAsDecorationForm.call(this, canvas, showLabel);\r\n        this.linePart.top = this.nameCompartment.getBottom() + 1;\r\n        this.linePart.left = Math.round(this.left + (this.width / 2));\r\n        this.linePart.setBottom(this.getBottom());\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.arrangeAsIconicForm = function (canvas, showLabel) {\r\n        // UMLGeneralNodeView.prototype.arrangeAsIconicForm.call(this, canvas);\r\n        var sz = this.getSizeOfAllCompartments(canvas);\r\n        var r  = new Rect(this.mainRect.x1, this.mainRect.y1, this.mainRect.x2, this.mainRect.y1 + SEQ_OBJECT_MINHEIGHT);\r\n        this.iconRect = this.computeIconRect(r, this.iconRatio);\r\n        var r2 = new Rect(this.mainRect.x1, this.mainRect.y1 + this.iconRect.getHeight(), this.mainRect.x2, this.mainRect.y2);\r\n        this.arrangeAllCompartments(r2, canvas);\r\n        this.linePart.top = this.nameCompartment.getBottom() + 1;\r\n        this.linePart.left = Math.round(this.left + (this.width / 2));\r\n        this.linePart.setBottom(this.getBottom());\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.drawCommon = function (canvas) {\r\n        // draw nothing\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.drawAsCanonicalForm = function (canvas, showLabel) {\r\n        UMLGeneralNodeView.prototype.drawAsCanonicalForm.call(this, canvas);\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.nameCompartment.getBottom());\r\n        if (this.model.isMultiInstance) {\r\n            canvas.rect(r.x1 + MULTI_INSTANCE_MARGIN, r.y1 + MULTI_INSTANCE_MARGIN, r.x2 + MULTI_INSTANCE_MARGIN, r.y2 + MULTI_INSTANCE_MARGIN);\r\n        }\r\n        canvas.fillRect(r.x1, r.y1, r.x2, r.y2);\r\n        canvas.rect(r.x1, r.y1, r.x2, r.y2);\r\n        if (this.model.represent && this.model.represent.type && this.model.represent.type.isActive === true) {\r\n            canvas.line(this.left + CLASS_ACTIVE_VERTLINE_WIDTH, this.nameCompartment.top, this.left + CLASS_ACTIVE_VERTLINE_WIDTH, this.nameCompartment.getBottom());\r\n            canvas.line(this.getRight() - CLASS_ACTIVE_VERTLINE_WIDTH, this.nameCompartment.top, this.getRight() - CLASS_ACTIVE_VERTLINE_WIDTH, this.nameCompartment.getBottom());\r\n        }\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.drawAsDecorationForm = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.nameCompartment.getBottom());\r\n        if (this.model.isMultiInstance) {\r\n            canvas.rect(r.x1 + MULTI_INSTANCE_MARGIN, r.y1 + MULTI_INSTANCE_MARGIN, r.x2 + MULTI_INSTANCE_MARGIN, r.y2 + MULTI_INSTANCE_MARGIN);\r\n        }\r\n        canvas.fillRect(r.x1, r.y1, r.x2, r.y2);\r\n        canvas.rect(r.x1, r.y1, r.x2, r.y2);\r\n        if (this.model.represent && this.model.represent.type && this.model.represent.type.isActive === true) {\r\n            canvas.line(this.left + CLASS_ACTIVE_VERTLINE_WIDTH, this.nameCompartment.top, this.left + CLASS_ACTIVE_VERTLINE_WIDTH, this.nameCompartment.getBottom());\r\n            canvas.line(this.getRight() - CLASS_ACTIVE_VERTLINE_WIDTH, this.nameCompartment.top, this.getRight() - CLASS_ACTIVE_VERTLINE_WIDTH, this.nameCompartment.getBottom());\r\n        }\r\n        UMLGeneralNodeView.prototype.drawAsDecorationForm.call(this, canvas);\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.drawAsIconicForm = function (canvas) {\r\n        UMLGeneralNodeView.prototype.drawAsIconicForm.call(this, canvas);\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.drawShadowAsCanonicalForm = function (canvas) {\r\n        canvas.fillRect(this.left + SHADOW_OFFSET, this.top + SHADOW_OFFSET, this.getRight() + SHADOW_OFFSET, this.nameCompartment.getBottom() + SHADOW_OFFSET);\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.drawShadowAsDecorationForm = function (canvas) {\r\n        canvas.fillRect(this.left + SHADOW_OFFSET, this.top + SHADOW_OFFSET, this.getRight() + SHADOW_OFFSET, this.nameCompartment.getBottom() + SHADOW_OFFSET);\r\n    };\r\n\r\n    UMLSeqLifelineView.prototype.drawShadowAsIconicForm = function (canvas) {\r\n        /*\r\n        canvas.fillRect(\r\n            this.iconRect.x1 + SHADOW_OFFSET,\r\n            this.iconRect.y1 + SHADOW_OFFSET,\r\n            this.iconRect.x2 + SHADOW_OFFSET,\r\n            this.iconRect.y2 + SHADOW_OFFSET\r\n        );\r\n        */\r\n    };\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLSeqLifelineView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLSeqLifelineView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    var MESSAGEENDPOINT_MINWIDTH = 15,\r\n        MESSAGEENDPOINT_MINHEIGHT = 15;\r\n\r\n    /**\r\n     * UMLMessageEndpointView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLMessageEndpointView() {\r\n        NodeView.apply(this, arguments);\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_HORZ;\r\n    }\r\n    // inherits from NodeView\r\n    UMLMessageEndpointView.prototype = Object.create(NodeView.prototype);\r\n    UMLMessageEndpointView.prototype.constructor = UMLMessageEndpointView;\r\n\r\n    UMLMessageEndpointView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = MESSAGEENDPOINT_MINWIDTH;\r\n        this.minHeight = MESSAGEENDPOINT_MINHEIGHT;\r\n    };\r\n\r\n    /**\r\n     * Movable freely when nothing connected,\r\n     * but movable horizontally only when a message is connected.\r\n     */\r\n    UMLMessageEndpointView.prototype.arrangeObject = function (canvas) {\r\n        this.width = this.minWidth;\r\n        this.height = this.minHeight;\r\n        var edges = Repository.getEdgeViewsOf(this);\r\n        if (edges.length > 0) {\r\n            this.movable = Core.MM_HORZ;\r\n        } else {\r\n            this.movable = Core.MM_FREE;\r\n        }\r\n        NodeView.prototype.arrangeObject.call(this, canvas);\r\n    };\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLMessageEndpointView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLMessageEndpointView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLEndpointView\r\n     * @constructor\r\n     * @extends UMLMessageEndpointView\r\n     */\r\n    function UMLEndpointView() {\r\n        UMLMessageEndpointView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLMessageEndpointView\r\n    UMLEndpointView.prototype = Object.create(UMLMessageEndpointView.prototype);\r\n    UMLEndpointView.prototype.constructor = UMLEndpointView;\r\n\r\n    UMLEndpointView.prototype.drawObject = function (canvas) {\r\n        canvas.fillColor = this.lineColor;\r\n        canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLGateView\r\n     * @constructor\r\n     * @extends UMLMessageEndpointView\r\n     */\r\n    function UMLGateView() {\r\n        UMLMessageEndpointView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLMessageEndpointView\r\n    UMLGateView.prototype = Object.create(UMLMessageEndpointView.prototype);\r\n    UMLGateView.prototype.constructor = UMLGateView;\r\n\r\n    UMLGateView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLActivationView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLActivationView() {\r\n        NodeView.apply(this, arguments);\r\n        this.sizable = Core.SZ_VERT;\r\n        this.movable = Core.MM_NONE;\r\n    }\r\n    // inherits from NodeView\r\n    UMLActivationView.prototype = Object.create(NodeView.prototype);\r\n    UMLActivationView.prototype.constructor = UMLActivationView;\r\n\r\n    UMLActivationView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = ACTIVATION_MINWIDTH;\r\n        this.minHeight = ACTIVATION_MINHEIGHT;\r\n    };\r\n\r\n    UMLActivationView.prototype.arrangeObject = function (canvas) {\r\n        var messageView      = this._parent,\r\n            linePart         = messageView.head,\r\n            parentActivation = (linePart instanceof UMLLinePartView ? linePart.getActivationAt(this.top - 1) : null);\r\n\r\n        this.top = messageView.points.getPoint(messageView.points.count() - 1).y;\r\n        this.width = ACTIVATION_MINWIDTH;\r\n        // Left position extrudes a little right than Parent Activation\r\n        if (parentActivation !== null) {\r\n            this.left = parentActivation.left + (ACTIVATION_MINWIDTH / 2);\r\n        } else {\r\n            this.left = linePart.left - (ACTIVATION_MINWIDTH / 2);\r\n        }\r\n        // if Activation is not shown\r\n        if (!this.visible) {\r\n            if (parentActivation !== null) {\r\n                this.left = parentActivation.left;\r\n            } else {\r\n                this.left = linePart.left;\r\n            }\r\n        // if Activation is shown\r\n        } else {\r\n            // Height must wrap all Child Activations at least.\r\n            //   - Child Activation satisfies below conditions\r\n            //     (1) in all current LifeLine\'s In-coming Messages,\r\n            //     (2) if its head side\'s y position is between Top and Bottom,\r\n            //     (3) the message\'s Activation is really Child Activation.\r\n            var minimumBottom = this.top + ACTIVATION_MINHEIGHT;\r\n            for (var i = 0, len = this.getDiagram().ownedViews.length; i < len; i++) {\r\n                if (this.getDiagram().ownedViews[i] instanceof UMLSeqMessageView) {\r\n                    var msg = this.getDiagram().ownedViews[i];\r\n                    if ((msg.head == linePart) && (msg != messageView)) {\r\n                        var y = msg.points.getPoint(msg.points.count() - 1).y;\r\n                        if ((this.top <= y) && (this.getBottom() > y)) {\r\n                            if (msg.activation.visible && (msg.activation.getBottom() > minimumBottom)) {\r\n                                minimumBottom = msg.activation.getBottom();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (this.getBottom() < minimumBottom + 3) {\r\n                this.setBottom(minimumBottom + 3);\r\n            }\r\n        }\r\n        NodeView.prototype.arrangeObject.call(this, canvas);\r\n    };\r\n\r\n    UMLActivationView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLActivationView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLActivationView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLSeqMessageView\r\n     * @constructor\r\n     * @extends EdgeView\r\n     */\r\n    function UMLSeqMessageView() {\r\n        EdgeView.apply(this, arguments);\r\n        this.lineStyle = Core.LS_RECTILINEAR;\r\n        this.zIndex = 1;\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.nameLabel = new EdgeLabelView();\r\n        this.nameLabel.hostEdge = this;\r\n        this.nameLabel.edgePosition = Core.EP_MIDDLE;\r\n        this.nameLabel.distance = 10;\r\n        this.nameLabel.alpha = Math.PI / 2;\r\n        this.addSubView(this.nameLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.stereotypeLabel = new EdgeLabelView();\r\n        this.stereotypeLabel.hostEdge = this;\r\n        this.stereotypeLabel.edgePosition = Core.EP_MIDDLE;\r\n        this.stereotypeLabel.distance = 25;\r\n        this.stereotypeLabel.alpha = Math.PI / 2;\r\n        this.addSubView(this.stereotypeLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.propertyLabel = new EdgeLabelView();\r\n        this.propertyLabel.hostEdge = this;\r\n        this.propertyLabel.edgePosition = Core.EP_MIDDLE;\r\n        this.propertyLabel.distance = 10;\r\n        this.propertyLabel.alpha = -Math.PI / 2;\r\n        this.addSubView(this.propertyLabel);\r\n\r\n        /** @member {UMLActivationView} */\r\n        this.activation = new UMLActivationView();\r\n        this.addSubView(this.activation);\r\n\r\n        /** @member {boolean} */\r\n        this.showProperty = true;\r\n\r\n        /** @member {boolean} */\r\n        this.showType = true;\r\n    }\r\n    // inherits from EdgeView\r\n    UMLSeqMessageView.prototype = Object.create(EdgeView.prototype);\r\n    UMLSeqMessageView.prototype.constructor = UMLSeqMessageView;\r\n\r\n    UMLSeqMessageView.prototype._fixPointCount = function (cnt, xpos, ypos) {\r\n        if (this.points.count() != cnt) {\r\n            this.points.clear();\r\n            for (var pi = 1; pi <= cnt; pi++) {\r\n                this.points.add(new Point(xpos, ypos));\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    UMLSeqMessageView.prototype._getSequenceNumberByPos = function (xpos, ypos) {\r\n        var seqNum = 0,\r\n            views  = this.getDiagram().ownedViews;\r\n        for (var i = 0, len = views.length; i < len; i++) {\r\n            var v = views[i];\r\n            if (v instanceof UMLSeqMessageView) {\r\n                if (v.points.getPoint(0).y < ypos) {\r\n                    seqNum = seqNum + 1;\r\n                } else if (v.points.getPoint(0).y == ypos) {\r\n                    if (v.points.getPoint(0).x < xpos) {\r\n                        seqNum = seqNum + 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return seqNum;\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    UMLSeqMessageView.prototype._indexOfMessageView = function (model) {\r\n        var dgm = this.getDiagram();\r\n        for (var i = 0, len = dgm.ownedViews.length; i < len; i++) {\r\n            var v = dgm.ownedViews[i];\r\n            if (v.model == model) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    UMLSeqMessageView.prototype.regulateSequenceNumber = function () {\r\n        // var fromLine       = this.tail,\r\n        //     fromActivation = fromLine.getActivationAt(this.points.getPoint(0).y),\r\n        var dgm            = this.getDiagram(),\r\n            msg            = this.model,\r\n            interaction    = this.model._parent,\r\n            sn             = _.indexOf(interaction.messages, msg),\r\n            sn2            = this._getSequenceNumberByPos(this.points.getPoint(0).x, this.points.getPoint(0).y);\r\n        // determine sequence number\r\n        if (sn != sn2) {\r\n            // change by ownedViews\' index to correspond to SequenceNumber.\r\n            var c = this._indexOfMessageView(interaction.messages[sn2]);\r\n            dgm.ownedViews.remove(this);\r\n            dgm.ownedViews.insert(c, this);\r\n            // move at interactions\' index to correspond to SequenceNumber.\r\n            interaction.messages.remove(msg);\r\n            interaction.messages.insert(sn2, msg);\r\n        }\r\n    };\r\n\r\n    UMLSeqMessageView.prototype.update = function () {\r\n        EdgeView.prototype.update.call(this);\r\n        if (this.model) {\r\n            var options = {\r\n                showSequenceNumber : this.getDiagram().showSequenceNumber,\r\n                showSignature      : this.getDiagram().showSignature,\r\n                showActivation     : this.getDiagram().showActivation,\r\n                showType           : this.showType\r\n            };\r\n            this.nameLabel.text = this.model.getString(options);\r\n            this.nameLabel.visible = (this.nameLabel.text.length > 0);\r\n            this.stereotypeLabel.visible = (this.stereotypeLabel.text.length > 0);\r\n            this.activation.visible = (this.head instanceof UMLLinePartView &&\r\n                                       options.showActivation &&\r\n                                       ((this.model.messageSort === UML.MS_SYNCHCALL) ||\r\n                                        (this.model.messageSort === UML.MS_ASYNCHCALL) ||\r\n                                        (this.model.messageSort === UML.MS_DELETEMESSAGE)));\r\n            // line style\r\n            if ((this.model.messageSort === UML.MS_REPLY) || (this.model.messageSort === UML.MS_CREATEMESSAGE)) {\r\n                this.lineMode = Core.LM_DOT;\r\n            } else {\r\n                this.lineMode = Core.LM_SOLID;\r\n            }\r\n            // head end style\r\n            if ((this.model.messageSort === UML.MS_ASYNCHCALL) ||\r\n                (this.model.messageSort === UML.MS_ASYNCHSIGNAL) ||\r\n                (this.model.messageSort === UML.MS_CREATEMESSAGE) ||\r\n                (this.model.messageSort === UML.MS_REPLY)) {\r\n                this.headEndStyle = Core.ES_STICK_ARROW;\r\n            } else {\r\n                this.headEndStyle = Core.ES_SOLID_ARROW;\r\n            }\r\n            // stereotype\r\n            if (this.model.messageSort === UML.MS_CREATEMESSAGE) {\r\n                this.stereotypeLabel.text = "«create»";\r\n            } else if (this.model.messageSort === UML.MS_DELETEMESSAGE) {\r\n                this.stereotypeLabel.text = "«destroy»";\r\n            } else if (hasValue(this.model.stereotype)) {\r\n                this.stereotypeLabel.text = this.model.getStereotypeString();\r\n            } else {\r\n                this.stereotypeLabel.text = "";\r\n            }\r\n            // propertyLabel\r\n            this.propertyLabel.text = this.model.getPropertyString();\r\n            this.propertyLabel.visible = (this.showProperty ? this.propertyLabel.text.length > 0 : false);\r\n            // activation가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.activation.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.activation, \'model\', this.model);\r\n            }\r\n            // nameLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.nameLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.nameLabel, \'model\', this.model);\r\n            }\r\n            // stereotypeLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.stereotypeLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.stereotypeLabel, \'model\', this.model);\r\n            }\r\n            // propertyLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.propertyLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.propertyLabel, \'model\', this.model);\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLSeqMessageView.prototype.arrange = function (canvas) {\r\n        // arrange activation\r\n        this.activation.arrangeObject(canvas);\r\n        // if head or tail is MessageEndpointView\r\n        if (this.head instanceof UMLMessageEndpointView) {\r\n            this.head.top = this.points.getPoint(1).y - (this.head.height / 2);\r\n        }\r\n        if (this.tail instanceof UMLMessageEndpointView) {\r\n            this.tail.top = this.points.getPoint(1).y - (this.tail.height / 2);\r\n        }\r\n        EdgeView.prototype.arrange.call(this, canvas);\r\n        // if create message, head\'s X position should be the left of Lifeline.\r\n        if (this.model.messageSort === UML.MS_CREATEMESSAGE) {\r\n             if (this.points.getPoint(1).x > this.points.getPoint(0).x) {\r\n                 if (this.head._parent instanceof UMLSeqLifelineView) {\r\n                     var lifeline = this.head._parent;\r\n                     this.points.getPoint(1).x = lifeline.left;\r\n                 }\r\n             }\r\n        }\r\n    };\r\n\r\n    UMLSeqMessageView.prototype.arrangeObject = function (canvas) {\r\n        // default variable values\r\n        this.lineStyle = Core.LS_RECTILINEAR;\r\n        EdgeView.prototype.arrangeObject.call(this, canvas);\r\n\r\n        var fromLifeline   = this.tail,\r\n            fromActivation = (fromLifeline instanceof UMLLinePartView ? fromLifeline.getActivationAt(this.points.getPoint(0).y) : null),\r\n            toLifeline     = this.head,\r\n            toActivation   = (toLifeline instanceof UMLLinePartView ? toLifeline.getActivationAt(this.points.getPoint(this.points.count() - 1).y) : null);\r\n\r\n        // (1) in case of Self message\r\n        if (this.head === this.tail) {\r\n            this._fixPointCount(4, this.points.getPoint(0).x, this.points.getPoint(0).y);\r\n            if ((fromActivation !== null) && fromActivation.visible) {\r\n                this.points.setPoint(0, new Point(fromActivation.getRight(), this.points.getPoint(0).y));\r\n            } else {\r\n                this.points.setPoint(0, new Point(fromLifeline.getRight(), this.points.getPoint(0).y));\r\n            }\r\n            this.points.setPoint(1, new Point(this.points.getPoint(0).x + SELF_MESSAGE_WIDTH, this.points.getPoint(0).y));\r\n            this.points.setPoint(2, new Point(this.points.getPoint(0).x + SELF_MESSAGE_WIDTH, this.points.getPoint(0).y + SELF_MESSAGE_HEIGHT));\r\n            if ((toActivation !== null) && toActivation.visible) {\r\n                this.points.setPoint(3, new Point(this.activation.getRight(), this.points.getPoint(0).y + SELF_MESSAGE_HEIGHT));\r\n            } else {\r\n                this.points.setPoint(3, new Point(this.tail.getRight(), this.points.getPoint(0).y + SELF_MESSAGE_HEIGHT));\r\n            }\r\n        // (2) in case of left-to-right directed message\r\n        } else if (this.points.getPoint(1).x > this.points.getPoint(0).x) {\r\n            this._fixPointCount(2, this.points.getPoint(0).x, this.points.getPoint(0).y);\r\n            if ((fromActivation !== null) && fromActivation.visible) {\r\n                this.points.setPoint(0, new Point(fromActivation.getRight(), this.points.getPoint(0).y));\r\n            } else {\r\n                this.points.setPoint(0, new Point(fromLifeline.getRight(), this.points.getPoint(0).y));\r\n            }\r\n            if ((toActivation !== null) && toActivation.visible) {\r\n                this.points.setPoint(1, new Point(this.activation.left, this.points.getPoint(0).y));\r\n            } else {\r\n                this.points.setPoint(1, new Point(this.head.left, this.points.getPoint(0).y));\r\n            }\r\n        // (3) in case of right-to-left direced message\r\n        } else {\r\n            this._fixPointCount(2, this.points.getPoint(0).x, this.points.getPoint(0).y);\r\n            if ((fromActivation !== null) && fromActivation.visible) {\r\n                this.points.setPoint(0, new Point(fromActivation.left, this.points.getPoint(0).y));\r\n            } else {\r\n                this.points.setPoint(0, new Point(fromLifeline.left, this.points.getPoint(0).y));\r\n            }\r\n            if ((toActivation !== null) && toActivation.visible) {\r\n                this.points.setPoint(1, new Point(this.activation.getRight(), this.points.getPoint(0).y));\r\n            } else {\r\n                this.points.setPoint(1, new Point(this.head.getRight(), this.points.getPoint(0).y));\r\n            }\r\n        }\r\n        this.update();\r\n    };\r\n\r\n    UMLSeqMessageView.prototype.drawObject = function (canvas) {\r\n        EdgeView.prototype.drawObject.call(this, canvas);\r\n        if (this.model.messageSort === UML.MS_DELETEMESSAGE) {\r\n            var lifeline = this.head,\r\n                bottom   = lifeline.getBottom(),\r\n                center   = (lifeline.left + lifeline.getRight()) / 2;\r\n            canvas.line(center - 10, bottom - 10, center + 10, bottom + 10);\r\n            canvas.line(center + 10, bottom - 10, center - 10, bottom + 10);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    UMLSeqMessageView.prototype.initialize = function (canvas, x1, y1, x2, y2) {\r\n        this.lineStyle = Core.LS_RECTILINEAR;\r\n        if (this.head != this.tail) {\r\n            this.points.clear();\r\n            this.points.add(new Point(this.tail.getRight(), y1));\r\n            this.points.add(new Point(this.head.left, y2));\r\n        } else { // Self Message\r\n            this.points.clear();\r\n            this.points.add(new Point(x1, y1));\r\n            this.points.add(new Point(x1, y1));\r\n            this.points.add(new Point(x1, y1));\r\n            this.points.add(new Point(x1, y1));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLSeqMessageView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLSeqMessageView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Determine where it can be connected to\r\n     */\r\n    UMLSeqMessageView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model && view.model instanceof type.UMLMessageEndpoint);\r\n    };\r\n\r\n    /**\r\n     * UMLStateInvariantView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLStateInvariantView() {\r\n        NodeView.apply(this, arguments);\r\n        this.movable = Core.MM_VERT;\r\n        this.zIndex = 1;\r\n\r\n        /** @member {LabelView} */\r\n        this.invariantLabel = new LabelView();\r\n        this.invariantLabel.horizontalAlignment = Graphics.AL_CENTER;\r\n        this.invariantLabel.verticalAlignment = Graphics.AL_MIDDLE;\r\n        this.addSubView(this.invariantLabel);\r\n    }\r\n    // inherits from NodeView\r\n    UMLStateInvariantView.prototype = Object.create(NodeView.prototype);\r\n    UMLStateInvariantView.prototype.constructor = UMLStateInvariantView;\r\n\r\n    UMLStateInvariantView.prototype.update = function (canvas) {\r\n        NodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.invariantLabel.text = "{" + this.model.invariant + "}";\r\n        }\r\n    };\r\n\r\n    UMLStateInvariantView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = Math.max(this.invariantLabel.minWidth, STATEINVARIANT_MINWIDTH);\r\n        this.minHeight = Math.max(this.invariantLabel.minHeight, STATEINVARIANT_MINHEIGHT);\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLStateInvariantView.prototype.arrangeObject = function (canvas) {\r\n        NodeView.prototype.arrangeObject.call(this, canvas);\r\n        if (this._parent instanceof UMLSeqLifelineView) {\r\n            this.left = this._parent.linePart.left - (this.width / 2);\r\n        }\r\n        this.invariantLabel.top  = this.top + (this.height - this.invariantLabel.height) / 2;\r\n        this.invariantLabel.left  = this.left + (this.width - this.invariantLabel.width) / 2;\r\n    };\r\n\r\n    UMLStateInvariantView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRoundRect(this.left, this.top, this.getRight(), this.getBottom(), STATE_ROUND);\r\n        canvas.roundRect(this.left, this.top, this.getRight(), this.getBottom(), STATE_ROUND);\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLStateInvariantView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLStateInvariantView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLContinuationView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLContinuationView() {\r\n        NodeView.apply(this, arguments);\r\n        this.zIndex = 1;\r\n\r\n        /** @member {LabelView} */\r\n        this.nameLabel = new LabelView();\r\n        this.nameLabel.horizontalAlignment = Graphics.AL_CENTER;\r\n        this.nameLabel.verticalAlignment = Graphics.AL_MIDDLE;\r\n        this.addSubView(this.nameLabel);\r\n    }\r\n    // inherits from NodeView\r\n    UMLContinuationView.prototype = Object.create(NodeView.prototype);\r\n    UMLContinuationView.prototype.constructor = UMLContinuationView;\r\n\r\n    UMLContinuationView.prototype.update = function (canvas) {\r\n        NodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameLabel.text = this.model.name;\r\n        }\r\n    };\r\n\r\n    UMLContinuationView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = Math.max(this.nameLabel.minWidth, CONTINUATION_MINWIDTH);\r\n        this.minHeight = Math.max(this.nameLabel.minHeight, CONTINUATION_MINHEIGHT);\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLContinuationView.prototype.arrangeObject = function (canvas) {\r\n        NodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.nameLabel.top  = this.top + (this.height - this.nameLabel.height) / 2;\r\n        this.nameLabel.left  = this.left + (this.width - this.nameLabel.width) / 2;\r\n    };\r\n\r\n    UMLContinuationView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRoundRect(this.left, this.top, this.getRight(), this.getBottom(), STATE_ROUND);\r\n        canvas.roundRect(this.left, this.top, this.getRight(), this.getBottom(), STATE_ROUND);\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLContinuationView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLContinuationView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLCustomFrameView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLCustomFrameView() {\r\n        NodeView.apply(this, arguments);\r\n\r\n        /** @member {LabelView} */\r\n        this.nameLabel = new LabelView();\r\n        this.nameLabel.parentStyle = true;\r\n        this.addSubView(this.nameLabel);\r\n\r\n        /** @member {LabelView} */\r\n        this.frameTypeLabel = new LabelView();\r\n        this.frameTypeLabel.parentStyle = true;\r\n        this.addSubView(this.frameTypeLabel);\r\n    }\r\n    // inherits from NodeView\r\n    UMLCustomFrameView.prototype = Object.create(NodeView.prototype);\r\n    UMLCustomFrameView.prototype.constructor = UMLCustomFrameView;\r\n\r\n    UMLCustomFrameView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        var h = Math.max(this.frameTypeLabel.minHeight, this.nameLabel.minHeight) + COMPARTMENT_TOP_PADDING + COMPARTMENT_BOTTOM_PADDING;\r\n        this.minHeight = Math.max(h + FRAME_CONTENT_MINHEIGHT, FRAME_MINHEIGHT);\r\n        var w = this.frameTypeLabel.minWidth + this.nameLabel.minWidth;\r\n        if (this.frameTypeLabel.visible && this.frameTypeLabel.visible) {\r\n            w = w + LABEL_INTERVAL;\r\n        }\r\n        w = w + COMPARTMENT_LEFT_PADDING + COMPARTMENT_RIGHT_PADDING + h / 2;\r\n        this.minWidth = Math.max(w + FRAME_CONTENT_MINWIDTH, FRAME_MINWIDTH);\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLCustomFrameView.prototype.arrangeObject = function (canvas) {\r\n        NodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.frameTypeLabel.font.style = Graphics.FS_BOLD;\r\n        this.frameTypeLabel.left = this.left + COMPARTMENT_LEFT_PADDING;\r\n        this.frameTypeLabel.top = this.top + COMPARTMENT_TOP_PADDING;\r\n        this.frameTypeLabel.setRight(this.frameTypeLabel.left + this.frameTypeLabel.minWidth);\r\n        if (this.frameTypeLabel.visible) {\r\n            this.nameLabel.left = this.frameTypeLabel.getRight() + LABEL_INTERVAL * 2;\r\n        } else {\r\n            this.nameLabel.left = this.left + COMPARTMENT_LEFT_PADDING;\r\n        }\r\n        this.nameLabel.top = this.top + COMPARTMENT_TOP_PADDING;\r\n        this.nameLabel.setRight(this.nameLabel.left + this.nameLabel.minWidth);\r\n    };\r\n\r\n    UMLCustomFrameView.prototype.drawObject = function (canvas) {\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n        var y = Math.max(this.frameTypeLabel.getBottom(), this.nameLabel.getBottom()) + COMPARTMENT_BOTTOM_PADDING,\r\n            h = y - this.top,\r\n            x = this.nameLabel.getRight() + COMPARTMENT_RIGHT_PADDING + h / 2;\r\n        canvas.polyline([new Point(this.left, this.top), new Point(this.getRight(), this.top), new Point(this.getRight(), this.getBottom()), new Point(this.left, this.getBottom()), new Point(this.left, this.top)]);\r\n        canvas.fillPolygon([new Point(this.left, this.top), new Point(this.left, y), new Point(x - h / 2, y), new Point(x, this.top + h / 2), new Point(x, this.top), new Point(this.left, this.top)]);\r\n        canvas.polygon([new Point(this.left, this.top), new Point(this.left, y), new Point(x - h / 2, y), new Point(x, this.top + h / 2), new Point(x, this.top), new Point(this.left, this.top)]);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLFrameView\r\n     * @constructor\r\n     * @extends UMLCustomFrameView\r\n     */\r\n    function UMLFrameView() {\r\n        UMLCustomFrameView.apply(this, arguments);\r\n        this.zIndex = -1;\r\n    }\r\n    // inherits from UMLCustomFrameView\r\n    UMLFrameView.prototype = Object.create(UMLCustomFrameView.prototype);\r\n    UMLFrameView.prototype.constructor = UMLFrameView;\r\n\r\n    UMLFrameView.prototype.update = function (canvas) {\r\n        UMLCustomFrameView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            // frame kind\r\n            if (this.model instanceof type.UMLClass || this.model instanceof type.UMLClassDiagram) {\r\n                this.frameTypeLabel.text = "class";\r\n            } else if (this.model instanceof type.UMLComponent || this.model instanceof type.UMLComponentDiagram) {\r\n                this.frameTypeLabel.text = "component";\r\n            } else if (this.model instanceof type.UMLDeploymentDiagram) {\r\n                this.frameTypeLabel.text = "deployment";\r\n            } else if (this.model instanceof type.UMLInteraction || this.model instanceof type.UMLSequenceDiagram || this.model instanceof type.UMLCommunicationDiagram) {\r\n                this.frameTypeLabel.text = "interaction";\r\n            } else if (this.model instanceof type.UMLStateMachine || this.model instanceof type.UMLStatechartDiagram) {\r\n                this.frameTypeLabel.text = "state machine";\r\n            } else if (this.model instanceof type.UMLActivity || this.model instanceof type.UMLActivityDiagram) {\r\n                this.frameTypeLabel.text = "activity";\r\n            } else if (this.model instanceof type.UMLUseCase || this.model instanceof type.UMLUseCaseDiagram) {\r\n                this.frameTypeLabel.text = "use case";\r\n            } else if (this.model instanceof type.UMLPackage || this.model instanceof type.UMLPackageDiagram) {\r\n                this.frameTypeLabel.text = "package";\r\n            }\r\n            // name\r\n            if (this.model.name.length > 0) {\r\n                this.nameLabel.text = this.model.name;\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInteractionOperandView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLInteractionOperandView() {\r\n        NodeView.apply(this, arguments);\r\n        this.selectable = Core.SK_YES;\r\n        this.movable = Core.MM_NONE;\r\n        this.sizable = Core.SZ_VERT;\r\n        this.parentStyle = true;\r\n        this.minHeight = 15;\r\n        this.height = 30;\r\n\r\n        /** @member {LabelView} */\r\n        this.guardLabel = new LabelView();\r\n        this.addSubView(this.guardLabel);\r\n    }\r\n    // inherits from LabelView\r\n    UMLInteractionOperandView.prototype = Object.create(NodeView.prototype);\r\n    UMLInteractionOperandView.prototype.constructor = UMLInteractionOperandView;\r\n\r\n    UMLInteractionOperandView.prototype._isTopOperandView = function () {\r\n        var result = true;\r\n        if (this._parent !== null) {\r\n            for (var i = 0, len = this._parent.subViews.length; i < len; i++) {\r\n                var v = this._parent.subViews[i];\r\n                if ((v instanceof UMLInteractionOperandView) && (v !== this)) {\r\n                    if (v.top < this.top) {\r\n                        result = false;\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    UMLInteractionOperandView.prototype.update = function (canvas) {\r\n        NodeView.prototype.update.call(this, canvas);\r\n        if (this._parent) {\r\n            this.visible = this._parent.visible;\r\n        }\r\n        if (this.model) {\r\n            if (hasValue(this.model.guard)) {\r\n                this.guardLabel.text = \'[\' + this.model.guard + \']\';\r\n            } else {\r\n                this.guardLabel.text = \'\';\r\n            }\r\n            this.guardLabel.visible = (this.guardLabel.text.length > 0);\r\n        }\r\n    };\r\n\r\n    UMLInteractionOperandView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = Math.max(this.guardLabel.minWidth + INTERACTIONOPERAND_GUARD_HORZ_MARGIN * 2, INTERACTIONOPERAND_MINWIDTH);\r\n        this.minHeight = Math.max(this.guardLabel.minHeight + INTERACTIONOPERAND_GUARD_VERT_MARGIN * 2, INTERACTIONOPERAND_MINHEIGHT);\r\n    };\r\n\r\n    UMLInteractionOperandView.prototype.arrangeObject = function (canvas) {\r\n        NodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.guardLabel.left = this.left + INTERACTIONOPERAND_GUARD_HORZ_MARGIN;\r\n        this.guardLabel.top = this.top + INTERACTIONOPERAND_GUARD_VERT_MARGIN;\r\n        this.guardLabel.width = this.guardLabel.minWidth;\r\n        this.guardLabel.height = this.guardLabel.minHeight;\r\n    };\r\n\r\n    UMLInteractionOperandView.prototype.drawObject = function (canvas) {\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n        if (!this._isTopOperandView()) {\r\n            canvas.line(this.left, this.top, this.getRight(), this.top, [10,3]);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLInteractionOperandView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLInteractionOperandView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInteractionOperandCompartmentView\r\n     * @constructor\r\n     * @extends UMLCompartmentView\r\n     */\r\n    function UMLInteractionOperandCompartmentView() {\r\n        UMLCompartmentView.apply(this, arguments);\r\n        this.minHeight = 15;\r\n\r\n        /* temporal */\r\n        this._leftPadding   = 0;\r\n        this._rightPadding  = 0;\r\n        this._topPadding    = 0;\r\n        this._bottomPadding = 0;\r\n        this._itemInterval  = 0;\r\n    }\r\n    // inherits from UMLCompartmentView\r\n    UMLInteractionOperandCompartmentView.prototype = Object.create(UMLCompartmentView.prototype);\r\n    UMLInteractionOperandCompartmentView.prototype.constructor = UMLInteractionOperandCompartmentView;\r\n\r\n    UMLInteractionOperandCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.operands) {\r\n            var tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (var i = 0, len = this.model.operands.length; i < len; i++) {\r\n                var operand = this.model.operands[i];\r\n                var operandView = _.find(tempViews, function (v) { return v.model == operand; });\r\n                if (!operandView) {\r\n                    operandView = new UMLInteractionOperandView();\r\n                    operandView.model = operand;\r\n                    operandView._parent = this;\r\n                    operandView._parent = this;\r\n                    // UMLInteractionOperandView가 Repository에 정상적으로 등록될 수 있도록 Bypass Command에 의해서 생성한다.\r\n                    Repository.bypassInsert(this, \'subViews\', operandView);\r\n                } else {\r\n                    this.addSubView(operandView);\r\n                }\r\n                operandView.setup(canvas);\r\n            }\r\n        }\r\n        UMLCompartmentView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLCombinedFragmentView\r\n     * @constructor\r\n     * @extends UMLCustomFrameView\r\n     */\r\n    function UMLCombinedFragmentView() {\r\n        UMLCustomFrameView.apply(this, arguments);\r\n\r\n        /** @member {UMLInteractionOperandCompartmentView} */\r\n        this.operandCompartment = new UMLInteractionOperandCompartmentView();\r\n        this.operandCompartment.parentStyle = true;\r\n        this.addSubView(this.operandCompartment);\r\n    }\r\n    // inherits from UMLCustomFrameView\r\n    UMLCombinedFragmentView.prototype = Object.create(UMLCustomFrameView.prototype);\r\n    UMLCombinedFragmentView.prototype.constructor = UMLCombinedFragmentView;\r\n\r\n    UMLCombinedFragmentView.prototype._carryOnOperandViews = function () {\r\n        if (this.subViews.length > 0) {\r\n            var i, len, interOpViews = [];\r\n            for(i = 0, len = this.subViews.length; i < len; i++) {\r\n                if (this.subViews[i] instanceof UMLInteractionOperandView) {\r\n                    interOpViews.push(this.subViews[i]);\r\n                }\r\n            }\r\n            if (interOpViews.length > 0) {\r\n                _.sortBy(interOpViews, function (view) { return view.top; });\r\n                var firstIOV = interOpViews[0];\r\n                firstIOV.top = Math.max(this.frameTypeLabel.getBottom(), this.nameLabel.getBottom()) + COMPARTMENT_BOTTOM_PADDING;\r\n                for (i = 1; i <= (interOpViews.length - 1); i++) {\r\n                    interOpViews[i].top = interOpViews[i - 1].getBottom();\r\n                }\r\n                var lastIOV = interOpViews[interOpViews.length - 1];\r\n                lastIOV.setBottom(this.getBottom());\r\n                this.minHeight = lastIOV.top + lastIOV.minHeight - this.top;\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLCombinedFragmentView.prototype.update = function (canvas) {\r\n        if (this.operandCompartment.model !== this.model) {\r\n            // operandCompartment가 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            Repository.bypassFieldAssign(this.operandCompartment, \'model\', this.model);\r\n        }\r\n        if (this.model) {\r\n            this.nameLabel.text = this.model.name;\r\n            this.frameTypeLabel.text = this.model.interactionOperator;\r\n            this.nameLabel.visible = (this.nameLabel.text.length > 0);\r\n            this.frameTypeLabel.visible = (this.frameTypeLabel.text.length > 0);\r\n            if (this.model.operands && this.model.operands.length > 0) {\r\n                this.operandCompartment.visible = true;\r\n            } else {\r\n                this.operandCompartment.visible = false;\r\n            }\r\n        }\r\n        UMLCustomFrameView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    UMLCombinedFragmentView.prototype.sizeObject = function (canvas) {\r\n        UMLCustomFrameView.prototype.sizeObject.call(this, canvas);\r\n        if (this.operandCompartment.visible) {\r\n            var h = Math.max(this.frameTypeLabel.height, this.nameLabel.height) + COMPARTMENT_TOP_PADDING + COMPARTMENT_BOTTOM_PADDING;\r\n            this.minHeight = h + this.operandCompartment.height;\r\n        }\r\n    };\r\n\r\n\r\n    UMLCombinedFragmentView.prototype.arrangeObject = function (canvas) {\r\n        UMLCustomFrameView.prototype.arrangeObject.call(this, canvas);\r\n        if (this.operandCompartment.visible) {\r\n            var h = Math.max(this.frameTypeLabel.height, this.nameLabel.height) + COMPARTMENT_TOP_PADDING + COMPARTMENT_BOTTOM_PADDING;\r\n            this.operandCompartment.left = this.left;\r\n            this.operandCompartment.top = this.top + h;\r\n            this.operandCompartment.width = this.width;\r\n            this.operandCompartment.height = this.height - h;\r\n            this.operandCompartment.arrange(canvas);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLCombinedFragmentView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLCombinedFragmentView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLInteractionUseView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLInteractionUseView() {\r\n        NodeView.apply(this, arguments);\r\n        this.zIndex = 1;\r\n\r\n        /** @member {LabelView} */\r\n        this.nameLabel = new LabelView();\r\n        this.addSubView(this.nameLabel);\r\n\r\n        /** @member {LabelView} */\r\n        this.frameTypeLabel = new LabelView();\r\n        this.frameTypeLabel.font.style = Graphics.FS_BOLD;\r\n        this.addSubView(this.frameTypeLabel);\r\n    }\r\n    // inherits from NodeView\r\n    UMLInteractionUseView.prototype = Object.create(NodeView.prototype);\r\n    UMLInteractionUseView.prototype.constructor = UMLInteractionUseView;\r\n\r\n    UMLInteractionUseView.prototype.update = function (canvas) {\r\n        NodeView.prototype.update.call(this, canvas);\r\n        this.frameTypeLabel.text = \'ref\';\r\n        if (this.model) {\r\n            var s = "";\r\n            if (this.model.returnValueRecipient) {\r\n                s += this.model.returnValueRecipient.name + " = ";\r\n            }\r\n            if (this.model.refersTo) {\r\n                s += this.model.refersTo.name;\r\n            }\r\n            if (this.model.arguments.length > 0) {\r\n                s += "(" + this.model.arguments + ")";\r\n            }\r\n            if (this.model.returnValue.length > 0) {\r\n                s += ": " + this.model.returnValue;\r\n            }\r\n            this.nameLabel.text = s;\r\n        }\r\n    };\r\n\r\n    UMLInteractionUseView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        var h = this.frameTypeLabel.minHeight + this.nameLabel.minHeight + COMPARTMENT_TOP_PADDING + COMPARTMENT_BOTTOM_PADDING;\r\n        this.minHeight = Math.max(h, FRAME_MINHEIGHT);\r\n        var w = Math.max(this.frameTypeLabel.width, this.nameLabel.width);\r\n        w = w + COMPARTMENT_LEFT_PADDING + COMPARTMENT_RIGHT_PADDING;\r\n        this.minWidth = Math.max(w, FRAME_MINWIDTH);\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    UMLInteractionUseView.prototype.arrangeObject = function (canvas) {\r\n        NodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.frameTypeLabel.left = this.left + COMPARTMENT_LEFT_PADDING;\r\n        this.frameTypeLabel.top = this.top + COMPARTMENT_TOP_PADDING;\r\n        this.frameTypeLabel.setRight(this.frameTypeLabel.left + this.frameTypeLabel.minWidth);\r\n        this.nameLabel.top = this.top + (this.height - this.nameLabel.height) / 2;\r\n        this.nameLabel.left = this.left + (this.width - this.nameLabel.width) / 2;\r\n    };\r\n\r\n    UMLInteractionUseView.prototype.drawObject = function (canvas) {\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n        var y = this.frameTypeLabel.getBottom() + COMPARTMENT_BOTTOM_PADDING,\r\n            h = y - this.top,\r\n            x = this.frameTypeLabel.getRight() + COMPARTMENT_RIGHT_PADDING + h / 2;\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.polygon([new Point(this.left, this.top), new Point(this.left, y), new Point(x - h / 2, y), new Point(x, this.top + h / 2), new Point(x, this.top), new Point(this.left, this.top)]);\r\n    };\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLInteractionUseView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLInteractionUseView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                       COMMUNICATION DIAGRAM VIEWS                      *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLCommunicationDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLCommunicationDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n        this.showSequenceNumber = true;\r\n        this.showSignature = true;\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLCommunicationDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLCommunicationDiagram.prototype.constructor = UMLCommunicationDiagram;\r\n\r\n    UMLCommunicationDiagram.prototype.canAcceptModel = function (model) {\r\n        if (model instanceof type.Hyperlink || model instanceof type.Diagram) {\r\n            return true;\r\n        } else if (model instanceof type.UMLLifeline) {\r\n            return _.every(this.ownedViews, function (v) { return v.model !== model; });\r\n        } else if (model instanceof type.UMLMessage) {\r\n            return _.some(this.ownedViews, function (v) { return v.model === model.source; }) &&\r\n                   _.some(this.ownedViews, function (v) { return v.model === model.target; }) &&\r\n                   _.every(this.ownedViews, function (v) { return v.model !== model; });\r\n        } else {\r\n            return (model instanceof type.UMLConstraint) ||\r\n                   (model instanceof type.UMLClassifier);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * UMLCommLifelineView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLCommLifelineView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("uml.lifeline.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLCommLifelineView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLCommLifelineView.prototype.constructor = UMLCommLifelineView;\r\n\r\n    UMLCommLifelineView.prototype.update = function (canvas) {\r\n        UMLGeneralNodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameCompartment.nameLabel.text = this.model.getString(this);\r\n            this.nameCompartment.nameLabel.underline = false;\r\n        }\r\n    };\r\n\r\n    UMLCommLifelineView.prototype.drawIcon = function (canvas, rect) {\r\n        if (this.model) {\r\n            if (this.model.stereotype && this.model.stereotype.icon) {\r\n                UMLGeneralNodeView.prototype.drawIcon.call(this, canvas, rect);\r\n            } else if (this.model.represent && (this.model.represent.type instanceof type.Model)) {\r\n                var iconRatioBackup = this.iconRatio;\r\n                if (this.model.represent.type instanceof type.UMLActor) {\r\n                    this.iconRatio = ACTOR_RATIO_PERCENT;\r\n                    this.arrangeObject(canvas);\r\n                    UMLActorView.prototype.drawIcon.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type instanceof type.UMLUseCase) {\r\n                    this.iconRatio = USECASE_RATIO_PERCENT;\r\n                    this.arrangeObject(canvas);\r\n                    UMLUseCaseView.prototype.drawIcon.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type instanceof type.UMLInterface) {\r\n                    this.iconRatio = 100;\r\n                    this.arrangeObject(canvas);\r\n                    UMLInterfaceView.prototype.drawBallNotation.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type instanceof type.UMLArtifact) {\r\n                    this.iconRatio = ARTIFACT_RATIO_PERCENT;\r\n                    this.arrangeObject(canvas);\r\n                    UMLArtifactViewMixin.drawIcon.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type instanceof type.UMLComponent) {\r\n                    this.iconRatio = COMPONENT_RATIO_PERCENT;\r\n                    this.arrangeObject(canvas);\r\n                    UMLComponentViewMixin.drawIcon.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type instanceof type.UMLNode) {\r\n                    this.iconRatio = NODE_RATIO_PERCENT;\r\n                    this.arrangeObject(canvas);\r\n                    UMLNodeViewMixin.drawIcon.call(this, canvas, this.iconRect);\r\n                } else if (this.model.represent.type.stereotype && this.model.represent.type.stereotype.icon) {\r\n                    drawImage(canvas, rect, this.model.represent.type.stereotype.icon);\r\n                } else {\r\n                    UMLGeneralNodeView.prototype.drawIcon.call(this, canvas, rect);\r\n                }\r\n                this.iconRatio = iconRatioBackup;\r\n                this.arrangeObject(canvas);\r\n            } else {\r\n                UMLGeneralNodeView.prototype.drawIcon.call(this, canvas, rect);\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLCommLifelineView.prototype.drawAsCanonicalForm = function (canvas, showLabel) {\r\n        UMLGeneralNodeView.prototype.drawAsCanonicalForm.call(this, canvas);\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        if (this.model.isMultiInstance) {\r\n            canvas.rect(r.x1 + MULTI_INSTANCE_MARGIN, r.y1 + MULTI_INSTANCE_MARGIN, r.x2 + MULTI_INSTANCE_MARGIN, r.y2 + MULTI_INSTANCE_MARGIN);\r\n        }\r\n        canvas.fillRect(r.x1, r.y1, r.x2, r.y2);\r\n        canvas.rect(r.x1, r.y1, r.x2, r.y2);\r\n    };\r\n\r\n    UMLCommLifelineView.prototype.drawAsDecorationForm = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        if (this.model.isMultiInstance) {\r\n            canvas.rect(r.x1 + MULTI_INSTANCE_MARGIN, r.y1 + MULTI_INSTANCE_MARGIN, r.x2 + MULTI_INSTANCE_MARGIN, r.y2 + MULTI_INSTANCE_MARGIN);\r\n        }\r\n        canvas.fillRect(r.x1, r.y1, r.x2, r.y2);\r\n        canvas.rect(r.x1, r.y1, r.x2, r.y2);\r\n        UMLGeneralNodeView.prototype.drawAsDecorationForm.call(this, canvas);\r\n    };\r\n\r\n    UMLCommLifelineView.prototype.drawAsIconicForm = function (canvas) {\r\n        UMLGeneralNodeView.prototype.drawAsIconicForm.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLCommLifelineView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLCommLifelineView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLCommMessageView\r\n     * @constructor\r\n     * @extends EdgeNodeView\r\n     */\r\n    function UMLCommMessageView() {\r\n        EdgeNodeView.apply(this, arguments);\r\n        this.edgePosition = Core.EP_MIDDLE;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_FREE;\r\n        this.alpha = Math.PI / 2;\r\n        this.distance = 10;\r\n\r\n        this.headPoint = new Point();\r\n        this.tailPoint = new Point();\r\n        this.arrowPoint1 = new Point();\r\n        this.arrowPoint2 = new Point();\r\n\r\n        /** @member {NodeLabelView} */\r\n        this.nameLabel = new NodeLabelView();\r\n        this.nameLabel.distance = 10;\r\n        this.nameLabel.alpha = Math.PI / 2;\r\n        this.addSubView(this.nameLabel);\r\n\r\n        /** @member {NodeLabelView} */\r\n        this.stereotypeLabel = new NodeLabelView();\r\n        this.stereotypeLabel.distance = 25;\r\n        this.stereotypeLabel.alpha = Math.PI / 2;\r\n        this.addSubView(this.stereotypeLabel);\r\n\r\n        /** @member {NodeLabelView} */\r\n        this.propertyLabel = new NodeLabelView();\r\n        this.propertyLabel.distance = 10;\r\n        this.propertyLabel.alpha = Math.PI / 2;\r\n        this.addSubView(this.propertyLabel);\r\n\r\n        /** @member {boolean} */\r\n        this.showProperty = true;\r\n\r\n        /** @member {boolean} */\r\n        this.showType = true;\r\n    }\r\n    // inherits from EdgeNodeView\r\n    UMLCommMessageView.prototype = Object.create(EdgeNodeView.prototype);\r\n    UMLCommMessageView.prototype.constructor = UMLCommMessageView;\r\n\r\n    UMLCommMessageView.prototype._calcPosition = function (canvas) {\r\n        var midPointIndex = Math.floor(this.hostEdge.points.count() / 2);\r\n        if (this.hostEdge.points.count() % 2 === 0) {\r\n            midPointIndex--;\r\n        }\r\n\r\n        var p1 = this.hostEdge.points.getPoint(midPointIndex);\r\n        var p2 = this.hostEdge.points.getPoint(midPointIndex+1);\r\n        var tempP1 = p1.copy();\r\n        var tempP2 = p2.copy();\r\n        if ((this.hostEdge.points.count() % 2) === 0) {\r\n            tempP1.x = Math.floor((tempP1.x + tempP2.x) / 2);\r\n            tempP1.y = Math.floor((tempP1.y + tempP2.y) / 2);\r\n        }\r\n\r\n        // Calc Theta of Link\r\n        var tempTh = getTheta(tempP1.x, tempP1.y, tempP2.x, tempP2.y);\r\n\r\n        // Calc Head and Tail Points of Message\r\n        var tempMiddleX = (tempP1.x + tempP2.x) / 2;\r\n        var tempMiddleY = (tempP1.y + tempP2.y) / 2;\r\n        var tempX = this.distance * Math.cos(tempTh + this.alpha);\r\n        var tempY = this.distance * Math.sin(tempTh + this.alpha);\r\n\r\n        tempMiddleX = tempMiddleX + tempX;\r\n        tempMiddleY = tempMiddleY - tempY;\r\n\r\n        tempX = 20 * Math.cos(tempTh);\r\n        tempY = 20 * Math.sin(tempTh);\r\n\r\n        tempMiddleX = this.left + Math.abs(tempX);\r\n        tempMiddleY = this.top + Math.abs(tempY);\r\n\r\n        var tempHPointX, tempHPointY, tempTPointX, tempTPointY;\r\n\r\n        if (this.model.source === this.hostEdge.tail.model) {\r\n            // Forward Stimulus\r\n            tempHPointX = tempMiddleX + tempX;\r\n            tempHPointY = tempMiddleY - tempY;\r\n            tempTPointX = tempMiddleX - tempX;\r\n            tempTPointY = tempMiddleY + tempY;\r\n        } else {\r\n            // Reverse Stimulus\r\n            tempTPointX = tempMiddleX + tempX;\r\n            tempTPointY = tempMiddleY - tempY;\r\n            tempHPointX = tempMiddleX - tempX;\r\n            tempHPointY = tempMiddleY + tempY;\r\n        }\r\n\r\n        this.headPoint.x = Math.floor(tempHPointX);\r\n        this.headPoint.y = Math.floor(tempHPointY);\r\n        this.tailPoint.x = Math.floor(tempTPointX);\r\n        this.tailPoint.y = Math.floor(tempTPointY);\r\n\r\n        // Calc Arrow Points of Message;\r\n        var rt = new Rect(this.headPoint.x, this.headPoint.y, this.tailPoint.x, this.tailPoint.y);\r\n        var a = rt.y2 - rt.y1;\r\n        var b = (rt.x2 - rt.x1 + 0.00001);\r\n        var th = Math.atan(a / b);\r\n        if (((a < 0) && (b < 0)) || ((a > 0) && (b < 0)) || ((a === 0) && (b < 0))) {\r\n            th = th + Math.PI;\r\n        }\r\n        var th1 = th - Math.PI / 8;\r\n        var th2 = th + Math.PI / 8;\r\n        this.arrowPoint1.x = Math.floor(12 * Math.cos(th1)) + rt.x1;\r\n        this.arrowPoint1.y = Math.floor(12 * Math.sin(th1)) + rt.y1;\r\n        this.arrowPoint2.x = Math.floor(12 * Math.cos(th2)) + rt.x1;\r\n        this.arrowPoint2.y = Math.floor(12 * Math.sin(th2)) + rt.y1;\r\n\r\n        // this.left = Math.min(this.headPoint.x, this.tailPoint.x);\r\n        // this.top = Math.min(this.headPoint.y, this.tailPoint.y);\r\n        // this.setRight(Math.max(this.headPoint.x, this.tailPoint.x));\r\n        // this.setBottom(Math.max(this.headPoint.y, this.tailPoint.y));\r\n        this.width = Math.max(this.headPoint.x, this.tailPoint.x) - Math.min(this.headPoint.x, this.tailPoint.x);\r\n        this.height = Math.max(this.headPoint.y, this.tailPoint.y) - Math.min(this.headPoint.y, this.tailPoint.y);\r\n    };\r\n\r\n    UMLCommMessageView.prototype.update = function () {\r\n        EdgeNodeView.prototype.update.call(this);\r\n        if (this.model) {\r\n            var options = {\r\n                showSequenceNumber : this.getDiagram().showSequenceNumber,\r\n                showSignature      : this.getDiagram().showSignature,\r\n                showType           : this.showType\r\n            };\r\n            this.nameLabel.text = this.model.getString(options);\r\n            // stereotype\r\n            if (this.model.messageSort === UML.MS_CREATEMESSAGE) {\r\n                this.stereotypeLabel.text = "«create»";\r\n            } else if (this.model.messageSort === UML.MS_DELETEMESSAGE) {\r\n                this.stereotypeLabel.text = "«destroy»";\r\n            } else if (hasValue(this.model.stereotype)) {\r\n                this.stereotypeLabel.text = this.model.getStereotypeString();\r\n            } else {\r\n                this.stereotypeLabel.text = "";\r\n            }\r\n            // propertyLabel\r\n            this.propertyLabel.text = this.model.getPropertyString();\r\n            this.propertyLabel.visible = (this.showProperty ? this.propertyLabel.text.length > 0 : false);\r\n            // nameLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.nameLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.nameLabel, \'model\', this.model);\r\n            }\r\n            // stereotypeLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.stereotypeLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.stereotypeLabel, \'model\', this.model);\r\n            }\r\n            // propertyLabel이 model을 정상적으로 reference 할 수 있도록 Bypass Command에 의해서 설정한다.\r\n            if (this.propertyLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.propertyLabel, \'model\', this.model);\r\n            }\r\n        }\r\n    };\r\n\r\n    UMLCommMessageView.prototype.containsPoint = function (canvas, x, y) {\r\n        var r = this.getBoundingBox(canvas);\r\n        // Expand selectable area because it is difficult to select UMLCommMessageView when it is not diagonal.\r\n        r.expand(10);\r\n        return Coord.ptInRect(x, y, r);\r\n    };\r\n\r\n    UMLCommMessageView.prototype.arrangeObject = function (canvas) {\r\n        EdgeNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var v = this.propertyLabel.visible;\r\n        this.nameLabel.visible = (this.nameLabel.text.length > 0);\r\n        this.stereotypeLabel.visible = (this.stereotypeLabel.text.length > 0);\r\n        this.propertyLabel.visible = (this.propertyLabel.text.length > 0);\r\n        this._calcPosition(canvas);\r\n        // this.width = Math.max(this.headPoint.x, this.tailPoint.x) - Math.min(this.headPoint.x, this.tailPoint.x);\r\n        // this.height = Math.max(this.headPoint.y, this.tailPoint.y) - Math.min(this.headPoint.y, this.tailPoint.y);\r\n\r\n        // Reassign distance of this.nameLabel, this.stereotypeLabel\r\n        if (!v && this.propertyLabel.visible) {\r\n            if (this.nameLabel.distance < 25) {\r\n                if (this.stereotypeLabel.distance <= this.nameLabel.distance + 15) {\r\n                    this.stereotypeLabel.distance = this.stereotypeLabel.distance + 15;\r\n                }\r\n                this.nameLabel.distance = this.nameLabel.distance + 15;\r\n            }\r\n        }\r\n        /*\r\n        // Arrange this.nameLabel\r\n        var p1 = this.tailPoint;\r\n        var p2 = this.headPoint;\r\n        var p = Coord.getPointAwayLine(p1, p2, this.nameLabel.alpha, this.nameLabel.distance);\r\n        this.nameLabel.left = (p.x + p1.x) - (this.nameLabel.width / 2);\r\n        this.nameLabel.top = (p.y + p1.y) - (this.nameLabel.height / 2);\r\n        // Arrange this.stereotypeLabel\r\n        p = Coord.getPointAwayLine(p1, p2, this.stereotypeLabel.alpha, this.stereotypeLabel.distance);\r\n        this.stereotypeLabel.left = (p.x + p1.x) - (this.stereotypeLabel.width / 2);\r\n        this.stereotypeLabel.top = (p.y + p1.y) - (this.stereotypeLabel.height / 2);\r\n        // Arrange this.propertyLabel\r\n        p = Coord.getPointAwayLine(p1, p2, this.propertyLabel.alpha, this.propertyLabel.distance);\r\n        this.propertyLabel.left = (p.x + p1.x) - (this.propertyLabel.width / 2);\r\n        this.propertyLabel.top = (p.y + p1.y) - (this.propertyLabel.height / 2);\r\n        */\r\n        // call Update here because Action\'s changed are not reflected\r\n        this.update();\r\n    };\r\n\r\n    UMLCommMessageView.prototype.drawObject = function (canvas) {\r\n        EdgeNodeView.prototype.drawObject.call(this, canvas);\r\n        // message body\r\n        if (this.model.messageSort == UML.MS_REPLY) {\r\n            canvas.line(this.headPoint.x, this.headPoint.y, this.tailPoint.x, this.tailPoint.y, [3]);\r\n        } else {\r\n            canvas.line(this.headPoint.x, this.headPoint.y, this.tailPoint.x, this.tailPoint.y);\r\n        }\r\n        // message head\r\n        if ((this.model.messageSort === UML.MS_ASYNCHCALL) ||\r\n            (this.model.messageSort === UML.MS_ASYNCHSIGNAL) ||\r\n            (this.model.messageSort === UML.MS_CREATEMESSAGE) ||\r\n            (this.model.messageSort === UML.MS_REPLY)) {\r\n            canvas.polyline([this.arrowPoint1, this.headPoint, this.arrowPoint2]);\r\n        } else {\r\n            canvas.fillColor = this.lineColor;\r\n            canvas.fillPolygon([this.arrowPoint1, this.headPoint, this.arrowPoint2]);\r\n            canvas.fillColor = this.fillColor;\r\n        }\r\n    };\r\n\r\n    UMLCommMessageView.prototype.drawSelection = function (canvas) {\r\n        Toolkit.drawHighlighter(canvas, this.tailPoint.x, this.tailPoint.y, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE, true, Toolkit.HIGHLIGHTER_COLOR);\r\n        Toolkit.drawHighlighter(canvas, this.headPoint.x, this.headPoint.y, Toolkit.DEFAULT_HALF_HIGHLIGHTER_SIZE, true, Toolkit.HIGHLIGHTER_COLOR);\r\n    };\r\n\r\n\r\n    /**\r\n     * Cannot be copied to clipboard.\r\n     */\r\n    UMLCommMessageView.prototype.canCopy = function () {\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Cannnot be deleted view only.\r\n     */\r\n    UMLCommMessageView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                          PROFILE DIAGRAM VIEWS                         *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * UMLProfileDiagram\r\n     * @constructor\r\n     * @extends UMLDiagram\r\n     */\r\n    function UMLProfileDiagram() {\r\n        UMLDiagram.apply(this, arguments);\r\n    }\r\n    // inherits from UMLDiagram\r\n    UMLProfileDiagram.prototype = Object.create(UMLDiagram.prototype);\r\n    UMLProfileDiagram.prototype.constructor = UMLProfileDiagram;\r\n\r\n    UMLProfileDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.UMLConstraint) ||\r\n               (model instanceof type.UMLMetaClass) ||\r\n               (model instanceof type.UMLStereotype) ||\r\n               (model instanceof type.UMLEnumeration) ||\r\n               (model instanceof type.UMLGeneralization) ||\r\n               (model instanceof type.UMLDependency) ||\r\n               (model instanceof type.UMLInterfaceRealization) ||\r\n               (model instanceof type.UMLComponentRealization) ||\r\n               (model instanceof type.UMLAssociation);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLProfileView\r\n     * @constructor\r\n     * @extends UMLPackageView\r\n     */\r\n    function UMLProfileView() {\r\n        UMLPackageView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLPackageView\r\n    UMLProfileView.prototype = Object.create(UMLPackageView.prototype);\r\n    UMLProfileView.prototype.constructor = UMLProfileView;\r\n\r\n    UMLProfileView.prototype.getStereotypeLabelText = function () {\r\n        return "«profile»";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLMetaClassView\r\n     * @constructor\r\n     * @extends UMLGeneralNodeView\r\n     */\r\n    function UMLMetaClassView() {\r\n        UMLGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("uml.metaclass.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLGeneralNodeView\r\n    UMLMetaClassView.prototype = Object.create(UMLGeneralNodeView.prototype);\r\n    UMLMetaClassView.prototype.constructor = UMLMetaClassView;\r\n\r\n    UMLMetaClassView.prototype.getStereotypeLabelText = function () {\r\n        return "«metaClass»";\r\n    };\r\n\r\n    /**\r\n     * UMLStereotypeView\r\n     * @constructor\r\n     * @extends UMLClassView\r\n     */\r\n    function UMLStereotypeView() {\r\n        UMLClassView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("uml.stereotype.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from UMLClassView\r\n    UMLStereotypeView.prototype = Object.create(UMLClassView.prototype);\r\n    UMLStereotypeView.prototype.constructor = UMLStereotypeView;\r\n\r\n    UMLStereotypeView.prototype.getStereotypeLabelText = function () {\r\n        return "«stereotype»";\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLExtensionView\r\n     * @constructor\r\n     * @extends UMLGeneralEdgeView\r\n     */\r\n    function UMLExtensionView() {\r\n        UMLGeneralEdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_SOLID_ARROW;\r\n        this.lineMode = Core.LM_SOLID;\r\n    }\r\n    // inherits from UMLGeneralEdgeView\r\n    UMLExtensionView.prototype = Object.create(UMLGeneralEdgeView.prototype);\r\n    UMLExtensionView.prototype.constructor = UMLExtensionView;\r\n\r\n    UMLExtensionView.prototype.canConnectTo = function (view, isTail) {\r\n        return (isTail && view.model instanceof type.UMLStereotype) ||\r\n               (!isTail && view.model instanceof type.UMLMetaClass);\r\n    };\r\n\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                            ANNOTATION VIEWS                            *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    /**\r\n     * HyperlinkView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function HyperlinkView() {\r\n        NodeView.apply(this, arguments);\r\n\r\n        /** @member {LabelView} */\r\n        this.nameLabel = new LabelView();\r\n        this.nameLabel.parentStyle = true;\r\n        this.addSubView(this.nameLabel);\r\n\r\n        /** @member {LabelView} */\r\n        this.typeLabel = new LabelView();\r\n        this.typeLabel.parentStyle = true;\r\n        this.addSubView(this.typeLabel);\r\n    }\r\n    // inherits from NodeView\r\n    HyperlinkView.prototype = Object.create(NodeView.prototype);\r\n    HyperlinkView.prototype.constructor = HyperlinkView;\r\n\r\n    HyperlinkView.prototype.sizeObject = function (canvas) {\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n        var h = this.typeLabel.minHeight + COMPARTMENT_TOP_PADDING + COMPARTMENT_BOTTOM_PADDING;\r\n        this.minHeight = Math.max(h, HYPERLINK_MINHEIGHT);\r\n        var w = this.typeLabel.width + this.nameLabel.width + (COMPARTMENT_LEFT_PADDING + COMPARTMENT_RIGHT_PADDING) * 2;\r\n        this.minWidth = Math.max(w, HYPERLINK_MINWIDTH);\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    HyperlinkView.prototype.arrangeObject = function (canvas) {\r\n        NodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.typeLabel.left = this.left + COMPARTMENT_LEFT_PADDING;\r\n        this.typeLabel.top = this.top + COMPARTMENT_TOP_PADDING;\r\n        this.typeLabel.setRight(this.typeLabel.left + this.typeLabel.minWidth);\r\n        this.nameLabel.top = this.top + COMPARTMENT_TOP_PADDING;\r\n        this.nameLabel.left = this.typeLabel.getRight() + COMPARTMENT_RIGHT_PADDING + COMPARTMENT_LEFT_PADDING;\r\n    };\r\n\r\n    HyperlinkView.prototype.drawObject = function (canvas) {\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n        var x = this.typeLabel.getRight() + COMPARTMENT_RIGHT_PADDING;\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.line(x, this.top, x, this.getBottom());\r\n    };\r\n\r\n    HyperlinkView.prototype.update = function (canvas) {\r\n        NodeView.prototype.update.call(this, canvas);\r\n        this.typeLabel.font.style = Graphics.FS_BOLD;\r\n        this.typeLabel.text = "link";\r\n        if (this.model && this.model.reference instanceof type.Model) {\r\n            this.nameLabel.text = this.model.reference.name;\r\n        } else {\r\n            this.nameLabel.text = this.model.url;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * UMLCustomTextView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function UMLCustomTextView() {\r\n        NodeView.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.text = \'\';\r\n\r\n        /** @member {boolean} */\r\n        this.wordWrap = true;\r\n\r\n        /* transient */\r\n        this._rightPadding = 0;\r\n    }\r\n    // inherits from NodeView\r\n    UMLCustomTextView.prototype = Object.create(NodeView.prototype);\r\n    UMLCustomTextView.prototype.constructor = UMLCustomTextView;\r\n\r\n    UMLCustomTextView.prototype.sizeObject = function (canvas) {\r\n        var size, marg, minW, minH, w, h;\r\n        var lines = null;\r\n        if (this.text && this.text.length > 0) {\r\n            lines = this.text.split("\\n");\r\n        }\r\n        w = 0;\r\n        h = 0;\r\n        if (lines !== null && lines.length > 0) {\r\n            for (var i = 0, len = lines.length; i < len; i++) {\r\n                if (this.wordWrap) {\r\n                    marg = COMPARTMENT_LEFT_PADDING + COMPARTMENT_RIGHT_PADDING + this._rightPadding;\r\n                    minW = canvas.textExtent(lines[i], 1).x;\r\n                    minH = canvas.textExtent(lines[i], this.width - marg).y;\r\n                    w = Math.max(w, minW);\r\n                    h = h + minH + 2;\r\n                } else {\r\n                    var sz = canvas.textExtent(lines[i]);\r\n                    w = Math.max(w, sz.x);\r\n                    h = h + canvas.textExtent(\'^_\').y + 2;\r\n                }\r\n            }\r\n        }\r\n        w += COMPARTMENT_LEFT_PADDING + COMPARTMENT_RIGHT_PADDING + this._rightPadding;\r\n        h += COMPARTMENT_TOP_PADDING + COMPARTMENT_BOTTOM_PADDING;\r\n        this.minWidth = Math.max(CUSTOM_TEXT_MINWIDTH, w);\r\n        this.minHeight = Math.max(CUSTOM_TEXT_MINHEIGHT, h);\r\n        NodeView.prototype.sizeObject.call(this, canvas);\r\n    };\r\n\r\n    UMLCustomTextView.prototype.drawObject = function (canvas) {\r\n        NodeView.prototype.drawObject.call(this, canvas);\r\n        if (this.text && this.text.length > 0) {\r\n            var lines = this.text.split("\\n");\r\n            var x1 = this.left + COMPARTMENT_LEFT_PADDING,\r\n                x2 = this.getRight() - COMPARTMENT_RIGHT_PADDING,\r\n                y = this.top + COMPARTMENT_TOP_PADDING;\r\n            for (var i = 0, len = lines.length; i < len; i++) {\r\n                var sz = canvas.textExtent(lines[i], this.width - 1);\r\n                var r = new Graphics.Rect(x1, y, x2, y + sz.y + 2);\r\n                canvas.textOut2(r, lines[i], Graphics.AL_LEFT, Graphics.AL_TOP, false, this.wordWrap);\r\n                y = y + sz.y + 2;\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLTextView\r\n     * @constructor\r\n     * @extends UMLCustomTextView\r\n     */\r\n    function UMLTextView() {\r\n        UMLCustomTextView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCustomTextView\r\n    UMLTextView.prototype = Object.create(UMLCustomTextView.prototype);\r\n    UMLTextView.prototype.constructor = UMLTextView;\r\n\r\n\r\n    /**\r\n     * UMLCustomNoteView\r\n     * @constructor\r\n     * @extends UMLCustomTextView\r\n     */\r\n    function UMLCustomNoteView() {\r\n        UMLCustomTextView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("uml.note.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n        this._rightPadding = NOTE_FOLDING_SIZE;\r\n    }\r\n    // inherits from UMLCustomTextView\r\n    UMLCustomNoteView.prototype = Object.create(UMLCustomTextView.prototype);\r\n    UMLCustomNoteView.prototype.constructor = UMLCustomNoteView;\r\n\r\n    UMLCustomNoteView.prototype.drawObject = function (canvas) {\r\n        var r = this.getRight() - 1, b = this.getBottom() - 1;\r\n        var pts = [new Point(this.left, this.top), new Point(r - NOTE_FOLDING_SIZE, this.top),\r\n                   new Point(r, this.top + NOTE_FOLDING_SIZE),\r\n                   new Point(r, b),\r\n                   new Point(this.left, b),\r\n                   new Point(this.left, this.top)];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        canvas.polygon([new Point(r - NOTE_FOLDING_SIZE, this.top),\r\n                        new Point(r - NOTE_FOLDING_SIZE, this.top + NOTE_FOLDING_SIZE),\r\n                        new Point(r, this.top + NOTE_FOLDING_SIZE)]);\r\n        UMLCustomTextView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLNoteView\r\n     * @constructor\r\n     * @extends UMLCustomNoteView\r\n     */\r\n    function UMLNoteView() {\r\n        UMLCustomNoteView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCustomNoteView\r\n    UMLNoteView.prototype = Object.create(UMLCustomNoteView.prototype);\r\n    UMLNoteView.prototype.constructor = UMLNoteView;\r\n\r\n\r\n    /**\r\n     * UMLConstraintView\r\n     * @constructor\r\n     * @extends UMLCustomNoteView\r\n     */\r\n    function UMLConstraintView() {\r\n        UMLCustomNoteView.apply(this, arguments);\r\n    }\r\n    // inherits from UMLCustomNoteView\r\n    UMLConstraintView.prototype = Object.create(UMLCustomNoteView.prototype);\r\n    UMLConstraintView.prototype.constructor = UMLConstraintView;\r\n\r\n    UMLConstraintView.prototype.update = function (canvas) {\r\n        if (typeof this.model.specification === "string") {\r\n            this.text = "{" + this.model.specification + "}";\r\n            var parentField = this.model.getParentField();\r\n            switch (parentField) {\r\n            case "preconditions":       this.text = "«precondition»\\n" + this.text;       break;\r\n            case "postconditions":      this.text = "«postcondition»\\n" + this.text;      break;\r\n            case "bodyConditions":      this.text = "«bodyCondition»\\n" + this.text;      break;\r\n            case "localPreconditions":  this.text = "«localPrecondition»\\n" + this.text;  break;\r\n            case "localPostconditions": this.text = "«localPostcondition»\\n" + this.text; break;\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * UMLNoteLinkView\r\n     * @constructor\r\n     * @extends EdgeView\r\n     */\r\n    function UMLNoteLinkView() {\r\n        EdgeView.apply(this, arguments);\r\n        this.lineMode = Core.LM_DOT;\r\n    }\r\n    // inherits from EdgeView\r\n    UMLNoteLinkView.prototype = Object.create(EdgeView.prototype);\r\n    UMLNoteLinkView.prototype.constructor = UMLNoteLinkView;\r\n\r\n\r\n    /**\r\n     * UMLConstraintLinkView\r\n     * @constructor\r\n     * @extends EdgeView\r\n     */\r\n    function UMLConstraintLinkView() {\r\n        EdgeView.apply(this, arguments);\r\n        this.lineMode = Core.LM_DOT;\r\n    }\r\n    // inherits from EdgeView\r\n    UMLConstraintLinkView.prototype = Object.create(EdgeView.prototype);\r\n    UMLConstraintLinkView.prototype.constructor = UMLConstraintLinkView;\r\n\r\n\r\n    /**\r\n     * ShapeView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function ShapeView() {\r\n        NodeView.apply(this, arguments);\r\n    }\r\n    // inherits from NodeView\r\n    ShapeView.prototype = Object.create(NodeView.prototype);\r\n    ShapeView.prototype.constructor = ShapeView;\r\n\r\n\r\n    /**\r\n     * RectangleView\r\n     * @constructor\r\n     * @extends ShapeView\r\n     */\r\n    function RectangleView() {\r\n        ShapeView.apply(this, arguments);\r\n    }\r\n    // inherits from ShapeView\r\n    RectangleView.prototype = Object.create(ShapeView.prototype);\r\n    RectangleView.prototype.constructor = RectangleView;\r\n\r\n    RectangleView.prototype.drawObject = function (canvas) {\r\n        ShapeView.prototype.drawObject.call(this, canvas);\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n\r\n    /**\r\n     * RoundRectView\r\n     * @constructor\r\n     * @extends ShapeView\r\n     */\r\n    function RoundRectView() {\r\n        ShapeView.apply(this, arguments);\r\n    }\r\n    // inherits from ShapeView\r\n    RoundRectView.prototype = Object.create(ShapeView.prototype);\r\n    RoundRectView.prototype.constructor = RoundRectView;\r\n\r\n    RoundRectView.prototype.drawObject = function (canvas) {\r\n        ShapeView.prototype.drawObject.call(this, canvas);\r\n        var r = Math.max(this.width, this.height);\r\n        canvas.fillRoundRect(this.left, this.top, this.getRight(), this.getBottom(), r / 6);\r\n        canvas.roundRect(this.left, this.top, this.getRight(), this.getBottom(), r / 6);\r\n    };\r\n\r\n\r\n    /**\r\n     * EllipseView\r\n     * @constructor\r\n     * @extends ShapeView\r\n     */\r\n    function EllipseView() {\r\n        ShapeView.apply(this, arguments);\r\n    }\r\n    // inherits from ShapeView\r\n    EllipseView.prototype = Object.create(ShapeView.prototype);\r\n    EllipseView.prototype.constructor = EllipseView;\r\n\r\n    EllipseView.prototype.drawObject = function (canvas) {\r\n        ShapeView.prototype.drawObject.call(this, canvas);\r\n        canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n    };\r\n\r\n    /* -------------------------------------------------------------------------------------------- */\r\n\r\n    // Type definitions\r\n\r\n    // Common Views\r\n    type.UMLDiagram                           = UMLDiagram;\r\n    type.UMLCompartmentView                   = UMLCompartmentView;\r\n    type.UMLNameCompartmentView               = UMLNameCompartmentView;\r\n    type.UMLAttributeView                     = UMLAttributeView;\r\n    type.UMLAttributeCompartmentView          = UMLAttributeCompartmentView;\r\n    type.UMLOperationView                     = UMLOperationView;\r\n    type.UMLOperationCompartmentView          = UMLOperationCompartmentView;\r\n    type.UMLReceptionView                     = UMLReceptionView;\r\n    type.UMLReceptionCompartmentView          = UMLReceptionCompartmentView;\r\n    type.UMLTemplateParameterView             = UMLTemplateParameterView;\r\n    type.UMLTemplateParameterCompartmentView  = UMLTemplateParameterCompartmentView;\r\n    type.UMLGeneralNodeView                   = UMLGeneralNodeView;\r\n    type.UMLFloatingNodeView                  = UMLFloatingNodeView;\r\n    type.UMLGeneralEdgeView                   = UMLGeneralEdgeView;\r\n    type.UMLClassifierView                    = UMLClassifierView;\r\n    type.UMLUndirectedRelationshipView        = UMLUndirectedRelationshipView;\r\n    // Class Diagram Views\r\n    type.UMLClassDiagram                      = UMLClassDiagram;\r\n    type.UMLClassView                         = UMLClassView;\r\n    type.UMLInterfaceView                     = UMLInterfaceView;\r\n    type.UMLSignalView                        = UMLSignalView;\r\n    type.UMLDataTypeView                      = UMLDataTypeView;\r\n    type.UMLPrimitiveTypeView                 = UMLPrimitiveTypeView;\r\n    type.UMLEnumerationLiteralView            = UMLEnumerationLiteralView;\r\n    type.UMLEnumerationLiteralCompartmentView = UMLEnumerationLiteralCompartmentView;\r\n    type.UMLEnumerationView                   = UMLEnumerationView;\r\n    type.UMLGeneralizationView                = UMLGeneralizationView;\r\n    type.UMLDependencyView                    = UMLDependencyView;\r\n    type.UMLRealizationView                   = UMLRealizationView;\r\n    type.UMLInterfaceRealizationView          = UMLInterfaceRealizationView;\r\n    type.UMLQualifierCompartmentView          = UMLQualifierCompartmentView;\r\n    type.UMLAssociationView                   = UMLAssociationView;\r\n    type.UMLAssociationClassLinkView          = UMLAssociationClassLinkView;\r\n    // Package Diagram Views\r\n    type.UMLPackageDiagram                    = UMLPackageDiagram;\r\n    type.UMLPackageView                       = UMLPackageView;\r\n    type.UMLModelView                         = UMLModelView;\r\n    type.UMLSubsystemView                     = UMLSubsystemView;\r\n    type.UMLContainmentView                   = UMLContainmentView;\r\n    // Composite Structure Diagram Views\r\n    type.UMLCompositeStructureDiagram         = UMLCompositeStructureDiagram;\r\n    type.UMLPortView                          = UMLPortView;\r\n    type.UMLPartView                          = UMLPartView;\r\n    type.UMLConnectorView                     = UMLConnectorView;\r\n    type.UMLCollaborationView                 = UMLCollaborationView;\r\n    type.UMLCollaborationUseView              = UMLCollaborationUseView;\r\n    type.UMLRoleBindingView                   = UMLRoleBindingView;\r\n    // Object Diagram Views\r\n    type.UMLObjectDiagram                     = UMLObjectDiagram;\r\n    type.UMLSlotView                          = UMLSlotView;\r\n    type.UMLSlotCompartmentView               = UMLSlotCompartmentView;\r\n    type.UMLObjectView                        = UMLObjectView;\r\n    type.UMLLinkView                          = UMLLinkView;\r\n    // Component Diagram Views\r\n    type.UMLComponentDiagram                  = UMLComponentDiagram;\r\n    type.UMLArtifactView                      = UMLArtifactView;\r\n    type.UMLArtifactInstanceView              = UMLArtifactInstanceView;\r\n    type.UMLComponentView                     = UMLComponentView;\r\n    type.UMLComponentInstanceView             = UMLComponentInstanceView;\r\n    type.UMLComponentRealizationView          = UMLComponentRealizationView;\r\n    // Deployment Diagram Views\r\n    type.UMLDeploymentDiagram                 = UMLDeploymentDiagram;\r\n    type.UMLNodeView                          = UMLNodeView;\r\n    type.UMLNodeInstanceView                  = UMLNodeInstanceView;\r\n    type.UMLDeploymentView                    = UMLDeploymentView;\r\n    type.UMLCommunicationPathView             = UMLCommunicationPathView;\r\n    // Use Case Diagram Views\r\n    type.UMLUseCaseDiagram                    = UMLUseCaseDiagram;\r\n    type.UMLExtensionPointView                = UMLExtensionPointView;\r\n    type.UMLExtensionPointCompartmentView     = UMLExtensionPointCompartmentView;\r\n    type.UMLUseCaseView                       = UMLUseCaseView;\r\n    type.UMLActorView                         = UMLActorView;\r\n    type.UMLIncludeView                       = UMLIncludeView;\r\n    type.UMLExtendView                        = UMLExtendView;\r\n    type.UMLUseCaseSubjectView                = UMLUseCaseSubjectView;\r\n    // Statechart Diagram Views\r\n    type.UMLStatechartDiagram                 = UMLStatechartDiagram;\r\n    type.UMLPseudostateView                   = UMLPseudostateView;\r\n    type.UMLFinalStateView                    = UMLFinalStateView;\r\n    type.UMLConnectionPointReferenceView      = UMLConnectionPointReferenceView;\r\n    type.UMLInternalActivityView              = UMLInternalActivityView;\r\n    type.UMLInternalActivityCompartmentView   = UMLInternalActivityCompartmentView;\r\n    type.UMLInternalTransitionView            = UMLInternalTransitionView;\r\n    type.UMLInternalTransitionCompartmentView = UMLInternalTransitionCompartmentView;\r\n    type.UMLRegionView                        = UMLRegionView;\r\n    type.UMLDecompositionCompartmentView      = UMLDecompositionCompartmentView;\r\n    type.UMLStateView                         = UMLStateView;\r\n    type.UMLTransitionView                    = UMLTransitionView;\r\n    // Activity Diagram Views\r\n    type.UMLActivityDiagram                   = UMLActivityDiagram;\r\n    type.UMLPinView                           = UMLPinView;\r\n    type.UMLInputPinView                      = UMLInputPinView;\r\n    type.UMLOutputPinView                     = UMLOutputPinView;\r\n    type.UMLExpansionNodeView                 = UMLExpansionNodeView;\r\n    type.UMLActionView                        = UMLActionView;\r\n    type.UMLObjectNodeView                    = UMLObjectNodeView;\r\n    type.UMLCentralBufferNodeView             = UMLCentralBufferNodeView;\r\n    type.UMLDataStoreNodeView                 = UMLDataStoreNodeView;\r\n    type.UMLControlNodeView                   = UMLControlNodeView;\r\n    type.UMLControlFlowView                   = UMLControlFlowView;\r\n    type.UMLObjectFlowView                    = UMLObjectFlowView;\r\n    type.UMLZigZagAdornmentView               = UMLZigZagAdornmentView;\r\n    type.UMLExceptionHandlerView              = UMLExceptionHandlerView;\r\n    type.UMLActivityInterruptView             = UMLActivityInterruptView;\r\n    type.UMLSwimlaneView                      = UMLSwimlaneView;\r\n    type.UMLInterruptibleActivityRegionView   = UMLInterruptibleActivityRegionView;\r\n    type.UMLStructuredActivityNodeView        = UMLStructuredActivityNodeView;\r\n    type.UMLExpansionRegionView               = UMLExpansionRegionView;\r\n    // Sequence Diagram Views\r\n    type.UMLSequenceDiagram                   = UMLSequenceDiagram;\r\n    type.UMLLinePartView                      = UMLLinePartView;\r\n    type.UMLSeqLifelineView                   = UMLSeqLifelineView;\r\n    type.UMLMessageEndpointView               = UMLMessageEndpointView;\r\n    type.UMLEndpointView                      = UMLEndpointView;\r\n    type.UMLGateView                          = UMLGateView;\r\n    type.UMLActivationView                    = UMLActivationView;\r\n    type.UMLSeqMessageView                    = UMLSeqMessageView;\r\n    type.UMLStateInvariantView                = UMLStateInvariantView;\r\n    type.UMLContinuationView                  = UMLContinuationView;\r\n    type.UMLCustomFrameView                   = UMLCustomFrameView;\r\n    type.UMLFrameView                         = UMLFrameView;\r\n    type.UMLInteractionOperandView            = UMLInteractionOperandView;\r\n    type.UMLInteractionOperandCompartmentView = UMLInteractionOperandCompartmentView;\r\n    type.UMLCombinedFragmentView              = UMLCombinedFragmentView;\r\n    type.UMLInteractionUseView                = UMLInteractionUseView;\r\n    // Communication Diagram Views\r\n    type.UMLCommunicationDiagram              = UMLCommunicationDiagram;\r\n    type.UMLCommLifelineView                  = UMLCommLifelineView;\r\n    type.UMLCommMessageView                   = UMLCommMessageView;\r\n    // Profile Diagram Views\r\n    type.UMLProfileDiagram                    = UMLProfileDiagram;\r\n    type.UMLProfileView                       = UMLProfileView;\r\n    type.UMLMetaClassView                     = UMLMetaClassView;\r\n    type.UMLStereotypeView                    = UMLStereotypeView;\r\n    type.UMLExtensionView                     = UMLExtensionView;\r\n    // Annotation Views\r\n    type.HyperlinkView                        = HyperlinkView;\r\n    type.UMLCustomTextView                    = UMLCustomTextView;\r\n    type.UMLTextView                          = UMLTextView;\r\n    type.UMLCustomNoteView                    = UMLCustomNoteView;\r\n    type.UMLNoteView                          = UMLNoteView;\r\n    type.UMLConstraintView                    = UMLConstraintView;\r\n    type.UMLNoteLinkView                      = UMLNoteLinkView;\r\n    type.UMLConstraintLinkView                = UMLConstraintLinkView;\r\n    type.ShapeView                            = ShapeView;\r\n    type.RectangleView                        = RectangleView;\r\n    type.RoundRectView                        = RoundRectView;\r\n    type.EllipseView                          = EllipseView;\r\n\r\n});\r\n\n//# sourceURL=/uml/UMLDiagram.js'),eval('define(\'text!grammars/uml-name.pegjs\',[],function () { return \'/**\\r\\n * Grammar for PEG.js\\r\\n * General Expression Grammar\\r\\n * e.g.) << stereotype >> name\\r\\n */\\r\\n\\r\\nstart\\r\\n    = stereotype:stereotype? _ visibility:visibility? _ name:identifier _\\r\\n    {\\r\\n        var ast = { name: name };\\r\\n        if (stereotype) { ast.stereotype = stereotype; }\\r\\n        if (visibility) { ast.visibility = visibility; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\nstereotype\\r\\n    = "<<" _ id:identifier _ ">>" { return id; }\\r\\n\\r\\nvisibility\\r\\n    = "+" { return \\\'public\\\'; }\\r\\n    / "#" { return \\\'protected\\\'; }\\r\\n    / "-" { return \\\'private\\\'; }\\r\\n    / "~" { return \\\'package\\\'; }\\r\\n\\r\\nidentifier\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{};.?\\\\[\\\\]\\\'"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\n_   // whitespace\\r\\n    = [ \\\\t\\\\n\\\\r]*\\r\\n\';});\n\n//# sourceURL=/text!grammars/uml-name.pegjs'),eval('define(\'text!grammars/uml-attribute.pegjs\',[],function () { return \'/**\\r\\n * Grammar for PEG.js\\r\\n * Attribute Expression Grammar\\r\\n * e.g.) << stereotype >> name : type [ multiplicity ] = defaultValue\\r\\n */\\r\\n\\r\\nstart\\r\\n    = stereotype:stereotype? _ visibility:visibility? _ name:identifier _ type:type? _ multi:multiplicity? _ value:defaultValue?\\r\\n    {\\r\\n        var ast = { name: name };\\r\\n        if (stereotype) { ast.stereotype = stereotype; }\\r\\n        if (visibility) { ast.visibility = visibility; }\\r\\n        if (type) { ast.type = type; }\\r\\n        if (multi) { ast.multiplicity = multi; }\\r\\n        if (value) { ast.defaultValue = value; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\nstereotype\\r\\n    = "<<" _ id:identifier _ ">>" { return id; }\\r\\n\\r\\nvisibility\\r\\n    = "+" { return \\\'public\\\'; }\\r\\n    / "#" { return \\\'protected\\\'; }\\r\\n    / "-" { return \\\'private\\\'; }\\r\\n    / "~" { return \\\'package\\\'; }\\r\\n\\r\\ntype\\r\\n    = ":" _ type:typeExpression { return type; }\\r\\n\\r\\ndefaultValue\\r\\n    = "=" _ value:identifier { return value; }\\r\\n\\r\\nidentifier\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{};.?\\\\[\\\\]"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\ntypeExpression\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{}<>;.?"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\nmultiplicity\\r\\n    = "[" _ multi:multiplicityExpression? _ "]"\\r\\n    {\\r\\n        if (multi) { return multi; }\\r\\n    }\\r\\n\\r\\nmultiplicityExpression\\r\\n    = id:[0-9.\\\\*]+ { return id.join(""); }\\r\\n\\r\\n_   // whitespace\\r\\n    = [ \\\\t\\\\n\\\\r]*\\r\\n\';});\n\n//# sourceURL=/text!grammars/uml-attribute.pegjs'),eval('define(\'text!grammars/uml-operation.pegjs\',[],function () { return \'/**\\r\\n * Grammar for PEG.js\\r\\n * Operation Expression Grammar\\r\\n * e.g.) << stereotype >> +name (in param:type, out param:type): returnType\\r\\n */\\r\\n\\r\\nstart\\r\\n    = stereotype:stereotype? _ visibility:visibility? _ name:identifier _ parameters:parameters? _ returnType:type? _ multi:multiplicity?\\r\\n    {\\r\\n        var ast = { name: name };\\r\\n        if (stereotype) { ast.stereotype = stereotype; }\\r\\n        if (visibility) { ast.visibility = visibility; }\\r\\n        if (parameters) { ast.parameters = parameters; }\\r\\n        if (returnType) { ast.returnType = returnType; }\\r\\n        if (multi)      { ast.returnMultiplicity = multi; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\nstereotype\\r\\n    = "<<" _ id:identifier _ ">>" { return id; }\\r\\n\\r\\nvisibility\\r\\n    = "+" { return \\\'public\\\'; }\\r\\n    / "#" { return \\\'protected\\\'; }\\r\\n    / "-" { return \\\'private\\\'; }\\r\\n    / "~" { return \\\'package\\\'; }\\r\\n\\r\\nparameters\\r\\n    = "(" _ params:paramList? _ ")" { return params; }\\r\\n\\r\\nparamList\\r\\n    = param:param _ "," _ params:paramList\\r\\n    {\\r\\n        var list = [ param ];\\r\\n        if (params && params.length > 0) {\\r\\n            for(var i = 0; i < params.length; i++) {\\r\\n                list.push(params[i]);\\r\\n            }\\r\\n        }\\r\\n        return list;\\r\\n    }\\r\\n    / param:param\\r\\n    {\\r\\n        return [ param ];\\r\\n    }\\r\\n\\r\\nparam\\r\\n    = direction:direction? _ name:identifier _ type:type? _ multi:multiplicity? _ defaultValue:defaultValue?\\r\\n    {\\r\\n        var ast = { name: name };\\r\\n        if (direction) { ast.direction = direction; }\\r\\n        if (type) { ast.type = type; }\\r\\n        if (multi) { ast.multiplicity = multi; }\\r\\n        if (defaultValue) { ast.defaultValue = defaultValue; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\ndirection\\r\\n    = "in" __    { return "in"; }\\r\\n    / "out" __   { return "out"; }\\r\\n    / "inout" __ { return "inout"; }\\r\\n\\r\\ntype\\r\\n    = ":" _ type:typeExpression { return type; }\\r\\n\\r\\ndefaultValue\\r\\n    = "=" _ value:identifier { return value; }\\r\\n\\r\\ntypeExpression\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{}<>;.?"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\nidentifier\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{};.?\\\\[\\\\]"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\nmultiplicity\\r\\n    = "[" _ multi:multiplicityExpression? _ "]"\\r\\n    {\\r\\n        if (multi) { return multi; }\\r\\n    }\\r\\n\\r\\nmultiplicityExpression\\r\\n    = id:[0-9.\\\\*]+ { return id.join(""); }\\r\\n\\r\\n_   // whitespace\\r\\n    = [ \\\\t\\\\n\\\\r]*\\r\\n\\r\\n__\\r\\n    = [ \\\\t\\\\n\\\\r]+\\r\\n\';});\n\n//# sourceURL=/text!grammars/uml-operation.pegjs'),eval('define(\'text!grammars/uml-templateparameter.pegjs\',[],function () { return \'/**\\r\\n * Grammar for PEG.js\\r\\n * TemplateParameter Expression Grammar\\r\\n * e.g.) << stereotype >> name : type = defaultValue\\r\\n */\\r\\n\\r\\nstart\\r\\n    = stereotype:stereotype? _ name:identifier _ type:type? _ value:defaultValue?\\r\\n    {\\r\\n        var ast = { name: name };\\r\\n        if (stereotype) { ast.stereotype = stereotype; }\\r\\n        if (type) { ast.parameterType = type; }\\r\\n        if (value) { ast.defaultValue = value; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\nstereotype\\r\\n    = "<<" _ id:identifier _ ">>" { return id; }\\r\\n\\r\\ntype\\r\\n    = ":" _ type:typeExpression { return type; }\\r\\n\\r\\ndefaultValue\\r\\n    = "=" _ value:identifier { return value; }\\r\\n\\r\\ntypeExpression\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{}<>;.?\\\\[\\\\]"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\nidentifier\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{};.?\\\\[\\\\]"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\n_   // whitespace\\r\\n    = [ \\\\t\\\\n\\\\r]*\\r\\n\';});\n\n//# sourceURL=/text!grammars/uml-templateparameter.pegjs'),eval('define(\'text!grammars/uml-object.pegjs\',[],function () { return \'/**\\r\\n * Grammar for PEG.js\\r\\n * Object Expression Grammar\\r\\n * e.g.) << stereotype >> name : type\\r\\n */\\r\\n\\r\\nstart\\r\\n    = stereotype:stereotype? _ visibility:visibility? _ name:identifier _ type:type?\\r\\n    {\\r\\n        var ast = { name: name };\\r\\n        if (stereotype) { ast.stereotype = stereotype; }\\r\\n        if (visibility) { ast.visibility = visibility; }\\r\\n        if (type) { ast.type = type; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\nstereotype\\r\\n    = "<<" _ id:identifier _ ">>" { return id; }\\r\\n\\r\\nvisibility\\r\\n    = "+" { return \\\'public\\\'; }\\r\\n    / "#" { return \\\'protected\\\'; }\\r\\n    / "-" { return \\\'private\\\'; }\\r\\n    / "~" { return \\\'package\\\'; }\\r\\n\\r\\ntype\\r\\n    = ":" _ type:typeExpression { return type; }\\r\\n\\r\\ntypeExpression\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{}<>;.?\\\\[\\\\]\\\'"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\nidentifier\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{};.?\\\\[\\\\]\\\'"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\n_   // whitespace\\r\\n    = [ \\\\t\\\\n\\\\r]*\\r\\n\';});\n\n//# sourceURL=/text!grammars/uml-object.pegjs'),eval('define(\'text!grammars/uml-slot.pegjs\',[],function () { return \'/**\\r\\n * Grammar for PEG.js\\r\\n * Slot Expression Grammar\\r\\n * e.g.) << stereotype >> name : type = value\\r\\n */\\r\\n\\r\\nstart\\r\\n    = stereotype:stereotype? _ visibility:visibility? _ name:identifier _ type:type? _ value:valueExpression?\\r\\n    {\\r\\n        var ast = { name: name };\\r\\n        if (stereotype) { ast.stereotype = stereotype; }\\r\\n        if (visibility) { ast.visibility = visibility; }\\r\\n        if (type) { ast.type = type; }\\r\\n        if (value) { ast.value = value; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\nstereotype\\r\\n    = "<<" _ id:identifier _ ">>" { return id; }\\r\\n\\r\\nvisibility\\r\\n    = "+" { return \\\'public\\\'; }\\r\\n    / "#" { return \\\'protected\\\'; }\\r\\n    / "-" { return \\\'private\\\'; }\\r\\n    / "~" { return \\\'package\\\'; }\\r\\n\\r\\ntype\\r\\n    = ":" _ type:typeExpression { return type; }\\r\\n\\r\\nvalueExpression\\r\\n    = "=" _ value:identifier { return value; }\\r\\n\\r\\nidentifier\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{};.?\\\\[\\\\]\\\'"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\ntypeExpression\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{}<>;.?\\\\[\\\\]\\\'"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\n_   // whitespace\\r\\n    = [ \\\\t\\\\n\\\\r]*\\r\\n\';});\n\n//# sourceURL=/text!grammars/uml-slot.pegjs'),eval('define(\'text!grammars/uml-lifeline.pegjs\',[],function () { return \'/**\\r\\n * Grammar for PEG.js\\r\\n * Lifeline Expression Grammar\\r\\n * e.g.) << stereotype >> name [selector] : type\\r\\n */\\r\\n\\r\\nstart\\r\\n    = stereotype:stereotype? _ visibility:visibility? _ name:identifier _ selector:selector? _ type:type?\\r\\n    {\\r\\n        var ast = { name: name };\\r\\n        if (stereotype) { ast.stereotype = stereotype; }\\r\\n        if (visibility) { ast.visibility = visibility; }\\r\\n        if (selector) { ast.selector = selector; }\\r\\n        if (type) { ast.type = type; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\nstereotype\\r\\n    = "<<" _ id:identifier _ ">>" { return id; }\\r\\n\\r\\nvisibility\\r\\n    = "+" { return \\\'public\\\'; }\\r\\n    / "#" { return \\\'protected\\\'; }\\r\\n    / "-" { return \\\'private\\\'; }\\r\\n    / "~" { return \\\'package\\\'; }\\r\\n\\r\\nselector\\r\\n    = "[" _ sel:identifier _ "]" { return sel; }\\r\\n\\r\\ntype\\r\\n    = ":" _ type:typeExpression { return type; }\\r\\n\\r\\ntypeExpression\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{}<>;.?\\\\[\\\\]\\\'"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\nidentifier\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{};.?\\\'"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\n_   // whitespace\\r\\n    = [ \\\\t\\\\n\\\\r]*\\r\\n\';});\n\n//# sourceURL=/text!grammars/uml-lifeline.pegjs'),eval('define(\'text!grammars/uml-message.pegjs\',[],function () { return \'/**\\r\\n * Grammar for PEG.js\\r\\n * Message Expression Grammar\\r\\n * e.g.) << stereotype >> assignmentTarget = name (arguments)\\r\\n */\\r\\n\\r\\nstart\\r\\n    = stereotype:stereotype? _ assignmentTarget:assignmentTarget? _ name:identifier _ arguments:arguments?\\r\\n    {\\r\\n        var ast = { name: name };\\r\\n        if (stereotype) { ast.stereotype = stereotype; }\\r\\n        if (assignmentTarget) { ast.assignmentTarget = assignmentTarget; }\\r\\n        if (arguments) { ast.arguments = arguments; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\nstereotype\\r\\n    = "<<" _ id:identifier _ ">>" { return id; }\\r\\n\\r\\nassignmentTarget\\r\\n    = target:identifier _ "=" { return target; }\\r\\n\\r\\narguments\\r\\n    = "(" _ arg:identifier _ ")" { return arg; }\\r\\n\\r\\nidentifier\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{};,.?\\\\[\\\\]"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\n_   // whitespace\\r\\n    = [ \\\\t\\\\n\\\\r]*\\r\\n\';});\n\n//# sourceURL=/text!grammars/uml-message.pegjs'),eval('define(\'text!grammars/uml-transition.pegjs\',[],function () { return \'/**\\r\\n * Grammar for PEG.js\\r\\n * Transition Expression Grammar\\r\\n * e.g.) triggers guard effect\\r\\n */\\r\\n\\r\\nstart\\r\\n    = triggers:triggers? _ guard:guard? _ effect:effect?\\r\\n    {\\r\\n        var ast = {};\\r\\n        if (triggers) { ast.triggers = triggers; }\\r\\n        if (guard) { ast.guard = guard; }\\r\\n        if (effect) { ast.effect = effect; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\nstereotype\\r\\n    = "<<" _ id:identifier _ ">>" { return id; }\\r\\n\\r\\ntriggers\\r\\n    = event:identifier _ "," _ events:triggers\\r\\n    {\\r\\n        var list = [ event ];\\r\\n        if (events && events.length > 0) {\\r\\n            for(var i = 0; i < events.length; i++) {\\r\\n                list.push(events[i]);\\r\\n            }\\r\\n        }\\r\\n        return list;\\r\\n    }\\r\\n    / event:identifier\\r\\n    {\\r\\n        return [ event ];\\r\\n    }\\r\\n\\r\\nguard\\r\\n    = "[" _ guard:identifier _ "]" { return guard; }\\r\\n\\r\\neffect\\r\\n    = "/" _ effect:identifier { return effect; }\\r\\n\\r\\nidentifier\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{};.?"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\n_   // whitespace\\r\\n    = [ \\\\t\\\\n\\\\r]*\\r\\n\';});\n\n//# sourceURL=/text!grammars/uml-transition.pegjs'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell, type, PEG */\r\n\r\ndefine('uml/UMLUtils',['require','exports','module','core/Core','core/Repository','core/OperationBuilder','engine/Engine','uml/UML','text!grammars/uml-name.pegjs','text!grammars/uml-attribute.pegjs','text!grammars/uml-operation.pegjs','text!grammars/uml-templateparameter.pegjs','text!grammars/uml-object.pegjs','text!grammars/uml-slot.pegjs','text!grammars/uml-lifeline.pegjs','text!grammars/uml-message.pegjs','text!grammars/uml-transition.pegjs'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var Core                     = require(\"core/Core\"),\r\n        Repository               = require(\"core/Repository\"),\r\n        OperationBuilder         = require(\"core/OperationBuilder\"),\r\n        Engine                   = require(\"engine/Engine\"),\r\n        UML                      = require(\"uml/UML\");\r\n\r\n    var GrammarName              = require(\"text!grammars/uml-name.pegjs\"),\r\n        GrammarAttribute         = require(\"text!grammars/uml-attribute.pegjs\"),\r\n        GrammarOperation         = require(\"text!grammars/uml-operation.pegjs\"),\r\n        GrammarTemplateParameter = require(\"text!grammars/uml-templateparameter.pegjs\"),\r\n        GrammarObject            = require(\"text!grammars/uml-object.pegjs\"),\r\n        GrammarSlot              = require(\"text!grammars/uml-slot.pegjs\"),\r\n        GrammarLifeline          = require(\"text!grammars/uml-lifeline.pegjs\"),\r\n        GrammarMessage           = require(\"text!grammars/uml-message.pegjs\"),\r\n        GrammarTransition        = require(\"text!grammars/uml-transition.pegjs\");\r\n\r\n    /**\r\n     * Parse Name Expression\r\n     * @param {string} expr\r\n     * @return {Object} - Abstract Syntax Tree\r\n     */\r\n    function parseNameExpression(expr) {\r\n        var parser = PEG.buildParser(GrammarName);\r\n        var ast = parser.parse(expr);\r\n        return ast;\r\n    }\r\n\r\n    /**\r\n     * Parse Attribute Expression\r\n     * @param {string} expr\r\n     * @return {Object} - Abstract Syntax Tree\r\n     */\r\n    function parseAttributeExpression(expr) {\r\n        var parser = PEG.buildParser(GrammarAttribute);\r\n        var ast = parser.parse(expr);\r\n        return ast;\r\n    }\r\n\r\n    /**\r\n     * Parse Operation Expression\r\n     * @param {string} expr\r\n     * @return {Object} - Abstract Syntax Tree\r\n     */\r\n    function parseOperationExpression(expr) {\r\n        var parser = PEG.buildParser(GrammarOperation);\r\n        var ast = parser.parse(expr);\r\n        return ast;\r\n    }\r\n\r\n    /**\r\n     * Parse TemplateParameter Expression\r\n     * @param {string} expr\r\n     * @return {Object} - Abstract Syntax Tree\r\n     */\r\n    function parseTemplateParameterExpression(expr) {\r\n        var parser = PEG.buildParser(GrammarTemplateParameter);\r\n        var ast = parser.parse(expr);\r\n        return ast;\r\n    }\r\n\r\n    /**\r\n     * Parse Object Expression\r\n     * @param {string} expr\r\n     * @return {Object} - Abstract Syntax Tree\r\n     */\r\n    function parseObjectExpression(expr) {\r\n        var parser = PEG.buildParser(GrammarObject);\r\n        var ast = parser.parse(expr);\r\n        return ast;\r\n    }\r\n\r\n    /**\r\n     * Parse Slot Expression\r\n     * @param {string} expr\r\n     * @return {Object} - Abstract Syntax Tree\r\n     */\r\n    function parseSlotExpression(expr) {\r\n        var parser = PEG.buildParser(GrammarSlot);\r\n        var ast = parser.parse(expr);\r\n        return ast;\r\n    }\r\n\r\n    /**\r\n     * Parse Lifeline Expression\r\n     * @param {string} expr\r\n     * @return {Object} - Abstract Syntax Tree\r\n     */\r\n    function parseLifelineExpression(expr) {\r\n        var parser = PEG.buildParser(GrammarLifeline);\r\n        var ast = parser.parse(expr);\r\n        return ast;\r\n    }\r\n\r\n    /**\r\n     * Parse Message Expression\r\n     * @param {string} expr\r\n     * @return {Object} - Abstract Syntax Tree\r\n     */\r\n    function parseMessageExpression(expr) {\r\n        var parser = PEG.buildParser(GrammarMessage);\r\n        var ast = parser.parse(expr);\r\n        return ast;\r\n    }\r\n\r\n    /**\r\n     * Parse Transition Expression\r\n     * @param {string} expr\r\n     * @return {Object} - Abstract Syntax Tree\r\n     */\r\n    function parseTransitionExpression(expr) {\r\n        var parser = PEG.buildParser(GrammarTransition);\r\n        var ast = parser.parse(expr);\r\n        return ast;\r\n    }\r\n\r\n    function getVisibility(elem) {\r\n        switch (elem.visibility) {\r\n        case 'public':    return '+';\r\n        case 'protected': return '#';\r\n        case 'private':   return '-';\r\n        case 'package':   return '~';\r\n        }\r\n    }\r\n\r\n    function getTypeName(type) {\r\n        if (_.isString(type) && type.length > 0) {\r\n            return type;\r\n        } else if (type && type.name) {\r\n            return type.name;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function getNameExpression(elem) {\r\n        var str = elem.name;\r\n        var stereotype = getTypeName(elem.stereotype);\r\n        if (stereotype) {\r\n            str = \"<<\" + stereotype + \">>\" + str;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    function getAttributeExpression(elem) {\r\n        var str = getNameExpression(elem);\r\n        var type = getTypeName(elem.type);\r\n        if (type) {\r\n            str = str + \": \" + type;\r\n        }\r\n        if (elem.multiplicity && elem.multiplicity.length > 0) {\r\n            str = str + \"[\" + elem.multiplicity + \"]\";\r\n        }\r\n        if (elem.defaultValue) {\r\n            str = str + \" = \" + elem.defaultValue;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    function getOperationExpression(elem) {\r\n        var str = getNameExpression(elem);\r\n        var paramStr = [];\r\n        var params = elem.getNonReturnParameters();\r\n        if (params && params.length > 0) {\r\n            _.each(params, function (param) {\r\n                var s = param.name;\r\n                if (param.direction) { s = param.direction + \" \" + s; }\r\n                var paramType = getTypeName(param.type);\r\n                if (paramType) { s = s + \":\" + paramType; }\r\n                if (param.multiplicity && param.multiplicity.length > 0) { s = s + \"[\" + param.multiplicity + \"]\"; }\r\n                if (param.defaultValue) { s = s + \" = \" + param.defaultValue; }\r\n                paramStr.push(s);\r\n            });\r\n        }\r\n        str = str + \"(\" + paramStr.join(\", \") + \")\";\r\n        var returnParam = elem.getReturnParameter();\r\n        if (returnParam) {\r\n            var returnType = getTypeName(returnParam.type);\r\n            if (returnType) {\r\n                str = str + \": \" + returnType;\r\n            }\r\n            if (returnParam.multiplicity && returnParam.multiplicity.length > 0) {\r\n                str = str + \"[\" + returnParam.multiplicity + \"]\";\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n\r\n    function getTemplateParameterExpression(elem) {\r\n        var str = elem.name;\r\n        if (elem.parameterType) { str = str + \": \" + elem.parameterType; }\r\n        if (elem.defaultValue) { str = str + \" = \" + elem.defaultValue; }\r\n        return str;\r\n    }\r\n\r\n    function getObjectExpression(elem) {\r\n        var str = getNameExpression(elem);\r\n        var type = getTypeName(elem.classifier);\r\n        if (type) {\r\n            str = str + \": \" + type;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    function getSlotExpression(elem) {\r\n        var str = getNameExpression(elem);\r\n        var type = getTypeName(elem.type);\r\n        if (type) {\r\n            str = str + \": \" + type;\r\n        }\r\n        if (elem.value) {\r\n            str = str + \" = \" + elem.value;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    function getLifelineExpression(elem) {\r\n        var str = getNameExpression(elem);\r\n        if (elem.selector.length > 0) {\r\n            str += \"[\" + elem.selector + \"]\";\r\n        }\r\n        if (elem.represent) {\r\n            var type = getTypeName(elem.represent.type);\r\n            if (type) {\r\n                str = str + \": \" + type;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n\r\n    function getMessageExpression(elem) {\r\n        var str = \"\";\r\n        // stereotype\r\n        var stereotype = getTypeName(elem.stereotype);\r\n        if (stereotype) {\r\n            str += \"<<\" + stereotype + \">>\";\r\n        }\r\n        // assignment target\r\n        if (elem.assignmentTarget.length > 0) {\r\n            str += elem.assignmentTarget + \" = \";\r\n        }\r\n        // name\r\n        str += elem.name;\r\n        // arguments\r\n        if (elem.arguments.length > 0) {\r\n            str += \"(\" + elem.arguments + \")\";\r\n        }\r\n        return str;\r\n    }\r\n\r\n    function getTransitionExpression(elem) {\r\n        var str = \"\";\r\n        var triggers = [];\r\n        _.each(elem.triggers, function (t) {\r\n            triggers.push(t.name);\r\n        });\r\n        str = str + triggers.join(\", \");\r\n        if (elem.guard && elem.guard.length > 0) {\r\n            str = str + \" [\" + elem.guard + \"]\";\r\n        }\r\n        if (elem.effects.length > 0) {\r\n            str = str + \" / \" + elem.effects[0].name;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * 요소의 Visibility 값을 변경\r\n     */\r\n    function setVisibility(elem, value) {\r\n        Engine.setProperty(elem, 'visibility', value);\r\n    }\r\n\r\n    /**\r\n     * 요소의 name, visibility, stereotype 값을 변경\r\n     */\r\n    function setNameExpression(elem, ast) {\r\n        var fields = {};\r\n        // name\r\n        if (ast.name) {\r\n            fields.name = ast.name.trim();\r\n        }\r\n        // visibility\r\n        if (ast.visibility) {\r\n            fields.visibility = ast.visibility;\r\n        }\r\n        // stereotype\r\n        if (ast.stereotype && (ast.stereotype.length > 0)) {\r\n            var match = Repository.lookupAndFind(elem, ast.stereotype, type.UMLStereotype);\r\n            if (match) {\r\n                fields.stereotype = match;\r\n            } else {\r\n                fields.stereotype = ast.stereotype.trim();\r\n            }\r\n        } else {\r\n            fields.stereotype = null;\r\n        }\r\n        Engine.setProperties(elem, fields);\r\n    }\r\n\r\n    /**\r\n     * Attribute Expression을 변경\r\n     */\r\n    function setAttributeExpression(elem, ast) {\r\n        var match, fields = {};\r\n        // name\r\n        if (ast.name) {\r\n            fields.name = ast.name.trim();\r\n        }\r\n        // visibility\r\n        if (ast.visibility) {\r\n            fields.visibility = ast.visibility;\r\n        }\r\n        // stereotype\r\n        if (ast.stereotype && (ast.stereotype.length > 0)) {\r\n            match = Repository.lookupAndFind(elem, ast.stereotype, type.UMLStereotype);\r\n            if (match) {\r\n                fields.stereotype = match;\r\n            } else {\r\n                fields.stereotype = ast.stereotype.trim();\r\n            }\r\n        } else {\r\n            fields.stereotype = null;\r\n        }\r\n        // type\r\n        if (ast.type && (ast.type.length > 0)) {\r\n            match = Repository.lookupAndFind(elem, ast.type, type.UMLClassifier);\r\n            if (match) {\r\n                fields.type = match;\r\n            } else {\r\n                fields.type = ast.type.trim();\r\n            }\r\n        } else {\r\n            fields.type = null;\r\n        }\r\n        // multiplicity\r\n        if (ast.multiplicity && ast.multiplicity.length > 0) {\r\n            fields.multiplicity = ast.multiplicity;\r\n        } else {\r\n            fields.multiplicity = \"\";\r\n        }\r\n        // defaultValue\r\n        if (ast.defaultValue) {\r\n            fields.defaultValue = ast.defaultValue.trim();\r\n        } else {\r\n            fields.defaultValue = '';\r\n        }\r\n        Engine.setProperties(elem, fields);\r\n    }\r\n\r\n    /**\r\n     * Operation Expression을 변경\r\n     */\r\n    function setOperationExpression(elem, ast) {\r\n        var match;\r\n        OperationBuilder.begin('change operation');\r\n        // name\r\n        if (ast.name) {\r\n            OperationBuilder.fieldAssign(elem, 'name', ast.name.trim());\r\n        }\r\n        // visibility\r\n        if (ast.visibility) {\r\n            OperationBuilder.fieldAssign(elem, 'visibility', ast.visibility);\r\n        }\r\n        // stereotype\r\n        if (ast.stereotype && (ast.stereotype.length > 0)) {\r\n            match = Repository.lookupAndFind(elem, ast.stereotype, type.UMLStereotype);\r\n            if (match) {\r\n                OperationBuilder.fieldAssign(elem, 'stereotype', match);\r\n            } else {\r\n                OperationBuilder.fieldAssign(elem, 'stereotype', ast.stereotype.trim());\r\n            }\r\n        } else {\r\n            OperationBuilder.fieldAssign(elem, 'stereotype', null);\r\n        }\r\n        // parameters (파라미터들이 변경되었을때)\r\n        // 1) 기존의 파라미터들을 유지하고 name, type, direction 값들만 업데이트 한다.\r\n        // 2) 기존의 파라미터의 수가 모자라면 새로 생성해서 추가한다.\r\n        // 3) 기존의 파라미터의 수가 넘어가면 삭제한다.\r\n\r\n        if (!ast.parameters) {\r\n            console.log(ast);\r\n            ast.parameters = [];\r\n        }\r\n        if (ast.parameters) {\r\n            var nonReturnParams = elem.getNonReturnParameters();\r\n            for (var i = 0; i < ast.parameters.length; i++) {\r\n                var param = ast.parameters[i];\r\n                if (nonReturnParams[i]) {\r\n                    // parameter name\r\n                    if (param.name) {\r\n                        OperationBuilder.fieldAssign(nonReturnParams[i], 'name', param.name);\r\n                    }\r\n                    // parameter type\r\n                    if (param.type && (param.type.length > 0)) {\r\n                        match = Repository.lookupAndFind(elem, param.type, type.UMLClassifier);\r\n                        if (match) {\r\n                            OperationBuilder.fieldAssign(nonReturnParams[i], 'type', match);\r\n                        } else {\r\n                            OperationBuilder.fieldAssign(nonReturnParams[i], 'type', param.type.trim());\r\n                        }\r\n                    } else {\r\n                        OperationBuilder.fieldAssign(nonReturnParams[i], 'type', null);\r\n                    }\r\n                    // direction\r\n                    if (param.direction) {\r\n                        OperationBuilder.fieldAssign(nonReturnParams[i], 'direction', param.direction);\r\n                    } else {\r\n                        OperationBuilder.fieldAssign(nonReturnParams[i], 'direction', UML.DK_IN);\r\n                    }\r\n                    // multiplicity\r\n                    if (param.multiplicity) {\r\n                        OperationBuilder.fieldAssign(nonReturnParams[i], 'multiplicity', param.multiplicity);\r\n                    } else {\r\n                        OperationBuilder.fieldAssign(nonReturnParams[i], 'multiplicity', '');\r\n                    }\r\n                    // defaultValue\r\n                    if (param.defaultValue) {\r\n                        OperationBuilder.fieldAssign(nonReturnParams[i], 'defaultValue', param.defaultValue.trim());\r\n                    } else {\r\n                        OperationBuilder.fieldAssign(nonReturnParams[i], 'defaultValue', '');\r\n                    }\r\n                } else {\r\n                    var newParam = new type.UMLParameter();\r\n                    newParam._parent = elem;\r\n                    // new name\r\n                    newParam.name = param.name.trim();\r\n                    // new parameter type\r\n                    if (param.type && (param.type.length > 0)) {\r\n                        match = Repository.lookupAndFind(elem, param.type, type.UMLClassifier);\r\n                        if (match) {\r\n                            newParam.type = match;\r\n                        } else {\r\n                            newParam.type = param.type.trim();\r\n                        }\r\n                    } else {\r\n                        newParam.type = null;\r\n                    }\r\n                    // direction\r\n                    if (param.direction) {\r\n                        newParam.direction = param.direction;\r\n                    } else {\r\n                        newParam.direction = UML.DK_IN;\r\n                    }\r\n                    // multiplicity\r\n                    if (param.multiplicity) {\r\n                        newParam.multiplicity = param.multiplicity.trim();\r\n                    } else {\r\n                        newParam.multiplicity = '';\r\n                    }\r\n                    // defaultValue\r\n                    if (param.defaultValue) {\r\n                        newParam.defaultValue = param.defaultValue.trim();\r\n                    } else {\r\n                        newParam.defaultValue = '';\r\n                    }\r\n                    OperationBuilder.insert(newParam);\r\n                    OperationBuilder.fieldInsert(elem, 'parameters', newParam);\r\n                }\r\n            }\r\n            if (nonReturnParams.length > ast.parameters.length) {\r\n                for (var j = ast.parameters.length; j < nonReturnParams.length; j++) {\r\n                    OperationBuilder.fieldRemove(elem, 'parameters', nonReturnParams[j]);\r\n                    OperationBuilder.remove(nonReturnParams[j]);\r\n                }\r\n            }\r\n        }\r\n        // returnType\r\n        var returnParam = elem.getReturnParameter();\r\n        if (returnParam) {\r\n            if (ast.returnType) {\r\n                if (ast.returnType.length > 0) {\r\n                    match = Repository.lookupAndFind(elem, ast.returnType, type.UMLClassifier);\r\n                    if (match) {\r\n                        OperationBuilder.fieldAssign(returnParam, 'type', match);\r\n                    } else {\r\n                        OperationBuilder.fieldAssign(returnParam, 'type', ast.returnType.trim());\r\n                    }\r\n                    if (ast.returnMultiplicity) {\r\n                        OperationBuilder.fieldAssign(returnParam, 'multiplicity', ast.returnMultiplicity);\r\n                    } else {\r\n                        OperationBuilder.fieldAssign(returnParam, 'multiplicity', '');\r\n                    }\r\n                } else {\r\n                    OperationBuilder.fieldAssign(returnParam, 'type', null);\r\n                }\r\n            } else {\r\n                if (returnParam) {\r\n                    OperationBuilder.fieldRemove(elem, 'parameters', returnParam);\r\n                    OperationBuilder.remove(returnParam);\r\n                }\r\n            }\r\n        } else {\r\n            if (ast.returnType) {\r\n                returnParam = new type.UMLParameter();\r\n                returnParam._parent = elem;\r\n                returnParam.direction = UML.DK_RETURN;\r\n                if (ast.returnType.length > 0) {\r\n                    match = Repository.lookupAndFind(elem, ast.returnType, type.UMLClassifier);\r\n                    if (match) {\r\n                        returnParam.type = match;\r\n                    } else {\r\n                        returnParam.type = ast.returnType.trim();\r\n                    }\r\n                    if (ast.returnMultiplicity) {\r\n                        returnParam.multiplicity = ast.returnMultiplicity.trim();\r\n                    } else {\r\n                        returnParam.multiplicity = '';\r\n                    }\r\n                } else {\r\n                    returnParam.type = null;\r\n                }\r\n                OperationBuilder.insert(returnParam);\r\n                OperationBuilder.fieldInsert(elem, 'parameters', returnParam);\r\n            }\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    }\r\n\r\n    /**\r\n     * TemplateParameter Expression을 변경\r\n     */\r\n    function setTemplateParameterExpression(elem, ast) {\r\n        var fields = {};\r\n        // name\r\n        if (ast.name) {\r\n            fields.name = ast.name.trim();\r\n        }\r\n        // stereotype\r\n        if (ast.stereotype && (ast.stereotype.length > 0)) {\r\n            var match = Repository.lookupAndFind(elem, ast.stereotype, type.UMLStereotype);\r\n            if (match) {\r\n                fields.stereotype = match;\r\n            } else {\r\n                fields.stereotype = ast.stereotype.trim();\r\n            }\r\n        } else {\r\n            fields.stereotype = null;\r\n        }\r\n        // parameterType\r\n        if (ast.parameterType) {\r\n            fields.parameterType = ast.parameterType.trim();\r\n        } else {\r\n            fields.parameterType = '';\r\n        }\r\n        // defaultValue\r\n        if (ast.defaultValue) {\r\n            fields.defaultValue = ast.defaultValue.trim();\r\n        } else {\r\n            fields.defaultValue = '';\r\n        }\r\n        Engine.setProperties(elem, fields);\r\n    }\r\n\r\n    /**\r\n     * Object Expression을 변경\r\n     */\r\n    function setObjectExpression(elem, ast) {\r\n        var match, fields = {};\r\n        // name\r\n        if (ast.name) {\r\n            fields.name = ast.name.trim();\r\n        }\r\n        // visibility\r\n        if (ast.visibility) {\r\n            fields.visibility = ast.visibility;\r\n        }\r\n        // stereotype\r\n        if (ast.stereotype && (ast.stereotype.length > 0)) {\r\n            match = Repository.lookupAndFind(elem, ast.stereotype, type.UMLStereotype);\r\n            if (match) {\r\n                fields.stereotype = match;\r\n            } else {\r\n                fields.stereotype = ast.stereotype.trim();\r\n            }\r\n        } else {\r\n            fields.stereotype = null;\r\n        }\r\n        // type\r\n        if (ast.type && (ast.type.length > 0)) {\r\n            match = Repository.lookupAndFind(elem, ast.type, type.UMLClassifier);\r\n            if (match) {\r\n                fields.classifier = match;\r\n            } else {\r\n                fields.classifier = ast.type.trim();\r\n            }\r\n        } else {\r\n            fields.classifier = null;\r\n        }\r\n        Engine.setProperties(elem, fields);\r\n    }\r\n\r\n    /**\r\n     * Slot Expression을 변경\r\n     */\r\n    function setSlotExpression(elem, ast) {\r\n        var match, fields = {};\r\n        // name\r\n        if (ast.name) {\r\n            fields.name = ast.name.trim();\r\n        }\r\n        // visibility\r\n        if (ast.visibility) {\r\n            fields.visibility = ast.visibility;\r\n        }\r\n        // stereotype\r\n        if (ast.stereotype && (ast.stereotype.length > 0)) {\r\n            match = Repository.lookupAndFind(elem, ast.stereotype, type.UMLStereotype);\r\n            if (match) {\r\n                fields.stereotype = match;\r\n            } else {\r\n                fields.stereotype = ast.stereotype.trim();\r\n            }\r\n        } else {\r\n            fields.stereotype = null;\r\n        }\r\n        // type\r\n        if (ast.type && (ast.type.length > 0)) {\r\n            match = Repository.lookupAndFind(elem, ast.type, type.UMLClassifier);\r\n            if (match) {\r\n                fields.type = match;\r\n            } else {\r\n                fields.type = ast.type.trim();\r\n            }\r\n        } else {\r\n            fields.type = null;\r\n        }\r\n        // value\r\n        if (ast.value) {\r\n            fields.value = ast.value.trim();\r\n        } else {\r\n            fields.value = '';\r\n        }\r\n        Engine.setProperties(elem, fields);\r\n    }\r\n\r\n\r\n    /**\r\n     * Lifeline Expression을 변경\r\n     */\r\n    function setLifelineExpression(elem, ast) {\r\n        var match, fields = {};\r\n        // name\r\n        if (ast.name) {\r\n            fields.name = ast.name.trim();\r\n        }\r\n        // visibility\r\n        if (ast.visibility) {\r\n            fields.visibility = ast.visibility;\r\n        }\r\n        // stereotype\r\n        if (ast.stereotype && (ast.stereotype.length > 0)) {\r\n            match = Repository.lookupAndFind(elem, ast.stereotype, type.UMLStereotype);\r\n            if (match) {\r\n                fields.stereotype = match;\r\n            } else {\r\n                fields.stereotype = ast.stereotype.trim();\r\n            }\r\n        } else {\r\n            fields.stereotype = null;\r\n        }\r\n        // selector\r\n        if (ast.selector) {\r\n            fields.selector = ast.selector.trim();\r\n        } else {\r\n            fields.selector = '';\r\n        }\r\n        OperationBuilder.begin(\"set lifeline expression\");\r\n        for (var key in fields) {\r\n            OperationBuilder.fieldAssign(elem, key, fields[key]);\r\n        }\r\n        // type\r\n        if (elem.represent) {\r\n            if (ast.type && (ast.type.length > 0)) {\r\n                match = Repository.lookupAndFind(elem, ast.type, type.UMLClassifier);\r\n                if (match) {\r\n                    OperationBuilder.fieldAssign(elem.represent, 'type', match);\r\n                } else {\r\n                    OperationBuilder.fieldAssign(elem.represent, 'type', ast.type.trim());\r\n                }\r\n            } else {\r\n                OperationBuilder.fieldAssign(elem.represent, 'type', null);\r\n            }\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    }\r\n\r\n    /**\r\n     * Message Expression을 변경\r\n     */\r\n    function setMessageExpression(elem, ast) {\r\n        var fields = {};\r\n        // name\r\n        if (ast.name) {\r\n            fields.name = ast.name.trim();\r\n        }\r\n        // stereotype\r\n        if (ast.stereotype && (ast.stereotype.length > 0)) {\r\n            var match = Repository.lookupAndFind(elem, ast.stereotype, type.UMLStereotype);\r\n            if (match) {\r\n                fields.stereotype = match;\r\n            } else {\r\n                fields.stereotype = ast.stereotype.trim();\r\n            }\r\n        } else {\r\n            fields.stereotype = null;\r\n        }\r\n        // assignmentTarget\r\n        if (ast.assignmentTarget) {\r\n            fields.assignmentTarget = ast.assignmentTarget.trim();\r\n        } else {\r\n            fields.assignmentTarget = '';\r\n        }\r\n        // arguments\r\n        if (ast.arguments) {\r\n            fields.arguments = ast.arguments.trim();\r\n        } else {\r\n            fields.arguments = '';\r\n        }\r\n        Engine.setProperties(elem, fields);\r\n    }\r\n\r\n    /**\r\n     * Transition Expression을 변경\r\n     */\r\n    function setTransitionExpression(elem, ast) {\r\n        OperationBuilder.begin('change transition');\r\n        // triggers\r\n        if (!ast.triggers) { ast.triggers = []; }\r\n        for (var i = 0, len = ast.triggers.length; i < len; i++) {\r\n            if (elem.triggers[i]) {\r\n                OperationBuilder.fieldAssign(elem.triggers[i], 'name', ast.triggers[i].trim());\r\n            } else {\r\n                var newTrigger = new type.UMLEvent();\r\n                newTrigger._parent = elem;\r\n                newTrigger.name = ast.triggers[i].trim();\r\n                OperationBuilder.insert(newTrigger);\r\n                OperationBuilder.fieldInsert(elem, 'triggers', newTrigger);\r\n            }\r\n        }\r\n        if (elem.triggers.length > ast.triggers.length) {\r\n            for (var j = ast.triggers.length; j < elem.triggers.length; j++) {\r\n                OperationBuilder.fieldRemove(elem, 'triggers', elem.triggers[j]);\r\n                OperationBuilder.remove(elem.triggers[j]);\r\n            }\r\n        }\r\n        // guard\r\n        if (ast.guard) {\r\n            OperationBuilder.fieldAssign(elem, 'guard', ast.guard.trim());\r\n        }\r\n        // effect\r\n        var effectCount = (ast.effect && ast.effect.length > 0 ? 1 : 0);\r\n        if (effectCount > 0) {\r\n            if (elem.effects.length > 0) {\r\n                OperationBuilder.fieldAssign(elem.effects[0], 'name', ast.effect.trim());\r\n            } else {\r\n                var newEffect = new type.UMLOpaqueBehavior();\r\n                newEffect._parent = elem;\r\n                newEffect.name = ast.effect.trim();\r\n                OperationBuilder.insert(newEffect);\r\n                OperationBuilder.fieldInsert(elem, 'effects', newEffect);\r\n            }\r\n        }\r\n        if (elem.effects.length > effectCount) {\r\n            for (var k = effectCount; k < elem.effects.length; k++) {\r\n                OperationBuilder.fieldRemove(elem, 'effects', elem.effects[k]);\r\n                OperationBuilder.remove(elem.effects[k]);\r\n            }\r\n        }\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n    }\r\n\r\n\r\n    /**\r\n     * 모델 요소에 대응하는 ViewType을 리턴\r\n     */\r\n    function getViewTypeOf(model) {\r\n        switch (model.getClassName()) {\r\n        // Common\r\n        case 'UMLConstraint':               return type.UMLConstraintView;\r\n        // Classes\r\n        case 'UMLClass':                    return type.UMLClassView;\r\n        case 'UMLInterface':                return type.UMLInterfaceView;\r\n        case 'UMLSignal':                   return type.UMLSignalView;\r\n        case 'UMLDataType':                 return type.UMLDataTypeView;\r\n        case 'UMLPrimitiveType':            return type.UMLPrimitiveTypeView;\r\n        case 'UMLEnumeration':              return type.UMLEnumerationView;\r\n        case 'UMLGeneralization':           return type.UMLGeneralizationView;\r\n        case 'UMLAssociation':              return type.UMLAssociationView;\r\n        case 'UMLDependency':               return type.UMLDependencyView;\r\n        case 'UMLInterfaceRealization':     return type.UMLInterfaceRealizationView;\r\n        // Packages\r\n        case 'UMLModel':                    return type.UMLModelView;\r\n        case 'UMLSubsystem':                return type.UMLSubsystemView;\r\n        case 'UMLPackage':                  return type.UMLPackageView;\r\n        // Instances\r\n        case 'UMLObject':                   return type.UMLObjectView;\r\n        case 'UMLArtifactInstance':         return type.UMLArtifactInstanceView;\r\n        case 'UMLComponentInstance':        return type.UMLComponentInstanceView;\r\n        case 'UMLNodeInstance':             return type.UMLNodeInstanceView;\r\n        case 'UMLLink':                     return type.UMLLinkView;\r\n        // Use Cases\r\n        case 'UMLUseCase':                  return type.UMLUseCaseView;\r\n        case 'UMLActor':                    return type.UMLActorView;\r\n        case 'UMLInclude':                  return type.UMLIncludeView;\r\n        case 'UMLExtend':                   return type.UMLExtendView;\r\n        // Components and Deployments\r\n        case 'UMLArtifact':                 return type.UMLArtifactView;\r\n        case 'UMLComponent':                return type.UMLComponentView;\r\n        case 'UMLNode':                     return type.UMLNodeView;\r\n        case 'UMLComponentRealization':     return type.UMLComponentRealizationView;\r\n        case 'UMLDeployment':               return type.UMLDeploymentView;\r\n        case 'UMLCommunicationPath':        return type.UMLCommunicationPathView;\r\n        // Composite Structure\r\n        case 'UMLPort':                     return type.UMLPortView;\r\n        case 'UMLAttribute':                return type.UMLPartView;\r\n        case 'UMLCollaboration':            return type.UMLCollaborationView;\r\n        case 'UMLCollaborationUse':         return type.UMLCollaborationUseView;\r\n        case 'UMLConnector':                return type.UMLConnectorView;\r\n        case 'UMLRoleBinding':              return type.UMLRoleBindingView;\r\n        // Sequence\r\n        case 'UMLCombinedFragment':         return type.UMLCombinedFragmentView;\r\n        case 'UMLInteractionUse':           return type.UMLInteractionUseView;\r\n        // Communication\r\n        // Statechart\r\n        case 'UMLState':                    return type.UMLStateView;\r\n        case 'UMLPseudostate':              return type.UMLPseudostateView;\r\n        case 'UMLFinalState':               return type.UMLFinalStateView;\r\n        case 'UMLConnectionPointReference': return type.UMLConnectionPointReferenceView;\r\n        case 'UMLTransition':               return type.UMLTransitionView;\r\n        // Activity\r\n        case 'UMLAction':                   return type.UMLActionView;\r\n        case 'UMLInitialNode':              return type.UMLControlNodeView;\r\n        case 'UMLFinalNode':                return type.UMLControlNodeView;\r\n        case 'UMLActivityFinalNode':        return type.UMLControlNodeView;\r\n        case 'UMLFlowFinalNode':            return type.UMLControlNodeView;\r\n        case 'UMLForkNode':                 return type.UMLControlNodeView;\r\n        case 'UMLJoinNode':                 return type.UMLControlNodeView;\r\n        case 'UMLMergeNode':                return type.UMLControlNodeView;\r\n        case 'UMLDecisionNode':             return type.UMLControlNodeView;\r\n        case 'UMLObjectNode':               return type.UMLObjectNodeView;\r\n        case 'UMLControlFlow':              return type.UMLControlFlowView;\r\n        case 'UMLObjectFlow':               return type.UMLObjectFlowView;\r\n        case 'UMLActivityPartition':        return type.UMLSwimlaneView;\r\n        // Profile\r\n        case 'UMLProfile':                  return type.UMLProfileView;\r\n        case 'UMLMetaClass':                return type.UMLMetaClassView;\r\n        case 'UMLStereotype':               return type.UMLStereotypeView;\r\n        case 'UMLExtension':                return type.UMLExtensionView;\r\n        default:                            return null;\r\n        }\r\n    }\r\n\r\n    exports.parseNameExpression              = parseNameExpression;\r\n    exports.parseAttributeExpression         = parseAttributeExpression;\r\n    exports.parseOperationExpression         = parseOperationExpression;\r\n    exports.parseTemplateParameterExpression = parseTemplateParameterExpression;\r\n    exports.parseObjectExpression            = parseObjectExpression;\r\n    exports.parseSlotExpression              = parseSlotExpression;\r\n    exports.parseLifelineExpression          = parseLifelineExpression;\r\n    exports.parseMessageExpression           = parseMessageExpression;\r\n    exports.parseTransitionExpression        = parseTransitionExpression;\r\n\r\n    exports.getVisibility                    = getVisibility;\r\n    exports.getNameExpression                = getNameExpression;\r\n    exports.getAttributeExpression           = getAttributeExpression;\r\n    exports.getOperationExpression           = getOperationExpression;\r\n    exports.getTemplateParameterExpression   = getTemplateParameterExpression;\r\n    exports.getObjectExpression              = getObjectExpression;\r\n    exports.getSlotExpression                = getSlotExpression;\r\n    exports.getLifelineExpression            = getLifelineExpression;\r\n    exports.getMessageExpression             = getMessageExpression;\r\n    exports.getTransitionExpression          = getTransitionExpression;\r\n\r\n    exports.setVisibility                    = setVisibility;\r\n    exports.setNameExpression                = setNameExpression;\r\n    exports.setAttributeExpression           = setAttributeExpression;\r\n    exports.setOperationExpression           = setOperationExpression;\r\n    exports.setTemplateParameterExpression   = setTemplateParameterExpression;\r\n    exports.setObjectExpression              = setObjectExpression;\r\n    exports.setSlotExpression                = setSlotExpression;\r\n    exports.setLifelineExpression            = setLifelineExpression;\r\n    exports.setMessageExpression             = setMessageExpression;\r\n    exports.setTransitionExpression          = setTransitionExpression;\r\n\r\n    exports.getViewTypeOf                    = getViewTypeOf;\r\n\r\n});\r\n\n//# sourceURL=/uml/UMLUtils.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, vars: true */\r\n/*global define, $, _, window, appshell, type, Mustache */\r\n\r\ndefine(\'uml/UMLFactory\',[\'require\',\'exports\',\'module\',\'utils/Helper\',\'core/Core\',\'core/OperationBuilder\',\'core/Repository\',\'core/MetaModelManager\',\'engine/ProjectManager\',\'engine/Engine\',\'engine/Factory\',\'engine/SelectionManager\',\'diagrams/DiagramManager\',\'dialogs/Dialogs\',\'uml/UML\',\'uml/UMLDiagram\',\'uml/UMLUtils\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Helper           = require("utils/Helper"),\r\n        Core             = require("core/Core"),\r\n        OperationBuilder = require("core/OperationBuilder"),\r\n        Repository       = require("core/Repository"),\r\n        MetaModelManager = require("core/MetaModelManager"),\r\n        ProjectManager   = require("engine/ProjectManager"),\r\n        Engine           = require("engine/Engine"),\r\n        Factory          = require("engine/Factory"),\r\n        SelectionManager = require("engine/SelectionManager"),\r\n        DiagramManager   = require("diagrams/DiagramManager"),\r\n        Dialogs          = require("dialogs/Dialogs"),\r\n        UML              = require("uml/UML"),\r\n        UMLDiagram       = require("uml/UMLDiagram"),\r\n        UMLUtils         = require("uml/UMLUtils");\r\n\r\n    // Precondition functions .................................................\r\n\r\n    function featurePrecondition(options) {\r\n        Helper.assert(\r\n            options.parent instanceof type.UMLClassifier,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, options.modelType)\r\n        );\r\n    }\r\n\r\n    function modelElementLinkPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLModelElement) && (options.headModel instanceof type.UMLModelElement),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function featureLinkPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLFeature) && (options.headModel instanceof type.UMLFeature),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function classifierLinkPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLClassifier) && (options.headModel instanceof type.UMLClassifier),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function roleBindingPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLCollaborationUse) && (options.headModel instanceof type.UMLAttribute),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function componentRealizationPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLClassifier) && (options.headModel instanceof type.UMLComponent),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function deploymentPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLClassifier) && (options.headModel instanceof type.UMLNode),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function nodeLinkPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLNode) && (options.headModel instanceof type.UMLNode),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function instanceLinkPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLInstance) && (options.headModel instanceof type.UMLInstance),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function useCaseLinkPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLUseCase) && (options.headModel instanceof type.UMLUseCase),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function interactionPrecondition(options) {\r\n        Helper.assert(\r\n            options.parent instanceof type.UMLInteraction,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, options.modelType)\r\n        );\r\n    }\r\n\r\n    function activityPrecondition(options) {\r\n        Helper.assert(\r\n            options.parent instanceof type.UMLActivity,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, options.modelType)\r\n        );\r\n    }\r\n\r\n    function pinPrecondition(options) {\r\n        Helper.assert(\r\n            options.parent instanceof type.UMLAction,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, options.modelType)\r\n        );\r\n    }\r\n\r\n    function flowPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLPin || options.tailModel instanceof type.UMLActivityNode) &&\r\n            (options.headModel instanceof type.UMLPin || options.headModel instanceof type.UMLActivityNode),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function actionLinkPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLAction) &&\r\n            (options.headModel instanceof type.UMLAction),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    function extensionPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLStereotype) && (options.headModel instanceof type.UMLMetaClass),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n\r\n    // Create diagram functions ...............................................\r\n\r\n    function structuralDiagramFn(parent, options) {\r\n        var DiagramType = type[options.diagramType],\r\n            model,\r\n            diagram;\r\n        parent = parent || ProjectManager.getProject();\r\n        if (parent instanceof type.Project) {\r\n            model = new type.UMLModel();\r\n            model.name = Core.getNewName(parent.ownedElements, "Model");\r\n            model._parent = parent;\r\n            diagram = new DiagramType();\r\n            diagram.name = Core.getNewName(parent.ownedElements, diagram.getDisplayClassName());\r\n            model.ownedElements.push(diagram);\r\n            diagram._parent = model;\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', model);\r\n        } else {\r\n            diagram = new DiagramType();\r\n            diagram.name = Core.getNewName(parent.ownedElements, diagram.getDisplayClassName());\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', diagram);\r\n        }\r\n        if (diagram) {\r\n            diagram = Repository.get(diagram._id);\r\n        }\r\n        options.triggerDiagramCreated(diagram);\r\n        return diagram;\r\n    }\r\n\r\n    function profileDiagramFn(parent, options) {\r\n        var profile, diagram;\r\n        if (parent instanceof type.UMLProfile) {\r\n            diagram = new type.UMLProfileDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, \'ProfileDiagram\');\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', diagram);\r\n        } else {\r\n            profile = new type.UMLProfile();\r\n            profile.name = Core.getNewName(parent.ownedElements, \'Profile\');\r\n            profile._parent = parent;\r\n            diagram = new type.UMLProfileDiagram();\r\n            diagram.name = Core.getNewName(profile.ownedElements, \'ProfileDiagram\');\r\n            profile.ownedElements.push(diagram);\r\n            diagram._parent = profile;\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', profile);\r\n        }\r\n        if (diagram) {\r\n            diagram = Repository.get(diagram._id);\r\n        }\r\n        options.triggerDiagramCreated(diagram);\r\n        return diagram;\r\n    }\r\n\r\n    function compositeStructureDiagramFn(parent, options) {\r\n        var collaboration, diagram;\r\n        if (parent instanceof type.UMLClassifier) {\r\n            diagram = new type.UMLCompositeStructureDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, \'CompositeStructureDiagram\');\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', diagram);\r\n        } else {\r\n            collaboration = new type.UMLCollaboration();\r\n            collaboration.name = Core.getNewName(parent.collaborations, \'Collaboration\');\r\n            collaboration._parent = parent;\r\n            diagram = new type.UMLCompositeStructureDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, \'Composite Structures\');\r\n            collaboration.ownedElements.push(diagram);\r\n            diagram._parent = collaboration;\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', collaboration);\r\n        }\r\n        if (diagram) {\r\n            diagram = Repository.get(diagram._id);\r\n        }\r\n        options.triggerDiagramCreated(diagram);\r\n        return diagram;\r\n    }\r\n\r\n    function _addFrame(diagram) {\r\n        var frame = new type.UMLFrameView();\r\n        diagram.ownedViews.push(frame);\r\n        frame._parent = diagram;\r\n        frame.model = diagram;\r\n        frame.initialize(null, 5, 5, 700, 600);\r\n    }\r\n\r\n    function sequenceDiagramFn(parent, options) {\r\n        var collaboration, interaction, frame, diagram;\r\n        if (parent instanceof type.UMLInteraction) {\r\n            diagram = new type.UMLSequenceDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, \'SequenceDiagram\');\r\n            _addFrame(diagram);\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', diagram);\r\n        } else if (parent instanceof type.UMLClassifier) {\r\n            interaction = new type.UMLInteraction();\r\n            interaction.name = Core.getNewName(parent.ownedElements, \'Interaction\');\r\n            diagram = new type.UMLSequenceDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, \'SequenceDiagram\');\r\n            interaction.ownedElements.push(diagram);\r\n            diagram._parent = interaction;\r\n            _addFrame(diagram);\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', interaction);\r\n        } else {\r\n            collaboration = new type.UMLCollaboration();\r\n            collaboration.name = Core.getNewName(parent.ownedElements, \'Collaboration\');\r\n            collaboration._parent = parent;\r\n            interaction = new type.UMLInteraction();\r\n            interaction.name = Core.getNewName(collaboration.ownedElements, \'Interaction\');\r\n            collaboration.ownedElements.push(interaction);\r\n            interaction._parent = collaboration;\r\n            diagram = new type.UMLSequenceDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, \'SequenceDiagram\');\r\n            interaction.ownedElements.push(diagram);\r\n            diagram._parent = interaction;\r\n            _addFrame(diagram);\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', collaboration);\r\n        }\r\n        if (diagram) {\r\n            diagram = Repository.get(diagram._id);\r\n        }\r\n        options.triggerDiagramCreated(diagram);\r\n        return diagram;\r\n    }\r\n\r\n    function communicationDiagramFn(parent, options) {\r\n        var collaboration, interaction, diagram, frame;\r\n        if (parent instanceof type.UMLInteraction) {\r\n            diagram = new type.UMLCommunicationDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, \'CommunicationDiagram\');\r\n            _addFrame(diagram);\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', diagram);\r\n        } else if (parent instanceof type.UMLCollaboration) {\r\n            interaction = new type.UMLInteraction();\r\n            interaction.name = Core.getNewName(parent.ownedElements, \'Interaction\');\r\n            diagram = new type.UMLCommunicationDiagram();\r\n            diagram.name = Core.getNewName(interaction.ownedElements, \'CommunicationDiagram\');\r\n            interaction.ownedElements.push(diagram);\r\n            diagram._parent = interaction;\r\n            _addFrame(diagram);\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', interaction);\r\n        } else {\r\n            collaboration = new type.UMLCollaboration();\r\n            collaboration.name = Core.getNewName(parent.ownedElements, \'Collaboration\');\r\n            collaboration._parent = parent;\r\n            interaction = new type.UMLInteraction();\r\n            interaction.name = Core.getNewName(collaboration.ownedElements, \'Interaction\');\r\n            collaboration.ownedElements.push(interaction);\r\n            interaction._parent = collaboration;\r\n            diagram = new type.UMLCommunicationDiagram();\r\n            diagram.name = Core.getNewName(interaction.ownedElements, \'CommunicationDiagram\');\r\n            interaction.ownedElements.push(diagram);\r\n            diagram._parent = interaction;\r\n            _addFrame(diagram);\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', collaboration);\r\n        }\r\n        if (diagram) {\r\n            diagram = Repository.get(diagram._id);\r\n        }\r\n        options.triggerDiagramCreated(diagram);\r\n        return diagram;\r\n    }\r\n\r\n    function statechartDiagramFn(parent, options) {\r\n        var stateMachine, region, diagram;\r\n        if (parent instanceof type.UMLStateMachine) {\r\n            diagram = new type.UMLStatechartDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, \'StatechartDiagram\');\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', diagram);\r\n        } else {\r\n            // StateMachine\r\n            stateMachine = new type.UMLStateMachine();\r\n            stateMachine.name = Core.getNewName(parent.ownedElements, \'StateMachine\');\r\n            stateMachine._parent = parent;\r\n            region = new type.UMLRegion();\r\n            stateMachine.regions.push(region);\r\n            region._parent = stateMachine;\r\n            // Diagram\r\n            diagram = new type.UMLStatechartDiagram();\r\n            diagram.name = Core.getNewName(stateMachine.ownedElements, \'StatechartDiagram\');\r\n            stateMachine.ownedElements.push(diagram);\r\n            diagram._parent = stateMachine;\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', stateMachine);\r\n        }\r\n        if (diagram) {\r\n            diagram = Repository.get(diagram._id);\r\n        }\r\n        options.triggerDiagramCreated(diagram);\r\n        return diagram;\r\n    }\r\n\r\n    function activityDiagramFn(parent, options) {\r\n        var activity, diagram;\r\n        if (parent instanceof type.UMLActivity) {\r\n            diagram = new type.UMLActivityDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, \'ActivityDiagram\');\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', diagram);\r\n        } else {\r\n            activity = new type.UMLActivity();\r\n            activity.name = Core.getNewName(parent.stateMachines, \'Activity\');\r\n            activity._parent = parent;\r\n            diagram = new type.UMLActivityDiagram();\r\n            diagram.name = Core.getNewName(activity.ownedElements, \'ActivityDiagram\');\r\n            activity.ownedElements.push(diagram);\r\n            diagram._parent = activity;\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', activity);\r\n        }\r\n        if (diagram) {\r\n            diagram = Repository.get(diagram._id);\r\n        }\r\n        options.triggerDiagramCreated(diagram);\r\n        return diagram;\r\n    }\r\n\r\n    // Create model functions ..................................................\r\n\r\n    function stateMachineFn(parent, field, options) {\r\n        var model, region;\r\n        Helper.assert(\r\n            parent instanceof type.Model,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "StateMachine")\r\n        );\r\n        model = new type.UMLStateMachine();\r\n        model.name = Core.getNewName(parent.ownedElements, \'StateMachine\');\r\n        model._parent = parent;\r\n        region = new type.UMLRegion();\r\n        model.regions.push(region);\r\n        region._parent = model;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        Engine.addModel(parent, field, model);\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        options.triggerElementCreated(model, null);\r\n        return model;\r\n    }\r\n\r\n    // Create model and view functions .........................................\r\n\r\n    function associationClassFn(parent, diagram, options) {\r\n        var model, view;\r\n        Helper.assert(\r\n            ((options.tailModel instanceof type.UMLClass) && (options.headModel instanceof type.UMLAssociation)) ||\r\n            ((options.headModel instanceof type.UMLClass) && (options.tailModel instanceof type.UMLAssociation)) ||\r\n            ((options.tailModel instanceof type.UMLClassifier) && (options.headModel instanceof type.UMLClassifier)),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, "AssociationClass")\r\n        );\r\n        if ((options.tailModel instanceof type.UMLClassifier) && (options.headModel instanceof type.UMLClassifier)) {\r\n            // 두 개의 Classifier를 연결한 경우 : Class, Association, AssociationClassLink를 생성.\r\n            // create models (Class, Association, AssociationClassLink)\r\n            model = new type.UMLClass();\r\n            model.name = Core.getNewName(parent.ownedElements, "AssociationClass");\r\n            model._parent = parent;\r\n            var association = new type.UMLAssociation();\r\n            association.end1.reference = options.tailModel;\r\n            association.end2.reference = options.headModel;\r\n            model.ownedElements.push(association);\r\n            association._parent = model;\r\n            var associationClassLink = new type.UMLAssociationClassLink();\r\n            associationClassLink.classSide = model;\r\n            associationClassLink.associationSide = association;\r\n            model.ownedElements.push(associationClassLink);\r\n            associationClassLink._parent = model;\r\n            if (options.modelInitializer) {\r\n                options.modelInitializer(associationClassLink);\r\n            }\r\n            // create views (ClassView, AssociationView, AssociationClassLinkView)\r\n            var midX = (options.x1 + options.x2) / 2,\r\n                midY = (options.y1 + options.y2) / 2,\r\n                CLASS_DISTANCE = 30;\r\n            var classView = new type.UMLClassView();\r\n            classView.model = model;\r\n            classView._parent = diagram;\r\n            classView.initialize(null, midX, midY + CLASS_DISTANCE, midX, midY + CLASS_DISTANCE);\r\n            var associationView = new type.UMLAssociationView();\r\n            associationView.model = association;\r\n            associationView.tail = options.tailView;\r\n            associationView.head = options.headView;\r\n            associationView.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n            associationView._parent = diagram;\r\n            var associationClassLinkView = new type.UMLAssociationClassLinkView();\r\n            associationClassLinkView.model = associationClassLink;\r\n            associationClassLinkView.tail = classView;\r\n            associationClassLinkView.head = associationView;\r\n            associationClassLinkView.initialize(null, midX, midY, midX + CLASS_DISTANCE, midY + CLASS_DISTANCE);\r\n            associationClassLinkView._parent = diagram;\r\n            if (options.viewInitializer) {\r\n                options.viewInitializer(associationClassLinkView);\r\n            }\r\n            // make command\r\n            OperationBuilder.begin(\'add element\');\r\n            OperationBuilder.insert(model);\r\n            OperationBuilder.fieldInsert(parent, \'ownedElements\', model);\r\n            OperationBuilder.insert(classView);\r\n            OperationBuilder.insert(associationView);\r\n            OperationBuilder.insert(associationClassLinkView);\r\n            OperationBuilder.fieldInsert(diagram, \'ownedViews\', classView);\r\n            OperationBuilder.fieldInsert(diagram, \'ownedViews\', associationView);\r\n            OperationBuilder.fieldInsert(diagram, \'ownedViews\', associationClassLinkView);\r\n            OperationBuilder.end();\r\n            Repository.doOperation(OperationBuilder.getOperation());\r\n        } else {\r\n            model = new type.UMLAssociationClassLink();\r\n            view = new type.UMLAssociationClassLinkView();\r\n            view.lineStyle = Core.LS_OBLIQUE;\r\n            if ((options.tailModel instanceof type.UMLClass) && (options.headModel instanceof type.UMLAssociation)) {\r\n                // Class에서 Association로 연결한 경우 : AssociationClassLink를 생성.\r\n                model.classSide = options.tailModel;\r\n                model.associationSide = options.headModel;\r\n                view.tail = options.tailView;\r\n                view.head = options.headView;\r\n            } else if ((options.headModel instanceof type.UMLClass) && (options.tailModel instanceof type.UMLAssociation)) {\r\n                // Association에서 Class로 연결한 경우 : AssociationClassLink를 생성.\r\n                model.classSide = options.headModel;\r\n                model.associationSide = options.tailModel;\r\n                view.tail = options.headView;\r\n                view.head = options.tailView;\r\n            }\r\n            view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n            Engine.addModelAndView(diagram, model, view, model.classSide, \'ownedElements\');\r\n        }\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function interfaceRealizationFn(parent, diagram, options) {\r\n        var model, view;\r\n        Helper.assert(\r\n            ((options.tailModel instanceof type.UMLClassifier) && (options.headModel instanceof type.UMLInterface)) ||\r\n            ((options.tailModel instanceof type.UMLPort) && (options.headModel instanceof type.UMLInterface)),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, "Interface Realization")\r\n        );\r\n        if (options.tailModel instanceof type.UMLPort) {\r\n            Helper.assert(options.tailModel.type instanceof type.UMLClassifier, "Port should have type to create Interface Realization");\r\n            if (options.tailModel.type instanceof type.UMLClassifier) {\r\n                var rs = Repository.getRelationshipsOf(options.tailModel.type, function (r) {\r\n                    return (r instanceof type.UMLInterfaceRealization &&\r\n                            r.source === options.tailModel.type &&\r\n                            r.target === options.headModel);\r\n                });\r\n                options.tailModel = options.tailModel.type;\r\n                // there already interface realization is.\r\n                if (rs.length > 0) {\r\n                    view = new type.UMLInterfaceRealizationView();\r\n                    view.tail = options.tailView;\r\n                    view.head = options.headView;\r\n                    view.model = rs[0];\r\n                    view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n                    Engine.addViews(diagram, [view]);\r\n                }\r\n            }\r\n        }\r\n        model = new type.UMLInterfaceRealization();\r\n        model.source = options.tailModel;\r\n        model.target = options.headModel;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        view = new type.UMLInterfaceRealizationView();\r\n        view.tail = options.tailView;\r\n        view.head = options.headView;\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        Engine.addModelAndView(diagram, model, view, options.tailModel, \'ownedElements\');\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function containmentFn(parent, diagram, options) {\r\n        var view;\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLModelElement) && (options.headModel instanceof type.UMLModelElement),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, "Containment")\r\n        );\r\n        if (!_.contains(options.headModel.ownedElements, options.tailModel)) {\r\n            Engine.relocate(options.tailModel, options.headModel, \'ownedElements\');\r\n        }\r\n        view = new type.UMLContainmentView();\r\n        view.tail = options.tailView;\r\n        view.head = options.headView;\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        Engine.addViews(diagram, [view]);\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(null, view);\r\n        return view;\r\n    }\r\n\r\n    function partFn(parent, diagram, options) {\r\n        var model, view;\r\n        Helper.assert(\r\n            parent instanceof type.UMLClassifier || parent instanceof type.UMLAttribute,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "UMLAttribute")\r\n        );\r\n        if (parent instanceof type.UMLAttribute) {\r\n            Helper.assert(\r\n                parent.type instanceof type.UMLClassifier,\r\n                "Type should be assigned to have internal Parts"\r\n            );\r\n            parent = parent.type;\r\n        }\r\n        // Create Part (Attribute)\r\n        model = new type.UMLAttribute();\r\n        model.name = Core.getNewName(parent.attributes, "Part");\r\n        model._parent = parent;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        OperationBuilder.begin("Create Part");\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, "attributes", model);\r\n        // Create PartView\r\n        view = new type.UMLPartView();\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        if (options.containerView) {\r\n            view.containerView = options.containerView;\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", view);\r\n        if (options.containerView) {\r\n            OperationBuilder.fieldInsert(options.containerView, "containedViews", view);\r\n        }\r\n        // Apply operation\r\n        OperationBuilder.end();\r\n        var op = OperationBuilder.getOperation();\r\n        Repository.doOperation(op);\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function portFn(parent, diagram, options) {\r\n        var model, view;\r\n        Helper.assert(\r\n            parent instanceof type.UMLClassifier || parent instanceof type.UMLAttribute,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "UMLPort")\r\n        );\r\n        if (parent instanceof type.UMLAttribute) {\r\n            Helper.assert(\r\n                parent.type instanceof type.UMLClassifier,\r\n                "Type should be assigned to have Ports"\r\n            );\r\n            parent = parent.type;\r\n        }\r\n        // Create Port\r\n        model = new type.UMLPort();\r\n        model.name = Core.getNewName(parent.attributes, "Port");\r\n        model._parent = parent;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        OperationBuilder.begin("Create Port");\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, "attributes", model);\r\n        // Create PartView\r\n        view = new type.UMLPortView();\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        if (options.containerView) {\r\n            view.containerView = options.containerView;\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", view);\r\n        if (options.containerView) {\r\n            OperationBuilder.fieldInsert(options.containerView, "containedViews", view);\r\n        }\r\n        // Apply operation\r\n        OperationBuilder.end();\r\n        var op = OperationBuilder.getOperation();\r\n        Repository.doOperation(op);\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function lifelineFn(parent, diagram, options) {\r\n        var model, view;\r\n        Helper.assert(\r\n            (parent instanceof type.UMLInteraction) && (parent._parent instanceof type.UMLClassifier),\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "UMLLifeline")\r\n        );\r\n        // Create Role (Attribute)\r\n        var classifier = parent._parent;\r\n        var role = new type.UMLAttribute();\r\n        role.name = Core.getNewName(classifier.attributes, "Role");\r\n        role._parent = classifier;\r\n        // Create Lifeline\r\n        model = new type.UMLLifeline();\r\n        model.name = Core.getNewName(parent.participants, "Lifeline");\r\n        model.represent = role;\r\n        model._parent = parent;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        // Create LifelineView\r\n        if (diagram instanceof type.UMLSequenceDiagram) {\r\n            view = new type.UMLSeqLifelineView();\r\n            if (Math.abs(options.y2 - options.y1) < 200) {\r\n                options.y2 = options.y1 + 200;\r\n            }\r\n        } else if (diagram instanceof type.UMLCommunicationDiagram) {\r\n            view = new type.UMLCommLifelineView();\r\n            if (Math.abs(options.x2 - options.x1) < 100) {\r\n                options.x2 = options.x1 + 100;\r\n            }\r\n            if (Math.abs(options.y2 - options.y1) < 30) {\r\n                options.y2 = options.y1 + 30;\r\n            }\r\n        }\r\n        view._parent = diagram;\r\n        view.model = model;\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        // Make Command\r\n        OperationBuilder.begin(\'add element\');\r\n        OperationBuilder.insert(role);\r\n        OperationBuilder.fieldInsert(classifier, \'attributes\', role);\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, \'participants\', model);\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, \'ownedViews\', view);\r\n        OperationBuilder.end();\r\n        Repository.doOperation(OperationBuilder.getOperation());\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function messageFn(parent, diagram, options) {\r\n        var model, view, connector, connectorView;\r\n        options.connector = options.connector || null;\r\n        if (diagram instanceof type.UMLSequenceDiagram) {\r\n            // if linked to UMLSeqLifelineView\r\n            if (options.tailView instanceof type.UMLSeqLifelineView) {\r\n                options.tailView = options.tailView.linePart;\r\n            }\r\n            if (options.headView instanceof type.UMLSeqLifelineView) {\r\n                options.headView = options.headView.linePart;\r\n            }\r\n            // If linked to UMLActivationView.\r\n            if (options.tailView instanceof type.UMLActivationView) {\r\n                options.tailModel = options.tailView._parent.head.model;\r\n                options.tailView = options.tailView._parent.head;\r\n            }\r\n            if (options.headView instanceof type.UMLActivationView) {\r\n                options.headModel = options.headView._parent.head.model;\r\n                options.headView = options.headView._parent.head;\r\n            }\r\n            Helper.assert(\r\n                (options.tailView instanceof type.UMLLinePartView || options.tailView instanceof type.UMLMessageEndpointView) &&\r\n                (options.headView instanceof type.UMLLinePartView || options.headView instanceof type.UMLMessageEndpointView),\r\n                Mustache.render(Factory.ERR_INVALID_LINK, "UMLMessage")\r\n            );\r\n            model = new type.UMLMessage();\r\n            model.name = Core.getNewName(parent.messages, "Message");\r\n            model.connector = options.connector;\r\n            model.source = options.tailModel;\r\n            model.target = options.headModel;\r\n            if (options.modelInitializer) {\r\n                options.modelInitializer(model);\r\n            }\r\n            view = new type.UMLSeqMessageView();\r\n            view.tail = options.tailView;\r\n            view.head = options.headView;\r\n            view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n            if (options.viewInitializer) {\r\n                options.viewInitializer(view);\r\n            }\r\n            Engine.addModelAndView(diagram, model, view, parent, \'messages\');\r\n        } else if (diagram instanceof type.UMLCommunicationDiagram) {\r\n            // Connect between two UMLCommLifelineViews\r\n            if (options.tailView instanceof type.UMLCommLifelineView && options.headView instanceof type.UMLCommLifelineView) {\r\n                options.direction = options.direction || "forward";\r\n                connector = new type.UMLConnector();\r\n                connector._parent = options.tailModel.represent;\r\n                connector.end1.reference = options.tailModel.represent;\r\n                connector.end2.reference = options.headModel.represent;\r\n                connectorView = new type.UMLConnectorView();\r\n                connectorView.tail = options.tailView;\r\n                connectorView.head = options.headView;\r\n                connectorView.model = connector;\r\n                connectorView._parent = diagram;\r\n                connectorView.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n                // Make Command\r\n                OperationBuilder.begin(\'add element\');\r\n                // add connector\r\n                OperationBuilder.insert(connector);\r\n                OperationBuilder.fieldInsert(options.tailModel.represent, \'ownedElements\', connector);\r\n                OperationBuilder.insert(connectorView);\r\n                OperationBuilder.fieldInsert(diagram, \'ownedViews\', connectorView);\r\n                // add message\r\n                model = new type.UMLMessage();\r\n                model.name = Core.getNewName(parent.messages, "Message");\r\n                model._parent = parent;\r\n                model.connector = connector;\r\n                if (options.direction === "forward") {\r\n                    model.source = options.tailModel;\r\n                    model.target = options.headModel;\r\n                } else { // reverse\r\n                    model.source = options.headModel;\r\n                    model.target = options.tailModel;\r\n                }\r\n                if (options.modelInitializer) {\r\n                    options.modelInitializer(model);\r\n                }\r\n                view = new type.UMLCommMessageView();\r\n                view.hostEdge = connectorView;\r\n                view.model = model;\r\n                view._parent = diagram;\r\n                view.initialize(null, connectorView.points.points[0].x, connectorView.points.points[0].y, connectorView.points.points[0].x, connectorView.points.points[0].y);\r\n                if (options.viewInitializer) {\r\n                    options.viewInitializer(view);\r\n                }\r\n                OperationBuilder.insert(model);\r\n                OperationBuilder.fieldInsert(parent, \'messages\', model);\r\n                OperationBuilder.insert(view);\r\n                OperationBuilder.fieldInsert(diagram, \'ownedViews\', view);\r\n                OperationBuilder.end();\r\n                Repository.doOperation(OperationBuilder.getOperation());\r\n            } else { // Click on UMLConnectorView\r\n                options.direction = options.direction || "forward";\r\n                Helper.assert(\r\n                    (options.headView instanceof type.UMLConnectorView),\r\n                    Mustache.render(Factory.ERR_INVALID_LINK, "Message")\r\n                );\r\n                model = new type.UMLMessage();\r\n                model.name = Core.getNewName(parent.messages, "Message");\r\n                model.connector = options.connector;\r\n                if (options.direction === "forward") {\r\n                    model.source = options.headView.tail.model;\r\n                    model.target = options.headView.head.model;\r\n                } else { // reverse\r\n                    model.source = options.headView.head.model;\r\n                    model.target = options.headView.tail.model;\r\n                }\r\n                if (options.modelInitializer) {\r\n                    options.modelInitializer(model);\r\n                }\r\n                view = new type.UMLCommMessageView();\r\n                view.hostEdge = options.headView;\r\n                view.initialize(null, options.x2, options.y2, options.x2, options.y2);\r\n                if (options.viewInitializer) {\r\n                    options.viewInitializer(view);\r\n                }\r\n                Engine.addModelAndView(diagram, model, view, parent, \'messages\');\r\n            }\r\n        }\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function foundMessageFn(parent, diagram, options) {\r\n        var model, view, endpoint, endpointView;\r\n        // if linked to UMLSeqLifelineView\r\n        if (options.headView instanceof type.UMLSeqLifelineView) {\r\n            options.headView = options.headView.linePart;\r\n        }\r\n        // If linked to UMLActivationView.\r\n        if (options.headView instanceof type.UMLActivationView) {\r\n            options.headModel = options.headView._parent.head.model;\r\n            options.headView = options.headView._parent.head;\r\n        }\r\n        Helper.assert(\r\n            parent instanceof type.UMLInteraction,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, options.modelType)\r\n        );\r\n        Helper.assert(\r\n            (options.headView instanceof type.UMLLinePartView),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, "UMLFoundMessage")\r\n        );\r\n        OperationBuilder.begin(\'add element\');\r\n        // endpoint\r\n        endpoint = new type.UMLEndpoint();\r\n        endpoint.name = Core.getNewName(parent.participants, endpoint.getDisplayClassName());\r\n        endpoint._parent = parent;\r\n        OperationBuilder.insert(endpoint);\r\n        OperationBuilder.fieldInsert(parent, \'participants\', endpoint);\r\n        endpointView = new type.UMLEndpointView();\r\n        endpointView.initialize(null, options.x1, options.y1, options.x1, options.y1);\r\n        endpointView.model = endpoint;\r\n        endpointView._parent = diagram;\r\n        OperationBuilder.insert(endpointView);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", endpointView);\r\n        // message\r\n        model = new type.UMLMessage();\r\n        model._parent = parent;\r\n        model.name = Core.getNewName(parent.messages, "Message");\r\n        model.source = endpoint;\r\n        model.target = options.headModel;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, \'messages\', model);\r\n        view = new type.UMLSeqMessageView();\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        view.tail = endpointView;\r\n        view.head = options.headView;\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, \'ownedViews\', view);\r\n        OperationBuilder.end();\r\n        Repository.doOperation(OperationBuilder.getOperation());\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function lostMessageFn(parent, diagram, options) {\r\n        var model, view, endpoint, endpointView;\r\n        // if linked to UMLSeqLifelineView\r\n        if (options.tailView instanceof type.UMLSeqLifelineView) {\r\n            options.tailView = options.tailView.linePart;\r\n        }\r\n        // If linked to UMLActivationView.\r\n        if (options.tailView instanceof type.UMLActivationView) {\r\n            options.tailModel = options.tailView._parent.head.model;\r\n            options.tailView = options.tailView._parent.head;\r\n        }\r\n        Helper.assert(\r\n            parent instanceof type.UMLInteraction,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, options.modelType)\r\n        );\r\n        Helper.assert(\r\n            (options.tailView instanceof type.UMLLinePartView),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, "UMLFoundMessage")\r\n        );\r\n        OperationBuilder.begin(\'add element\');\r\n        // endpoint\r\n        endpoint = new type.UMLEndpoint();\r\n        endpoint.name = Core.getNewName(parent.participants, endpoint.getDisplayClassName());\r\n        endpoint._parent = parent;\r\n        OperationBuilder.insert(endpoint);\r\n        OperationBuilder.fieldInsert(parent, \'participants\', endpoint);\r\n        endpointView = new type.UMLEndpointView();\r\n        endpointView.initialize(null, options.x2, options.y2, options.x2, options.y2);\r\n        endpointView.model = endpoint;\r\n        endpointView._parent = diagram;\r\n        OperationBuilder.insert(endpointView);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", endpointView);\r\n        // message\r\n        model = new type.UMLMessage();\r\n        model._parent = parent;\r\n        model.name = Core.getNewName(parent.messages, "Message");\r\n        model.source = options.tailModel;\r\n        model.target = endpoint;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, \'messages\', model);\r\n        view = new type.UMLSeqMessageView();\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        view.tail = options.tailView;\r\n        view.head = endpointView;\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, \'ownedViews\', view);\r\n        OperationBuilder.end();\r\n        Repository.doOperation(OperationBuilder.getOperation());\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function stateInvariantFn(parent, diagram, options) {\r\n        var model, view;\r\n        Helper.assert(\r\n            options.headModel instanceof type.UMLLifeline,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "State Invariant")\r\n        );\r\n        // make command\r\n        OperationBuilder.begin(\'add element\');\r\n        // model\r\n        model = new type.UMLStateInvariant();\r\n        model.name = Core.getNewName(parent.fragments, "StateInvariant");\r\n        model.covered = options.headModel;\r\n        model._parent = parent;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, \'fragments\', model);\r\n        // view\r\n        view = new type.UMLStateInvariantView();\r\n        view.initialize(null, options.x2, options.y2, options.x2, options.y2);\r\n        view.model = model;\r\n        view._parent = options.headView;\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(options.headView, \'subViews\', view);\r\n        OperationBuilder.end();\r\n        var cmd = OperationBuilder.getOperation();\r\n        Repository.doOperation(cmd);\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function combinedFragmentFn(parent, diagram, options) {\r\n        var model, view, operand;\r\n        Helper.assert(\r\n            (parent instanceof type.UMLInteraction),\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "CombinedFragment")\r\n        );\r\n        model = new type.UMLCombinedFragment();\r\n        model.name = Core.getNewName(parent.fragments, "CombinedFragment");\r\n        operand = new type.UMLInteractionOperand();\r\n        operand.name = Core.getNewName(model.operands, "Operand");\r\n        model.operands.push(operand);\r\n        operand._parent = model;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        view = new type.UMLCombinedFragmentView();\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        Engine.addModelAndView(diagram, model, view, parent, \'fragments\');\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function connectorFn(parent, diagram, options) {\r\n        var model, view;\r\n        if (diagram instanceof type.UMLCommunicationDiagram) {\r\n            Helper.assert(\r\n                parent._parent instanceof type.UMLCollaboration,\r\n                Mustache.render(Factory.ERR_INVALID_PARENT, "Connector")\r\n            );\r\n            Helper.assert(\r\n                (options.tailModel instanceof type.UMLLifeline) && (options.headModel instanceof type.UMLLifeline),\r\n                Mustache.render(Factory.ERR_INVALID_LINK, "Connector")\r\n            );\r\n            Helper.assert(\r\n                (options.tailModel.represent instanceof type.UMLFeature) && (options.headModel.represent instanceof type.UMLFeature),\r\n                Mustache.render(Factory.ERR_INVALID_LINK, "Connector")\r\n            );\r\n            model = new type.UMLConnector();\r\n            model.end1.reference = options.tailModel.represent;\r\n            model.end2.reference = options.headModel.represent;\r\n            if (options.modelInitializer) {\r\n                options.modelInitializer(model);\r\n            }\r\n            view = new type.UMLConnectorView();\r\n            view.tail = options.tailView;\r\n            view.head = options.headView;\r\n            view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n            if (options.viewInitializer) {\r\n                options.viewInitializer(view);\r\n            }\r\n            Engine.addModelAndView(diagram, model, view, options.tailModel.represent, \'ownedElements\');\r\n            if (model) {\r\n                model = Repository.get(model._id);\r\n            }\r\n            if (view) {\r\n                view = Repository.get(view._id);\r\n            }\r\n            options.triggerElementCreated(model, view);\r\n            return view;\r\n        } else {\r\n            options.precondition = featureLinkPrecondition;\r\n            return Factory.defaultUndirectedRelationshipFn(parent, diagram, options);\r\n        }\r\n    }\r\n\r\n    function stateFn(parent, diagram, options) {\r\n        var model, view, region;\r\n        options.regionCount = options.regionCount || 0;\r\n        options.submachine = options.submachine || null;\r\n        Helper.assert(\r\n            parent instanceof type.UMLStateMachine,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "State")\r\n        );\r\n        model = new type.UMLState();\r\n        model.name = Core.getNewName(parent.regions[0].vertices, "State");\r\n        model.submachine = options.submachine;\r\n        for (var i = 0; i < options.regionCount; i++) {\r\n            region = new type.UMLRegion();\r\n            region._parent = model;\r\n            model.regions.push(region);\r\n        }\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        view = new type.UMLStateView();\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        Engine.addModelAndView(diagram, model, view, parent.regions[0], \'vertices\');\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function submachineStateFn(parent, diagram, options) {\r\n        var model, view, stateMachine = null;\r\n        Helper.assert(\r\n            parent instanceof type.UMLStateMachine,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "State")\r\n        );\r\n        // Create a StateMachine\r\n        stateMachine = new type.UMLStateMachine();\r\n        stateMachine.name = Core.getNewName(parent._parent.ownedElements, stateMachine.getDisplayClassName());\r\n        stateMachine._parent = parent._parent;\r\n        OperationBuilder.begin("Create SubmachineState");\r\n        OperationBuilder.insert(stateMachine);\r\n        OperationBuilder.fieldInsert(parent._parent, \'ownedElements\', stateMachine);\r\n\r\n        // Create model element\r\n        model = new type.UMLState();\r\n        model.name = Core.getNewName(parent.regions[0].vertices, model.getDisplayClassName());\r\n        model.submachine = stateMachine;\r\n        model._parent = parent.regions[0];\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent.regions[0], \'vertices\', model);\r\n\r\n        // Create view element\r\n        view = new type.UMLStateView();\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        if (options.containerView) {\r\n            view.containerView = options.containerView;\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", view);\r\n        if (options.containerView) {\r\n            OperationBuilder.fieldInsert(options.containerView, "containedViews", view);\r\n        }\r\n\r\n        // Apply operation\r\n        OperationBuilder.end();\r\n        var op = OperationBuilder.getOperation();\r\n        Repository.doOperation(op);\r\n\r\n        // Trigger event\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view || model;\r\n    }\r\n\r\n    function pseudostateFn(parent, diagram, options) {\r\n        var model, view;\r\n        options.pseudostateKind = options.pseudostateKind || UML.PSK_INITIAL;\r\n        Helper.assert(\r\n            parent instanceof type.UMLStateMachine,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "Pseudostate")\r\n        );\r\n        model = new type.UMLPseudostate();\r\n        model.kind = options.pseudostateKind;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        view = new type.UMLPseudostateView();\r\n        view.initialize(null, options.x2, options.y2, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        Engine.addModelAndView(diagram, model, view, parent.regions[0], \'vertices\');\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function finalStateFn(parent, diagram, options) {\r\n        var model, view;\r\n        Helper.assert(\r\n            parent instanceof type.UMLStateMachine,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "FinalState")\r\n        );\r\n        model = new type.UMLFinalState();\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        view = new type.UMLFinalStateView();\r\n        view.initialize(null, options.x2, options.y2, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        Engine.addModelAndView(diagram, model, view, parent.regions[0], \'vertices\');\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function connectionPointReferenceFn(parent, diagram, options) {\r\n        var model, view;\r\n        Helper.assert(\r\n            parent instanceof type.UMLState,\r\n            Mustache.render(Factory.ERR_INVALID_PARENT, "ConnectionPointReference")\r\n        );\r\n        model = new type.UMLConnectionPointReference();\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        view = new type.UMLConnectionPointReferenceView();\r\n        view.initialize(null, options.x2, options.y2, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        Engine.addModelAndView(diagram, model, view, parent, \'connections\', options.containerView);\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function transitionFn(parent, diagram, options) {\r\n        var model, view;\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.UMLVertex) && (options.headModel instanceof type.UMLVertex),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, "Transition")\r\n        );\r\n        model = new type.UMLTransition();\r\n        model.source = options.tailModel;\r\n        model.target = options.headModel;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        view = new type.UMLTransitionView();\r\n        view.tail = options.tailView;\r\n        view.head = options.headView;\r\n        view.initialize(null, options.x1, options.y1, options.x1, options.y1);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        Engine.addModelAndView(diagram, model, view, parent.regions[0], \'transitions\');\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view;\r\n    }\r\n\r\n    function objectFlowFn(parent, diagram, options) {\r\n        var model, pin1, pin2, view, pinView1, pinView2;\r\n        options.parent = parent;\r\n        options.diagram = diagram;\r\n        flowPrecondition(options);\r\n\r\n        // Create model element\r\n        model = new type.UMLObjectFlow();\r\n        model._parent = parent;\r\n        model.source = options.tailModel;\r\n        model.target = options.headModel;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        OperationBuilder.begin("Create " + model.getDisplayClassName());\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, "edges", model);\r\n\r\n        // Create view element\r\n        view = new type.UMLObjectFlowView();\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        view.tail = options.tailView;\r\n        view.head = options.headView;\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", view);\r\n\r\n        // Create Input/OutputPins when connect between two Actions\r\n        if (options.tailModel instanceof type.UMLAction && options.headModel instanceof type.UMLAction) {\r\n            // OutputPin\r\n            pin1 = new type.UMLOutputPin();\r\n            pin1._parent = options.tailModel;\r\n            OperationBuilder.insert(pin1);\r\n            OperationBuilder.fieldInsert(options.tailModel, "outputs", pin1);\r\n            OperationBuilder.fieldAssign(model, "source", pin1);\r\n            pinView1 = new type.UMLOutputPinView();\r\n            pinView1.model = pin1;\r\n            pinView1._parent = diagram;\r\n            pinView1.containerView = options.tailView;\r\n            pinView1.initialize(null, options.x1, options.y1, options.x1, options.y1);\r\n            OperationBuilder.insert(pinView1);\r\n            OperationBuilder.fieldInsert(diagram, "ownedViews", pinView1);\r\n            OperationBuilder.fieldInsert(options.tailView, "containedViews", pinView1);\r\n            OperationBuilder.fieldAssign(view, "tail", pinView1);\r\n            // InputPin\r\n            pin2 = new type.UMLInputPin();\r\n            pin2._parent = options.headModel;\r\n            OperationBuilder.insert(pin2);\r\n            OperationBuilder.fieldInsert(options.headModel, "inputs", pin2);\r\n            OperationBuilder.fieldAssign(model, "target", pin2);\r\n            pinView2 = new type.UMLInputPinView();\r\n            pinView2.model = pin2;\r\n            pinView2._parent = diagram;\r\n            pinView2.containerView = options.headView;\r\n            pinView2.initialize(null, options.x2, options.y2, options.x2, options.y2);\r\n            OperationBuilder.insert(pinView2);\r\n            OperationBuilder.fieldInsert(diagram, "ownedViews", pinView2);\r\n            OperationBuilder.fieldInsert(options.headView, "containedViews", pinView2);\r\n            OperationBuilder.fieldAssign(view, "head", pinView2);\r\n        }\r\n\r\n        // Apply operation\r\n        OperationBuilder.end();\r\n        var op = OperationBuilder.getOperation();\r\n        Repository.doOperation(op);\r\n\r\n        // Trigger event\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view || model;\r\n    }\r\n\r\n\r\n    function exceptionHandlerFn(parent, diagram, options) {\r\n        var model, view, pin, pinView;\r\n        options.parent = parent;\r\n        options.diagram = diagram;\r\n        actionLinkPrecondition(options);\r\n\r\n        // Create InputPin for exceptionInput\r\n        OperationBuilder.begin("Create ExceptionHandler");\r\n        pin = new type.UMLInputPin();\r\n        pin._parent = options.headModel;\r\n        OperationBuilder.insert(pin);\r\n        OperationBuilder.fieldInsert(options.headModel, "inputs", pin);\r\n        pinView = new type.UMLInputPinView();\r\n        pinView.model = pin;\r\n        pinView._parent = diagram;\r\n        pinView.containerView = options.headView;\r\n        pinView.initialize(null, options.x2, options.y2, options.x2, options.y2);\r\n        OperationBuilder.insert(pinView);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", pinView);\r\n        OperationBuilder.fieldInsert(options.headView, "containedViews", pinView);\r\n\r\n        // Create model element\r\n        model = new type.UMLExceptionHandler();\r\n        model._parent = parent;\r\n        model.source = options.tailModel;\r\n        model.target = pin;\r\n        model.handlerBody = options.headModel;\r\n        if (options.modelInitializer) {\r\n            options.modelInitializer(model);\r\n        }\r\n        OperationBuilder.insert(model);\r\n        OperationBuilder.fieldInsert(parent, "edges", model);\r\n\r\n        // Create view element\r\n        view = new type.UMLExceptionHandlerView();\r\n        view.model = model;\r\n        view._parent = diagram;\r\n        view.tail = options.tailView;\r\n        view.head = pinView;\r\n        view.initialize(null, options.x1, options.y1, options.x2, options.y2);\r\n        if (options.viewInitializer) {\r\n            options.viewInitializer(view);\r\n        }\r\n        OperationBuilder.insert(view);\r\n        OperationBuilder.fieldInsert(diagram, "ownedViews", view);\r\n\r\n        // Apply operation\r\n        OperationBuilder.end();\r\n        var op = OperationBuilder.getOperation();\r\n        Repository.doOperation(op);\r\n\r\n        // Trigger event\r\n        if (model) {\r\n            model = Repository.get(model._id);\r\n        }\r\n        if (view) {\r\n            view = Repository.get(view._id);\r\n        }\r\n        options.triggerElementCreated(model, view);\r\n        return view || model;\r\n    }\r\n\r\n\r\n    // Create view of functions ................................................\r\n\r\n    function viewForGeneralDiagramFn(model, diagram, options) {\r\n        var x             = options.x || 0,\r\n            y             = options.y || 0,\r\n            editor        = options.editor || DiagramManager.getEditor(),\r\n            containerView = options.containerView || null;\r\n\r\n        // Port\r\n        if (model instanceof type.UMLPort) {\r\n            if (containerView instanceof type.UMLClassifierView && containerView.model === model._parent) {\r\n                return Factory.createViewAndRelationships(editor, x, y, model, containerView);\r\n            } else {\r\n                Dialogs.showAlertDialog("Port should be dropped on it\'s parent Classifier");\r\n            }\r\n\r\n        // Part\r\n        } else if (model instanceof type.UMLAttribute) {\r\n            if (containerView instanceof type.UMLClassifierView && containerView.model === model._parent) {\r\n                return Factory.createViewAndRelationships(editor, x, y, model, containerView);\r\n            } else {\r\n                Dialogs.showAlertDialog("Part (Attribute) should be dropped on it\'s parent Classifier");\r\n            }\r\n\r\n        // Connector\r\n        } else if (model instanceof type.UMLConnector) {\r\n            var connectorView      = diagram.getViewOf(model),\r\n                port1View          = diagram.getViewOf(model.end1.reference, type.UMLPortView) || diagram.getViewOf(model.end1.reference, type.UMLPartView),\r\n                port2View          = diagram.getViewOf(model.end2.reference, type.UMLPortView) || diagram.getViewOf(model.end2.reference, type.UMLPartView);\r\n            if (connectorView) {\r\n                editor.selectView(connectorView);\r\n                editor.selectAdditionalView(port1View);\r\n                editor.selectAdditionalView(port2View);\r\n                Dialogs.showAlertDialog("Connector View is already existed in this Diagram.");\r\n            } else {\r\n                if (!port2View) {\r\n                    var port2ContainerView = diagram.getViewOf(model.end2.reference._parent);\r\n                    if (!port2ContainerView) {\r\n                        Factory.createViewAndRelationships(editor, x, y, model.end2.reference._parent);\r\n                        port2ContainerView = diagram.getViewOf(model.end2.reference._parent);\r\n                    }\r\n                    Factory.createViewAndRelationships(editor, x, y, model.end2.reference, port2ContainerView);\r\n                }\r\n                if (!port1View) {\r\n                    var port1ContainerView = diagram.getViewOf(model.end1.reference._parent);\r\n                    if (!port1ContainerView) {\r\n                        Factory.createViewAndRelationships(editor, x, y + 100, model.end1.reference._parent);\r\n                        port1ContainerView = diagram.getViewOf(model.end1.reference._parent);\r\n                    }\r\n                    Factory.createViewAndRelationships(editor, x, y + 100, model.end1.reference, port1ContainerView);\r\n                }\r\n                if (port1View && port2View) {\r\n                    connectorView = new type.UMLConnectorView();\r\n                    connectorView.model = model;\r\n                    connectorView.tail = port1View;\r\n                    connectorView.head = port2View;\r\n                    connectorView.initialize(null, connectorView.tail.left, connectorView.tail.top, connectorView.head.left, connectorView.head.top);\r\n                    if (options.viewInitializer) {\r\n                        options.viewInitializer(connectorView);\r\n                    }\r\n                    Engine.addViews(diagram, [connectorView]);\r\n                    if (connectorView) {\r\n                        connectorView = Repository.get(connectorView._id);\r\n                    }\r\n                    options.triggerElementCreated(null, connectorView);\r\n                    editor.selectView(connectorView);\r\n                }\r\n                return connectorView;\r\n            }\r\n\r\n        // AssociationClass\r\n        } else if (model instanceof type.UMLClass) {\r\n            var assoClassLink = null;\r\n            _.each(model.ownedElements, function (e) {\r\n               if (e instanceof type.UMLAssociationClassLink) {\r\n                   assoClassLink = e;\r\n               }\r\n            });\r\n            if (assoClassLink && assoClassLink.classSide === model) {\r\n                var linkView  = diagram.getViewOf(assoClassLink),\r\n                    classView = diagram.getViewOf(model),\r\n                    assoView  = diagram.getViewOf(assoClassLink.associationSide);\r\n                if (linkView) {\r\n                    editor.selectView(linkView);\r\n                    editor.selectView(classView);\r\n                    editor.selectView(assoView);\r\n                    Dialogs.showAlertDialog("AssociationClass View is already existed in this Diagram.");\r\n                } else {\r\n                    if (!classView) {\r\n                        Factory.createViewAndRelationships(editor, x, y, model);\r\n                        classView = diagram.getViewOf(model);\r\n                    }\r\n                    if (assoView) {\r\n                        linkView = new type.UMLAssociationClassLinkView();\r\n                        linkView.model = assoClassLink;\r\n                        linkView.tail = classView;\r\n                        linkView.head = assoView;\r\n                        linkView.initialize(null, linkView.tail.left, linkView.tail.top, linkView.head.left, linkView.head.top);\r\n                        if (options.viewInitializer) {\r\n                            options.viewInitializer(linkView);\r\n                        }\r\n                        Engine.addViews(diagram, [linkView]);\r\n                        if (linkView) {\r\n                            linkView = Repository.get(linkView._id);\r\n                        }\r\n                        options.triggerElementCreated(null, linkView);\r\n                        editor.selectView(linkView);\r\n                    }\r\n                    return linkView;\r\n                }\r\n            } else {\r\n                return Factory.createViewAndRelationships(editor, x, y, model);\r\n            }\r\n\r\n        // Directed Relationships\r\n        } else if (model instanceof type.DirectedRelationship) {\r\n            var directedView    = diagram.getViewOf(model),\r\n                sourceView = diagram.getViewOf(model.source),\r\n                targetView = diagram.getViewOf(model.target);\r\n            if (directedView) {\r\n                editor.selectView(directedView);\r\n                editor.selectAdditionalView(sourceView);\r\n                editor.selectAdditionalView(targetView);\r\n                Dialogs.showAlertDialog("Relationship View is already existed in this Diagram.");\r\n            } else {\r\n                if (!targetView) {\r\n                    Factory.createViewAndRelationships(editor, x, y, model.target);\r\n                }\r\n                if (!sourceView) {\r\n                    Factory.createViewAndRelationships(editor, x, y + 100, model.source);\r\n                }\r\n                if (targetView && sourceView) {\r\n                    var DirectedViewType = UMLUtils.getViewTypeOf(model);\r\n                    if (DirectedViewType) {\r\n                        directedView = new DirectedViewType();\r\n                        directedView.model = model;\r\n                        directedView.tail = sourceView;\r\n                        directedView.head = targetView;\r\n                        directedView.initialize(null, directedView.tail.left, directedView.tail.top, directedView.head.left, directedView.head.top);\r\n                        if (options.viewInitializer) {\r\n                            options.viewInitializer(directedView);\r\n                        }\r\n                        Engine.addViews(diagram, [directedView]);\r\n                        if (directedView) {\r\n                            directedView = Repository.get(directedView._id);\r\n                        }\r\n                        options.triggerElementCreated(null, directedView);\r\n                        editor.selectView(directedView);\r\n                    }\r\n                }\r\n                return directedView;\r\n            }\r\n\r\n        // Undirected Relationships\r\n        } else if (model instanceof type.UndirectedRelationship) {\r\n            var undirectedView    = diagram.getViewOf(model),\r\n                end1View = diagram.getViewOf(model.end1.reference),\r\n                end2View = diagram.getViewOf(model.end2.reference);\r\n            if (undirectedView) {\r\n                editor.selectView(undirectedView);\r\n                editor.selectAdditionalView(end1View);\r\n                editor.selectAdditionalView(end2View);\r\n                Dialogs.showAlertDialog("Relationship View is already existed in this Diagram.");\r\n            } else {\r\n                if (!end2View) {\r\n                    Factory.createViewAndRelationships(editor, x, y, model.end2.reference);\r\n                }\r\n                if (!end1View) {\r\n                    Factory.createViewAndRelationships(editor, x, y + 100, model.end1.reference);\r\n                }\r\n                if (end1View && end2View) {\r\n                    var UndirectedViewType = UMLUtils.getViewTypeOf(model);\r\n                    if (UndirectedViewType) {\r\n                        undirectedView = new UndirectedViewType();\r\n                        undirectedView.model = model;\r\n                        undirectedView.tail = end1View;\r\n                        undirectedView.head = end2View;\r\n                        undirectedView.initialize(null, undirectedView.tail.left, undirectedView.tail.top, undirectedView.head.left, undirectedView.head.top);\r\n                        if (options.viewInitializer) {\r\n                            options.viewInitializer(undirectedView);\r\n                        }\r\n                        Engine.addViews(diagram, [undirectedView]);\r\n                        if (undirectedView) {\r\n                            undirectedView = Repository.get(undirectedView._id);\r\n                        }\r\n                        editor.selectView(undirectedView);\r\n                    }\r\n                }\r\n                return undirectedView;\r\n            }\r\n        } else if (model instanceof type.Diagram) {\r\n            return Factory.defaultViewOnDiagramFn(model, diagram, options);\r\n        } else {\r\n            return Factory.createViewAndRelationships(editor, x, y, model);\r\n        }\r\n    }\r\n\r\n\r\n    function viewForSequenceDiagramFn(model, diagram, options) {\r\n        var x             = options.x || 0,\r\n            y             = options.y || 0,\r\n            editor        = options.editor || null,\r\n            containerView = options.containerView || null,\r\n            view;\r\n\r\n        if (model instanceof type.UMLClassifier) {\r\n            // Create Role (Attribute)\r\n            var parent = diagram._parent;\r\n            var classifier = parent._parent;\r\n            var role = new type.UMLAttribute();\r\n            role.name = Core.getNewName(classifier.attributes, "Role");\r\n            role.type = model;\r\n            role._parent = classifier;\r\n            // Create Lifeline\r\n            var lifeline = new type.UMLLifeline();\r\n            lifeline.name = Core.getNewName(parent.participants, "Lifeline");\r\n            lifeline.represent = role;\r\n            lifeline._parent = parent;\r\n            // Create LifelineView\r\n            view = new type.UMLSeqLifelineView();\r\n            view._parent = diagram;\r\n            view.model = lifeline;\r\n            if ((model instanceof type.UMLActor) ||\r\n                (model instanceof type.UMLUseCase) ||\r\n                (model instanceof type.UMLInterface) ||\r\n                (model instanceof type.UMLArtifact) ||\r\n                (model instanceof type.UMLComponent) ||\r\n                (model instanceof type.UMLNode) ||\r\n                (model.stereotype && model.stereotype.icon)) {\r\n                view.stereotypeDisplay = UML.SD_ICON;\r\n            }\r\n            view.initialize(null, x, y, x, y);\r\n            if (options.viewInitializer) {\r\n                options.viewInitializer(view);\r\n            }\r\n            // Make Command\r\n            OperationBuilder.begin(\'add element\');\r\n            OperationBuilder.insert(role);\r\n            OperationBuilder.fieldInsert(classifier, \'attributes\', role);\r\n            OperationBuilder.insert(lifeline);\r\n            OperationBuilder.fieldInsert(parent, \'participants\', lifeline);\r\n            OperationBuilder.insert(view);\r\n            OperationBuilder.fieldInsert(diagram, \'ownedViews\', view);\r\n            OperationBuilder.end();\r\n            Repository.doOperation(OperationBuilder.getOperation());\r\n            if (view) {\r\n                view = Repository.get(view._id);\r\n            }\r\n            options.triggerElementCreated(null, view);\r\n            return view;\r\n        } else if (model instanceof type.UMLCombinedFragment) {\r\n            return Factory.createViewAndRelationships(editor, x, y, model);\r\n        } else if (model instanceof type.UMLInteraction) {\r\n            options.x1 = x;\r\n            options.y1 = y;\r\n            options.x2 = x;\r\n            options.y2 = y;\r\n            options.modelInitializer = function (elem) {\r\n                elem.refersTo = model;\r\n            };\r\n            return Factory.createModelAndView("UMLInteractionUse", diagram._parent, diagram, options);\r\n        } else if (model instanceof type.UMLInteractionUse) {\r\n            return Factory.createViewAndRelationships(editor, x, y, model);\r\n        } else if (model instanceof type.UMLContinuation) {\r\n            return Factory.createViewAndRelationships(editor, x, y, model);\r\n        } else if (model instanceof type.UMLLifeline) {\r\n            view = new type.UMLSeqLifelineView();\r\n            view.model = model;\r\n            view.initialize(null, x, y, x, y);\r\n            if (options.viewInitializer) {\r\n                options.viewInitializer(view);\r\n            }\r\n            Engine.addViews(diagram, [view]);\r\n            if (view) {\r\n                view = Repository.get(view._id);\r\n            }\r\n            options.triggerElementCreated(null, view);\r\n            return view;\r\n        } else if (model instanceof type.UMLGate) {\r\n            view = new type.UMLGateView();\r\n            view.model = model;\r\n            view.initialize(null, x, y, x, y);\r\n            if (options.viewInitializer) {\r\n                options.viewInitializer(view);\r\n            }\r\n            Engine.addViews(diagram, [view]);\r\n            if (view) {\r\n                view = Repository.get(view._id);\r\n            }\r\n            options.triggerElementCreated(null, view);\r\n            return view;\r\n        } else if (model instanceof type.UMLEndpoint) {\r\n            view = new type.UMLEndpointView();\r\n            view.model = model;\r\n            view.initialize(null, x, y, x, y);\r\n            if (options.viewInitializer) {\r\n                options.viewInitializer(view);\r\n            }\r\n            Engine.addViews(diagram, [view]);\r\n            if (view) {\r\n                view = Repository.get(view._id);\r\n            }\r\n            options.triggerElementCreated(null, view);\r\n            return view;\r\n        } else if (model instanceof type.UMLStateInvariant) {\r\n            var lifelineView = null;\r\n            _.each(diagram.ownedViews, function (v) {\r\n                if (v instanceof type.UMLSeqLifelineView && v.model === model.covered) {\r\n                    lifelineView = v;\r\n                }\r\n            });\r\n            if (lifelineView) {\r\n                view = new type.UMLStateInvariantView();\r\n                view.initialize(null, x, y, x, y);\r\n                view.model = model;\r\n                view._parent = lifelineView;\r\n                if (options.viewInitializer) {\r\n                    options.viewInitializer(view);\r\n                }\r\n                OperationBuilder.begin(\'add element\');\r\n                OperationBuilder.insert(view);\r\n                OperationBuilder.fieldInsert(lifelineView, \'subViews\', view);\r\n                OperationBuilder.end();\r\n                Repository.doOperation(OperationBuilder.getOperation());\r\n                if (view) {\r\n                    view = Repository.get(view._id);\r\n                }\r\n                options.triggerElementCreated(null, view);\r\n            }\r\n            return view;\r\n        } else if (model instanceof type.UMLMessage) {\r\n            var sourceView, targetView;\r\n            _.each(diagram.ownedViews, function (v) {\r\n                if (v.model === model.source) {\r\n                    sourceView = v;\r\n                } else if (v.model === model.target) {\r\n                    targetView = v;\r\n                }\r\n            });\r\n            sourceView = sourceView instanceof type.UMLSeqLifelineView ? sourceView.linePart : sourceView;\r\n            targetView = targetView instanceof type.UMLSeqLifelineView ? targetView.linePart : targetView;\r\n            if (sourceView && targetView) {\r\n                view = new type.UMLSeqMessageView();\r\n                view.tail = sourceView;\r\n                view.head = targetView;\r\n                view.model = model;\r\n                view.initialize(null, sourceView.left, y, targetView.left, y);\r\n                if (options.viewInitializer) {\r\n                    options.viewInitializer(view);\r\n                }\r\n                Engine.addViews(diagram, [view]);\r\n                if (view) {\r\n                    view = Repository.get(view._id);\r\n                }\r\n                options.triggerElementCreated(null, view);\r\n            }\r\n            return view;\r\n        } else if (model instanceof type.Diagram) {\r\n            return Factory.defaultViewOnDiagramFn(model, diagram, options);\r\n        } else {\r\n            return Factory.createViewAndRelationships(editor, x, y, model);\r\n        }\r\n    }\r\n\r\n    function viewForCommunicationDiagramFn(model, diagram, options) {\r\n        var x             = options.x || 0,\r\n            y             = options.y || 0,\r\n            editor        = options.editor || null,\r\n            containerView = options.containerView || null,\r\n            view;\r\n\r\n        if (model instanceof type.UMLClassifier) {\r\n            // Create Role (Attribute)\r\n            var parent = diagram._parent;\r\n            var classifier = parent._parent;\r\n            var role = new type.UMLAttribute();\r\n            role.name = Core.getNewName(classifier.attributes, "Role");\r\n            role.type = model;\r\n            role._parent = classifier;\r\n            // Create Lifeline\r\n            var lifeline = new type.UMLLifeline();\r\n            lifeline.name = Core.getNewName(parent.participants, "Lifeline");\r\n            lifeline.represent = role;\r\n            lifeline._parent = parent;\r\n            // Create LifelineView\r\n            view = new type.UMLCommLifelineView();\r\n            view._parent = diagram;\r\n            view.model = lifeline;\r\n            if ((model instanceof type.UMLActor) ||\r\n                (model instanceof type.UMLUseCase) ||\r\n                (model instanceof type.UMLInterface) ||\r\n                (model instanceof type.UMLArtifact) ||\r\n                (model instanceof type.UMLComponent) ||\r\n                (model instanceof type.UMLNode) ||\r\n                (model.stereotype && model.stereotype.icon)) {\r\n                view.stereotypeDisplay = UML.SD_ICON;\r\n            }\r\n            view.initialize(null, x, y, x, y);\r\n            if (options.viewInitializer) {\r\n                options.viewInitializer(view);\r\n            }\r\n            // Make Command\r\n            OperationBuilder.begin(\'add element\');\r\n            OperationBuilder.insert(role);\r\n            OperationBuilder.fieldInsert(classifier, \'attributes\', role);\r\n            OperationBuilder.insert(lifeline);\r\n            OperationBuilder.fieldInsert(parent, \'participants\', lifeline);\r\n            OperationBuilder.insert(view);\r\n            OperationBuilder.fieldInsert(diagram, \'ownedViews\', view);\r\n            OperationBuilder.end();\r\n            Repository.doOperation(OperationBuilder.getOperation());\r\n            if (view) {\r\n                view = Repository.get(view._id);\r\n            }\r\n            options.triggerElementCreated(null, view);\r\n            return view;\r\n        } else if (model instanceof type.UMLLifeline) {\r\n            return Factory.createViewAndRelationships(editor, x, y, model);\r\n        } else if (model instanceof type.UMLConnector) {\r\n            var _ev1 = _.find(diagram.ownedViews, function (v) {\r\n                    return (v instanceof type.UMLCommLifelineView && v.model.represent === model.end1.reference);\r\n                }),\r\n                _ev2 = _.find(diagram.ownedViews, function (v) {\r\n                    return (v instanceof type.UMLCommLifelineView && v.model.represent === model.end2.reference);\r\n                });\r\n            if (_ev1 && _ev2) {\r\n                view = new type.UMLConnectorView();\r\n                view._parent = diagram;\r\n                view.model = model;\r\n                view.tail = _ev1;\r\n                view.head = _ev2;\r\n                view.initialize(null, _ev1.left, _ev1.top, _ev2.left, _ev2.top);\r\n                if (options.viewInitializer) {\r\n                    options.viewInitializer(view);\r\n                }\r\n                Engine.addViews(diagram, [view]);\r\n                if (view) {\r\n                    view = Repository.get(view._id);\r\n                }\r\n                options.triggerElementCreated(null, view);\r\n            }\r\n            return view;\r\n        } else if (model instanceof type.UMLMessage) {\r\n            var connector, connectorView = null;\r\n            if (model.connector) {\r\n                _.each(diagram.ownedViews, function (v) {\r\n                    if (v instanceof type.UMLConnectorView && v.model === model.connector) {\r\n                        connectorView = v;\r\n                    }\r\n                });\r\n            } else {\r\n                var _tailView = _.find(diagram.ownedViews, function (v) { return v.model === model.source; }),\r\n                    _headView = _.find(diagram.ownedViews, function (v) { return v.model === model.target; });\r\n                if (_tailView && _headView) {\r\n                    connector = new type.UMLConnector();\r\n                    connector.end1.reference = _tailView.model;\r\n                    connector.end2.reference = _headView.model;\r\n                    connectorView = new type.UMLConnectorView();\r\n                    connectorView._parent = diagram;\r\n                    connectorView.model = connector;\r\n                    connectorView.tail = _tailView;\r\n                    connectorView.head = _headView;\r\n                    connectorView.initialize(null, _tailView.left, _tailView.top, _headView.left, _headView.top);\r\n                    Engine.addModelAndView(diagram, connector, connectorView, _headView.model.represent, \'ownedElements\');\r\n                    Engine.setProperty(model, \'connector\', connector);\r\n                }\r\n            }\r\n            if (connectorView) {\r\n                view = new type.UMLCommMessageView();\r\n                view.model = model;\r\n                view.hostEdge = connectorView;\r\n                view.initialize(null, x, y, x, y);\r\n                if (options.viewInitializer) {\r\n                    options.viewInitializer(view);\r\n                }\r\n                Engine.addViews(diagram, [view]);\r\n                if (view) {\r\n                    view = Repository.get(view._id);\r\n                }\r\n                options.triggerElementCreated(null, view);\r\n            }\r\n            return view;\r\n        } else if (model instanceof type.Diagram) {\r\n            return Factory.defaultViewOnDiagramFn(model, diagram, options);\r\n        } else {\r\n            return Factory.createViewAndRelationships(editor, x, y, model);\r\n        }\r\n    }\r\n\r\n\r\n    function viewForStatechartDiagramFn(model, diagram, options) {\r\n        var x             = options.x || 0,\r\n            y             = options.y || 0,\r\n            editor        = options.editor || null,\r\n            containerView = options.containerView || null;\r\n\r\n        if (model instanceof type.UMLConnectionPointReference) {\r\n            if (containerView instanceof type.UMLStateView && containerView.model === model._parent) {\r\n                return Factory.createViewAndRelationships(editor, x, y, model, containerView);\r\n            } else {\r\n                Dialogs.showAlertDialog("ConnectionPointReference should be dropped on it\'s parent State");\r\n            }\r\n        } else if (model instanceof type.UMLStateMachine) {\r\n            options.x1 = x;\r\n            options.y1 = y;\r\n            options.x2 = x;\r\n            options.y2 = y;\r\n            options.submachine = model;\r\n            return Factory.createModelAndView("UMLState", diagram._parent, diagram, options);\r\n        } else if (model instanceof type.Diagram) {\r\n            return Factory.defaultViewOnDiagramFn(model, diagram, options);\r\n        } else {\r\n            return Factory.createViewAndRelationships(editor, x, y, model);\r\n        }\r\n    }\r\n\r\n    function viewForActivityDiagramFn(model, diagram, options) {\r\n        var x             = options.x || 0,\r\n            y             = options.y || 0,\r\n            editor        = options.editor || null,\r\n            containerView = options.containerView || null;\r\n\r\n        // InputPin/OutputPin\r\n        if (model instanceof type.UMLInputPin || model instanceof type.UMLOutputPin) {\r\n            if (containerView instanceof type.UMLActionView && containerView.model === model._parent) {\r\n                return Factory.createViewAndRelationships(editor, x, y, model, containerView);\r\n            } else {\r\n                Dialogs.showAlertDialog("Pin should be dropped on it\'s parent Action");\r\n            }\r\n        } else if (model instanceof type.UMLActivity) {\r\n            // Create Action\r\n            var parent = diagram._parent;\r\n            var action = new type.UMLAction();\r\n            action.name = "";\r\n            action.subactivity = model;\r\n            action._parent = model;\r\n            // Create ActionView\r\n            var view = new type.UMLActionView();\r\n            view._parent = diagram;\r\n            view.model = action;\r\n            view.initialize(null, x, y, x, y);\r\n            if (options.viewInitializer) {\r\n                options.viewInitializer(view);\r\n            }\r\n            // Make Command\r\n            OperationBuilder.begin(\'add element\');\r\n            OperationBuilder.insert(action);\r\n            OperationBuilder.fieldInsert(parent, \'nodes\', action);\r\n            OperationBuilder.insert(view);\r\n            OperationBuilder.fieldInsert(diagram, \'ownedViews\', view);\r\n            OperationBuilder.end();\r\n            Repository.doOperation(OperationBuilder.getOperation());\r\n            if (view) {\r\n                view = Repository.get(view._id);\r\n            }\r\n            options.triggerElementCreated(null, view);\r\n            return view;\r\n        } else if (model instanceof type.Diagram) {\r\n            return Factory.defaultViewOnDiagramFn(model, diagram, options);\r\n        } else {\r\n            return Factory.createViewAndRelationships(editor, x, y, model);\r\n        }\r\n    }\r\n\r\n\r\n    // ========================================================================\r\n    // Create Diagram\r\n    // ========================================================================\r\n\r\n    Factory.registerDiagramFn("UMLClassDiagram",              structuralDiagramFn);\r\n    Factory.registerDiagramFn("UMLCompositeStructureDiagram", compositeStructureDiagramFn);\r\n    Factory.registerDiagramFn("UMLPackageDiagram",            structuralDiagramFn);\r\n    Factory.registerDiagramFn("UMLObjectDiagram",             structuralDiagramFn);\r\n    Factory.registerDiagramFn("UMLComponentDiagram",          structuralDiagramFn);\r\n    Factory.registerDiagramFn("UMLDeploymentDiagram",         structuralDiagramFn);\r\n    Factory.registerDiagramFn("UMLProfileDiagram",            profileDiagramFn);\r\n    Factory.registerDiagramFn("UMLUseCaseDiagram",            structuralDiagramFn);\r\n    Factory.registerDiagramFn("UMLSequenceDiagram",           sequenceDiagramFn);\r\n    Factory.registerDiagramFn("UMLCommunicationDiagram",      communicationDiagramFn);\r\n    Factory.registerDiagramFn("UMLStatechartDiagram",         statechartDiagramFn);\r\n    Factory.registerDiagramFn("UMLActivityDiagram",           activityDiagramFn);\r\n\r\n    // ========================================================================\r\n    // Create Model\r\n    // ========================================================================\r\n\r\n    // Packages\r\n    Factory.registerModelFn("UMLModel",     Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLPackage",   Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLSubsystem", Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLProfile",   Factory.defaultModelFn);\r\n    // Classifiers\r\n    Factory.registerModelFn("UMLClass",         Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLInterface",     Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLSignal",        Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLDataType",      Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLPrimitiveType", Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLEnumeration",   Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLArtifact",      Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLComponent",     Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLNode",          Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLUseCase",       Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLActor",         Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLStereotype",    Factory.defaultModelFn);\r\n    // Instances\r\n    Factory.registerModelFn("UMLObject",            Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLArtifactInstance",  Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLComponentInstance", Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLNodeInstance",      Factory.defaultModelFn);\r\n    // Behaviors\r\n    Factory.registerModelFn("UMLCollaboration",      Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLInteraction",        Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLStateMachine",       stateMachineFn);\r\n    Factory.registerModelFn("UMLActivity",           Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLOpaqueBehavior",     Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLInteractionOperand", Factory.defaultModelFn);\r\n    // Features\r\n    Factory.registerModelFn("UMLTemplateParameter",  Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLParameter",          Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLEnumerationLiteral", Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLAttribute",          Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLPort",               Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLOperation",          Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLReception",          Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLExtensionPoint",     Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLSlot",               Factory.defaultModelFn);\r\n    // States\r\n    Factory.registerModelFn("UMLState",  Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLRegion", Factory.defaultModelFn);\r\n    // Actions\r\n    Factory.registerModelFn("UMLAction", Factory.defaultModelFn);\r\n    Factory.registerModelFn("UMLEvent",  Factory.defaultModelFn);\r\n    // Common\r\n    Factory.registerModelFn("UMLConstraint", Factory.defaultModelFn);\r\n\r\n    // ========================================================================\r\n    // Create Model And View\r\n    // ========================================================================\r\n\r\n    // Classes\r\n    Factory.registerModelAndViewFn("UMLClass",                Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLInterface",            Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLSignal",               Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLDataType",             Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLPrimitiveType",        Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLEnumeration",          Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLAssociation",          Factory.defaultUndirectedRelationshipFn, { precondition: classifierLinkPrecondition });\r\n    Factory.registerModelAndViewFn("UMLAssociationClass",     associationClassFn);\r\n    Factory.registerModelAndViewFn("UMLDependency",           Factory.defaultDirectedRelationshipFn, { precondition: modelElementLinkPrecondition } );\r\n    Factory.registerModelAndViewFn("UMLGeneralization",       Factory.defaultDirectedRelationshipFn, { precondition: classifierLinkPrecondition } );\r\n    Factory.registerModelAndViewFn("UMLInterfaceRealization", interfaceRealizationFn);\r\n\r\n    // Packages\r\n    Factory.registerModelAndViewFn("UMLModel",       Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLPackage",     Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLSubsystem",   Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLContainment", containmentFn);\r\n\r\n    // Composite Structures\r\n    Factory.registerModelAndViewFn("UMLPort",             portFn);\r\n    Factory.registerModelAndViewFn("UMLPart",             partFn);\r\n    Factory.registerModelAndViewFn("UMLCollaboration",    Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLCollaborationUse", Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLConnector",        connectorFn);\r\n    Factory.registerModelAndViewFn("UMLRoleBinding",      Factory.defaultDirectedRelationshipFn, { precondition: roleBindingPrecondition });\r\n    Factory.registerModelAndViewFn("UMLRealization",      Factory.defaultDirectedRelationshipFn, { precondition: modelElementLinkPrecondition });\r\n\r\n    // Components\r\n    Factory.registerModelAndViewFn("UMLArtifact",             Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLComponent",            Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLComponentRealization", Factory.defaultDirectedRelationshipFn, { precondition: componentRealizationPrecondition });\r\n\r\n    // Deployments\r\n    Factory.registerModelAndViewFn("UMLNode",              Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLDeployment",        Factory.defaultDirectedRelationshipFn, { precondition: deploymentPrecondition });\r\n    Factory.registerModelAndViewFn("UMLCommunicationPath", Factory.defaultUndirectedRelationshipFn, { precondition: nodeLinkPrecondition });\r\n\r\n    // Instances\r\n    Factory.registerModelAndViewFn("UMLObject",            Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLArtifactInstance",  Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLComponentInstance", Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLNodeInstance",      Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLLink",              Factory.defaultUndirectedRelationshipFn, { precondition: instanceLinkPrecondition });\r\n\r\n    // Use Cases\r\n    Factory.registerModelAndViewFn("UMLUseCaseSubject", Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLUseCase",        Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLActor",          Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLInclude",        Factory.defaultDirectedRelationshipFn, { precondition: useCaseLinkPrecondition });\r\n    Factory.registerModelAndViewFn("UMLExtend",         Factory.defaultDirectedRelationshipFn, { precondition: useCaseLinkPrecondition });\r\n\r\n    // Interactions\r\n    Factory.registerModelAndViewFn("UMLLifeline",         lifelineFn);\r\n    Factory.registerModelAndViewFn("UMLEndpoint",         Factory.defaultModelAndViewFn, { precondition: interactionPrecondition, field: \'participants\' });\r\n    Factory.registerModelAndViewFn("UMLGate",             Factory.defaultModelAndViewFn, { precondition: interactionPrecondition, field: \'participants\' });\r\n    Factory.registerModelAndViewFn("UMLMessage",          messageFn);\r\n    Factory.registerModelAndViewFn("UMLFoundMessage",     foundMessageFn);\r\n    Factory.registerModelAndViewFn("UMLLostMessage",      lostMessageFn);\r\n    Factory.registerModelAndViewFn("UMLStateInvariant",   stateInvariantFn);\r\n    Factory.registerModelAndViewFn("UMLContinuation",     Factory.defaultModelAndViewFn, { precondition: interactionPrecondition, field: \'fragments\' });\r\n    Factory.registerModelAndViewFn("UMLCombinedFragment", combinedFragmentFn);\r\n    Factory.registerModelAndViewFn("UMLInteractionUse",   Factory.defaultModelAndViewFn, { precondition: interactionPrecondition, field: \'fragments\' });\r\n    Factory.registerModelAndViewFn("UMLFrame",            Factory.defaultViewOnlyFn, { viewType: "UMLFrameView" });\r\n\r\n    // State Machines\r\n    Factory.registerModelAndViewFn("UMLState",                    stateFn);\r\n    Factory.registerModelAndViewFn("UMLSubmachineState",          submachineStateFn);\r\n    Factory.registerModelAndViewFn("UMLPseudostate",              pseudostateFn);\r\n    Factory.registerModelAndViewFn("UMLFinalState",               finalStateFn);\r\n    Factory.registerModelAndViewFn("UMLConnectionPointReference", connectionPointReferenceFn);\r\n    Factory.registerModelAndViewFn("UMLTransition",               transitionFn);\r\n\r\n    // Activities\r\n    Factory.registerModelAndViewFn("UMLAction",            Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLObjectNode",        Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLCentralBufferNode", Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLDataStoreNode",     Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLInitialNode",       Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLActivityFinalNode", Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLFlowFinalNode",     Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLForkNode",          Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLJoinNode",          Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLMergeNode",         Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLDecisionNode",      Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLInputPin",          Factory.defaultModelAndViewFn, { precondition: pinPrecondition, field: \'inputs\' });\r\n    Factory.registerModelAndViewFn("UMLOutputPin",         Factory.defaultModelAndViewFn, { precondition: pinPrecondition, field: \'outputs\' });\r\n    Factory.registerModelAndViewFn("UMLActivityPartition", Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'groups\' });\r\n    Factory.registerModelAndViewFn("UMLInterruptibleActivityRegion", Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'groups\' });\r\n    Factory.registerModelAndViewFn("UMLStructuredActivityNode", Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLExpansionRegion",   Factory.defaultModelAndViewFn, { precondition: activityPrecondition, field: \'nodes\' });\r\n    Factory.registerModelAndViewFn("UMLInputExpansionNode", Factory.defaultModelAndViewFn, { modelType: "UMLExpansionNode", viewType: "UMLExpansionNodeView", precondition: pinPrecondition, field: \'inputs\',  modelInitializer: function (m) { m.name = ""; } });\r\n    Factory.registerModelAndViewFn("UMLOutputExpansionNode",Factory.defaultModelAndViewFn, { modelType: "UMLExpansionNode", viewType: "UMLExpansionNodeView", precondition: pinPrecondition, field: \'outputs\', modelInitializer: function (m) { m.name = ""; } });\r\n    Factory.registerModelAndViewFn("UMLControlFlow",       Factory.defaultDirectedRelationshipFn, { precondition: flowPrecondition, field: \'edges\' });\r\n    Factory.registerModelAndViewFn("UMLObjectFlow",        objectFlowFn);\r\n    Factory.registerModelAndViewFn("UMLExceptionHandler",  exceptionHandlerFn);\r\n    Factory.registerModelAndViewFn("UMLActivityInterrupt", Factory.defaultDirectedRelationshipFn, { precondition: flowPrecondition, field: \'edges\' });\r\n\r\n    // Profiles\r\n    Factory.registerModelAndViewFn("UMLProfile",    Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLStereotype", Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("UMLMetaClass",  Factory.defaultModelAndViewFn, { modelInitializer: function (m) { m.name = "UMLClass"; } });\r\n    Factory.registerModelAndViewFn("UMLExtension",  Factory.defaultDirectedRelationshipFn, { precondition: extensionPrecondition });\r\n\r\n    // ========================================================================\r\n    // Create View\r\n    // ========================================================================\r\n\r\n    Factory.registerViewOfFn("UMLClassDiagram",              viewForGeneralDiagramFn);\r\n    Factory.registerViewOfFn("UMLCompositeStructureDiagram", viewForGeneralDiagramFn);\r\n    Factory.registerViewOfFn("UMLPackageDiagram",            viewForGeneralDiagramFn);\r\n    Factory.registerViewOfFn("UMLObjectDiagram",             viewForGeneralDiagramFn);\r\n    Factory.registerViewOfFn("UMLComponentDiagram",          viewForGeneralDiagramFn);\r\n    Factory.registerViewOfFn("UMLDeploymentDiagram",         viewForGeneralDiagramFn);\r\n    Factory.registerViewOfFn("UMLProfileDiagram",            viewForGeneralDiagramFn);\r\n    Factory.registerViewOfFn("UMLUseCaseDiagram",            viewForGeneralDiagramFn);\r\n    Factory.registerViewOfFn("UMLSequenceDiagram",           viewForSequenceDiagramFn);\r\n    Factory.registerViewOfFn("UMLCommunicationDiagram",      viewForCommunicationDiagramFn);\r\n    Factory.registerViewOfFn("UMLStatechartDiagram",         viewForStatechartDiagramFn);\r\n    Factory.registerViewOfFn("UMLActivityDiagram",           viewForActivityDiagramFn);\r\n\r\n});\r\n\n//# sourceURL=/uml/UMLFactory.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell, type */\r\n\r\ndefine('uml/UMLQuickEdit',['require','exports','module','ui/QuickEdit','core/Graphics','core/Core','uml/UMLUtils'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var QuickEdit  = require(\"ui/QuickEdit\"),\r\n        Graphics   = require(\"core/Graphics\"),\r\n        Core       = require(\"core/Core\"),\r\n        UMLUtils   = require(\"uml/UMLUtils\");\r\n\r\n    /**\r\n     * @const\r\n     * QuickEdit IDs\r\n     */\r\n    var QUICKEDIT_GENERAL              = 'general',\r\n        QUICKEDIT_FLOATINGNODE         = 'floating-node',\r\n        QUICKEDIT_PACKAGE              = 'package',\r\n        QUICKEDIT_SUBSYSTEM            = 'subsystem',\r\n        QUICKEDIT_CLASSIFIER           = 'classifier',\r\n        QUICKEDIT_CLASS                = 'class',\r\n        QUICKEDIT_INTERFACE            = 'interface',\r\n        QUICKEDIT_COMPONENT            = 'component',\r\n        QUICKEDIT_NODE                 = 'node',\r\n        QUICKEDIT_ACTOR                = 'actor',\r\n        QUICKEDIT_USECASE              = 'usecase',\r\n        QUICKEDIT_ENUMERATION          = 'enumeration',\r\n        QUICKEDIT_METACLASS            = 'metaclass',\r\n        QUICKEDIT_STEREOTYPE           = 'stereotype',\r\n        QUICKEDIT_ATTRIBUTE            = 'attribute',\r\n        QUICKEDIT_OPERATION            = 'operation',\r\n        QUICKEDIT_RECEPTION            = 'reception',\r\n        QUICKEDIT_PORT                 = 'port',\r\n        QUICKEDIT_PART                 = 'part',\r\n        QUICKEDIT_TEMPLATE_PARAMETER   = 'templateParameter',\r\n        QUICKEDIT_QUALIFIER            = 'qualifier',\r\n        QUICKEDIT_LITERAL              = 'literal',\r\n        QUICKEDIT_EXTENSION_POINT      = 'extensionPoint',\r\n        QUICKEDIT_OBJECT               = 'object',\r\n        QUICKEDIT_SLOT                 = 'slot',\r\n        QUICKEDIT_SEQ_LIFELINE         = 'seq-lifeline',\r\n        QUICKEDIT_SEQ_MESSAGE          = 'seq-message',\r\n        QUICKEDIT_COMM_LIFELINE        = 'comm-lifeline',\r\n        QUICKEDIT_COMM_MESSAGE         = 'comm-message',\r\n        QUICKEDIT_CONNECTOR            = 'connector',\r\n        QUICKEDIT_STATEINVARIANT       = 'stateinvariant',\r\n        QUICKEDIT_CONTINUATION         = 'continuation',\r\n        QUICKEDIT_COMBINEDFRAGMENT     = 'combined-fragment',\r\n        QUICKEDIT_OPERAND              = 'operand',\r\n        QUICKEDIT_DIRECTED             = 'directed',\r\n        QUICKEDIT_UNDIRECTED           = 'undirected',\r\n        QUICKEDIT_UNDIRECTED_HEAD      = 'undirected-head',\r\n        QUICKEDIT_UNDIRECTED_TAIL      = 'undirected-tail',\r\n        QUICKEDIT_ASSOCIATION          = 'association',\r\n        QUICKEDIT_ASSOCIATION_HEAD     = 'association-head',\r\n        QUICKEDIT_ASSOCIATION_TAIL     = 'association-tail',\r\n        QUICKEDIT_STATE                = 'state',\r\n        QUICKEDIT_INTERNAL_ACTIVITY    = 'internal-activity',\r\n        QUICKEDIT_INTERNAL_TRANSITION  = 'internal-transition',\r\n        QUICKEDIT_TRANSITION           = 'transition',\r\n        QUICKEDIT_ACTION               = 'action',\r\n        QUICKEDIT_OBJECT_NODE          = 'object-node',\r\n        QUICKEDIT_ACTIVITYEDGE         = 'activityedge',\r\n        QUICKEDIT_PARTITION            = 'partition',\r\n        QUICKEDIT_CONSTRAINT           = 'constraint',\r\n        QUICKEDIT_TEXTAREA             = 'textarea';\r\n\r\n    /**\r\n     * @const\r\n     * QuickEdit Item IDs\r\n     */\r\n    var ITEM_EDIT                = 'edit',\r\n        ITEM_VISIBILITY          = 'visibility',\r\n        ITEM_AGGREGATION         = 'aggregation',\r\n        ITEM_NAVIGABILITY        = 'navigability',\r\n        ITEM_MESSAGE_SORT        = 'message-sort',\r\n        ITEM_ADD                 = 'add',\r\n        ITEM_DELETE              = 'delete',\r\n        ITEM_MOVEUP              = 'moveup',\r\n        ITEM_MOVEDOWN            = 'movedown',\r\n        ITEM_ADD_ATTRIBUTE       = 'add-attribute',\r\n        ITEM_ADD_OPERATION       = 'add-operation',\r\n        ITEM_ADD_RECEPTION       = 'add-reception',\r\n        ITEM_ADD_QUALIFIER       = 'add-qualifier',\r\n        ITEM_ADD_LITERAL         = 'add-literal',\r\n        ITEM_ADD_SLOT            = 'add-slot',\r\n        ITEM_ADD_EXTENSIONPOINT  = 'add-extension-point',\r\n        ITEM_MULTIPLICITY        = 'multiplicity',\r\n        ITEM_SELECT_TYPE         = 'select-type',\r\n        ITEM_CREATE_TYPE         = 'create-type',\r\n        ITEM_SELECT_OPERATION    = 'select-operation',\r\n        ITEM_CREATE_OPERATION    = 'create-operation',\r\n        ITEM_SELECT_SIGNAL       = 'select-signal',\r\n        ITEM_CREATE_SIGNAL       = 'create-signal',\r\n        ITEM_ADD_OPERAND         = 'add-operand',\r\n        ITEM_ADD_REGION          = 'add-region',\r\n        ITEM_ADD_ENTRY_ACTIVITY  = 'add-entry-activity',\r\n        ITEM_ADD_DO_ACTIVITY     = 'add-do-activity',\r\n        ITEM_ADD_EXIT_ACTIVITY   = 'add-exit-activity',\r\n        ITEM_ADD_INTERNAL_TRANSITION = 'add-internal-transition',\r\n        ITEM_ADD_TRIGGER         = 'add-trigger',\r\n        ITEM_ADD_EFFECT          = 'add-effect',\r\n        ITEM_ADD_NOTE            = 'add-note',\r\n        ITEM_ADD_SUBPACKAGE      = 'add-subpackage',\r\n        ITEM_ADD_DEPENDING_PACKAGE = 'add-depending-package',\r\n        ITEM_ADD_DEPENDANT_PACKAGE = 'add-dependant-package',\r\n        ITEM_ADD_SUPERCLASS      = 'add-superclass',\r\n        ITEM_ADD_SUBCLASS        = 'add-subclass',\r\n        ITEM_ADD_ASSOCIATION     = 'add-association',\r\n        ITEM_ADD_AGGREGATION     = 'add-aggregation',\r\n        ITEM_ADD_COMPOSITION     = 'add-composition',\r\n        ITEM_ADD_PORT            = 'add-port',\r\n        ITEM_ADD_PART            = 'add-part',\r\n        ITEM_ADD_CONNECTED_PART  = 'add-connected-part',\r\n        ITEM_ADD_LINKED_OBJECT   = 'add-linked-object',\r\n        ITEM_ADD_PROVIDED_INTERFACE = 'add-provided-interface',\r\n        ITEM_ADD_REQUIRED_INTERFACE = 'add-required-interface',\r\n        ITEM_ADD_SUPERINTERFACE  = 'add-superinterface',\r\n        ITEM_ADD_SUBINTERFACE    = 'add-subinterface',\r\n        ITEM_ADD_REALIZING_CLASS = 'add-realizing-class',\r\n        ITEM_ADD_COMMUNICATING_NODE = 'add-communicating-node',\r\n        ITEM_ADD_DEPLOYED_ARTIFACT  = 'add-deployed-artifact',\r\n        ITEM_ADD_DEPLOYED_COMPONENT = 'add-deployed-component',\r\n        ITEM_ADD_SUPERACTOR         = 'add-superactor',\r\n        ITEM_ADD_SUBACTOR           = 'add-subactor',\r\n        ITEM_ADD_ASSOCIATED_USECASE = 'add-associated-usecase',\r\n        ITEM_ADD_ASSOCIATED_ACTOR   = 'add-associated-actor',\r\n        ITEM_ADD_INCLUDED_USECASE   = 'add-included-usecase',\r\n        ITEM_ADD_EXTENDED_USECASE   = 'add-extended-usecase',\r\n        ITEM_ADD_MESSAGE_LIFELINE   = 'add-message-lifeline',\r\n        ITEM_ADD_CREATE_MESSAGE_LIFELINE = 'add-create-message-lifeline',\r\n        ITEM_ADD_SELF_MESSAGE       = 'add-self-message',\r\n        ITEM_ADD_MESSAGE_FROM_GATE  = 'add-message-from-gate',\r\n        ITEM_ADD_MESSAGE_TO_GATE    = 'add-message-to-gate',\r\n        ITEM_ADD_FOUND_MESSAGE      = 'add-found-message',\r\n        ITEM_ADD_LOST_MESSAGE       = 'add-lost-message',\r\n        ITEM_ADD_REPLY_MESSAGE      = 'add-reply-message',\r\n        ITEM_ADD_CONNECTED_LIFELINE = 'add-connected-lifeline',\r\n        ITEM_ADD_SELF_CONNECTOR     = 'add-self-connector',\r\n        ITEM_ADD_FORWARD_MESSAGE    = 'add-forward-message',\r\n        ITEM_ADD_REVERSE_MESSAGE    = 'add-reverse-message',\r\n        ITEM_ADD_OUTGOING_TRANSITION = 'add-outgoing-transition',\r\n        ITEM_ADD_INCOMING_TRANSITION = 'add-incoming-transition',\r\n        ITEM_ADD_CONNECTION_POINT_REFERENCE = 'add-connection-point-reference',\r\n        ITEM_ADD_INITIAL_STATE      = 'add-initial-state',\r\n        ITEM_ADD_FINAL_STATE        = 'add-final-state',\r\n        ITEM_ADD_CHOICE             = 'add-choice',\r\n        ITEM_ADD_FORK               = 'add-fork',\r\n        ITEM_ADD_JOIN               = 'add-join',\r\n        ITEM_ADD_OUTGOING_CONTROL_FLOW = 'add-outgoing-control-flow',\r\n        ITEM_ADD_INCOMING_CONTROL_FLOW = 'add-incoming-control-flow',\r\n        ITEM_ADD_OUTGOING_OBJECT_FLOW  = 'add-outgoing-object-flow',\r\n        ITEM_ADD_INCOMING_OBJECT_FLOW  = 'add-incoming-object-flow',\r\n        ITEM_ADD_DECISION              = 'add-decision',\r\n        ITEM_ADD_MERGE                 = 'add-merge',\r\n        ITEM_ADD_ACTIVITY_FORK         = 'add-activity-fork',\r\n        ITEM_ADD_ACTIVITY_JOIN         = 'add-activity-join',\r\n        ITEM_ADD_INPUT_PIN             = 'add-input-pin',\r\n        ITEM_ADD_OUTPUT_PIN            = 'add-output-pin',\r\n        ITEM_ADD_INITIAL_NODE          = 'add-initial-node',\r\n        ITEM_ADD_FINAL_NODE            = 'add-final-note',\r\n        ITEM_ADD_STEREOTYPE            = 'add-stereotype',\r\n        ITEM_ADD_SUPERSTEREOTYPE       = 'add-superstereotype',\r\n        ITEM_ADD_SUBSTEREOTYPE         = 'add-substereotype';\r\n\r\n\r\n    /* Quick Edit Dropdowns */\r\n    var QE_VISIBILITY = {\r\n            type: 'dropdown',\r\n            id: ITEM_VISIBILITY,\r\n            hint: 'Visibility',\r\n            dropdownWidth: 140,\r\n            items: [\r\n                { icon: 'quick-edit-icon-public',    text: 'public',    value: 'public' },\r\n                { icon: 'quick-edit-icon-protected', text: 'protected', value: 'protected' },\r\n                { icon: 'quick-edit-icon-private',   text: 'private',   value: 'private' },\r\n                { icon: 'quick-edit-icon-package',   text: 'package',   value: 'package' }\r\n            ]\r\n        },\r\n        QE_AGGREGATION = {\r\n            type: 'dropdown',\r\n            id: ITEM_AGGREGATION,\r\n            hint: 'AggregationKind',\r\n            dropdownWidth: 150,\r\n            items: [\r\n                { icon: 'quick-edit-icon-associate', text: 'none',      value: 'none' },\r\n                { icon: 'quick-edit-icon-shared',    text: 'shared',    value: 'shared' },\r\n                { icon: 'quick-edit-icon-composite', text: 'composite', value: 'composite' }\r\n            ]\r\n        },\r\n        QE_NAVIGABILITY = {\r\n            type: 'dropdown',\r\n            id: ITEM_NAVIGABILITY,\r\n            hint: 'Navigability',\r\n            dropdownWidth: 170,\r\n            items: [\r\n                { icon: 'quick-edit-icon-navigable',    text: 'Navigable',      value: true },\r\n                { icon: 'quick-edit-icon-notnavigable', text: 'Not Navigable',  value: false }\r\n            ]\r\n        },\r\n        QE_MESSAGE_SORT = {\r\n            type: 'dropdown',\r\n            id: ITEM_MESSAGE_SORT,\r\n            hint: 'MessageSort',\r\n            dropdownWidth: 170,\r\n            items: [\r\n                { icon: 'quick-edit-icon-synch-call',     text: 'synchCall',     value: 'synchCall' },\r\n                { icon: 'quick-edit-icon-asynch-call',    text: 'asynchCall',    value: 'asynchCall' },\r\n                { icon: 'quick-edit-icon-asynch-signal',  text: 'asynchSignal',  value: 'asynchSignal' },\r\n                { icon: 'quick-edit-icon-create-message', text: 'createMessage', value: 'createMessage' },\r\n                { icon: 'quick-edit-icon-delete-message', text: 'deleteMessage', value: 'deleteMessage' },\r\n                { icon: 'quick-edit-icon-reply',          text: 'reply',         value: 'reply' }\r\n            ]\r\n        };\r\n\r\n    /* Quick Edit Buttons */\r\n    var QE_ADD                 = { type: 'button', id: ITEM_ADD,                 icon: 'quick-edit-icon-add',              hint: 'Add',        key: 'Ctrl-Enter' },\r\n        QE_DELETE              = { type: 'button', id: ITEM_DELETE,              icon: 'quick-edit-icon-delete',           hint: 'Delete',     key: 'Ctrl-Delete' },\r\n        QE_MOVEUP              = { type: 'button', id: ITEM_MOVEUP,              icon: 'quick-edit-icon-moveup',           hint: 'Move Up',    key: 'Ctrl-Up' },\r\n        QE_MOVEDOWN            = { type: 'button', id: ITEM_MOVEDOWN,            icon: 'quick-edit-icon-movedown',         hint: 'Move Down',  key: 'Ctrl-Down' },\r\n        QE_ADD_ATTRIBUTE       = { type: 'button', id: ITEM_ADD_ATTRIBUTE,       icon: 'quick-edit-icon-attribute',        hint: 'Add Attribute', key: 'Ctrl-Enter' },\r\n        QE_ADD_OPERATION       = { type: 'button', id: ITEM_ADD_OPERATION,       icon: 'quick-edit-icon-operation',        hint: 'Add Operation', key: 'Ctrl-Shift-Enter' },\r\n        QE_ADD_RECEPTION       = { type: 'button', id: ITEM_ADD_RECEPTION,       icon: 'quick-edit-icon-reception',        hint: 'Add Reception' },\r\n        QE_ADD_QUALIFIER       = { type: 'button', id: ITEM_ADD_QUALIFIER,       icon: 'quick-edit-icon-attribute',        hint: 'Add Qualifier' },\r\n        QE_ADD_LITERAL         = { type: 'button', id: ITEM_ADD_LITERAL,         icon: 'quick-edit-icon-literal',          hint: 'Add Literal', key: 'Ctrl-Enter' },\r\n        QE_ADD_SLOT            = { type: 'button', id: ITEM_ADD_SLOT,            icon: 'quick-edit-icon-slot',             hint: 'Add Slot', key: 'Ctrl-Enter' },\r\n        QE_ADD_EXTENSIONPOINT  = { type: 'button', id: ITEM_ADD_EXTENSIONPOINT,  icon: 'quick-edit-icon-extension-point',  hint: 'Add Extension Point' },\r\n        QE_SELECT_TYPE         = { type: 'button', id: ITEM_SELECT_TYPE,         icon: 'quick-edit-icon-select-type',      hint: 'Select Type' },\r\n        QE_CREATE_TYPE         = { type: 'button', id: ITEM_CREATE_TYPE,         icon: 'quick-edit-icon-create-type',      hint: 'Create Type' },\r\n        QE_SELECT_OPERATION    = { type: 'button', id: ITEM_SELECT_OPERATION,    icon: 'quick-edit-icon-select-operation', hint: 'Select Operation' },\r\n        QE_CREATE_OPERATION    = { type: 'button', id: ITEM_CREATE_OPERATION,    icon: 'quick-edit-icon-create-operation', hint: 'Create Operation' },\r\n        QE_SELECT_SIGNAL       = { type: 'button', id: ITEM_SELECT_SIGNAL,       icon: 'quick-edit-icon-select-signal',    hint: 'Select Signal' },\r\n        QE_CREATE_SIGNAL       = { type: 'button', id: ITEM_CREATE_SIGNAL,       icon: 'quick-edit-icon-create-signal',    hint: 'Create Signal' },\r\n        QE_ADD_OPERAND         = { type: 'button', id: ITEM_ADD_OPERAND,         icon: 'quick-edit-icon-operand',          hint: 'Add Operand' },\r\n        QE_ADD_REGION          = { type: 'button', id: ITEM_ADD_REGION,          icon: 'quick-edit-icon-region',           hint: 'Add Region' },\r\n        QE_ADD_ENTRY_ACTIVITY  = { type: 'button', id: ITEM_ADD_ENTRY_ACTIVITY,  icon: 'quick-edit-icon-entry-activity',   hint: 'Add Entry Activity' },\r\n        QE_ADD_DO_ACTIVITY     = { type: 'button', id: ITEM_ADD_DO_ACTIVITY,     icon: 'quick-edit-icon-do-activity',      hint: 'Add Do Activity' },\r\n        QE_ADD_EXIT_ACTIVITY   = { type: 'button', id: ITEM_ADD_EXIT_ACTIVITY,   icon: 'quick-edit-icon-exit-activity',    hint: 'Add Exit Activity' },\r\n        QE_ADD_INTERNAL_TRANSITION = { type: 'button', id: ITEM_ADD_INTERNAL_TRANSITION, icon: 'quick-edit-icon-add-internal-transition', hint: 'Add Internal Transition' },\r\n        QE_ADD_TRIGGER         = { type: 'button', id: ITEM_ADD_TRIGGER,         icon: 'quick-edit-icon-event',            hint: 'Add Trigger Event' },\r\n        QE_ADD_EFFECT          = { type: 'button', id: ITEM_ADD_EFFECT,          icon: 'quick-edit-icon-effect',           hint: 'Add Effect Behavior' },\r\n        QE_ADD_NOTE            = { type: 'button', id: ITEM_ADD_NOTE,            icon: 'quick-edit-icon-add-note',         hint: 'Add Note' },\r\n        QE_ADD_SUBPACKAGE      = { type: 'button', id: ITEM_ADD_SUBPACKAGE,      icon: 'quick-edit-icon-add-subpackage',   hint: 'Add Sub-Package' },\r\n        QE_ADD_DEPENDING_PACKAGE = { type: 'button', id: ITEM_ADD_DEPENDING_PACKAGE, icon: 'quick-edit-icon-add-depending-package', hint: 'Add Depending Package' },\r\n        QE_ADD_DEPENDANT_PACKAGE = { type: 'button', id: ITEM_ADD_DEPENDANT_PACKAGE, icon: 'quick-edit-icon-add-dependant-package', hint: 'Add Dependant Package' },\r\n        QE_ADD_SUPERCLASS      = { type: 'button', id: ITEM_ADD_SUPERCLASS,      icon: 'quick-edit-icon-add-superclass',   hint: 'Add Super-Class' },\r\n        QE_ADD_SUBCLASS        = { type: 'button', id: ITEM_ADD_SUBCLASS,        icon: 'quick-edit-icon-add-subclass',     hint: 'Add Sub-Class' },\r\n        QE_ADD_ASSOCIATION     = { type: 'button', id: ITEM_ADD_ASSOCIATION,     icon: 'quick-edit-icon-add-association',  hint: 'Add Association' },\r\n        QE_ADD_AGGREGATION     = { type: 'button', id: ITEM_ADD_AGGREGATION,     icon: 'quick-edit-icon-add-aggregation',  hint: 'Add Aggregation' },\r\n        QE_ADD_COMPOSITION     = { type: 'button', id: ITEM_ADD_COMPOSITION,     icon: 'quick-edit-icon-add-composition',  hint: 'Add Composition' },\r\n        QE_ADD_PORT            = { type: 'button', id: ITEM_ADD_PORT,            icon: 'quick-edit-icon-add-port',         hint: 'Add Port' },\r\n        QE_ADD_PART            = { type: 'button', id: ITEM_ADD_PART,            icon: 'quick-edit-icon-add-part',         hint: 'Add Part' },\r\n        QE_ADD_CONNECTED_PART  = { type: 'button', id: ITEM_ADD_CONNECTED_PART,  icon: 'quick-edit-icon-add-connected-part', hint: 'Add Connected Part' },\r\n        QE_ADD_LINKED_OBJECT   = { type: 'button', id: ITEM_ADD_LINKED_OBJECT,   icon: 'quick-edit-icon-add-linked-object',  hint: 'Add Linked Object' },\r\n        QE_ADD_PROVIDED_INTERFACE = { type: 'button', id: ITEM_ADD_PROVIDED_INTERFACE, icon: 'quick-edit-icon-add-interface', hint: 'Add Provided Interface' },\r\n        QE_ADD_REQUIRED_INTERFACE = { type: 'button', id: ITEM_ADD_REQUIRED_INTERFACE, icon: 'quick-edit-icon-add-required-interface', hint: 'Add Required Interface' },\r\n        QE_ADD_SUPERINTERFACE  = { type: 'button', id: ITEM_ADD_SUPERINTERFACE,  icon: 'quick-edit-icon-add-superinterface', hint: 'Add Super-Interface' },\r\n        QE_ADD_SUBINTERFACE    = { type: 'button', id: ITEM_ADD_SUBINTERFACE,    icon: 'quick-edit-icon-add-subinterface', hint: 'Add Sub-Interface' },\r\n        QE_ADD_REALIZING_CLASS = { type: 'button', id: ITEM_ADD_REALIZING_CLASS, icon: 'quick-edit-icon-add-realizing-class', hint: 'Add Realizing Class' },\r\n        QE_ADD_COMMUNICATING_NODE = { type: 'button', id: ITEM_ADD_COMMUNICATING_NODE, icon: 'quick-edit-icon-add-communicating-node', hint: 'Add Communicating Node' },\r\n        QE_ADD_DEPLOYED_ARTIFACT  = { type: 'button', id: ITEM_ADD_DEPLOYED_ARTIFACT,  icon: 'quick-edit-icon-add-deployed-artifact',  hint: 'Add Deployed Artifact' },\r\n        QE_ADD_DEPLOYED_COMPONENT = { type: 'button', id: ITEM_ADD_DEPLOYED_COMPONENT, icon: 'quick-edit-icon-add-deployed-component', hint: 'Add Deployed Component' },\r\n        QE_ADD_SUPERACTOR         = { type: 'button', id: ITEM_ADD_SUPERACTOR,         icon: 'quick-edit-icon-add-superactor',         hint: 'Add Super-Actor' },\r\n        QE_ADD_SUBACTOR           = { type: 'button', id: ITEM_ADD_SUBACTOR,           icon: 'quick-edit-icon-add-subactor',           hint: 'Add Sub-Actor' },\r\n        QE_ADD_ASSOCIATED_USECASE = { type: 'button', id: ITEM_ADD_ASSOCIATED_USECASE, icon: 'quick-edit-icon-add-associated-usecase', hint: 'Add Associated Use Case' },\r\n        QE_ADD_ASSOCIATED_ACTOR   = { type: 'button', id: ITEM_ADD_ASSOCIATED_ACTOR, icon: 'quick-edit-icon-add-associated-actor', hint: 'Add Associated Actor' },\r\n        QE_ADD_INCLUDED_USECASE   = { type: 'button', id: ITEM_ADD_INCLUDED_USECASE, icon: 'quick-edit-icon-add-included-usecase', hint: 'Add Included Use Case' },\r\n        QE_ADD_EXTENDED_USECASE   = { type: 'button', id: ITEM_ADD_EXTENDED_USECASE, icon: 'quick-edit-icon-add-extended-usecase', hint: 'Add Extended Use Case' },\r\n        QE_ADD_MESSAGE_LIFELINE   = { type: 'button', id: ITEM_ADD_MESSAGE_LIFELINE,  icon: 'quick-edit-icon-add-message-lifeline',  hint: 'Add Message with Lifeline' },\r\n        QE_ADD_CREATE_MESSAGE_LIFELINE = { type: 'button', id: ITEM_ADD_CREATE_MESSAGE_LIFELINE, icon: 'quick-edit-icon-add-create-message-lifeline', hint: 'Add Create Message with Lifeline' },\r\n        QE_ADD_SELF_MESSAGE       = { type: 'button', id: ITEM_ADD_SELF_MESSAGE,      icon: 'quick-edit-icon-add-self-message',      hint: 'Add Self Message' },\r\n        QE_ADD_MESSAGE_FROM_GATE  = { type: 'button', id: ITEM_ADD_MESSAGE_FROM_GATE, icon: 'quick-edit-icon-add-message-from-gate', hint: 'Add Message from Gate' },\r\n        QE_ADD_MESSAGE_TO_GATE    = { type: 'button', id: ITEM_ADD_MESSAGE_TO_GATE,   icon: 'quick-edit-icon-add-message-to-gate',   hint: 'Add Message to Gate' },\r\n        QE_ADD_FOUND_MESSAGE      = { type: 'button', id: ITEM_ADD_FOUND_MESSAGE,     icon: 'quick-edit-icon-add-found-message',     hint: 'Add Found Message' },\r\n        QE_ADD_LOST_MESSAGE       = { type: 'button', id: ITEM_ADD_LOST_MESSAGE,      icon: 'quick-edit-icon-add-lost-message',      hint: 'Add Lost Message' },\r\n        QE_ADD_REPLY_MESSAGE      = { type: 'button', id: ITEM_ADD_REPLY_MESSAGE,     icon: 'quick-edit-icon-add-reply-message',     hint: 'Add Reply Message' },\r\n        QE_ADD_CONNECTED_LIFELINE = { type: 'button', id: ITEM_ADD_CONNECTED_LIFELINE, icon: 'quick-edit-icon-add-connected-lifeline', hint: 'Add Connected Lifeline' },\r\n        QE_ADD_SELF_CONNECTOR     = { type: 'button', id: ITEM_ADD_SELF_CONNECTOR,     icon: 'quick-edit-icon-add-self-connector',     hint: 'Add Self Connector' },\r\n        QE_ADD_FORWARD_MESSAGE    = { type: 'button', id: ITEM_ADD_FORWARD_MESSAGE,    icon: 'quick-edit-icon-add-forward-message',    hint: 'Add Forward Message' },\r\n        QE_ADD_REVERSE_MESSAGE    = { type: 'button', id: ITEM_ADD_REVERSE_MESSAGE,    icon: 'quick-edit-icon-add-reverse-message',    hint: 'Add Reverse Message' },\r\n        QE_ADD_OUTGOING_TRANSITION = { type: 'button', id: ITEM_ADD_OUTGOING_TRANSITION, icon: 'quick-edit-icon-add-outgoing-transition', hint: 'Add Outgoing Transition' },\r\n        QE_ADD_INCOMING_TRANSITION = { type: 'button', id: ITEM_ADD_INCOMING_TRANSITION, icon: 'quick-edit-icon-add-incoming-transition', hint: 'Add Incoming Transition' },\r\n        QE_ADD_CONNECTION_POINT_REFERENCE = { type: 'button', id: ITEM_ADD_CONNECTION_POINT_REFERENCE, icon: 'quick-edit-icon-add-connection-point-reference', hint: 'Add ConnectionPointReference' },\r\n        QE_ADD_INITIAL_STATE   = { type: 'button', id: ITEM_ADD_INITIAL_STATE, icon: 'quick-edit-icon-add-initial-state', hint: 'Add Initial State' },\r\n        QE_ADD_FINAL_STATE     = { type: 'button', id: ITEM_ADD_FINAL_STATE,   icon: 'quick-edit-icon-add-final-state',   hint: 'Add Final State' },\r\n        QE_ADD_CHOICE          = { type: 'button', id: ITEM_ADD_CHOICE,        icon: 'quick-edit-icon-add-choice',        hint: 'Add Choice' },\r\n        QE_ADD_FORK            = { type: 'button', id: ITEM_ADD_FORK,          icon: 'quick-edit-icon-add-fork',          hint: 'Add Fork' },\r\n        QE_ADD_JOIN            = { type: 'button', id: ITEM_ADD_JOIN,          icon: 'quick-edit-icon-add-join',          hint: 'Add Join' },\r\n        QE_ADD_OUTGOING_CONTROL_FLOW = { type: 'button', id: ITEM_ADD_OUTGOING_CONTROL_FLOW, icon: 'quick-edit-icon-add-outgoing-control-flow', hint: 'Add Outgoing Control Flow' },\r\n        QE_ADD_INCOMING_CONTROL_FLOW = { type: 'button', id: ITEM_ADD_INCOMING_CONTROL_FLOW, icon: 'quick-edit-icon-add-incoming-control-flow', hint: 'Add Incoming Control Flow' },\r\n        QE_ADD_OUTGOING_OBJECT_FLOW  = { type: 'button', id: ITEM_ADD_OUTGOING_OBJECT_FLOW,  icon: 'quick-edit-icon-add-outgoing-object-flow',  hint: 'Add Outgoing Object Flow' },\r\n        QE_ADD_INCOMING_OBJECT_FLOW  = { type: 'button', id: ITEM_ADD_INCOMING_OBJECT_FLOW,  icon: 'quick-edit-icon-add-incoming-object-flow',  hint: 'Add Incoming Object Flow' },\r\n        QE_ADD_DECISION              = { type: 'button', id: ITEM_ADD_DECISION,      icon: 'quick-edit-icon-add-decision', hint: 'Add Decision' },\r\n        QE_ADD_MERGE                 = { type: 'button', id: ITEM_ADD_MERGE,         icon: 'quick-edit-icon-add-merge',    hint: 'Add Merge' },\r\n        QE_ADD_ACTIVITY_FORK         = { type: 'button', id: ITEM_ADD_ACTIVITY_FORK, icon: 'quick-edit-icon-add-fork',     hint: 'Add Fork' },\r\n        QE_ADD_ACTIVITY_JOIN         = { type: 'button', id: ITEM_ADD_ACTIVITY_JOIN, icon: 'quick-edit-icon-add-join',     hint: 'Add Join' },\r\n        QE_ADD_INPUT_PIN             = { type: 'button', id: ITEM_ADD_INPUT_PIN,    icon: 'quick-edit-icon-add-input-pin',    hint: 'Add Input Pin' },\r\n        QE_ADD_OUTPUT_PIN            = { type: 'button', id: ITEM_ADD_OUTPUT_PIN,   icon: 'quick-edit-icon-add-output-pin',   hint: 'Add Output Pin' },\r\n        QE_ADD_INITIAL_NODE          = { type: 'button', id: ITEM_ADD_INITIAL_NODE, icon: 'quick-edit-icon-add-initial-node', hint: 'Add Initial Node' },\r\n        QE_ADD_FINAL_NODE            = { type: 'button', id: ITEM_ADD_FINAL_NODE,   icon: 'quick-edit-icon-add-final-node',   hint: 'Add Final Node' },\r\n        QE_ADD_STEREOTYPE            = { type: 'button', id: ITEM_ADD_STEREOTYPE,   icon: 'quick-edit-icon-add-stereotype',   hint: 'Add Stereotype' },\r\n        QE_ADD_SUPERSTEREOTYPE       = { type: 'button', id: ITEM_ADD_SUPERSTEREOTYPE, icon: 'quick-edit-icon-add-superstereotype', hint: 'Add Super-Stereotype' },\r\n        QE_ADD_SUBSTEREOTYPE         = { type: 'button', id: ITEM_ADD_SUBSTEREOTYPE,   icon: 'quick-edit-icon-add-substereotype',   hint: 'Add Sub-Stereotype' };\r\n\r\n    /* Quick Edit Inputs */\r\n    var QE_EDIT_GENERAL    = { type: 'input', id: ITEM_EDIT, hint: \"<< stereotype >> name\" },\r\n        QE_EDIT_ATTRIBUTE  = { type: 'input', id: ITEM_EDIT, hint: \"<< stereotype >> name : type [ multiplicity ] = value\" },\r\n        QE_EDIT_OPERATION  = { type: 'input', id: ITEM_EDIT, hint: \"<< stereotype >> name (param1 : type1 [multiplicity] = default1, param2, ...) : returnType\" },\r\n        QE_EDIT_TEMPARAM   = { type: 'input', id: ITEM_EDIT, hint: \"<< stereotype >> name : type = value\" },\r\n        QE_EDIT_ROLENAME   = { type: 'input', id: ITEM_EDIT, hint: \"Role name\", width: 100 },\r\n        QE_EDIT_INSTANCE   = { type: 'input', id: ITEM_EDIT, hint: \"<< stereotype >> name : type\" },\r\n        QE_EDIT_SLOT       = { type: 'input', id: ITEM_EDIT, hint: \"<< stereotype >> name : type = value\" },\r\n        QE_EDIT_LIFELINE   = { type: 'input', id: ITEM_EDIT, hint: \"<< stereotype >> name [selector] : type\" },\r\n        QE_EDIT_MESSAGE    = { type: 'input', id: ITEM_EDIT, hint: \"<< stereotype >> target = name (arguments)\" },\r\n        QE_EDIT_INVARIANT  = { type: 'input', id: ITEM_EDIT, hint: \"invariant\" },\r\n        QE_EDIT_GUARD      = { type: 'input', id: ITEM_EDIT, hint: \"guard\" },\r\n        QE_EDIT_TRANSITION = { type: 'input', id: ITEM_EDIT, hint: \"trigger1, trigger2, ... [ guard ] / effect\", width: 120 },\r\n        QE_EDIT_TEXTAREA   = { type: 'textarea', id: ITEM_EDIT, hint: \"Edit text (Shift+Enter = New Line)\" };\r\n\r\n    /* Quick Edit ComboBoxes */\r\n    var QE_MULTIPLICITY = {\r\n            type: 'combo',\r\n            id: ITEM_MULTIPLICITY,\r\n            hint: 'Multiplicity',\r\n            width: 70,\r\n            items: [\r\n                { text: '0..1', value: '0..1' },\r\n                { text: '1',    value: '1' },\r\n                { text: '0..*', value: '0..*' },\r\n                { text: '1..*', value: '1..*' },\r\n                { text: '*',    value: '*' }\r\n            ]\r\n        };\r\n\r\n    // QuickEdit for Common\r\n    // - Model, Collaboration, CollaborationUse\r\n    // - ComponentInstance, NodeInstance, ArtifactInstance, UseCaseSubjectView\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLModelView) ||\r\n                   (view instanceof type.UMLCollaborationView) ||\r\n                   (view instanceof type.UMLCollaborationUseView) ||\r\n                   (view instanceof type.UMLComponentInstanceView) ||\r\n                   (view instanceof type.UMLNodeInstanceView) ||\r\n                   (view instanceof type.UMLArtifactInstanceView) ||\r\n                   (view instanceof type.UMLUseCaseSubjectView) ||\r\n                   (view instanceof type.UMLStructuredActivityNodeView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_GENERAL,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:  [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Floating Nodes\r\n    // - Pseudostate, ConnectionPointReference\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLPseudostateView) ||\r\n                   (view instanceof type.UMLConnectionPointReferenceView) ||\r\n                   ((view instanceof Core.NodeLabelView) && (view._parent instanceof type.UMLPseudostateView)) ||\r\n                   ((view instanceof Core.NodeLabelView) && (view._parent instanceof type.UMLConnectionPointReferenceView));\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var endView = view.nameLabel;\r\n            if (view instanceof Core.NodeLabelView) { endView = view._parent.nameLabel; }\r\n            var rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, endView, {\r\n                id: QUICKEDIT_FLOATINGNODE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Subsystem\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLSubsystemView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_SUBSYSTEM,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:   [ QE_VISIBILITY ],\r\n                leftSection2:  [ QE_ADD_NOTE ],\r\n                rightSection:  [ QE_ADD_PROVIDED_INTERFACE, QE_ADD_REQUIRED_INTERFACE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Package\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLPackageView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_PACKAGE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:   [ QE_VISIBILITY ],\r\n                leftSection2:  [ QE_ADD_NOTE ],\r\n                rightSection:  [ QE_ADD_SUBPACKAGE ],\r\n                rightSection2: [ QE_ADD_DEPENDANT_PACKAGE, QE_ADD_DEPENDING_PACKAGE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Classifiers\r\n    // - Signal, DataType, PrimitiveType, Artifact\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLSignalView) ||\r\n                   (view instanceof type.UMLDataTypeView) ||\r\n                   (view instanceof type.UMLPrimitiveTypeView) ||\r\n                   (view instanceof type.UMLArtifactView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_CLASSIFIER,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:  [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_ATTRIBUTE, QE_ADD_OPERATION, QE_ADD_RECEPTION ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Class\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLClassView && !(view instanceof type.UMLStereotypeView));\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_CLASS,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:   [ QE_VISIBILITY ],\r\n                leftSection2:  [ QE_ADD_NOTE ],\r\n                rightSection:  [ QE_ADD_ATTRIBUTE, QE_ADD_OPERATION, QE_ADD_RECEPTION ],\r\n                rightSection2: [ QE_ADD_SUBCLASS, QE_ADD_SUPERCLASS, QE_ADD_PROVIDED_INTERFACE, QE_ADD_REQUIRED_INTERFACE ],\r\n                rightSection3: [ QE_ADD_ASSOCIATION, QE_ADD_AGGREGATION, QE_ADD_COMPOSITION ],\r\n                rightSection4: [ QE_ADD_PORT, QE_ADD_PART ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Interface\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLInterfaceView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_INTERFACE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:   [ QE_VISIBILITY ],\r\n                leftSection2:  [ QE_ADD_NOTE ],\r\n                rightSection:  [ QE_ADD_ATTRIBUTE, QE_ADD_OPERATION, QE_ADD_RECEPTION ],\r\n                rightSection2: [ QE_ADD_SUBINTERFACE, QE_ADD_SUPERINTERFACE, QE_ADD_REALIZING_CLASS ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Component\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLComponentView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_COMPONENT,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:  [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_ATTRIBUTE, QE_ADD_OPERATION, QE_ADD_RECEPTION ],\r\n                rightSection2: [ QE_ADD_PROVIDED_INTERFACE, QE_ADD_REQUIRED_INTERFACE ],\r\n                rightSection3: [ QE_ADD_PORT, QE_ADD_PART ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Node\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLNodeView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_NODE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:  [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_ATTRIBUTE, QE_ADD_OPERATION, QE_ADD_RECEPTION ],\r\n                rightSection2: [ QE_ADD_COMMUNICATING_NODE ],\r\n                rightSection3: [ QE_ADD_DEPLOYED_ARTIFACT, QE_ADD_DEPLOYED_COMPONENT ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Actor\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLActorView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_ACTOR,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:  [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_ATTRIBUTE, QE_ADD_OPERATION ],\r\n                rightSection2: [ QE_ADD_SUBACTOR, QE_ADD_SUPERACTOR ],\r\n                rightSection3: [ QE_ADD_ASSOCIATED_USECASE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for UseCase\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLUseCaseView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_USECASE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_EXTENSIONPOINT ],\r\n                rightSection2: [ QE_ADD_ASSOCIATED_ACTOR, QE_ADD_INCLUDED_USECASE, QE_ADD_EXTENDED_USECASE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Enumeration\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLEnumerationView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_ENUMERATION,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:  [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_LITERAL, QE_ADD_OPERATION ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for MetaClass\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLMetaClassView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_METACLASS,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:  [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_STEREOTYPE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Stereotype\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLStereotypeView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_STEREOTYPE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:   [ QE_VISIBILITY ],\r\n                leftSection2:  [ QE_ADD_NOTE ],\r\n                rightSection:  [ QE_ADD_ATTRIBUTE, QE_ADD_OPERATION ],\r\n                rightSection2: [ QE_ADD_SUBSTEREOTYPE, QE_ADD_SUPERSTEREOTYPE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Port\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLPortView) ||\r\n                   ((view instanceof Core.NodeLabelView) && (view._parent instanceof type.UMLPortView));\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var endView = view.nameLabel;\r\n            if (view instanceof Core.NodeLabelView) { endView = view._parent.nameLabel; }\r\n            var rect  = new Graphics.Rect(endView.left, endView.top, endView.left+100, endView.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, endView, {\r\n                id: QUICKEDIT_PORT,\r\n                main: QE_EDIT_ATTRIBUTE,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_SELECT_TYPE, QE_CREATE_TYPE ],\r\n                rightSection2: [ QE_ADD_PROVIDED_INTERFACE, QE_ADD_REQUIRED_INTERFACE, QE_ADD_CONNECTED_PART ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getAttributeExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Part\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLPartView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_PART,\r\n                main: QE_EDIT_ATTRIBUTE,\r\n                leftSection:  [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_SELECT_TYPE, QE_CREATE_TYPE ],\r\n                rightSection2: [ QE_ADD_PORT, QE_ADD_PART, QE_ADD_CONNECTED_PART ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getAttributeExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Attribute\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLAttributeView) && (view._parent instanceof type.UMLAttributeCompartmentView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_ATTRIBUTE,\r\n                main: QE_EDIT_ATTRIBUTE,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                rightSection: [ QE_ADD, QE_DELETE, QE_MOVEUP, QE_MOVEDOWN ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getAttributeExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Operation\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLOperationView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_OPERATION,\r\n                main: QE_EDIT_OPERATION,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                rightSection: [ QE_ADD, QE_DELETE, QE_MOVEUP, QE_MOVEDOWN ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getOperationExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Reception\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLReceptionView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_RECEPTION,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_VISIBILITY, QE_SELECT_SIGNAL ],\r\n                rightSection: [ QE_ADD, QE_DELETE, QE_MOVEUP, QE_MOVEDOWN ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for TemplateParameter\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLTemplateParameterView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_TEMPLATE_PARAMETER,\r\n                main: QE_EDIT_TEMPARAM,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                rightSection: [ QE_ADD, QE_DELETE, QE_MOVEUP, QE_MOVEDOWN ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getTemplateParameterExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Qualifier\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLAttributeView) && (view._parent instanceof type.UMLQualifierCompartmentView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_QUALIFIER,\r\n                main: QE_EDIT_ATTRIBUTE,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                rightSection: [ QE_ADD, QE_DELETE, QE_MOVEUP, QE_MOVEDOWN ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getAttributeExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Literal\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLEnumerationLiteralView) && (view._parent instanceof type.UMLEnumerationLiteralCompartmentView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_LITERAL,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                rightSection: [ QE_ADD, QE_DELETE, QE_MOVEUP, QE_MOVEDOWN ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for ExtensionPoint\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLExtensionPointView) && (view._parent instanceof type.UMLExtensionPointCompartmentView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_EXTENSION_POINT,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                rightSection: [ QE_ADD, QE_DELETE, QE_MOVEUP, QE_MOVEDOWN ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Object\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLObjectView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_OBJECT,\r\n                main: QE_EDIT_INSTANCE,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_SLOT ],\r\n                rightSection2: [ QE_ADD_LINKED_OBJECT ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getObjectExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Slot\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLSlotView) && (view._parent instanceof type.UMLSlotCompartmentView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_SLOT,\r\n                main: QE_EDIT_SLOT,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                rightSection: [ QE_ADD, QE_DELETE, QE_MOVEUP, QE_MOVEDOWN ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getSlotExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Lifeline (Sequence)\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLSeqLifelineView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_SEQ_LIFELINE,\r\n                main: QE_EDIT_LIFELINE,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_SELECT_TYPE, QE_CREATE_TYPE ],\r\n                rightSection2: [ QE_ADD_MESSAGE_LIFELINE, QE_ADD_CREATE_MESSAGE_LIFELINE, QE_ADD_SELF_MESSAGE ],\r\n                rightSection3: [ QE_ADD_FOUND_MESSAGE, QE_ADD_LOST_MESSAGE ],\r\n                rightSection4: [ QE_ADD_MESSAGE_FROM_GATE, QE_ADD_MESSAGE_TO_GATE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getLifelineExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Message (Sequence)\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLSeqMessageView) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLSeqMessageView));\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var endView = view.nameLabel;\r\n            if (view instanceof Core.EdgeLabelView) { endView = view._parent.nameLabel; }\r\n            if (view instanceof Core.NodeLabelView) { endView = view._parent.nameLabel; }\r\n            var rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, endView, {\r\n                id: QUICKEDIT_SEQ_MESSAGE,\r\n                main: QE_EDIT_MESSAGE,\r\n                leftSection: [ QE_MESSAGE_SORT ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_SELECT_OPERATION, QE_CREATE_OPERATION, QE_SELECT_SIGNAL, QE_CREATE_SIGNAL ],\r\n                rightSection2: [ QE_ADD_REPLY_MESSAGE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            var model = view.model;\r\n            if (view instanceof Core.EdgeLabelView) { model = view._parent.model; }\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getMessageExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_MESSAGE_SORT, view.model.messageSort);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Message (Communication)\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLCommMessageView) ||\r\n                   ((view instanceof Core.NodeLabelView) && (view._parent instanceof type.UMLCommMessageView));\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var endView = view.nameLabel;\r\n            if (view instanceof Core.EdgeLabelView) { endView = view._parent.nameLabel; }\r\n            if (view instanceof Core.NodeLabelView) { endView = view._parent.nameLabel; }\r\n            var rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, endView, {\r\n                id: QUICKEDIT_COMM_MESSAGE,\r\n                main: QE_EDIT_MESSAGE,\r\n                leftSection: [ QE_MESSAGE_SORT ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_SELECT_OPERATION, QE_CREATE_OPERATION, QE_SELECT_SIGNAL, QE_CREATE_SIGNAL ],\r\n                rightSection2: [ QE_ADD_REPLY_MESSAGE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            var model = view.model;\r\n            if (view instanceof Core.EdgeLabelView) { model = view._parent.model; }\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getMessageExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_MESSAGE_SORT, view.model.messageSort);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Lifeline of (Communication)\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLCommLifelineView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_COMM_LIFELINE,\r\n                main: QE_EDIT_LIFELINE,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_SELECT_TYPE, QE_CREATE_TYPE ],\r\n                rightSection2: [ QE_ADD_CONNECTED_LIFELINE, QE_ADD_SELF_CONNECTOR ],\r\n                rightSection3: [ QE_ADD_FORWARD_MESSAGE, QE_ADD_REVERSE_MESSAGE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getLifelineExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for StateInvariant\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLStateInvariantView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.invariantLabel,\r\n                rect  = new Graphics.Rect(label.left, label.top, label.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_STATEINVARIANT,\r\n                main: QE_EDIT_INVARIANT,\r\n                leftSection: [],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, view.model.invariant);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Continuation\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLContinuationView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameLabel,\r\n                rect  = new Graphics.Rect(label.left, label.top, label.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_CONTINUATION,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n        }\r\n    });\r\n\r\n    // QuickEdit for CombinedFragment\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLCombinedFragmentView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameLabel,\r\n                rect  = new Graphics.Rect(label.left, label.top, label.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_COMBINEDFRAGMENT,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [],\r\n                rightSection: [ QE_ADD_OPERAND ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n        }\r\n    });\r\n\r\n    // QuickEdit for InteractionOperand\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLInteractionOperandView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.guardLabel,\r\n                rect  = new Graphics.Rect(label.left, label.top, label.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_OPERAND,\r\n                main: QE_EDIT_GUARD,\r\n                leftSection: [],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, view.model.guard);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Directed Relation\r\n    // - Generalization, Dependency, Realization, Include, Extend, Extension,\r\n    //   ExceptionHandler\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLGeneralizationView) ||\r\n                   (view instanceof type.UMLDependencyView) ||\r\n                   (view instanceof type.UMLInterfaceRealizationView) ||\r\n                   (view instanceof type.UMLComponentRealizationView) ||\r\n                   (view instanceof type.UMLIncludeView) ||\r\n                   (view instanceof type.UMLExtendView) ||\r\n                   (view instanceof type.UMLExtensionView) ||\r\n                   (view instanceof type.UMLExceptionHandlerView) ||\r\n                   (view instanceof type.UMLActivityInterruptView) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLGeneralizationView)) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLDependencyView)) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLInterfaceRealizationView)) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLComponentRealizationView)) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLIncludeView)) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLExtendView)) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLExtensionView)) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLExceptionHandlerView)) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLActivityInterruptView));\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var endView = view.nameLabel;\r\n            if (view instanceof Core.EdgeLabelView) { endView = view._parent.nameLabel; }\r\n            var rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, endView, {\r\n                id: QUICKEDIT_DIRECTED,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            var model = view.model;\r\n            if (view instanceof Core.EdgeLabelView) { model = view._parent.model; }\r\n            QuickEdit.setInputValue(ITEM_EDIT, model.name);\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Undirected Relation (Link)\r\n    QuickEdit.register({\r\n        when: function (view, x, y, pass) {\r\n            pass.position = 'center';\r\n            // when UndirectedRelationship was clicked\r\n            if (view instanceof type.UMLLinkView) {\r\n                pass.position = QuickEdit.getPositionOfEdge(view.points, x, y);\r\n                return true;\r\n            }\r\n            // when Labels belongs to UndirectedRelationship was clicked\r\n            if ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLLinkView)) {\r\n                if ((view === view._parent.headRoleNameLabel) ||\r\n                    (view === view._parent.headPropertyLabel) ||\r\n                    (view === view._parent.headMultiplicityLabel)) {\r\n                    pass.position = 'head';\r\n                } else if ((view === view._parent.tailRoleNameLabel) ||\r\n                    (view === view._parent.tailPropertyLabel) ||\r\n                    (view === view._parent.tailMultiplicityLabel)) {\r\n                    pass.position = 'tail';\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        popup: function (editor, position, view, pass) {\r\n            var endView, rect;\r\n            switch (pass.position) {\r\n            case 'center':\r\n                endView = view.nameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.nameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_UNDIRECTED,\r\n                    main: QE_EDIT_GENERAL,\r\n                    leftSection: [ QE_VISIBILITY ],\r\n                    leftSection2: [ QE_ADD_NOTE ],\r\n                    rightSection: []\r\n                });\r\n                break;\r\n            case 'tail':\r\n                endView = view.tailRoleNameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.tailRoleNameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_UNDIRECTED_TAIL,\r\n                    main: QE_EDIT_ROLENAME,\r\n                    leftSection: [ QE_AGGREGATION, QE_NAVIGABILITY, QE_VISIBILITY ],\r\n                    rightSection: [ QE_MULTIPLICITY ]\r\n                });\r\n                break;\r\n            case 'head':\r\n                endView = view.headRoleNameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.headRoleNameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_UNDIRECTED_HEAD,\r\n                    main: QE_EDIT_ROLENAME,\r\n                    leftSection: [ QE_AGGREGATION, QE_NAVIGABILITY, QE_VISIBILITY ],\r\n                    rightSection: [ QE_MULTIPLICITY ]\r\n                });\r\n                break;\r\n            }\r\n        },\r\n        init: function (view, pass) {\r\n            var model = view.model;\r\n            if (view instanceof Core.EdgeLabelView) { model = view._parent.model; }\r\n            switch (pass.position) {\r\n            case 'center':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.name);\r\n                QuickEdit.setDropdownValue(ITEM_VISIBILITY, model.visibility);\r\n                break;\r\n            case 'tail':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.end1.name);\r\n                QuickEdit.setDropdownValue(ITEM_AGGREGATION, model.end1.aggregation);\r\n                QuickEdit.setDropdownValue(ITEM_NAVIGABILITY, model.end1.navigable);\r\n                QuickEdit.setDropdownValue(ITEM_VISIBILITY, model.end1.visibility);\r\n                QuickEdit.setComboBoxValue(ITEM_MULTIPLICITY, model.end1.multiplicity);\r\n                break;\r\n            case 'head':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.end2.name);\r\n                QuickEdit.setDropdownValue(ITEM_AGGREGATION, model.end2.aggregation);\r\n                QuickEdit.setDropdownValue(ITEM_NAVIGABILITY, model.end2.navigable);\r\n                QuickEdit.setDropdownValue(ITEM_VISIBILITY, model.end2.visibility);\r\n                QuickEdit.setComboBoxValue(ITEM_MULTIPLICITY, model.end2.multiplicity);\r\n                break;\r\n            }\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Connector\r\n    QuickEdit.register({\r\n        when: function (view, x, y, pass) {\r\n            pass.position = 'center';\r\n            // when ConnectorView was clicked\r\n            if (view instanceof type.UMLConnectorView) {\r\n                pass.position = QuickEdit.getPositionOfEdge(view.points, x, y);\r\n                return true;\r\n            }\r\n            // when Labels belongs to ConnectorView was clicked\r\n            if ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLConnectorView)) {\r\n                if ((view === view._parent.headRoleNameLabel) ||\r\n                    (view === view._parent.headPropertyLabel) ||\r\n                    (view === view._parent.headMultiplicityLabel)) {\r\n                    pass.position = 'head';\r\n                } else if ((view === view._parent.tailRoleNameLabel) ||\r\n                    (view === view._parent.tailPropertyLabel) ||\r\n                    (view === view._parent.tailMultiplicityLabel)) {\r\n                    pass.position = 'tail';\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        popup: function (editor, position, view, pass) {\r\n            var endView, rect;\r\n            switch (pass.position) {\r\n            case 'center':\r\n                endView = view.nameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.nameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                if (view.getDiagram() instanceof type.UMLCommunicationDiagram) {\r\n                    QuickEdit.render(editor, rect, endView, {\r\n                        id: QUICKEDIT_CONNECTOR,\r\n                        main: QE_EDIT_GENERAL,\r\n                        leftSection: [ QE_VISIBILITY ],\r\n                        leftSection2: [ QE_ADD_NOTE ],\r\n                        rightSection: [ QE_ADD_FORWARD_MESSAGE, QE_ADD_REVERSE_MESSAGE ]\r\n                    });\r\n                } else {\r\n                    QuickEdit.render(editor, rect, endView, {\r\n                        id: QUICKEDIT_CONNECTOR,\r\n                        main: QE_EDIT_GENERAL,\r\n                        leftSection: [ QE_VISIBILITY ],\r\n                        leftSection2: [ QE_ADD_NOTE ]\r\n                    });\r\n                }\r\n                break;\r\n            case 'tail':\r\n                endView = view.tailRoleNameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.tailRoleNameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_UNDIRECTED_TAIL,\r\n                    main: QE_EDIT_ROLENAME,\r\n                    leftSection: [ QE_AGGREGATION, QE_NAVIGABILITY, QE_VISIBILITY ],\r\n                    rightSection: [ QE_MULTIPLICITY ]\r\n                });\r\n                break;\r\n            case 'head':\r\n                endView = view.headRoleNameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.headRoleNameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_UNDIRECTED_HEAD,\r\n                    main: QE_EDIT_ROLENAME,\r\n                    leftSection: [ QE_AGGREGATION, QE_NAVIGABILITY, QE_VISIBILITY ],\r\n                    rightSection: [ QE_MULTIPLICITY ]\r\n                });\r\n                break;\r\n            }\r\n        },\r\n        init: function (view, pass) {\r\n            var model = view.model;\r\n            if (view instanceof Core.EdgeLabelView) { model = view._parent.model; }\r\n            switch (pass.position) {\r\n            case 'center':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.name);\r\n                QuickEdit.setDropdownValue(ITEM_VISIBILITY, model.visibility);\r\n                break;\r\n            case 'tail':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.end1.name);\r\n                QuickEdit.setDropdownValue(ITEM_AGGREGATION, model.end1.aggregation);\r\n                QuickEdit.setDropdownValue(ITEM_NAVIGABILITY, model.end1.navigable);\r\n                QuickEdit.setDropdownValue(ITEM_VISIBILITY, model.end1.visibility);\r\n                QuickEdit.setComboBoxValue(ITEM_MULTIPLICITY, model.end1.multiplicity);\r\n                break;\r\n            case 'head':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.end2.name);\r\n                QuickEdit.setDropdownValue(ITEM_AGGREGATION, model.end2.aggregation);\r\n                QuickEdit.setDropdownValue(ITEM_NAVIGABILITY, model.end2.navigable);\r\n                QuickEdit.setDropdownValue(ITEM_VISIBILITY, model.end2.visibility);\r\n                QuickEdit.setComboBoxValue(ITEM_MULTIPLICITY, model.end2.multiplicity);\r\n                break;\r\n            }\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Association\r\n    QuickEdit.register({\r\n        when: function (view, x, y, pass) {\r\n            pass.position = 'center';\r\n            // when AssocationView was clicked\r\n            if (view instanceof type.UMLAssociationView) {\r\n                pass.position = QuickEdit.getPositionOfEdge(view.points, x, y);\r\n                return true;\r\n            }\r\n            // when Labels belongs to AssociationView was clicked\r\n            if ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLAssociationView)) {\r\n                if ((view === view._parent.headRoleNameLabel) ||\r\n                    (view === view._parent.headPropertyLabel) ||\r\n                    (view === view._parent.headMultiplicityLabel)) {\r\n                    pass.position = 'head';\r\n                } else if ((view === view._parent.tailRoleNameLabel) ||\r\n                    (view === view._parent.tailPropertyLabel) ||\r\n                    (view === view._parent.tailMultiplicityLabel)) {\r\n                    pass.position = 'tail';\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        popup: function (editor, position, view, pass) {\r\n            var endView, rect;\r\n            switch (pass.position) {\r\n            case 'center':\r\n                endView = view.nameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.nameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_ASSOCIATION,\r\n                    main: QE_EDIT_GENERAL,\r\n                    leftSection: [ QE_VISIBILITY ],\r\n                    leftSection2: [ QE_ADD_NOTE ],\r\n                    rightSection: []\r\n                });\r\n                break;\r\n            case 'tail':\r\n                endView = view.tailRoleNameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.tailRoleNameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_ASSOCIATION_TAIL,\r\n                    main: QE_EDIT_ROLENAME,\r\n                    leftSection: [ QE_ADD_QUALIFIER, QE_AGGREGATION, QE_NAVIGABILITY, QE_VISIBILITY ],\r\n                    rightSection: [ QE_MULTIPLICITY ]\r\n                });\r\n                break;\r\n            case 'head':\r\n                endView = view.headRoleNameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.headRoleNameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_ASSOCIATION_HEAD,\r\n                    main: QE_EDIT_ROLENAME,\r\n                    leftSection: [ QE_ADD_QUALIFIER, QE_AGGREGATION, QE_NAVIGABILITY, QE_VISIBILITY ],\r\n                    rightSection: [ QE_MULTIPLICITY ]\r\n                });\r\n                break;\r\n            }\r\n        },\r\n        init: function (view, pass) {\r\n            var model = view.model;\r\n            if (view instanceof Core.EdgeLabelView) { model = view._parent.model; }\r\n            switch (pass.position) {\r\n            case 'center':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.name);\r\n                QuickEdit.setDropdownValue(ITEM_VISIBILITY, model.visibility);\r\n                break;\r\n            case 'tail':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.end1.name);\r\n                QuickEdit.setDropdownValue(ITEM_AGGREGATION, model.end1.aggregation);\r\n                QuickEdit.setDropdownValue(ITEM_NAVIGABILITY, model.end1.navigable);\r\n                QuickEdit.setDropdownValue(ITEM_VISIBILITY, model.end1.visibility);\r\n                QuickEdit.setComboBoxValue(ITEM_MULTIPLICITY, model.end1.multiplicity);\r\n                break;\r\n            case 'head':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.end2.name);\r\n                QuickEdit.setDropdownValue(ITEM_AGGREGATION, model.end2.aggregation);\r\n                QuickEdit.setDropdownValue(ITEM_NAVIGABILITY, model.end2.navigable);\r\n                QuickEdit.setDropdownValue(ITEM_VISIBILITY, model.end2.visibility);\r\n                QuickEdit.setComboBoxValue(ITEM_MULTIPLICITY, model.end2.multiplicity);\r\n                break;\r\n            }\r\n        }\r\n    });\r\n\r\n    // QuickEdit for State\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLStateView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_STATE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_ADD_REGION, QE_ADD_CONNECTION_POINT_REFERENCE ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_ENTRY_ACTIVITY, QE_ADD_DO_ACTIVITY, QE_ADD_EXIT_ACTIVITY, QE_ADD_INTERNAL_TRANSITION ],\r\n                rightSection2: [ QE_ADD_OUTGOING_TRANSITION, QE_ADD_INCOMING_TRANSITION ],\r\n                rightSection3: [ QE_ADD_INITIAL_STATE, QE_ADD_FINAL_STATE, QE_ADD_CHOICE ],\r\n                rightSection4: [ QE_ADD_FORK, QE_ADD_JOIN ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Internal Activity\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLInternalActivityView) && (view._parent instanceof type.UMLInternalActivityCompartmentView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_INTERNAL_ACTIVITY,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Internal Transition\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLInternalTransitionView) && (view._parent instanceof type.UMLInternalTransitionCompartmentView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_INTERNAL_TRANSITION,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [],\r\n                rightSection: [ QE_ADD_TRIGGER, QE_ADD_EFFECT ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Transition\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLTransitionView) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLTransitionView));\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var endView = view.nameLabel;\r\n            if (view instanceof Core.EdgeLabelView) { endView = view._parent.nameLabel; }\r\n            var rect  = new Graphics.Rect(endView.left, endView.top, endView.left+120, endView.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, endView, {\r\n                id: QUICKEDIT_TRANSITION,\r\n                main: QE_EDIT_TRANSITION,\r\n                leftSection: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_TRIGGER, QE_ADD_EFFECT ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            var model = view.model;\r\n            if (view instanceof Core.EdgeLabelView) { model = view._parent.model; }\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getTransitionExpression(view.model));\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Action\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLActionView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_ACTION,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_ADD_OUTPUT_PIN, QE_ADD_INPUT_PIN ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_TRIGGER ],\r\n                rightSection2: [ QE_ADD_OUTGOING_CONTROL_FLOW, QE_ADD_INCOMING_CONTROL_FLOW, QE_ADD_OUTGOING_OBJECT_FLOW, QE_ADD_INCOMING_OBJECT_FLOW ],\r\n                rightSection3: [ QE_ADD_DECISION, QE_ADD_MERGE, QE_ADD_ACTIVITY_FORK, QE_ADD_ACTIVITY_JOIN ],\r\n                rightSection4: [ QE_ADD_INITIAL_NODE, QE_ADD_FINAL_NODE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n        }\r\n    });\r\n\r\n    // QuickEdit for ObjectNode\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLObjectNodeView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameCompartment.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_OBJECT_NODE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection:  [ QE_VISIBILITY ],\r\n                leftSection2: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_OUTGOING_OBJECT_FLOW, QE_ADD_INCOMING_OBJECT_FLOW ],\r\n                rightSection2: [ QE_ADD_OUTGOING_CONTROL_FLOW, QE_ADD_INCOMING_CONTROL_FLOW ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_VISIBILITY, view.model.visibility);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for ActivityEdge\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLControlFlowView) ||\r\n                   (view instanceof type.UMLObjectFlowView) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLControlFlowView)) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.UMLObjectFlowView));\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var endView = view.nameLabel;\r\n            if (view instanceof Core.EdgeLabelView) { endView = view._parent.nameLabel; }\r\n            var rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, endView, {\r\n                id: QUICKEDIT_ACTIVITYEDGE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_ADD_NOTE ],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            var model = view.model;\r\n            if (view instanceof Core.EdgeLabelView) { model = view._parent.model; }\r\n            QuickEdit.setInputValue(ITEM_EDIT, model.name);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Partition\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLSwimlaneView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameLabel,\r\n                rect  = new Graphics.Rect(label.left, label.top, label.getRight(), label.getBottom());\r\n            if (view.isVertical !== true) {\r\n                rect.setRect(label.left, label.top, label.left + label.height, label.top + label.width);\r\n            }\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_PARTITION,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, UMLUtils.getNameExpression(view.model));\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Constraint\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLConstraintView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect = view.getBoundingBox(editor.canvas);\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_CONSTRAINT,\r\n                main: QE_EDIT_TEXTAREA,\r\n                leftSection: [],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, view.model.specification);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for TextArea\r\n    // - Text, Note\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.UMLTextView) ||\r\n                   (view instanceof type.UMLNoteView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect = view.getBoundingBox(editor.canvas);\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_TEXTAREA,\r\n                main: QE_EDIT_TEXTAREA,\r\n                leftSection: [],\r\n                rightSection: []\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, view.text);\r\n        }\r\n    });\r\n\r\n    // Define public API\r\n    exports.QUICKEDIT_GENERAL             = QUICKEDIT_GENERAL;\r\n    exports.QUICKEDIT_FLOATINGNODE        = QUICKEDIT_FLOATINGNODE;\r\n    exports.QUICKEDIT_SUBSYSTEM           = QUICKEDIT_SUBSYSTEM;\r\n    exports.QUICKEDIT_PACKAGE             = QUICKEDIT_PACKAGE;\r\n    exports.QUICKEDIT_CLASSIFIER          = QUICKEDIT_CLASSIFIER;\r\n    exports.QUICKEDIT_CLASS               = QUICKEDIT_CLASS;\r\n    exports.QUICKEDIT_INTERFACE           = QUICKEDIT_INTERFACE;\r\n    exports.QUICKEDIT_COMPONENT           = QUICKEDIT_COMPONENT;\r\n    exports.QUICKEDIT_NODE                = QUICKEDIT_NODE;\r\n    exports.QUICKEDIT_ACTOR               = QUICKEDIT_ACTOR;\r\n    exports.QUICKEDIT_USECASE             = QUICKEDIT_USECASE;\r\n    exports.QUICKEDIT_ENUMERATION         = QUICKEDIT_ENUMERATION;\r\n    exports.QUICKEDIT_METACLASS           = QUICKEDIT_METACLASS;\r\n    exports.QUICKEDIT_STEREOTYPE          = QUICKEDIT_STEREOTYPE;\r\n    exports.QUICKEDIT_ATTRIBUTE           = QUICKEDIT_ATTRIBUTE;\r\n    exports.QUICKEDIT_OPERATION           = QUICKEDIT_OPERATION;\r\n    exports.QUICKEDIT_RECEPTION           = QUICKEDIT_RECEPTION;\r\n    exports.QUICKEDIT_PORT                = QUICKEDIT_PORT;\r\n    exports.QUICKEDIT_PART                = QUICKEDIT_PART;\r\n    exports.QUICKEDIT_TEMPLATE_PARAMETER  = QUICKEDIT_TEMPLATE_PARAMETER;\r\n    exports.QUICKEDIT_QUALIFIER           = QUICKEDIT_QUALIFIER;\r\n    exports.QUICKEDIT_LITERAL             = QUICKEDIT_LITERAL;\r\n    exports.QUICKEDIT_EXTENSION_POINT     = QUICKEDIT_EXTENSION_POINT;\r\n    exports.QUICKEDIT_OBJECT              = QUICKEDIT_OBJECT;\r\n    exports.QUICKEDIT_SLOT                = QUICKEDIT_SLOT;\r\n    exports.QUICKEDIT_SEQ_LIFELINE        = QUICKEDIT_SEQ_LIFELINE;\r\n    exports.QUICKEDIT_SEQ_MESSAGE         = QUICKEDIT_SEQ_MESSAGE;\r\n    exports.QUICKEDIT_COMM_LIFELINE       = QUICKEDIT_COMM_LIFELINE;\r\n    exports.QUICKEDIT_COMM_MESSAGE        = QUICKEDIT_COMM_MESSAGE;\r\n    exports.QUICKEDIT_CONNECTOR           = QUICKEDIT_CONNECTOR;\r\n    exports.QUICKEDIT_STATEINVARIANT      = QUICKEDIT_STATEINVARIANT;\r\n    exports.QUICKEDIT_CONTINUATION        = QUICKEDIT_CONTINUATION;\r\n    exports.QUICKEDIT_COMBINEDFRAGMENT    = QUICKEDIT_COMBINEDFRAGMENT;\r\n    exports.QUICKEDIT_OPERAND             = QUICKEDIT_OPERAND;\r\n    exports.QUICKEDIT_DIRECTED            = QUICKEDIT_DIRECTED;\r\n    exports.QUICKEDIT_UNDIRECTED          = QUICKEDIT_UNDIRECTED;\r\n    exports.QUICKEDIT_UNDIRECTED_HEAD     = QUICKEDIT_UNDIRECTED_HEAD;\r\n    exports.QUICKEDIT_UNDIRECTED_TAIL     = QUICKEDIT_UNDIRECTED_TAIL;\r\n    exports.QUICKEDIT_ASSOCIATION         = QUICKEDIT_ASSOCIATION;\r\n    exports.QUICKEDIT_ASSOCIATION_HEAD    = QUICKEDIT_ASSOCIATION_HEAD;\r\n    exports.QUICKEDIT_ASSOCIATION_TAIL    = QUICKEDIT_ASSOCIATION_TAIL;\r\n    exports.QUICKEDIT_STATE               = QUICKEDIT_STATE;\r\n    exports.QUICKEDIT_INTERNAL_ACTIVITY   = QUICKEDIT_INTERNAL_ACTIVITY;\r\n    exports.QUICKEDIT_INTERNAL_TRANSITION = QUICKEDIT_INTERNAL_TRANSITION;\r\n    exports.QUICKEDIT_TRANSITION          = QUICKEDIT_TRANSITION;\r\n    exports.QUICKEDIT_ACTION              = QUICKEDIT_ACTION;\r\n    exports.QUICKEDIT_OBJECT_NODE         = QUICKEDIT_OBJECT_NODE;\r\n    exports.QUICKEDIT_ACTIVITYEDGE        = QUICKEDIT_ACTIVITYEDGE;\r\n    exports.QUICKEDIT_PARTITION           = QUICKEDIT_PARTITION;\r\n    exports.QUICKEDIT_CONSTRAINT          = QUICKEDIT_CONSTRAINT;\r\n    exports.QUICKEDIT_TEXTAREA            = QUICKEDIT_TEXTAREA;\r\n\r\n    exports.ITEM_EDIT                = ITEM_EDIT;\r\n    exports.ITEM_VISIBILITY          = ITEM_VISIBILITY;\r\n    exports.ITEM_AGGREGATION         = ITEM_AGGREGATION;\r\n    exports.ITEM_NAVIGABILITY        = ITEM_NAVIGABILITY;\r\n    exports.ITEM_MESSAGE_SORT        = ITEM_MESSAGE_SORT;\r\n    exports.ITEM_ADD                 = ITEM_ADD;\r\n    exports.ITEM_DELETE              = ITEM_DELETE;\r\n    exports.ITEM_MOVEUP              = ITEM_MOVEUP;\r\n    exports.ITEM_MOVEDOWN            = ITEM_MOVEDOWN;\r\n    exports.ITEM_ADD_ATTRIBUTE       = ITEM_ADD_ATTRIBUTE;\r\n    exports.ITEM_ADD_OPERATION       = ITEM_ADD_OPERATION;\r\n    exports.ITEM_ADD_RECEPTION       = ITEM_ADD_RECEPTION;\r\n    exports.ITEM_ADD_QUALIFIER       = ITEM_ADD_QUALIFIER;\r\n    exports.ITEM_ADD_LITERAL         = ITEM_ADD_LITERAL;\r\n    exports.ITEM_ADD_SLOT            = ITEM_ADD_SLOT;\r\n    exports.ITEM_ADD_EXTENSIONPOINT  = ITEM_ADD_EXTENSIONPOINT;\r\n    exports.ITEM_MULTIPLICITY        = ITEM_MULTIPLICITY;\r\n    exports.ITEM_SELECT_TYPE         = ITEM_SELECT_TYPE;\r\n    exports.ITEM_CREATE_TYPE         = ITEM_CREATE_TYPE;\r\n    exports.ITEM_SELECT_OPERATION    = ITEM_SELECT_OPERATION;\r\n    exports.ITEM_CREATE_OPERATION    = ITEM_CREATE_OPERATION;\r\n    exports.ITEM_SELECT_SIGNAL       = ITEM_SELECT_SIGNAL;\r\n    exports.ITEM_CREATE_SIGNAL       = ITEM_CREATE_SIGNAL;\r\n    exports.ITEM_ADD_OPERAND         = ITEM_ADD_OPERAND;\r\n    exports.ITEM_ADD_REGION          = ITEM_ADD_REGION;\r\n    exports.ITEM_ADD_ENTRY_ACTIVITY  = ITEM_ADD_ENTRY_ACTIVITY;\r\n    exports.ITEM_ADD_DO_ACTIVITY     = ITEM_ADD_DO_ACTIVITY;\r\n    exports.ITEM_ADD_EXIT_ACTIVITY   = ITEM_ADD_EXIT_ACTIVITY;\r\n    exports.ITEM_ADD_INTERNAL_TRANSITION = ITEM_ADD_INTERNAL_TRANSITION;\r\n    exports.ITEM_ADD_TRIGGER         = ITEM_ADD_TRIGGER;\r\n    exports.ITEM_ADD_EFFECT          = ITEM_ADD_EFFECT;\r\n    exports.ITEM_ADD_NOTE            = ITEM_ADD_NOTE;\r\n    exports.ITEM_ADD_SUBPACKAGE      = ITEM_ADD_SUBPACKAGE;\r\n    exports.ITEM_ADD_DEPENDING_PACKAGE = ITEM_ADD_DEPENDING_PACKAGE;\r\n    exports.ITEM_ADD_DEPENDANT_PACKAGE = ITEM_ADD_DEPENDANT_PACKAGE;\r\n    exports.ITEM_ADD_SUPERCLASS      = ITEM_ADD_SUPERCLASS;\r\n    exports.ITEM_ADD_SUBCLASS        = ITEM_ADD_SUBCLASS;\r\n    exports.ITEM_ADD_ASSOCIATION     = ITEM_ADD_ASSOCIATION;\r\n    exports.ITEM_ADD_AGGREGATION     = ITEM_ADD_AGGREGATION;\r\n    exports.ITEM_ADD_COMPOSITION     = ITEM_ADD_COMPOSITION;\r\n    exports.ITEM_ADD_PORT            = ITEM_ADD_PORT;\r\n    exports.ITEM_ADD_PART            = ITEM_ADD_PART;\r\n    exports.ITEM_ADD_CONNECTED_PART  = ITEM_ADD_CONNECTED_PART;\r\n    exports.ITEM_ADD_LINKED_OBJECT   = ITEM_ADD_LINKED_OBJECT;\r\n    exports.ITEM_ADD_PROVIDED_INTERFACE = ITEM_ADD_PROVIDED_INTERFACE;\r\n    exports.ITEM_ADD_REQUIRED_INTERFACE = ITEM_ADD_REQUIRED_INTERFACE;\r\n    exports.ITEM_ADD_SUPERINTERFACE  = ITEM_ADD_SUPERINTERFACE;\r\n    exports.ITEM_ADD_SUBINTERFACE    = ITEM_ADD_SUBINTERFACE;\r\n    exports.ITEM_ADD_REALIZING_CLASS = ITEM_ADD_REALIZING_CLASS;\r\n    exports.ITEM_ADD_COMMUNICATING_NODE = ITEM_ADD_COMMUNICATING_NODE;\r\n    exports.ITEM_ADD_DEPLOYED_ARTIFACT  = ITEM_ADD_DEPLOYED_ARTIFACT;\r\n    exports.ITEM_ADD_DEPLOYED_COMPONENT = ITEM_ADD_DEPLOYED_COMPONENT;\r\n    exports.ITEM_ADD_SUPERACTOR         = ITEM_ADD_SUPERACTOR;\r\n    exports.ITEM_ADD_SUBACTOR           = ITEM_ADD_SUBACTOR;\r\n    exports.ITEM_ADD_ASSOCIATED_USECASE = ITEM_ADD_ASSOCIATED_USECASE;\r\n    exports.ITEM_ADD_ASSOCIATED_ACTOR   = ITEM_ADD_ASSOCIATED_ACTOR;\r\n    exports.ITEM_ADD_INCLUDED_USECASE   = ITEM_ADD_INCLUDED_USECASE;\r\n    exports.ITEM_ADD_EXTENDED_USECASE   = ITEM_ADD_EXTENDED_USECASE;\r\n    exports.ITEM_ADD_MESSAGE_LIFELINE   = ITEM_ADD_MESSAGE_LIFELINE;\r\n    exports.ITEM_ADD_CREATE_MESSAGE_LIFELINE = ITEM_ADD_CREATE_MESSAGE_LIFELINE;\r\n    exports.ITEM_ADD_SELF_MESSAGE       = ITEM_ADD_SELF_MESSAGE;\r\n    exports.ITEM_ADD_MESSAGE_FROM_GATE  = ITEM_ADD_MESSAGE_FROM_GATE;\r\n    exports.ITEM_ADD_MESSAGE_TO_GATE    = ITEM_ADD_MESSAGE_TO_GATE;\r\n    exports.ITEM_ADD_FOUND_MESSAGE      = ITEM_ADD_FOUND_MESSAGE;\r\n    exports.ITEM_ADD_LOST_MESSAGE       = ITEM_ADD_LOST_MESSAGE;\r\n    exports.ITEM_ADD_REPLY_MESSAGE      = ITEM_ADD_REPLY_MESSAGE;\r\n    exports.ITEM_ADD_CONNECTED_LIFELINE = ITEM_ADD_CONNECTED_LIFELINE;\r\n    exports.ITEM_ADD_SELF_CONNECTOR     = ITEM_ADD_SELF_CONNECTOR;\r\n    exports.ITEM_ADD_FORWARD_MESSAGE    = ITEM_ADD_FORWARD_MESSAGE;\r\n    exports.ITEM_ADD_REVERSE_MESSAGE    = ITEM_ADD_REVERSE_MESSAGE;\r\n    exports.ITEM_ADD_OUTGOING_TRANSITION = ITEM_ADD_OUTGOING_TRANSITION;\r\n    exports.ITEM_ADD_INCOMING_TRANSITION = ITEM_ADD_INCOMING_TRANSITION;\r\n    exports.ITEM_ADD_CONNECTION_POINT_REFERENCE = ITEM_ADD_CONNECTION_POINT_REFERENCE;\r\n    exports.ITEM_ADD_INITIAL_STATE      = ITEM_ADD_INITIAL_STATE;\r\n    exports.ITEM_ADD_FINAL_STATE        = ITEM_ADD_FINAL_STATE;\r\n    exports.ITEM_ADD_CHOICE             = ITEM_ADD_CHOICE;\r\n    exports.ITEM_ADD_FORK               = ITEM_ADD_FORK;\r\n    exports.ITEM_ADD_JOIN               = ITEM_ADD_JOIN;\r\n    exports.ITEM_ADD_OUTGOING_CONTROL_FLOW = ITEM_ADD_OUTGOING_CONTROL_FLOW;\r\n    exports.ITEM_ADD_INCOMING_CONTROL_FLOW = ITEM_ADD_INCOMING_CONTROL_FLOW;\r\n    exports.ITEM_ADD_OUTGOING_OBJECT_FLOW  = ITEM_ADD_OUTGOING_OBJECT_FLOW;\r\n    exports.ITEM_ADD_INCOMING_OBJECT_FLOW  = ITEM_ADD_INCOMING_OBJECT_FLOW;\r\n    exports.ITEM_ADD_DECISION              = ITEM_ADD_DECISION;\r\n    exports.ITEM_ADD_MERGE                 = ITEM_ADD_MERGE;\r\n    exports.ITEM_ADD_ACTIVITY_FORK         = ITEM_ADD_ACTIVITY_FORK;\r\n    exports.ITEM_ADD_ACTIVITY_JOIN         = ITEM_ADD_ACTIVITY_JOIN;\r\n    exports.ITEM_ADD_INPUT_PIN             = ITEM_ADD_INPUT_PIN;\r\n    exports.ITEM_ADD_OUTPUT_PIN            = ITEM_ADD_OUTPUT_PIN;\r\n    exports.ITEM_ADD_INITIAL_NODE          = ITEM_ADD_INITIAL_NODE;\r\n    exports.ITEM_ADD_FINAL_NODE            = ITEM_ADD_FINAL_NODE;\r\n    exports.ITEM_ADD_STEREOTYPE            = ITEM_ADD_STEREOTYPE;\r\n    exports.ITEM_ADD_SUPERSTEREOTYPE       = ITEM_ADD_SUPERSTEREOTYPE;\r\n    exports.ITEM_ADD_SUBSTEREOTYPE         = ITEM_ADD_SUBSTEREOTYPE;\r\n\r\n});\r\n\n//# sourceURL=/uml/UMLQuickEdit.js"),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, browser: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define*/\r\n\r\ndefine(\'uml/UML-meta\',[\'require\',\'exports\',\'module\',\'core/MetaModelManager\',\'core/Core-meta\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var MetaModelManager  = require("core/MetaModelManager");\r\n    require("core/Core-meta");\r\n\r\n    var metaModel = {\r\n        "UMLVisibilityKind": {\r\n            "kind": "enum",\r\n            "literals": [ "public", "protected", "private", "package" ]\r\n        },\r\n        "UMLAggregationKind": {\r\n            "kind": "enum",\r\n            "literals": [ "none", "shared", "composite" ]\r\n        },\r\n        "UMLDirectionKind": {\r\n            "kind": "enum",\r\n            "literals": [ "in", "inout", "out", "return" ]\r\n        },\r\n        "UMLCallConcurrencyKind": {\r\n            "kind": "enum",\r\n            "literals": [ "sequential", "guarded", "concurrent" ]\r\n        },\r\n        "UMLConnectorKind": {\r\n            "kind": "enum",\r\n            "literals": [ "assembly", "delegation" ]\r\n        },\r\n        "UMLMessageSort": {\r\n            "kind": "enum",\r\n            "literals": [ "synchCall", "asynchCall", "asynchSignal", "createMessage", "deleteMessage", "reply" ]\r\n        },\r\n        "UMLPseudostateKind": {\r\n            "kind": "enum",\r\n            "literals": [ "initial", "deepHistory", "shallowHistory", "join", "fork", "junction", "choice", "entryPoint", "exitPoint", "terminate" ]\r\n        },\r\n        "UMLTransitionKind": {\r\n            "kind": "enum",\r\n            "literals": [ "external", "internal", "local" ]\r\n        },\r\n        "UMLEventKind": {\r\n            "kind": "enum",\r\n            "literals": [ "signal", "call", "change", "time", "anyReceive" ]\r\n        },\r\n        "UMLInteractionOperatorKind": {\r\n            "kind": "enum",\r\n            "literals": [ "alt", "opt", "par", "loop", "critical", "neg", "assert", "strict", "seq", "ignore", "consider", "break" ]\r\n        },\r\n        "UMLActionKind": {\r\n            "kind": "enum",\r\n            "literals": [ "opaque", "create", "destroy", "read", "write", "insert", "delete", "sendSignal", "acceptSignal", "triggerEvent", "acceptEvent", "structured", "timeEvent" ]\r\n        },\r\n        "UMLObjectNodeOrderingKind": {\r\n            "kind": "enum",\r\n            "literals": [ "unordered", "ordered", "LIFO", "FIFO" ]\r\n        },\r\n        "UMLExpansionKind": {\r\n            "kind": "enum",\r\n            "literals": [ "parallel", "iterative", "stream" ]\r\n        },\r\n        "UMLStereotypeDisplayKind": {\r\n            "kind": "enum",\r\n            "literals": [ "none", "label", "decoration", "decoration-label", "icon", "icon-label" ]\r\n        },\r\n        "UMLModelElement": {\r\n            "kind": "class",\r\n            "super": "ExtensibleModel",\r\n            "attributes": [\r\n                { "name": "stereotype",         "kind": "var",  "type": "UMLStereotype", "visible": true },\r\n                { "name": "visibility",         "kind": "enum", "type": "UMLVisibilityKind", "default": "public", "visible": true },\r\n                { "name": "templateParameters", "kind": "objs", "type": "UMLTemplateParameter" }\r\n            ]\r\n        },\r\n        "UMLConstraint": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "specification",       "kind": "prim", "type": "String", "visible": true, "multiline": true },\r\n                { "name": "constrainedElements", "kind": "refs", "type": "UMLModelElement", "visible": true }\r\n            ],\r\n            "view": "UMLConstraintView"\r\n        },\r\n        "UMLTemplateParameter": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "parameterType", "kind": "prim", "type": "String", "visible": true },\r\n                { "name": "defaultValue",  "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "ordering": 1101\r\n        },\r\n        "UMLFeature": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "isStatic", "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isLeaf",   "kind": "prim", "type": "Boolean", "visible": true, "default": false }\r\n            ]\r\n        },\r\n        "UMLStructuralFeature": {\r\n            "kind": "class",\r\n            "super": "UMLFeature",\r\n            "attributes": [\r\n                { "name": "type",          "kind": "var",  "type": "UMLClassifier", "visible": true },\r\n                { "name": "multiplicity",  "kind": "prim", "type": "String", "visible": true, "options": [ "0..1", "1", "0..*", "1..*", "*" ] },\r\n                { "name": "isReadOnly",    "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isOrdered",     "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isUnique",      "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "defaultValue",  "kind": "prim", "type": "String", "visible": true }\r\n            ]\r\n        },\r\n        "UMLParameter": {\r\n            "kind": "class",\r\n            "super": "UMLStructuralFeature",\r\n            "attributes": [\r\n                { "name": "direction",    "kind": "enum", "type": "UMLDirectionKind", "visible": true, "default": "in" }\r\n            ],\r\n            "ordering": 1102\r\n        },\r\n        "UMLBehavioralFeature": {\r\n            "kind": "class",\r\n            "super": "UMLFeature",\r\n            "attributes": [\r\n                { "name": "parameters",       "kind": "objs", "type": "UMLParameter", "visible": true },\r\n                { "name": "raisedExceptions", "kind": "refs", "type": "UMLClassifier", "visible": true },\r\n                { "name": "concurrency",      "kind": "enum", "type": "UMLCallConcurrencyKind", "visible": true, "default": "sequential" }\r\n            ]\r\n        },\r\n        "UMLAttribute": {\r\n            "kind": "class",\r\n            "super": "UMLStructuralFeature",\r\n            "attributes": [\r\n                { "name": "isDerived",    "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "aggregation",  "kind": "enum", "type": "UMLAggregationKind", "visible": true, "default": "none" },\r\n                { "name": "isID",         "kind": "prim", "type": "Boolean", "visible": true, "default": false }\r\n            ],\r\n            "view": "UMLPartView",\r\n            "ordering": 1105\r\n        },\r\n        "UMLOperation": {\r\n            "kind": "class",\r\n            "super": "UMLBehavioralFeature",\r\n            "attributes": [\r\n                { "name": "isQuery",        "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isAbstract",     "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "specification",  "kind": "prim", "type": "String", "visible": true, "multiline": true },\r\n                { "name": "preconditions",  "kind": "objs", "type": "UMLConstraint" },\r\n                { "name": "bodyConditions", "kind": "objs", "type": "UMLConstraint" },\r\n                { "name": "postconditions", "kind": "objs", "type": "UMLConstraint" }\r\n            ],\r\n            "ordering": 1106\r\n        },\r\n        "UMLReception": {\r\n            "kind": "class",\r\n            "super": "UMLBehavioralFeature",\r\n            "attributes": [\r\n                { "name": "signal", "kind": "ref", "type": "UMLSignal", "visible": true }\r\n            ],\r\n            "ordering": 1107\r\n        },\r\n        "UMLClassifier": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "attributes",            "kind": "objs", "type": "UMLAttribute" },\r\n                { "name": "operations",            "kind": "objs", "type": "UMLOperation" },\r\n                { "name": "receptions",            "kind": "objs", "type": "UMLReception" },\r\n                { "name": "behaviors",             "kind": "objs", "type": "UMLBehavior" },\r\n                { "name": "isAbstract",            "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isFinalSpecialization", "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isLeaf",                "kind": "prim", "type": "Boolean", "visible": true, "default": false }\r\n            ]\r\n        },\r\n        "UMLDirectedRelationship": {\r\n            "kind": "class",\r\n            "super": "DirectedRelationship",\r\n            "attributes": [\r\n                { "name": "stereotype",         "kind": "var",  "type": "UMLStereotype", "visible": true },\r\n                { "name": "visibility",         "kind": "enum", "type": "UMLVisibilityKind", "default": "public", "visible": true }\r\n            ]\r\n        },\r\n        "UMLRelationshipEnd": {\r\n            "kind": "class",\r\n            "super": "RelationshipEnd",\r\n            "attributes": [\r\n                { "name": "stereotype",   "kind": "prim", "type": "String", "visible": true },\r\n                { "name": "visibility",   "kind": "enum", "type": "UMLVisibilityKind", "default": "public", "visible": true },\r\n                { "name": "navigable",    "kind": "prim", "type": "Boolean", "visible": true, "default": true },\r\n                { "name": "aggregation",  "kind": "enum", "type": "UMLAggregationKind", "visible": true, "default": "none" },\r\n                { "name": "multiplicity", "kind": "prim", "type": "String", "visible": true, "options": [ "0..1", "1", "0..*", "1..*", "*" ] },\r\n                { "name": "defaultValue", "kind": "prim", "type": "String", "visible": true },\r\n                { "name": "isReadOnly",   "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isOrdered",    "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isUnique",     "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isDerived",    "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isID",         "kind": "prim", "type": "Boolean", "visible": true, "default": false }\r\n            ]\r\n        },\r\n        "UMLUndirectedRelationship": {\r\n            "kind": "class",\r\n            "super": "UndirectedRelationship",\r\n            "attributes": [\r\n                { "name": "stereotype", "kind": "var",  "type": "UMLStereotype", "visible": true },\r\n                { "name": "visibility", "kind": "enum", "type": "UMLVisibilityKind", "default": "public", "visible": true }\r\n            ]\r\n        },\r\n        "UMLBehavior": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "isReentrant",    "kind": "prim", "type": "Boolean", "visible": true, "default": true },\r\n                { "name": "parameters",     "kind": "objs", "type": "UMLParameter" },\r\n                { "name": "preconditions",  "kind": "objs", "type": "UMLConstraint" },\r\n                { "name": "postconditions", "kind": "objs", "type": "UMLConstraint" }\r\n            ]\r\n        },\r\n        "UMLOpaqueBehavior": {\r\n            "kind": "class",\r\n            "super": "UMLBehavior"\r\n        },\r\n        "UMLEvent": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "kind",            "kind": "enum", "type": "UMLEventKind", "visible": true, "default": "anyReceive" },\r\n                { "name": "value",           "kind": "prim", "type": "String",       "visible": true },\r\n                { "name": "expression",      "kind": "prim", "type": "String",       "visible": true },\r\n                { "name": "targetOperation", "kind": "ref",  "type": "UMLOperation", "visible": true },\r\n                { "name": "targetSignal",    "kind": "ref",  "type": "UMLSignal",    "visible": true }\r\n            ]\r\n        },\r\n        "UMLPackage": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "importedElements", "kind": "refs", "type": "UMLModelElement", "visible": true }\r\n            ],\r\n            "view": "UMLPackageView",\r\n            "ordering": 1001\r\n        },\r\n        "UMLModel": {\r\n            "kind": "class",\r\n            "super": "UMLPackage",\r\n            "attributes": [\r\n                { "name": "viewpoint", "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "view": "UMLModelView",\r\n            "ordering": 1000\r\n        },\r\n        "UMLClass": {\r\n            "kind": "class",\r\n            "super": "UMLClassifier",\r\n            "attributes": [\r\n                { "name": "isActive",   "kind": "prim", "type": "Boolean", "visible": true, "default": false }\r\n            ],\r\n            "view": "UMLClassView",\r\n            "ordering": 1201\r\n        },\r\n        "UMLInterface": {\r\n            "kind": "class",\r\n            "super": "UMLClassifier",\r\n            "view": "UMLInterfaceView",\r\n            "ordering": 1202\r\n        },\r\n        "UMLSignal": {\r\n            "kind": "class",\r\n            "super": "UMLClassifier",\r\n            "view": "UMLSignalView",\r\n            "ordering": 1203\r\n        },\r\n        "UMLDataType": {\r\n            "kind": "class",\r\n            "super": "UMLClassifier",\r\n            "view": "UMLDataTypeView",\r\n            "ordering": 1204\r\n        },\r\n        "UMLPrimitiveType": {\r\n            "kind": "class",\r\n            "super": "UMLDataType",\r\n            "view": "UMLPrimitiveTypeView",\r\n            "ordering": 1205\r\n        },\r\n        "UMLEnumerationLiteral": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "ordering": 1103\r\n        },\r\n        "UMLEnumeration": {\r\n            "kind": "class",\r\n            "super": "UMLDataType",\r\n            "attributes": [\r\n                { "name": "literals", "kind": "objs", "type": "UMLEnumerationLiteral" }\r\n            ],\r\n            "view": "UMLEnumerationView",\r\n            "ordering": 1206\r\n        },\r\n        "UMLDependency": {\r\n            "kind": "class",\r\n            "super": "UMLDirectedRelationship",\r\n            "attributes": [\r\n                { "name": "mapping", "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "view": "UMLDependencyView",\r\n            "ordering": 1806\r\n        },\r\n        "UMLAbstraction": {\r\n            "kind": "class",\r\n            "super": "UMLDependency",\r\n            "ordering": 1811\r\n        },\r\n        "UMLRealization": {\r\n            "kind": "class",\r\n            "super": "UMLAbstraction",\r\n            "ordering": 1808,\r\n            "view": "UMLRealizationView"\r\n        },\r\n        "UMLGeneralization": {\r\n            "kind": "class",\r\n            "super": "UMLDirectedRelationship",\r\n            "attributes": [\r\n                { "name": "discriminator", "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "view": "UMLGeneralizationView",\r\n            "ordering": 1807\r\n        },\r\n        "UMLInterfaceRealization": {\r\n            "kind": "class",\r\n            "super": "UMLRealization",\r\n            "view": "UMLInterfaceRealizationView",\r\n            "ordering": 1809\r\n        },\r\n        "UMLComponentRealization": {\r\n            "kind": "class",\r\n            "super": "UMLRealization",\r\n            "view": "UMLComponentRealizationView",\r\n            "ordering": 1810\r\n        },\r\n        "UMLAssociationEnd": {\r\n            "kind": "class",\r\n            "super": "UMLRelationshipEnd",\r\n            "attributes": [\r\n                { "name": "qualifiers",    "kind": "objs", "type": "UMLAttribute", "visible": true }\r\n            ],\r\n            "ordering": 1801\r\n        },\r\n        "UMLAssociation": {\r\n            "kind": "class",\r\n            "super": "UMLUndirectedRelationship",\r\n            "attributes": [\r\n                { "name": "isDerived", "kind": "prim", "type": "Boolean", "visible": true, "default": false }\r\n            ],\r\n            "view": "UMLAssociationView",\r\n            "ordering": 1802\r\n        },\r\n        "UMLAssociationClassLink": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "classSide",       "kind": "ref", "type": "UMLClass", "visible": true },\r\n                { "name": "associationSide", "kind": "ref", "type": "UMLAssociation", "visible": true }\r\n            ],\r\n            "view": "UMLAssociationClassLinkView",\r\n            "ordering": 1803\r\n        },\r\n        "UMLSlot": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "definingFeature", "kind": "ref",  "type": "UMLStructuralFeature", "visible": true },\r\n                { "name": "type",            "kind": "var",  "type": "UMLClassifier", "visible": true },\r\n                { "name": "value",           "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "ordering": 1109\r\n        },\r\n        "UMLInstance": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "classifier", "kind": "var",  "type": "UMLClassifier", "visible": true },\r\n                { "name": "slots",      "kind": "objs", "type": "UMLSlot" },\r\n                { "name": "value",      "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "ordering": 1301\r\n        },\r\n        "UMLObject": {\r\n            "kind": "class",\r\n            "super": "UMLInstance",\r\n            "view": "UMLObjectView",\r\n            "ordering": 1302\r\n        },\r\n        "UMLArtifactInstance": {\r\n            "kind": "class",\r\n            "super": "UMLInstance",\r\n            "view": "UMLArtifactInstanceView",\r\n            "ordering": 1303\r\n        },\r\n        "UMLComponentInstance": {\r\n            "kind": "class",\r\n            "super": "UMLInstance",\r\n            "view": "UMLComponentInstanceView",\r\n            "ordering": 1304\r\n        },\r\n        "UMLNodeInstance": {\r\n            "kind": "class",\r\n            "super": "UMLInstance",\r\n            "view": "UMLNodeInstanceView",\r\n            "ordering": 1305\r\n        },\r\n        "UMLLinkEnd": {\r\n            "kind": "class",\r\n            "super": "UMLRelationshipEnd",\r\n            "ordering": 1814\r\n        },\r\n        "UMLLink": {\r\n            "kind": "class",\r\n            "super": "UMLUndirectedRelationship",\r\n            "attributes": [\r\n                { "name": "association",  "kind": "ref",  "type": "UMLAssociation", "visible": true }\r\n            ],\r\n            "view": "UMLLinkView",\r\n            "ordering": 1815\r\n        },\r\n        "UMLPort": {\r\n            "kind": "class",\r\n            "super": "UMLAttribute",\r\n            "attributes": [\r\n                { "name": "isBehavior",   "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isService",    "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isConjugated", "kind": "prim", "type": "Boolean", "visible": true, "default": false }\r\n            ],\r\n            "view": "UMLPortView",\r\n            "ordering": 1104\r\n        },\r\n        "UMLConnectorEnd": {\r\n            "kind": "class",\r\n            "super": "UMLRelationshipEnd",\r\n            "ordering": 1812\r\n        },\r\n        "UMLConnector": {\r\n            "kind": "class",\r\n            "super": "UMLUndirectedRelationship",\r\n            "attributes": [\r\n                { "name": "type", "kind": "ref",  "type": "UMLAssociation",   "visible": true },\r\n                { "name": "kind", "kind": "enum", "type": "UMLConnectorKind", "visible": true, "default": "assembly" },\r\n            ],\r\n            "view": "UMLConnectorView",\r\n            "ordering": 1813\r\n        },\r\n        "UMLCollaboration": {\r\n            "kind": "class",\r\n            "super": "UMLClassifier",\r\n            "view": "UMLCollaborationView",\r\n            "ordering": 1401\r\n        },\r\n        "UMLCollaborationUse": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "type", "kind": "ref", "type": "UMLCollaboration", "visible": true }\r\n            ],\r\n            "view": "UMLCollaborationUseView",\r\n            "ordering": 1405\r\n        },\r\n        "UMLRoleBinding": {\r\n            "kind": "class",\r\n            "super": "UMLDependency",\r\n            "attributes": [\r\n                { "name": "roleName", "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "view": "UMLRoleBindingView",\r\n            "ordering": 1818\r\n        },\r\n        "UMLArtifact": {\r\n            "kind": "class",\r\n            "super": "UMLClassifier",\r\n            "attributes": [\r\n                { "name": "fileName", "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "view": "UMLArtifactView",\r\n            "ordering": 1207\r\n        },\r\n        "UMLComponent": {\r\n            "kind": "class",\r\n            "super": "UMLClassifier",\r\n            "attributes": [\r\n                { "name": "isIndirectlyInstantiated", "kind": "prim", "type": "Boolean", "visible": true, "default": true }\r\n            ],\r\n            "view": "UMLComponentView",\r\n            "ordering": 1208\r\n        },\r\n        "UMLSubsystem": {\r\n            "kind": "class",\r\n            "super": "UMLComponent",\r\n            "view": "UMLSubsystemView",\r\n            "ordering": 1002\r\n        },\r\n        "UMLNode": {\r\n            "kind": "class",\r\n            "super": "UMLClassifier",\r\n            "view": "UMLNodeView",\r\n            "ordering": 1209\r\n        },\r\n        "UMLDeployment": {\r\n            "kind": "class",\r\n            "super": "UMLDependency",\r\n            "view": "UMLDeploymentView",\r\n            "ordering": 1804\r\n        },\r\n        "UMLCommunicationPath": {\r\n            "kind": "class",\r\n            "super": "UMLAssociation",\r\n            "view": "UMLCommunicationPathView",\r\n            "ordering": 1805\r\n        },\r\n        "UMLExtensionPoint": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "location", "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "ordering": 1108\r\n        },\r\n        "UMLUseCase": {\r\n            "kind": "class",\r\n            "super": "UMLClassifier",\r\n            "attributes": [\r\n                { "name": "extensionPoints", "kind": "objs", "type": "UMLExtensionPoint", "visible": true }\r\n            ],\r\n            "view": "UMLUseCaseView",\r\n            "ordering": 1210\r\n        },\r\n        "UMLActor": {\r\n            "kind": "class",\r\n            "super": "UMLClassifier",\r\n            "view": "UMLActorView",\r\n            "ordering": 1211\r\n        },\r\n        "UMLInclude": {\r\n            "kind": "class",\r\n            "super": "UMLDirectedRelationship",\r\n            "view": "UMLIncludeView",\r\n            "ordering": 1816\r\n        },\r\n        "UMLExtend": {\r\n            "kind": "class",\r\n            "super": "UMLDirectedRelationship",\r\n            "attributes": [\r\n                { "name": "condition", "kind": "prim", "type": "String", "visible": true },\r\n                { "name": "extensionLocations", "kind": "refs", "type": "UMLExtensionPoint", "visible": true }\r\n            ],\r\n            "view": "UMLExtendView",\r\n            "ordering": 1817\r\n        },\r\n        "UMLUseCaseSubject": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "represent", "kind": "ref", "type": "UMLClassifier", "visible": true }\r\n            ],\r\n            "view": "UMLUseCaseSubjectView",\r\n            "ordering": 1003\r\n        },\r\n        "UMLStateMachine": {\r\n            "kind": "class",\r\n            "super": "UMLBehavior",\r\n            "attributes": [\r\n                { "name": "regions", "kind": "objs", "type": "UMLRegion"}\r\n            ],\r\n            "ordering": 1402\r\n        },\r\n        "UMLRegion": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "vertices",    "kind": "objs", "type": "UMLVertex" },\r\n                { "name": "transitions", "kind": "objs", "type": "UMLTransition" }\r\n            ],\r\n            "ordering": 1407\r\n        },\r\n        "UMLVertex": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement"\r\n        },\r\n        "UMLPseudostate": {\r\n            "kind": "class",\r\n            "super": "UMLVertex",\r\n            "attributes": [\r\n                { "name": "kind", "kind": "enum", "type": "UMLPseudostateKind", "visible": true }\r\n            ],\r\n            "view": "UMLPseudostateView",\r\n            "ordering": 1408\r\n        },\r\n        "UMLConnectionPointReference": {\r\n            "kind": "class",\r\n            "super": "UMLVertex",\r\n            "attributes": [\r\n                { "name": "entry", "kind": "refs", "type": "UMLPseudostate", "visible": true },\r\n                { "name": "exit",  "kind": "refs", "type": "UMLPseudostate", "visible": true }\r\n            ],\r\n            "view": "UMLConnectionPointReferenceView",\r\n            "ordering": 1408\r\n        },\r\n        "UMLState": {\r\n            "kind": "class",\r\n            "super": "UMLVertex",\r\n            "attributes": [\r\n                { "name": "regions",         "kind": "objs", "type": "UMLRegion" },\r\n                { "name": "entryActivities", "kind": "objs", "type": "UMLBehavior" },\r\n                { "name": "doActivities",    "kind": "objs", "type": "UMLBehavior" },\r\n                { "name": "exitActivities",  "kind": "objs", "type": "UMLBehavior" },\r\n                { "name": "submachine",      "kind": "ref",  "type": "UMLStateMachine", "visible": true },\r\n                { "name": "connections",     "kind": "objs", "type": "UMLConnectionPointReference" }\r\n            ],\r\n            "view": "UMLStateView",\r\n            "ordering": 1409\r\n        },\r\n        "UMLFinalState": {\r\n            "kind": "class",\r\n            "super": "UMLState",\r\n            "view": "UMLFinalStateView",\r\n            "ordering": 1410\r\n        },\r\n        "UMLTransition": {\r\n            "kind": "class",\r\n            "super": "UMLDirectedRelationship",\r\n            "attributes": [\r\n                { "name": "kind",       "kind": "enum", "type": "UMLTransitionKind", "visible": true, "default": "external" },\r\n                { "name": "guard",      "kind": "prim", "type": "String",            "visible": true },\r\n                { "name": "triggers",   "kind": "objs", "type": "UMLEvent" },\r\n                { "name": "effects",    "kind": "objs", "type": "UMLBehavior" }\r\n            ],\r\n            "view": "UMLTransitionView",\r\n            "ordering": 1819\r\n        },\r\n        "UMLActivity": {\r\n            "kind": "class",\r\n            "super": "UMLBehavior",\r\n            "attributes": [\r\n                { "name": "isReadOnly",        "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isSingleExecution", "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "nodes",             "kind": "objs", "type": "UMLActivityNode" },\r\n                { "name": "edges",             "kind": "objs", "type": "UMLActivityEdge" },\r\n                { "name": "groups",            "kind": "objs", "type": "UMLActivityGroup" }\r\n            ],\r\n            "ordering": 1404\r\n        },\r\n        "UMLPin": {\r\n            "kind": "class",\r\n            "super": "UMLStructuralFeature"\r\n        },\r\n        "UMLInputPin": {\r\n            "kind": "class",\r\n            "super": "UMLPin",\r\n            "view": "UMLInputPinView"\r\n        },\r\n        "UMLOutputPin": {\r\n            "kind": "class",\r\n            "super": "UMLPin",\r\n            "view": "UMLOutputPinView"\r\n        },\r\n        "UMLExpansionNode": {\r\n            "kind": "class",\r\n            "super": "UMLPin",\r\n            "view": "UMLExpansionNodeView",\r\n            "ordering": 1412\r\n        },\r\n        "UMLActivityNode": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement"\r\n        },\r\n        "UMLAction": {\r\n            "kind": "class",\r\n            "super": "UMLActivityNode",\r\n            "attributes": [\r\n                { "name": "kind",                "kind": "enum", "type": "UMLActionKind", "visible": true, "default": "opaque" },\r\n                { "name": "inputs",              "kind": "objs", "type": "UMLInputPin" },\r\n                { "name": "outputs",             "kind": "objs", "type": "UMLOutputPin" },\r\n                { "name": "triggers",            "kind": "objs", "type": "UMLEvent" },\r\n                { "name": "target",              "kind": "ref",  "type": "UMLModelElement", "visible": true },\r\n                { "name": "subactivity",         "kind": "ref",  "type": "UMLActivity", "visible": true },\r\n                { "name": "isLocallyReentrant",  "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "isSynchronous",       "kind": "prim", "type": "Boolean", "visible": true, "default": true },\r\n                { "name": "language",            "kind": "prim", "type": "String",  "visible": true },\r\n                { "name": "body",                "kind": "prim", "type": "String",  "visible": true, "multiline": true },\r\n                { "name": "localPreconditions",  "kind": "objs", "type": "UMLConstraint" },\r\n                { "name": "localPostconditions", "kind": "objs", "type": "UMLConstraint" }\r\n            ],\r\n            "view": "UMLActionView",\r\n            "ordering": 1411\r\n        },\r\n        "UMLStructuredActivityNode": {\r\n            "kind": "class",\r\n            "super": "UMLAction",\r\n            "attributes": [\r\n                { "name": "mustIsolate",  "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "nodes", "kind": "objs", "type": "UMLActivityNode" },\r\n                { "name": "edges", "kind": "objs", "type": "UMLActivityEdge" }\r\n            ],\r\n            "view": "UMLStructuredActivityNodeView",\r\n            "ordering": 1412\r\n        },\r\n        "UMLExpansionRegion": {\r\n            "kind": "class",\r\n            "super": "UMLStructuredActivityNode",\r\n            "attributes": [\r\n                { "name": "mode",  "kind": "enum", "type": "UMLExpansionKind", "visible": true, "default": "iterative" }\r\n            ],\r\n            "view": "UMLExpansionRegionView",\r\n            "ordering": 1412\r\n        },\r\n        "UMLObjectNode": {\r\n            "kind": "class",\r\n            "super": "UMLActivityNode",\r\n            "attributes": [\r\n                { "name": "type",          "kind": "var",  "type": "UMLClassifier", "visible": true },\r\n                { "name": "isControlType", "kind": "prim", "type": "Boolean", "visible": true, "default": false },\r\n                { "name": "ordering",      "kind": "enum", "type": "UMLObjectNodeOrderingKind", "visible": true }\r\n            ],\r\n            "view": "UMLObjectNodeView",\r\n            "ordering": 1412\r\n        },\r\n        "UMLCentralBufferNode": {\r\n            "kind": "class",\r\n            "super": "UMLObjectNode",\r\n            "view": "UMLCentralBufferNodeView",\r\n            "ordering": 1412\r\n        },\r\n        "UMLDataStoreNode": {\r\n            "kind": "class",\r\n            "super": "UMLCentralBufferNode",\r\n            "view": "UMLDataStoreNodeView",\r\n            "ordering": 1412\r\n        },\r\n        "UMLControlNode": {\r\n            "kind": "class",\r\n            "super": "UMLActivityNode",\r\n            "ordering": 1413\r\n        },\r\n        "UMLInitialNode": {\r\n            "kind": "class",\r\n            "super": "UMLControlNode",\r\n            "view": "UMLControlNodeView",\r\n            "ordering": 1414\r\n        },\r\n        "UMLFinalNode": {\r\n            "kind": "class",\r\n            "super": "UMLControlNode",\r\n            "view": "UMLControlNodeView",\r\n            "ordering": 1415\r\n        },\r\n        "UMLActivityFinalNode": {\r\n            "kind": "class",\r\n            "super": "UMLFinalNode",\r\n            "view": "UMLControlNodeView",\r\n            "ordering": 1416\r\n        },\r\n        "UMLFlowFinalNode": {\r\n            "kind": "class",\r\n            "super": "UMLFinalNode",\r\n            "view": "UMLControlNodeView",\r\n            "ordering": 1417\r\n        },\r\n        "UMLForkNode": {\r\n            "kind": "class",\r\n            "super": "UMLControlNode",\r\n            "view": "UMLControlNodeView",\r\n            "ordering": 1418\r\n        },\r\n        "UMLJoinNode": {\r\n            "kind": "class",\r\n            "super": "UMLControlNode",\r\n            "view": "UMLControlNodeView",\r\n            "ordering": 1419\r\n        },\r\n        "UMLMergeNode": {\r\n            "kind": "class",\r\n            "super": "UMLControlNode",\r\n            "view": "UMLControlNodeView",\r\n            "ordering": 1420\r\n        },\r\n        "UMLDecisionNode": {\r\n            "kind": "class",\r\n            "super": "UMLControlNode",\r\n            "view": "UMLControlNodeView",\r\n            "ordering": 1421\r\n        },\r\n        "UMLActivityGroup": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "subgroups", "kind": "objs", "type": "UMLActivityGroup" },\r\n                { "name": "nodes",     "kind": "objs", "type": "UMLActivityNode" },\r\n                { "name": "edges",     "kind": "objs", "type": "UMLActivityEdge" }\r\n            ],\r\n            "ordering": 1422\r\n        },\r\n        "UMLActivityPartition": {\r\n            "kind": "class",\r\n            "super": "UMLActivityGroup",\r\n            "view": "UMLSwimlaneView",\r\n            "ordering": 1423\r\n        },\r\n        "UMLInterruptibleActivityRegion": {\r\n            "kind": "class",\r\n            "super": "UMLActivityGroup",\r\n            "view": "UMLInterruptibleActivityRegionView",\r\n            "ordering": 1423\r\n        },\r\n        "UMLExceptionHandler": {\r\n            "kind": "class",\r\n            "super": "UMLDirectedRelationship",\r\n            "view": "UMLExceptionHandlerView",\r\n            "attributes": [\r\n                { "name": "exceptionTypes", "kind": "refs", "type": "UMLClassifier",   "visible": true },\r\n                { "name": "handlerBody",    "kind": "ref",  "type": "UMLActivityNode", "visible": true }\r\n            ],\r\n            "ordering": 1820\r\n        },\r\n        "UMLActivityEdge": {\r\n            "kind": "class",\r\n            "super": "UMLDirectedRelationship",\r\n            "attributes": [\r\n                { "name": "guard",  "kind": "prim", "type": "String", "visible": true },\r\n                { "name": "weight", "kind": "prim", "type": "String", "visible": true }\r\n            ]\r\n        },\r\n        "UMLControlFlow": {\r\n            "kind": "class",\r\n            "super": "UMLActivityEdge",\r\n            "view": "UMLControlFlowView",\r\n            "ordering": 1820\r\n        },\r\n        "UMLObjectFlow": {\r\n            "kind": "class",\r\n            "super": "UMLActivityEdge",\r\n            "view": "UMLObjectFlowView",\r\n            "ordering": 1821\r\n        },\r\n        "UMLActivityInterrupt": {\r\n            "kind": "class",\r\n            "super": "UMLActivityEdge",\r\n            "view": "UMLActivityInterruptView",\r\n            "ordering": 1821\r\n        },\r\n        "UMLInteractionFragment": {\r\n            "kind": "class",\r\n            "super": "UMLBehavior"\r\n        },\r\n        "UMLInteraction": {\r\n            "kind": "class",\r\n            "super": "UMLInteractionFragment",\r\n            "attributes": [\r\n                { "name": "messages",     "kind": "objs", "type": "UMLMessage" },\r\n                { "name": "participants", "kind": "objs", "type": "UMLMessageEndpoint" },\r\n                { "name": "fragments",    "kind": "objs", "type": "UMLInteractionFragment" }\r\n            ],\r\n            "ordering": 1403\r\n        },\r\n        "UMLStateInvariant": {\r\n            "kind": "class",\r\n            "super": "UMLInteractionFragment",\r\n            "attributes": [\r\n                { "name": "covered",   "kind": "ref",  "type": "UMLLifeline", "visible": true },\r\n                { "name": "invariant", "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "view": "UMLStateInvariantView",\r\n            "ordering": 1424\r\n        },\r\n        "UMLContinuation": {\r\n            "kind": "class",\r\n            "super": "UMLInteractionFragment",\r\n            "attributes": [\r\n                { "name": "setting", "kind": "prim", "type": "Boolean", "visible": true, "default": false }\r\n            ],\r\n            "view": "UMLContinuationView",\r\n            "ordering": 1425\r\n        },\r\n        "UMLInteractionOperand": {\r\n            "kind": "class",\r\n            "super": "UMLInteractionFragment",\r\n            "attributes": [\r\n                { "name": "guard", "kind": "prim", "type": "String", "visible": true }\r\n            ],\r\n            "ordering": 1427\r\n        },\r\n        "UMLCombinedFragment": {\r\n            "kind": "class",\r\n            "super": "UMLInteractionFragment",\r\n            "attributes": [\r\n                { "name": "interactionOperator",  "kind": "enum", "type": "UMLInteractionOperatorKind", "visible": true },\r\n                { "name": "operands",             "kind": "objs", "type": "UMLInteractionOperand" }\r\n            ],\r\n            "view": "UMLCombinedFragmentView",\r\n            "ordering": 1426\r\n        },\r\n        "UMLInteractionUse": {\r\n            "kind": "class",\r\n            "super": "UMLInteractionFragment",\r\n            "attributes": [\r\n                { "name": "refersTo",             "kind": "ref",  "type": "UMLInteraction", "visible": true },\r\n                { "name": "arguments",            "kind": "prim", "type": "String", "visible": true },\r\n                { "name": "returnValue",          "kind": "prim", "type": "String", "visible": true },\r\n                { "name": "returnValueRecipient", "kind": "ref",  "type": "UMLStructuralFeature", "visible": true }\r\n            ],\r\n            "view": "UMLInteractionUseView",\r\n            "ordering": 1406\r\n        },\r\n        "UMLMessageEndpoint": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement"\r\n        },\r\n        "UMLLifeline": {\r\n            "kind": "class",\r\n            "super": "UMLMessageEndpoint",\r\n            "attributes": [\r\n                { "name": "selector",        "kind": "prim", "type": "String", "visible": true },\r\n                { "name": "represent",       "kind": "ref",  "type": "UMLStructuralFeature", "visible": true },\r\n                { "name": "isMultiInstance", "kind": "prim", "type": "Boolean", "visible": true }\r\n            ],\r\n            "view": "UMLCommLifelineView",\r\n            "ordering": 1428\r\n        },\r\n        "UMLGate": {\r\n            "kind": "class",\r\n            "super": "UMLMessageEndpoint",\r\n            "view": "UMLGateView",\r\n            "ordering": 1429\r\n        },\r\n        "UMLEndpoint": {\r\n            "kind": "class",\r\n            "super": "UMLMessageEndpoint",\r\n            "view": "UMLEndpointView",\r\n            "ordering": 1430\r\n        },\r\n        "UMLMessage": {\r\n            "kind": "class",\r\n            "super": "UMLDirectedRelationship",\r\n            "attributes": [\r\n                { "name": "messageSort",           "kind": "enum", "type": "UMLMessageSort",  "visible": true },\r\n                { "name": "signature",             "kind": "ref",  "type": "UMLModelElement", "visible": true },\r\n                { "name": "connector",             "kind": "ref",  "type": "UMLConnector",    "visible": true },\r\n                { "name": "arguments",             "kind": "prim", "type": "String",          "visible": true },\r\n                { "name": "assignmentTarget",      "kind": "prim", "type": "String",          "visible": true },\r\n                { "name": "guard",                 "kind": "prim", "type": "String",          "visible": true },\r\n                { "name": "iteration",             "kind": "prim", "type": "String",          "visible": true },\r\n                { "name": "isConcurrentIteration", "kind": "prim", "type": "Boolean",         "visible": true }\r\n            ],\r\n            "ordering": 1822\r\n        },\r\n        "UMLProfile": {\r\n            "kind": "class",\r\n            "super": "UMLPackage",\r\n            "view": "UMLProfileView",\r\n            "ordering": 1901\r\n        },\r\n        "UMLImage": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "attributes": [\r\n                { "name": "width",     "kind": "prim", "type": "Integer",  "visible": true },\r\n                { "name": "height",    "kind": "prim", "type": "Integer",  "visible": true },\r\n                { "name": "content",   "kind": "prim", "type": "String",   "visible": true, "multiline": true },\r\n                { "name": "smallIcon", "kind": "prim", "type": "String",   "visible": true, "multiline": true }\r\n            ],\r\n            "ordering": 1902\r\n        },\r\n        "UMLStereotype": {\r\n            "kind": "class",\r\n            "super": "UMLClass",\r\n            "attributes": [\r\n                { "name": "icon",    "kind": "obj",  "type": "UMLImage", "visible": true, "expand": true }\r\n            ],\r\n            "view": "UMLStereotypeView",\r\n            "ordering": 1903\r\n        },\r\n        "UMLMetaClass": {\r\n            "kind": "class",\r\n            "super": "UMLModelElement",\r\n            "view": "UMLMetaClassView",\r\n            "ordering": 1904\r\n        },\r\n        "UMLExtension": {\r\n            "kind": "class",\r\n            "super": "UMLDirectedRelationship",\r\n            "view": "UMLExtensionView",\r\n            "ordering": 1905\r\n        },\r\n        "UMLDiagram": {\r\n            "kind": "class",\r\n            "super": "Diagram",\r\n            "views": [\r\n                "UMLCustomTextView",\r\n                "ShapeView",\r\n                "UMLNoteLinkView",\r\n                "UMLConstraintLinkView",\r\n                "UMLFrameView"\r\n            ]\r\n        },\r\n        "UMLCompartmentView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "UMLNameCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView",\r\n            "attributes": [\r\n                { "name": "stereotypeLabel", "kind": "ref", "type": "LabelView", "embedded": "subViews" },\r\n                { "name": "nameLabel",       "kind": "ref", "type": "LabelView", "embedded": "subViews" },\r\n                { "name": "namespaceLabel",  "kind": "ref", "type": "LabelView", "embedded": "subViews" },\r\n                { "name": "propertyLabel",   "kind": "ref", "type": "LabelView", "embedded": "subViews" },\r\n                { "name": "wordWrap",        "kind": "prim", "type": "Boolean", "default": false, "transient": true }\r\n            ]\r\n        },\r\n        "UMLAttributeView": {\r\n            "kind": "class",\r\n            "super": "LabelView"\r\n        },\r\n        "UMLAttributeCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLOperationView": {\r\n            "kind": "class",\r\n            "super": "LabelView"\r\n        },\r\n        "UMLOperationCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLReceptionView": {\r\n            "kind": "class",\r\n            "super": "LabelView"\r\n        },\r\n        "UMLReceptionCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLTemplateParameterView": {\r\n            "kind": "class",\r\n            "super": "LabelView"\r\n        },\r\n        "UMLTemplateParameterCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLGeneralNodeView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "stereotypeDisplay", "kind": "enum", "type": "UMLStereotypeDisplayKind", "default": "label" },\r\n                { "name": "showVisibility",    "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "showNamespace",     "kind": "prim", "type": "Boolean", "default": false },\r\n                { "name": "showProperty",      "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "showType",          "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "nameCompartment",   "kind": "ref",  "type": "UMLNameCompartmentView", "embedded": "subViews" },\r\n                { "name": "wordWrap",          "kind": "prim", "type": "Boolean", "default": false }\r\n            ]\r\n        },\r\n        "UMLFloatingNodeView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "nameLabel",       "kind": "ref", "type": "NodeLabelView", "embedded": "subViews" },\r\n                { "name": "stereotypeLabel", "kind": "ref", "type": "NodeLabelView", "embedded": "subViews" },\r\n                { "name": "propertyLabel",   "kind": "ref", "type": "NodeLabelView", "embedded": "subViews" },\r\n                { "name": "showProperty",    "kind": "prim", "type": "Boolean", "default": true }\r\n            ]\r\n        },\r\n        "UMLGeneralEdgeView": {\r\n            "kind": "class",\r\n            "super": "EdgeView",\r\n            "attributes": [\r\n                { "name": "stereotypeDisplay", "kind": "enum", "type": "UMLStereotypeDisplayKind", "default": "label" },\r\n                { "name": "showVisibility",    "kind": "prim", "type": "Boolean", "default": false },\r\n                { "name": "showProperty",      "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "nameLabel",         "kind": "ref",  "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "stereotypeLabel",   "kind": "ref",  "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "propertyLabel",     "kind": "ref",  "type": "EdgeLabelView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLClassifierView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView",\r\n            "attributes": [\r\n                { "name": "suppressAttributes",           "kind": "prim", "type": "Boolean", "default": false },\r\n                { "name": "suppressOperations",           "kind": "prim", "type": "Boolean", "default": false },\r\n                { "name": "suppressReceptions",           "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "showMultiplicity",             "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "showOperationSignature",       "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "attributeCompartment",         "kind": "ref",  "type": "UMLAttributeCompartmentView", "embedded": "subViews" },\r\n                { "name": "operationCompartment",         "kind": "ref",  "type": "UMLOperationCompartmentView", "embedded": "subViews" },\r\n                { "name": "receptionCompartment",         "kind": "ref",  "type": "UMLReceptionCompartmentView", "embedded": "subViews" },\r\n                { "name": "templateParameterCompartment", "kind": "ref",  "type": "UMLTemplateParameterCompartmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLUndirectedRelationshipView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView",\r\n            "attributes": [\r\n                { "name": "showMultiplicity",          "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "showType",                  "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "tailRoleNameLabel",         "kind": "ref", "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "tailPropertyLabel",         "kind": "ref", "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "tailMultiplicityLabel",     "kind": "ref", "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "headRoleNameLabel",         "kind": "ref", "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "headPropertyLabel",         "kind": "ref", "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "headMultiplicityLabel",     "kind": "ref", "type": "EdgeLabelView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLClassDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram",\r\n            "views": [\r\n                "UMLPackageView",\r\n                "UMLModelView",\r\n                "UMLSubsystemView",\r\n                "UMLContainmentView",\r\n                "UMLClassView",\r\n                "UMLInterfaceView",\r\n                "UMLSignalView",\r\n                "UMLDataTypeView",\r\n                "UMLPrimitiveTypeView",\r\n                "UMLEnumerationView",\r\n                "UMLDependencyView",\r\n                "UMLGeneralizationView",\r\n                "UMLRealizationView",\r\n                "UMLInterfaceRealizationView",\r\n                "UMLAssociationView",\r\n                "UMLAssociationClassLinkView",\r\n                "UMLPortView",\r\n                "UMLPartView",\r\n                "UMLConnectorView",\r\n                "UMLCollaborationView",\r\n                "UMLCollaborationUseView",\r\n                "UMLRoleBindingView",\r\n                "UMLObjectView",\r\n                "UMLLinkView",\r\n                "UMLArtifactView",\r\n                "UMLComponentView",\r\n                "UMLArtifactInstanceView",\r\n                "UMLComponentInstanceView",\r\n                "UMLComponentRealizationView",\r\n                "UMLNodeView",\r\n                "UMLNodeInstanceView",\r\n                "UMLDeploymentView",\r\n                "UMLCommunicationPathView",\r\n                "UMLUseCaseView",\r\n                "UMLActorView",\r\n                "UMLUseCaseSubjectView",\r\n                "UMLExtendView",\r\n                "UMLIncludeView",\r\n                "UMLProfileView",\r\n                "UMLExtensionView",\r\n                "UMLMetaClassView",\r\n                "UMLStereotypeView"\r\n            ]\r\n        },\r\n        "UMLClassView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView"\r\n        },\r\n        "UMLInterfaceView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView"\r\n        },\r\n        "UMLSignalView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView"\r\n        },\r\n        "UMLDataTypeView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView"\r\n        },\r\n        "UMLPrimitiveTypeView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView"\r\n        },\r\n        "UMLEnumerationLiteralView": {\r\n            "kind": "class",\r\n            "super": "LabelView",\r\n            "attributes": []\r\n        },\r\n        "UMLEnumerationLiteralCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLEnumerationView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView",\r\n            "attributes": [\r\n                { "name": "suppressLiterals",              "kind": "prim", "type": "Boolean", "default": false },\r\n                { "name": "enumerationLiteralCompartment", "kind": "ref",  "type": "UMLEnumerationLiteralCompartmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLGeneralizationView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLDependencyView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLRealizationView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLInterfaceRealizationView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLQualifierCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView",\r\n            "attributes": []\r\n        },\r\n        "UMLAssociationView": {\r\n            "kind": "class",\r\n            "super": "UMLUndirectedRelationshipView",\r\n            "attributes": [\r\n                { "name": "tailQualifiersCompartment", "kind": "ref", "type": "UMLQualifierCompartmentView", "embedded": "subViews" },\r\n                { "name": "headQualifiersCompartment", "kind": "ref", "type": "UMLQualifierCompartmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLAssociationClassLinkView": {\r\n            "kind": "class",\r\n            "super": "EdgeView"\r\n        },\r\n        "UMLPackageDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram",\r\n            "views": [\r\n                "UMLPackageView",\r\n                "UMLModelView",\r\n                "UMLSubsystemView",\r\n                "UMLContainmentView",\r\n                "UMLClassView",\r\n                "UMLInterfaceView",\r\n                "UMLSignalView",\r\n                "UMLDataTypeView",\r\n                "UMLPrimitiveTypeView",\r\n                "UMLEnumerationView",\r\n                "UMLDependencyView",\r\n                "UMLGeneralizationView",\r\n                "UMLRealizationView",\r\n                "UMLInterfaceRealizationView",\r\n                "UMLAssociationView",\r\n                "UMLAssociationClassLinkView",\r\n                "UMLPortView",\r\n                "UMLPartView",\r\n                "UMLConnectorView",\r\n                "UMLCollaborationView",\r\n                "UMLCollaborationUseView",\r\n                "UMLRoleBindingView",\r\n                "UMLObjectView",\r\n                "UMLLinkView",\r\n                "UMLArtifactView",\r\n                "UMLComponentView",\r\n                "UMLArtifactInstanceView",\r\n                "UMLComponentInstanceView",\r\n                "UMLComponentRealizationView",\r\n                "UMLNodeView",\r\n                "UMLNodeInstanceView",\r\n                "UMLDeploymentView",\r\n                "UMLCommunicationPathView",\r\n                "UMLUseCaseView",\r\n                "UMLActorView",\r\n                "UMLUseCaseSubjectView",\r\n                "UMLExtendView",\r\n                "UMLIncludeView",\r\n                "UMLProfileView",\r\n                "UMLExtensionView",\r\n                "UMLMetaClassView",\r\n                "UMLStereotypeView"\r\n            ]\r\n        },\r\n        "UMLPackageView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLModelView": {\r\n            "kind": "class",\r\n            "super": "UMLPackageView"\r\n        },\r\n        "UMLSubsystemView": {\r\n            "kind": "class",\r\n            "super": "UMLPackageView"\r\n        },\r\n        "UMLContainmentView": {\r\n            "kind": "class",\r\n            "super": "EdgeView"\r\n        },\r\n        "UMLCompositeStructureDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram",\r\n            "views": [\r\n                "UMLPackageView",\r\n                "UMLModelView",\r\n                "UMLSubsystemView",\r\n                "UMLContainmentView",\r\n                "UMLClassView",\r\n                "UMLInterfaceView",\r\n                "UMLSignalView",\r\n                "UMLDataTypeView",\r\n                "UMLPrimitiveTypeView",\r\n                "UMLEnumerationView",\r\n                "UMLDependencyView",\r\n                "UMLGeneralizationView",\r\n                "UMLRealizationView",\r\n                "UMLInterfaceRealizationView",\r\n                "UMLAssociationView",\r\n                "UMLAssociationClassLinkView",\r\n                "UMLPortView",\r\n                "UMLPartView",\r\n                "UMLConnectorView",\r\n                "UMLCollaborationView",\r\n                "UMLCollaborationUseView",\r\n                "UMLRoleBindingView",\r\n                "UMLObjectView",\r\n                "UMLLinkView",\r\n                "UMLArtifactView",\r\n                "UMLComponentView",\r\n                "UMLArtifactInstanceView",\r\n                "UMLComponentInstanceView",\r\n                "UMLComponentRealizationView",\r\n                "UMLNodeView",\r\n                "UMLNodeInstanceView",\r\n                "UMLDeploymentView",\r\n                "UMLCommunicationPathView",\r\n                "UMLUseCaseView",\r\n                "UMLActorView",\r\n                "UMLUseCaseSubjectView",\r\n                "UMLExtendView",\r\n                "UMLIncludeView",\r\n                "UMLProfileView",\r\n                "UMLExtensionView",\r\n                "UMLMetaClassView",\r\n                "UMLStereotypeView"\r\n            ]\r\n        },\r\n        "UMLPortView": {\r\n            "kind": "class",\r\n            "super": "UMLFloatingNodeView",\r\n            "attributes": [\r\n                { "name": "showVisibility",   "kind": "prim", "type": "Boolean", "default": false },\r\n                { "name": "showType",         "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "showMultiplicity", "kind": "prim", "type": "Boolean", "default": true }\r\n            ]\r\n        },\r\n        "UMLPartView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView",\r\n            "attributes": [\r\n                { "name": "showMultiplicity", "kind": "prim", "type": "Boolean", "default": true }\r\n            ]\r\n        },\r\n        "UMLConnectorView": {\r\n            "kind": "class",\r\n            "super": "UMLUndirectedRelationshipView"\r\n        },\r\n        "UMLCollaborationView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView",\r\n            "attributes": [\r\n                { "name": "templateParameterCompartment", "kind": "ref", "type": "UMLTemplateParameterCompartmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLCollaborationUseView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLRoleBindingView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView",\r\n            "attributes": [\r\n                { "name": "roleNameLabel", "kind": "ref", "type": "EdgeLabelView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLObjectDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram",\r\n            "views": [\r\n                "UMLPackageView",\r\n                "UMLModelView",\r\n                "UMLSubsystemView",\r\n                "UMLContainmentView",\r\n                "UMLClassView",\r\n                "UMLInterfaceView",\r\n                "UMLSignalView",\r\n                "UMLDataTypeView",\r\n                "UMLPrimitiveTypeView",\r\n                "UMLEnumerationView",\r\n                "UMLDependencyView",\r\n                "UMLGeneralizationView",\r\n                "UMLRealizationView",\r\n                "UMLInterfaceRealizationView",\r\n                "UMLAssociationView",\r\n                "UMLAssociationClassLinkView",\r\n                "UMLPortView",\r\n                "UMLPartView",\r\n                "UMLConnectorView",\r\n                "UMLCollaborationView",\r\n                "UMLCollaborationUseView",\r\n                "UMLRoleBindingView",\r\n                "UMLObjectView",\r\n                "UMLLinkView",\r\n                "UMLArtifactView",\r\n                "UMLComponentView",\r\n                "UMLArtifactInstanceView",\r\n                "UMLComponentInstanceView",\r\n                "UMLComponentRealizationView",\r\n                "UMLNodeView",\r\n                "UMLNodeInstanceView",\r\n                "UMLDeploymentView",\r\n                "UMLCommunicationPathView",\r\n                "UMLUseCaseView",\r\n                "UMLActorView",\r\n                "UMLUseCaseSubjectView",\r\n                "UMLExtendView",\r\n                "UMLIncludeView",\r\n                "UMLProfileView",\r\n                "UMLExtensionView",\r\n                "UMLMetaClassView",\r\n                "UMLStereotypeView"\r\n            ]\r\n        },\r\n        "UMLSlotView": {\r\n            "kind": "class",\r\n            "super": "LabelView"\r\n        },\r\n        "UMLSlotCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLObjectView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView",\r\n            "attributes": [\r\n                { "name": "slotCompartment", "kind": "ref", "type": "UMLSlotCompartmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLLinkView": {\r\n            "kind": "class",\r\n            "super": "UMLUndirectedRelationshipView"\r\n        },\r\n        "UMLComponentDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram",\r\n            "views": [\r\n                "UMLPackageView",\r\n                "UMLModelView",\r\n                "UMLSubsystemView",\r\n                "UMLContainmentView",\r\n                "UMLClassView",\r\n                "UMLInterfaceView",\r\n                "UMLSignalView",\r\n                "UMLDataTypeView",\r\n                "UMLPrimitiveTypeView",\r\n                "UMLEnumerationView",\r\n                "UMLDependencyView",\r\n                "UMLGeneralizationView",\r\n                "UMLRealizationView",\r\n                "UMLInterfaceRealizationView",\r\n                "UMLAssociationView",\r\n                "UMLAssociationClassLinkView",\r\n                "UMLPortView",\r\n                "UMLPartView",\r\n                "UMLConnectorView",\r\n                "UMLCollaborationView",\r\n                "UMLCollaborationUseView",\r\n                "UMLRoleBindingView",\r\n                "UMLObjectView",\r\n                "UMLLinkView",\r\n                "UMLArtifactView",\r\n                "UMLComponentView",\r\n                "UMLArtifactInstanceView",\r\n                "UMLComponentInstanceView",\r\n                "UMLComponentRealizationView",\r\n                "UMLNodeView",\r\n                "UMLNodeInstanceView",\r\n                "UMLDeploymentView",\r\n                "UMLCommunicationPathView",\r\n                "UMLUseCaseView",\r\n                "UMLActorView",\r\n                "UMLUseCaseSubjectView",\r\n                "UMLExtendView",\r\n                "UMLIncludeView",\r\n                "UMLProfileView",\r\n                "UMLExtensionView",\r\n                "UMLMetaClassView",\r\n                "UMLStereotypeView"\r\n            ]\r\n        },\r\n        "UMLArtifactView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView"\r\n        },\r\n        "UMLArtifactInstanceView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLComponentView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView"\r\n        },\r\n        "UMLComponentInstanceView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLComponentRealizationView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLDeploymentDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram",\r\n            "views": [\r\n                "UMLPackageView",\r\n                "UMLModelView",\r\n                "UMLSubsystemView",\r\n                "UMLContainmentView",\r\n                "UMLClassView",\r\n                "UMLInterfaceView",\r\n                "UMLSignalView",\r\n                "UMLDataTypeView",\r\n                "UMLPrimitiveTypeView",\r\n                "UMLEnumerationView",\r\n                "UMLDependencyView",\r\n                "UMLGeneralizationView",\r\n                "UMLRealizationView",\r\n                "UMLInterfaceRealizationView",\r\n                "UMLAssociationView",\r\n                "UMLAssociationClassLinkView",\r\n                "UMLPortView",\r\n                "UMLPartView",\r\n                "UMLConnectorView",\r\n                "UMLCollaborationView",\r\n                "UMLCollaborationUseView",\r\n                "UMLRoleBindingView",\r\n                "UMLObjectView",\r\n                "UMLLinkView",\r\n                "UMLArtifactView",\r\n                "UMLComponentView",\r\n                "UMLArtifactInstanceView",\r\n                "UMLComponentInstanceView",\r\n                "UMLComponentRealizationView",\r\n                "UMLNodeView",\r\n                "UMLNodeInstanceView",\r\n                "UMLDeploymentView",\r\n                "UMLCommunicationPathView",\r\n                "UMLUseCaseView",\r\n                "UMLActorView",\r\n                "UMLUseCaseSubjectView",\r\n                "UMLExtendView",\r\n                "UMLIncludeView",\r\n                "UMLProfileView",\r\n                "UMLExtensionView",\r\n                "UMLMetaClassView",\r\n                "UMLStereotypeView"\r\n            ]\r\n        },\r\n        "UMLNodeView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView"\r\n        },\r\n        "UMLNodeInstanceView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLDeploymentView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLCommunicationPathView": {\r\n            "kind": "class",\r\n            "super": "UMLAssociationView"\r\n        },\r\n        "UMLUseCaseDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram",\r\n            "views": [\r\n                "UMLPackageView",\r\n                "UMLModelView",\r\n                "UMLSubsystemView",\r\n                "UMLContainmentView",\r\n                "UMLClassView",\r\n                "UMLInterfaceView",\r\n                "UMLSignalView",\r\n                "UMLDataTypeView",\r\n                "UMLPrimitiveTypeView",\r\n                "UMLEnumerationView",\r\n                "UMLDependencyView",\r\n                "UMLGeneralizationView",\r\n                "UMLRealizationView",\r\n                "UMLInterfaceRealizationView",\r\n                "UMLAssociationView",\r\n                "UMLAssociationClassLinkView",\r\n                "UMLPortView",\r\n                "UMLPartView",\r\n                "UMLConnectorView",\r\n                "UMLCollaborationView",\r\n                "UMLCollaborationUseView",\r\n                "UMLRoleBindingView",\r\n                "UMLObjectView",\r\n                "UMLLinkView",\r\n                "UMLArtifactView",\r\n                "UMLComponentView",\r\n                "UMLArtifactInstanceView",\r\n                "UMLComponentInstanceView",\r\n                "UMLComponentRealizationView",\r\n                "UMLNodeView",\r\n                "UMLNodeInstanceView",\r\n                "UMLDeploymentView",\r\n                "UMLCommunicationPathView",\r\n                "UMLUseCaseView",\r\n                "UMLActorView",\r\n                "UMLUseCaseSubjectView",\r\n                "UMLExtendView",\r\n                "UMLIncludeView",\r\n                "UMLProfileView",\r\n                "UMLExtensionView",\r\n                "UMLMetaClassView",\r\n                "UMLStereotypeView"\r\n            ]\r\n        },\r\n        "UMLExtensionPointView": {\r\n            "kind": "class",\r\n            "super": "LabelView",\r\n            "attributes": []\r\n        },\r\n        "UMLExtensionPointCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLUseCaseView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView",\r\n            "attributes": [\r\n                { "name": "extensionPointCompartment", "kind": "ref",  "type": "UMLExtensionPointCompartmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLActorView": {\r\n            "kind": "class",\r\n            "super": "UMLClassifierView"\r\n        },\r\n        "UMLIncludeView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLExtendView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLUseCaseSubjectView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLStatechartDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram"\r\n        },\r\n        "UMLPseudostateView": {\r\n            "kind": "class",\r\n            "super": "UMLFloatingNodeView"\r\n        },\r\n        "UMLFinalStateView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "UMLConnectionPointReferenceView": {\r\n            "kind": "class",\r\n            "super": "UMLFloatingNodeView"\r\n        },\r\n        "UMLInternalActivityView": {\r\n            "kind": "class",\r\n            "super": "LabelView"\r\n        },\r\n        "UMLInternalActivityCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLInternalTransitionView": {\r\n            "kind": "class",\r\n            "super": "LabelView"\r\n        },\r\n        "UMLInternalTransitionCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLRegionView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "UMLDecompositionCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLStateView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView",\r\n            "attributes": [\r\n                { "name": "internalActivityCompartment",   "kind": "ref",  "type": "UMLInternalActivityCompartmentView", "embedded": "subViews" },\r\n                { "name": "internalTransitionCompartment", "kind": "ref",  "type": "UMLInternalTransitionCompartmentView", "embedded": "subViews" },\r\n                { "name": "decompositionCompartment",      "kind": "ref",  "type": "UMLDecompositionCompartmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLTransitionView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLActivityDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram"\r\n        },\r\n        "UMLPinView": {\r\n            "kind": "class",\r\n            "super": "UMLFloatingNodeView"\r\n        },\r\n        "UMLInputPinView": {\r\n            "kind": "class",\r\n            "super": "UMLPinView"\r\n        },\r\n        "UMLOutputPinView": {\r\n            "kind": "class",\r\n            "super": "UMLPinView"\r\n        },\r\n        "UMLExpansionNodeView": {\r\n            "kind": "class",\r\n            "super": "UMLPinView"\r\n        },\r\n        "UMLActionView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLStructuredActivityNodeView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLExpansionRegionView": {\r\n            "kind": "class",\r\n            "super": "UMLStructuredActivityNodeView"\r\n        },\r\n        "UMLObjectNodeView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLCentralBufferNodeView": {\r\n            "kind": "class",\r\n            "super": "UMLObjectNodeView"\r\n        },\r\n        "UMLDataStoreNodeView": {\r\n            "kind": "class",\r\n            "super": "UMLObjectNodeView"\r\n        },\r\n        "UMLControlNodeView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "UMLControlFlowView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLObjectFlowView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "UMLZigZagAdornmentView": {\r\n            "kind": "class",\r\n            "super": "EdgeNodeView"\r\n        },\r\n        "UMLExceptionHandlerView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView",\r\n            "attributes": [\r\n                { "name": "adornment",  "kind": "ref",  "type": "UMLZigZagAdornmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLActivityInterruptView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView",\r\n            "attributes": [\r\n                { "name": "adornment",  "kind": "ref",  "type": "UMLZigZagAdornmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLSwimlaneView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "nameLabel",  "kind": "ref",  "type": "LabelView", "embedded": "subViews" },\r\n                { "name": "isVertical", "kind": "prim", "type": "Boolean", "default": true }\r\n            ]\r\n        },\r\n        "UMLInterruptibleActivityRegionView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "UMLSequenceDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram",\r\n            "attributes": [\r\n                { "name": "showSequenceNumber", "kind": "prim", "type": "Boolean", "visible": true, "default": true },\r\n                { "name": "showSignature",      "kind": "prim", "type": "Boolean", "visible": true, "default": true },\r\n                { "name": "showActivation",     "kind": "prim", "type": "Boolean", "visible": true, "default": true }\r\n            ]\r\n        },\r\n        "UMLLinePartView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "UMLSeqLifelineView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView",\r\n            "attributes": [\r\n                { "name": "linePart", "kind": "ref", "type": "UMLLinePartView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLMessageEndpointView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "UMLEndpointView": {\r\n            "kind": "class",\r\n            "super": "UMLMessageEndpointView"\r\n        },\r\n        "UMLGateView": {\r\n            "kind": "class",\r\n            "super": "UMLMessageEndpointView"\r\n        },\r\n        "UMLActivationView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "UMLSeqMessageView": {\r\n            "kind": "class",\r\n            "super": "EdgeView",\r\n            "attributes": [\r\n                { "name": "nameLabel",       "kind": "ref", "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "stereotypeLabel", "kind": "ref", "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "propertyLabel",   "kind": "ref", "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "activation",      "kind": "ref", "type": "UMLActivationView", "embedded": "subViews" },\r\n                { "name": "showProperty",    "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "showType",        "kind": "prim", "type": "Boolean", "default": true }\r\n            ]\r\n        },\r\n        "UMLStateInvariantView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "invariantLabel", "kind": "ref", "type": "LabelView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLContinuationView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "nameLabel", "kind": "ref", "type": "LabelView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLCustomFrameView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "nameLabel",      "kind": "ref", "type": "LabelView", "embedded": "subViews" },\r\n                { "name": "frameTypeLabel", "kind": "ref", "type": "LabelView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLFrameView": {\r\n            "kind": "class",\r\n            "super": "UMLCustomFrameView"\r\n        },\r\n        "UMLInteractionOperandView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "guardLabel", "kind": "ref", "type": "LabelView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLInteractionOperandCompartmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCompartmentView"\r\n        },\r\n        "UMLCombinedFragmentView": {\r\n            "kind": "class",\r\n            "super": "UMLCustomFrameView",\r\n            "attributes": [\r\n                { "name": "operandCompartment", "kind": "ref", "type": "UMLInteractionOperandCompartmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLInteractionUseView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "nameLabel",      "kind": "ref", "type": "LabelView", "embedded": "subViews" },\r\n                { "name": "frameTypeLabel", "kind": "ref", "type": "LabelView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLCommunicationDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram",\r\n            "attributes": [\r\n                { "name": "showSequenceNumber", "kind": "prim", "type": "Boolean", "visible": true, "default": true },\r\n                { "name": "showSignature",      "kind": "prim", "type": "Boolean", "visible": true, "default": true }\r\n            ]\r\n        },\r\n        "UMLCommLifelineView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLCommMessageView": {\r\n            "kind": "class",\r\n            "super": "EdgeNodeView",\r\n            "attributes": [\r\n                { "name": "nameLabel",       "kind": "ref", "type": "NodeLabelView", "embedded": "subViews" },\r\n                { "name": "stereotypeLabel", "kind": "ref", "type": "NodeLabelView", "embedded": "subViews" },\r\n                { "name": "propertyLabel",   "kind": "ref", "type": "NodeLabelView", "embedded": "subViews" },\r\n                { "name": "showProperty",    "kind": "prim", "type": "Boolean", "default": true },\r\n                { "name": "showType",        "kind": "prim", "type": "Boolean", "default": true }\r\n            ]\r\n        },\r\n        "UMLProfileDiagram": {\r\n            "kind": "class",\r\n            "super": "UMLDiagram",\r\n            "views": [\r\n                "UMLPackageView",\r\n                "UMLModelView",\r\n                "UMLSubsystemView",\r\n                "UMLContainmentView",\r\n                "UMLClassView",\r\n                "UMLInterfaceView",\r\n                "UMLSignalView",\r\n                "UMLDataTypeView",\r\n                "UMLPrimitiveTypeView",\r\n                "UMLEnumerationView",\r\n                "UMLDependencyView",\r\n                "UMLGeneralizationView",\r\n                "UMLRealizationView",\r\n                "UMLInterfaceRealizationView",\r\n                "UMLAssociationView",\r\n                "UMLAssociationClassLinkView",\r\n                "UMLPortView",\r\n                "UMLPartView",\r\n                "UMLConnectorView",\r\n                "UMLCollaborationView",\r\n                "UMLCollaborationUseView",\r\n                "UMLRoleBindingView",\r\n                "UMLObjectView",\r\n                "UMLLinkView",\r\n                "UMLArtifactView",\r\n                "UMLComponentView",\r\n                "UMLArtifactInstanceView",\r\n                "UMLComponentInstanceView",\r\n                "UMLComponentRealizationView",\r\n                "UMLNodeView",\r\n                "UMLNodeInstanceView",\r\n                "UMLDeploymentView",\r\n                "UMLCommunicationPathView",\r\n                "UMLUseCaseView",\r\n                "UMLActorView",\r\n                "UMLUseCaseSubjectView",\r\n                "UMLExtendView",\r\n                "UMLIncludeView",\r\n                "UMLProfileView",\r\n                "UMLExtensionView",\r\n                "UMLMetaClassView",\r\n                "UMLStereotypeView"\r\n            ]\r\n        },\r\n        "UMLProfileView": {\r\n            "kind": "class",\r\n            "super": "UMLPackageView"\r\n        },\r\n        "UMLMetaClassView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralNodeView"\r\n        },\r\n        "UMLStereotypeView": {\r\n            "kind": "class",\r\n            "super": "UMLClassView"\r\n        },\r\n        "UMLExtensionView": {\r\n            "kind": "class",\r\n            "super": "UMLGeneralEdgeView"\r\n        },\r\n        "HyperlinkView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "nameLabel", "kind": "ref", "type": "LabelView", "embedded": "subViews" },\r\n                { "name": "typeLabel", "kind": "ref", "type": "LabelView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "UMLCustomTextView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "text",     "kind": "prim", "type": "String" },\r\n                { "name": "wordWrap", "kind": "prim", "type": "Boolean", "default": true }\r\n            ]\r\n        },\r\n        "UMLTextView": {\r\n            "kind": "class",\r\n            "super": "UMLCustomTextView"\r\n        },\r\n        "UMLCustomNoteView": {\r\n            "kind": "class",\r\n            "super": "UMLCustomTextView"\r\n        },\r\n        "UMLNoteView": {\r\n            "kind": "class",\r\n            "super": "UMLCustomNoteView"\r\n        },\r\n        "UMLConstraintView": {\r\n            "kind": "class",\r\n            "super": "UMLCustomNoteView"\r\n        },\r\n        "UMLNoteLinkView": {\r\n            "kind": "class",\r\n            "super": "EdgeView"\r\n        },\r\n        "UMLConstraintLinkView": {\r\n            "kind": "class",\r\n            "super": "EdgeView"\r\n        },\r\n        "ShapeView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "RectangleView": {\r\n            "kind": "class",\r\n            "super": "ShapeView"\r\n        },\r\n        "RoundRectView": {\r\n            "kind": "class",\r\n            "super": "ShapeView"\r\n        },\r\n        "EllipseView": {\r\n            "kind": "class",\r\n            "super": "ShapeView"\r\n        }\r\n    };\r\n\r\n    // Register Meta-model\r\n    MetaModelManager.register(metaModel);\r\n\r\n});\r\n\n//# sourceURL=/uml/UML-meta.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, browser: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, _, type, meta*/\r\n\r\ndefine(\'uml/UML-rules\',[\'require\',\'exports\',\'module\',\'core/Validator\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Validator = require("core/Validator");\r\n\r\n    var rules = [\r\n        {\r\n            id: "UML001",\r\n            message: "Name expected.",\r\n            appliesTo: [ "UMLModelElement" ],\r\n            exceptions: [ "UMLDirectedRelationship", "UMLRelationshipEnd", "UMLUndirectedRelationship", "UMLAssociationClassLink", "UMLRegion", "UMLPseudostate", "UMLFinalState", "UMLControlNode", "UMLEndpoint", "UMLGate", "UMLImage", "UMLLifeline", "UMLInstance" ],\r\n            constraint: function (elem) {\r\n                if (elem instanceof type.UMLParameter) {\r\n                    return (elem.direction === "return" ? true : elem.name.length > 0);\r\n                } else {\r\n                    return (elem.name.length > 0);\r\n                }\r\n            }\r\n        },\r\n        {\r\n            id: "UML002",\r\n            message: "Name is already defined.",\r\n            appliesTo: [ "UMLModelElement" ],\r\n            exceptions: [ "UMLOperation" ],\r\n            constraint: function (elem) {\r\n                var parent   = elem._parent,\r\n                    field    = elem.getParentField(),\r\n                    siblings = parent[field],\r\n                    i,\r\n                    len;\r\n                for (i = 0, len = siblings.length; i < len; i++) {\r\n                    var sibling = siblings[i];\r\n                    if (elem !== sibling && elem.name.length > 0 && elem.name === sibling.name) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML003",\r\n            message: "Conflict with inherited attributes.",\r\n            appliesTo: [ "UMLAttribute" ],\r\n            constraint: function (elem) {\r\n                if (elem._parent instanceof type.UMLClassifier) {\r\n                    var inherited = elem._parent.getInheritedAttributes(),\r\n                        names     = _.map(inherited, function (e) { return e.name; });\r\n                    return !_.contains(names, elem.name);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML004",\r\n            message: "Signature conflict.",\r\n            appliesTo: [ "UMLOperation" ],\r\n            constraint: function (elem) {\r\n                var options = {\r\n                        stereotypeDisplay: "none",\r\n                        showVisibility: false,\r\n                        showProperty: false,\r\n                        showType: true,\r\n                        showOperationSignature: true\r\n                    },\r\n                    signature = elem.getString(options);\r\n                if (elem._parent.operations) {\r\n                    var i, len;\r\n                    for (i = 0, len = elem._parent.operations.length; i < len; i++) {\r\n                        var op  = elem._parent.operations[i],\r\n                            sig = op.getString(options);\r\n                        if (op !== elem && sig === signature) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML006",\r\n            message: "Final and leaf element must not have child.",\r\n            appliesTo: [ "UMLClassifier" ],\r\n            constraint: function (elem) {\r\n                if (elem.isFinalSpecialization === true || elem.isLeaf === true) {\r\n                    var subs = elem.getSpecialElements();\r\n                    return (subs.length === 0);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML007",\r\n            message: "Duplicated generalizations.",\r\n            appliesTo: [ "UMLClassifier" ],\r\n            constraint: function (elem) {\r\n                var gens = elem.getGeneralElements();\r\n                return (gens.length === _.uniq(gens).length);\r\n            }\r\n        },\r\n        {\r\n            id: "UML008",\r\n            message: "Circular generalizations.",\r\n            appliesTo: [ "UMLClassifier" ],\r\n            constraint: function (elem) {\r\n                var ancestors = elem.getAncestors();\r\n                return (!_.contains(ancestors, elem));\r\n            }\r\n        },\r\n        {\r\n            id: "UML009",\r\n            message: "Duplicated realizations.",\r\n            appliesTo: [ "UMLClassifier" ],\r\n            constraint: function (elem) {\r\n                var reals = elem.getInterfaces();\r\n                return (reals.length === _.uniq(reals).length);\r\n            }\r\n        },\r\n        {\r\n            id: "UML010",\r\n            message: "Duplicated role names of associated classifiers.",\r\n            appliesTo: [ "UMLClassifier" ],\r\n            constraint: function (elem) {\r\n                var ends  = elem.getAssociationEnds(true), // get counterpart ends.\r\n                    names = [];\r\n                _.each(ends, function (e) {\r\n                    if (e.navigable && e.name) {\r\n                        names.push(e.name);\r\n                    }\r\n                });\r\n                _.map(ends, function (e) { return e.name; });\r\n                return (names.length === _.uniq(names).length);\r\n            }\r\n        },\r\n        {\r\n            id: "UML011",\r\n            message: "All attributes and operations of interface must be public.",\r\n            appliesTo: [ "UMLInterface" ],\r\n            constraint: function (elem) {\r\n                function bePublic(e) {\r\n                    return e.visibility === "public";\r\n                }\r\n                return _.every(elem.attributes, bePublic) && _.every(elem.operations, bePublic);\r\n            }\r\n        },\r\n        {\r\n            id: "UML012",\r\n            message: "Aggregation must be one in an association.",\r\n            appliesTo: [ "UMLAssociation" ],\r\n            constraint: function (elem) {\r\n                function isAggregation(e) {\r\n                    return e.aggregation === "shared" || e.aggregation === "composite";\r\n                }\r\n                return !(isAggregation(elem.end1) && isAggregation(elem.end2));\r\n            }\r\n        },\r\n        {\r\n            id: "UML013",\r\n            message: "Type of an artifact instance must be an artifact.",\r\n            appliesTo: [ "UMLArtifactInstance" ],\r\n            constraint: function (elem) {\r\n                return (!elem.classifier || elem.classifier instanceof type.UMLArtifact);\r\n            }\r\n        },\r\n        {\r\n            id: "UML014",\r\n            message: "Type of a component instance must be a component.",\r\n            appliesTo: [ "UMLComponentInstance" ],\r\n            constraint: function (elem) {\r\n                return (!elem.classifier || elem.classifier instanceof type.UMLComponent);\r\n            }\r\n        },\r\n        {\r\n            id: "UML015",\r\n            message: "Type of a node instance must be a node.",\r\n            appliesTo: [ "UMLNodeInstance" ],\r\n            constraint: function (elem) {\r\n                return (!elem.classifier || elem.classifier instanceof type.UMLNode);\r\n            }\r\n        },\r\n        {\r\n            id: "UML016",\r\n            message: "A metaclass must have name defined in metamodel.",\r\n            appliesTo: [ "UMLMetaClass" ],\r\n            constraint: function (elem) {\r\n                return (meta[elem.name]);\r\n            }\r\n        },\r\n        {\r\n            id: "UML017",\r\n            message: "A stereotype must inherits from stereotype.",\r\n            appliesTo: [ "UMLStereotype" ],\r\n            constraint: function (elem) {\r\n                var gens = elem.getGeneralElements();\r\n                return _.every(gens, function (g) { return (g instanceof type.UMLStereotype); });\r\n            }\r\n        },\r\n        {\r\n            id: "UML018",\r\n            message: "A stereotype must contained by a profile.",\r\n            appliesTo: [ "UMLStereotype" ],\r\n            constraint: function (elem) {\r\n                var found = false;\r\n                elem.traverseUp(function (e) {\r\n                    if (e instanceof type.UMLProfile) { found = true; }\r\n                });\r\n                return found;\r\n            }\r\n        },\r\n        {\r\n            id: "UML019",\r\n            message: "An actor only can associate with use cases, components, and classes.",\r\n            appliesTo: [ "UMLActor" ],\r\n            constraint: function (elem) {\r\n                var ends = elem.getAssociationEnds(true);\r\n                return _.every(ends, function (e) {\r\n                    return (e.reference instanceof type.UMLUseCase) ||\r\n                           (e.reference instanceof type.UMLComponent) ||\r\n                           (e.reference instanceof type.UMLClass);\r\n                });\r\n            }\r\n        },\r\n        {\r\n            id: "UML020",\r\n            message: "A use case cannot include use cases that directly or indirectly include it.",\r\n            appliesTo: [ "UMLUseCase" ],\r\n            constraint: function (elem) {\r\n                var includings = elem.getAllIncludedUseCases();\r\n                return (!_.contains(includings, elem));\r\n            }\r\n        },\r\n        {\r\n            id: "UML021",\r\n            message: "An initial vertex can have at most one outgoing transition.",\r\n            appliesTo: [ "UMLPseudostate" ],\r\n            constraint: function (elem) {\r\n                if (elem.kind === \'initial\') {\r\n                    return (elem.getOutgoingTransitions().length <= 1);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML022",\r\n            message: "The outgoing transition from an initial vertex must not have a trigger or guard.",\r\n            appliesTo: [ "UMLPseudostate" ],\r\n            constraint: function (elem) {\r\n                if (elem.kind === \'initial\') {\r\n                    var outs = elem.getOutgoingTransitions();\r\n                    return _.every(outs, function (t) {\r\n                        return (t.triggers.length === 0) && (!t.guard);\r\n                    });\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML023",\r\n            message: "History vertices can have at most one outgoing transition.",\r\n            appliesTo: [ "UMLPseudostate" ],\r\n            constraint: function (elem) {\r\n                if (elem.kind === \'deepHistory\' || elem.kind === \'shallowHistory\') {\r\n                    return (elem.getOutgoingTransitions().length <= 1);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML024",\r\n            message: "A join vertex must have at least two incoming transitions and exactly one outgoing transition.",\r\n            appliesTo: [ "UMLPseudostate" ],\r\n            constraint: function (elem) {\r\n                if (elem.kind === \'join\') {\r\n                    return (elem.getIncomingTransitions().length >= 2) &&\r\n                           (elem.getOutgoingTransitions().length === 1);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML025",\r\n            message: "A fork vertex must have at least two outgoing transitions and exactly one incoming transition.",\r\n            appliesTo: [ "UMLPseudostate" ],\r\n            constraint: function (elem) {\r\n                if (elem.kind === \'fork\') {\r\n                    return (elem.getOutgoingTransitions().length >= 2) &&\r\n                           (elem.getIncomingTransitions().length === 1);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML026",\r\n            message: "A junction vertex must have at least one incoming and one outgoing transition.",\r\n            appliesTo: [ "UMLPseudostate" ],\r\n            constraint: function (elem) {\r\n                if (elem.kind === \'junction\') {\r\n                    return (elem.getOutgoingTransitions().length >= 1) &&\r\n                           (elem.getIncomingTransitions().length >= 1);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML027",\r\n            message: "A choice vertex must have at least one incoming and one outgoing transition.",\r\n            appliesTo: [ "UMLPseudostate" ],\r\n            constraint: function (elem) {\r\n                if (elem.kind === \'choice\') {\r\n                    return (elem.getOutgoingTransitions().length >= 1) &&\r\n                           (elem.getIncomingTransitions().length === 1);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML028",\r\n            message: "Only submachine states can have connection point references.",\r\n            appliesTo: [ "UMLState" ],\r\n            constraint: function (elem) {\r\n                if (elem.connections.length > 0) {\r\n                    return (elem.submachine instanceof type.UMLStateMachine);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML029",\r\n            message: "A state is not allowed to have both a submachine and regions.",\r\n            appliesTo: [ "UMLState" ],\r\n            constraint: function (elem) {\r\n                return !(elem.regions.length > 0 && elem.submachine instanceof type.UMLStateMachine);\r\n            }\r\n        },\r\n        {\r\n            id: "UML030",\r\n            message: "A region can have at most one initial vertex.",\r\n            appliesTo: [ "UMLRegion" ],\r\n            constraint: function (elem) {\r\n                var vs = _.filter(elem.vertices, function (v) {\r\n                    return (v instanceof type.UMLPseudostate) && (v.kind === \'initial\');\r\n                });\r\n                return vs.length <= 1;\r\n            }\r\n        },\r\n        {\r\n            id: "UML031",\r\n            message: "A region can have at most one deep history vertex.",\r\n            appliesTo: [ "UMLRegion" ],\r\n            constraint: function (elem) {\r\n                var vs = _.filter(elem.vertices, function (v) {\r\n                    return (v instanceof type.UMLPseudostate) && (v.kind === \'deepHistory\');\r\n                });\r\n                return vs.length <= 1;\r\n            }\r\n        },\r\n        {\r\n            id: "UML032",\r\n            message: "A region can have at most one shallow history vertex.",\r\n            appliesTo: [ "UMLRegion" ],\r\n            constraint: function (elem) {\r\n                var vs = _.filter(elem.vertices, function (v) {\r\n                    return (v instanceof type.UMLPseudostate) && (v.kind === \'shallowHistory\');\r\n                });\r\n                return vs.length <= 1;\r\n            }\r\n        },\r\n        {\r\n            id: "UML033",\r\n            message: "A final state cannot have any outgoing transitions.",\r\n            appliesTo: [ "UMLFinalState" ],\r\n            constraint: function (elem) {\r\n                return (elem.getOutgoingTransitions().length === 0);\r\n            }\r\n        },\r\n        {\r\n            id: "UML034",\r\n            message: "A final state cannot have regions.",\r\n            appliesTo: [ "UMLFinalState" ],\r\n            constraint: function (elem) {\r\n                return (elem.regions.length === 0);\r\n            }\r\n        },\r\n        {\r\n            id: "UML035",\r\n            message: "A final state cannot reference a submachine.",\r\n            appliesTo: [ "UMLFinalState" ],\r\n            constraint: function (elem) {\r\n                return (!elem.submachine);\r\n            }\r\n        },\r\n        {\r\n            id: "UML036",\r\n            message: "A final state has no entry behavior.",\r\n            appliesTo: [ "UMLFinalState" ],\r\n            constraint: function (elem) {\r\n                return (elem.entryActivities.length === 0);\r\n            }\r\n        },\r\n        {\r\n            id: "UML037",\r\n            message: "A final state has no exit behavior.",\r\n            appliesTo: [ "UMLFinalState" ],\r\n            constraint: function (elem) {\r\n                return (elem.exitActivities.length === 0);\r\n            }\r\n        },\r\n        {\r\n            id: "UML038",\r\n            message: "A final state has no state (doActivity) behavior.",\r\n            appliesTo: [ "UMLFinalState" ],\r\n            constraint: function (elem) {\r\n                return (elem.doActivities.length === 0);\r\n            }\r\n        },\r\n        {\r\n            id: "UML039",\r\n            message: "A fork segment must not have guards or triggers.",\r\n            appliesTo: [ "UMLTransition" ],\r\n            constraint: function (elem) {\r\n                if (elem.source instanceof type.UMLPseudostate && elem.source.kind === \'fork\') {\r\n                    return (elem.triggers.length === 0) && (!elem.guard);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML040",\r\n            message: "A join segment must not have guards or triggers.",\r\n            appliesTo: [ "UMLTransition" ],\r\n            constraint: function (elem) {\r\n                if (elem.target instanceof type.UMLPseudostate && elem.target.kind === \'join\') {\r\n                    return (elem.triggers.length === 0) && (!elem.guard);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML041",\r\n            message: "A fork segment must always target a state.",\r\n            appliesTo: [ "UMLTransition" ],\r\n            constraint: function (elem) {\r\n                if (elem.source instanceof type.UMLPseudostate && elem.source.kind === \'fork\') {\r\n                    return (elem.target instanceof type.UMLState);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML042",\r\n            message: "A join segment must always originate from a state.",\r\n            appliesTo: [ "UMLTransition" ],\r\n            constraint: function (elem) {\r\n                if (elem.target instanceof type.UMLPseudostate && elem.target.kind === \'join\') {\r\n                    return (elem.source instanceof type.UMLState);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML043",\r\n            message: "Transitions outgoing pseudostates may not have a trigger (except for those coming out of the initial pseudostate).",\r\n            appliesTo: [ "UMLTransition" ],\r\n            constraint: function (elem) {\r\n                if (elem.source instanceof type.UMLPseudostate && elem.source.kind !== \'initial\') {\r\n                    return (elem.triggers.length === 0);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML044",\r\n            message: "The classifier context of a state machine cannot be an interface.",\r\n            appliesTo: [ "UMLStateMachine" ],\r\n            constraint: function (elem) {\r\n                return !(elem._parent instanceof type.UMLInterface);\r\n            }\r\n        },\r\n        {\r\n            id: "UML045",\r\n            message: "A decision node has one or two incoming edges and at least one outgoing edge.",\r\n            appliesTo: [ "UMLDecisionNode" ],\r\n            constraint: function (elem) {\r\n                return (elem.getIncomingEdges().length === 1 || elem.getIncomingEdges().length === 2) &&\r\n                       (elem.getOutgoingEdges().length >= 1);\r\n            }\r\n        },\r\n        {\r\n            id: "UML046",\r\n            message: "A merge node has one outgoing edge.",\r\n            appliesTo: [ "UMLMergeNode" ],\r\n            constraint: function (elem) {\r\n                return (elem.getOutgoingEdges().length === 1);\r\n            }\r\n        },\r\n        {\r\n            id: "UML047",\r\n            message: "The edges coming into and out of a merge node must be either all object flows or all control flows.",\r\n            appliesTo: [ "UMLMergeNode" ],\r\n            constraint: function (elem) {\r\n                var edges = _.union(elem.getIncomingEdges(), elem.getOutgoingEdges());\r\n                return _.every(edges, function (e) { return (e instanceof type.UMLControlFlow); }) ||\r\n                       _.every(edges, function (e) { return (e instanceof type.UMLObjectFlow); });\r\n            }\r\n        },\r\n        {\r\n            id: "UML048",\r\n            message: "An initial node has no incoming edges.",\r\n            appliesTo: [ "UMLInitialNode" ],\r\n            constraint: function (elem) {\r\n                return (elem.getIncomingEdges().length === 0);\r\n            }\r\n        },\r\n        {\r\n            id: "UML049",\r\n            message: "Only control edges can have initial nodes as source.",\r\n            appliesTo: [ "UMLInitialNode" ],\r\n            constraint: function (elem) {\r\n                return _.every(elem.getOutgoingEdges(), function (e) { return (e instanceof type.UMLControlFlow); });\r\n            }\r\n        },\r\n        {\r\n            id: "UML050",\r\n            message: "A final node has no outgoing edges.",\r\n            appliesTo: [ "UMLFinalNode" ],\r\n            constraint: function (elem) {\r\n                return (elem.getOutgoingEdges().length === 0);\r\n            }\r\n        },\r\n        {\r\n            id: "UML051",\r\n            message: "A fork node has one incoming edge.",\r\n            appliesTo: [ "UMLForkNode" ],\r\n            constraint: function (elem) {\r\n                return (elem.getIncomingEdges().length === 1);\r\n            }\r\n        },\r\n        {\r\n            id: "UML052",\r\n            message: "The edges coming into and out of a fork node must be either all object flows or all control flows.",\r\n            appliesTo: [ "UMLForkNode" ],\r\n            constraint: function (elem) {\r\n                var edges = _.union(elem.getIncomingEdges(), elem.getOutgoingEdges());\r\n                return _.every(edges, function (e) { return (e instanceof type.UMLControlFlow); }) ||\r\n                       _.every(edges, function (e) { return (e instanceof type.UMLObjectFlow); });\r\n            }\r\n        },\r\n        {\r\n            id: "UML053",\r\n            message: "A join node has one outgoing edge.",\r\n            appliesTo: [ "UMLJoinNode" ],\r\n            constraint: function (elem) {\r\n                return (elem.getOutgoingEdges().length === 1);\r\n            }\r\n        },\r\n        {\r\n            id: "UML054",\r\n            message: "The edges coming into and out of a join node must be either all object flows or all control flows.",\r\n            appliesTo: [ "UMLJoinNode" ],\r\n            constraint: function (elem) {\r\n                var edges = _.union(elem.getIncomingEdges(), elem.getOutgoingEdges());\r\n                return _.every(edges, function (e) { return (e instanceof type.UMLControlFlow); }) ||\r\n                       _.every(edges, function (e) { return (e instanceof type.UMLObjectFlow); });\r\n            }\r\n        },\r\n        {\r\n            id: "UML055",\r\n            message: "All edges coming into or going out of object nodes must be object flow edges.",\r\n            appliesTo: [ "UMLObjectNode" ],\r\n            constraint: function (elem) {\r\n                var edges = _.union(elem.getIncomingEdges(), elem.getOutgoingEdges());\r\n                return _.every(edges, function (e) { return (e instanceof type.UMLObjectFlow); });\r\n            }\r\n        },\r\n        {\r\n            id: "UML056",\r\n            message: "Control flows may not have object nodes at either end, except for object nodes with control type.",\r\n            appliesTo: [ "UMLControlFlow" ],\r\n            constraint: function (elem) {\r\n                if (elem.source instanceof type.UMLObjectNode && elem.target instanceof type.UMLObjectNode) {\r\n                    return (elem.source.isControlType || elem.target.isControlType);\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "UML057",\r\n            message: "Object flows may not have actions at either end.",\r\n            appliesTo: [ "UMLObjectFlow" ],\r\n            constraint: function (elem) {\r\n                return !(elem.source instanceof type.UMLAction && elem.target instanceof type.UMLAction);\r\n            }\r\n        }\r\n    ];\r\n\r\n    Validator.addRules(rules);\r\n\r\n});\r\n\n//# sourceURL=/uml/UML-rules.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell */\r\ndefine(\'uml/UMLCommandHandlers\',[\'require\',\'exports\',\'module\',\'core/Global\',\'utils/AppInit\',\'utils/Helper\',\'core/Core\',\'core/Repository\',\'engine/ProjectManager\',\'engine/Engine\',\'engine/Factory\',\'engine/SelectionManager\',\'command/CommandManager\',\'command/Commands\',\'uml/UMLCommands\',\'uml/UML\',\'uml/UMLDiagram\',\'uml/UMLFactory\',\'filesystem/FileSystem\',\'filesystem/FileSystemError\',\'file/FileUtils\',\'dialogs/Dialogs\',\'ui/Toast\',\'diagrams/DiagramManager\',\'explorer/ModelExplorerView\',\'strings\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var global            = require("core/Global").global,\r\n        AppInit           = require("utils/AppInit"),\r\n        Helper            = require("utils/Helper"),\r\n        Core              = require("core/Core"),\r\n        Repository        = require("core/Repository"),\r\n        ProjectManager    = require("engine/ProjectManager"),\r\n        Engine            = require("engine/Engine"),\r\n        Factory           = require("engine/Factory"),\r\n        SelectionManager  = require("engine/SelectionManager"),\r\n        CommandManager    = require("command/CommandManager"),\r\n        Commands          = require("command/Commands"),\r\n        UMLCommands       = require("uml/UMLCommands"),\r\n        UML               = require("uml/UML"),\r\n        UMLDiagram        = require("uml/UMLDiagram"),\r\n        UMLFactory        = require("uml/UMLFactory"),\r\n        FileSystem        = require("filesystem/FileSystem"),\r\n        FileSystemError   = require("filesystem/FileSystemError"),\r\n        FileUtils         = require("file/FileUtils"),\r\n        Dialogs           = require("dialogs/Dialogs"),\r\n        Toast             = require("ui/Toast"),\r\n        DiagramManager    = require("diagrams/DiagramManager"),\r\n        ModelExplorerView = require("explorer/ModelExplorerView"),\r\n        Strings           = require("strings");\r\n\r\n    function _openDiagram(id) {\r\n        var diagram = Repository.get(id);\r\n        if (diagram instanceof type.Diagram) {\r\n            DiagramManager.setCurrentDiagram(diagram);\r\n            ModelExplorerView.select(diagram);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * New From Template Command Handlers\r\n     */\r\n\r\n    function _handleUMLMinimalTemplate() {\r\n        var path = FileUtils.getApplicationDirectoryPath() + "templates/UMLMinimal.mdj";\r\n        return CommandManager.execute(Commands.FILE_NEW, path);\r\n    }\r\n\r\n    function _handleUMLConventionalTemplate() {\r\n        var path = FileUtils.getApplicationDirectoryPath() + "templates/UMLConventional.mdj";\r\n        return CommandManager.execute(Commands.FILE_NEW, path);\r\n    }\r\n\r\n    function _handle4p1ViewModelTemplate() {\r\n        var path = FileUtils.getApplicationDirectoryPath() + "templates/4p1ViewModel.mdj";\r\n        return CommandManager.execute(Commands.FILE_NEW, path);\r\n    }\r\n\r\n    function _handleRationalTemplate() {\r\n        var path = FileUtils.getApplicationDirectoryPath() + "templates/Rational.mdj";\r\n        return CommandManager.execute(Commands.FILE_NEW, path);\r\n    }\r\n\r\n    /*\r\n     * Model Apply Command Handlers\r\n     */\r\n\r\n    /**\r\n     * @param {string} fullPath - Fullpath for profile to be loaded.\r\n     */\r\n    function _handleApplyProfile(fullPath) {\r\n        return ProjectManager.importFromFile(ProjectManager.getProject(), fullPath);\r\n    }\r\n\r\n    function _handleApplyUMLStandardProfile() {\r\n        var filename = FileUtils.getApplicationDirectoryPath() + "profiles/UMLStandardProfile.mfj";\r\n        return _handleApplyProfile(filename).done(function () {\r\n            Toast.info("UMLStandardProfile is successfully applied. Look at under Project.");\r\n        });\r\n    }\r\n\r\n    function _handleEntryActivity() {\r\n        Dialogs.showSelectRadioDialog(\r\n            "Select one to create as an entry Activity",\r\n            [\r\n                { text: "OpaqueBehavior", value: "UMLOpaqueBehavior", checked: true},\r\n                { text: "Activity",       value: "UMLActivity"},\r\n                { text: "StateMachine",   value: "UMLStateMachine"},\r\n                { text: "Interaction",    value: "UMLInteraction"}\r\n            ]\r\n        ).done(function (buttonId, selected) {\r\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                Factory.createModel(selected, null, "entryActivities");\r\n            }\r\n        });\r\n    }\r\n\r\n    function _handleDoActivity() {\r\n        Dialogs.showSelectRadioDialog(\r\n            "Select one to create as an do Activity",\r\n            [\r\n                { text: "OpaqueBehavior", value: "UMLOpaqueBehavior", checked: true},\r\n                { text: "Activity",       value: "UMLActivity"},\r\n                { text: "StateMachine",   value: "UMLStateMachine"},\r\n                { text: "Interaction",    value: "UMLInteraction"}\r\n            ]\r\n        ).done(function (buttonId, selected) {\r\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                Factory.createModel(selected, null, "doActivities");\r\n            }\r\n        });\r\n    }\r\n\r\n    function _handleExitActivity() {\r\n        Dialogs.showSelectRadioDialog(\r\n            "Select one to create as an exit Activity",\r\n            [\r\n                { text: "OpaqueBehavior", value: "UMLOpaqueBehavior", checked: true},\r\n                { text: "Activity",       value: "UMLActivity"},\r\n                { text: "StateMachine",   value: "UMLStateMachine"},\r\n                { text: "Interaction",    value: "UMLInteraction"}\r\n            ]\r\n        ).done(function (buttonId, selected) {\r\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                Factory.createModel(selected, null, "exitActivities");\r\n            }\r\n        });\r\n    }\r\n\r\n    function _handleEffect() {\r\n        Dialogs.showSelectRadioDialog(\r\n            "Select one to create as an effect Behavior",\r\n            [\r\n                { text: "OpaqueBehavior", value: "UMLOpaqueBehavior", checked: true},\r\n                { text: "Activity",       value: "UMLActivity"},\r\n                { text: "StateMachine",   value: "UMLStateMachine"},\r\n                { text: "Interaction",    value: "UMLInteraction"}\r\n            ]\r\n        ).done(function (buttonId, selected) {\r\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                Factory.createModel(selected, null, "effects");\r\n            }\r\n        });\r\n    }\r\n\r\n    function _handleConstraint() {\r\n        var parent = SelectionManager.getSelected();\r\n        if (parent instanceof type.UMLOperation) {\r\n            Dialogs.showSelectRadioDialog(\r\n                "Select kind of Constraint of Operation",\r\n                [\r\n                    { text: "Typical Constraint", value: "ownedElements", checked: true},\r\n                    { text: "Precondition",       value: "preconditions"},\r\n                    { text: "BodyCondition",      value: "bodyConditions"},\r\n                    { text: "Postcondition",      value: "postconditions"}\r\n                ]\r\n            ).done(function (buttonId, selected) {\r\n                if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                    Factory.createModel("UMLConstraint", parent, selected);\r\n                }\r\n            });\r\n        } else if (parent instanceof type.UMLBehavior) {\r\n            Dialogs.showSelectRadioDialog(\r\n                "Select kind of Constraint of Behavior",\r\n                [\r\n                    { text: "Typical Constraint", value: "ownedElements", checked: true},\r\n                    { text: "Precondition",       value: "preconditions"},\r\n                    { text: "Postcondition",      value: "postconditions"}\r\n                ]\r\n            ).done(function (buttonId, selected) {\r\n                if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                    Factory.createModel("UMLConstraint", parent, selected);\r\n                }\r\n            });\r\n        } else if (parent instanceof type.UMLAction) {\r\n            Dialogs.showSelectRadioDialog(\r\n                "Select kind of Constraint of Action",\r\n                [\r\n                    { text: "Typical Constraint", value: "ownedElements", checked: true},\r\n                    { text: "LocalPrecondition",  value: "localPreconditions"},\r\n                    { text: "LocalPostcondition", value: "localPostconditions"}\r\n                ]\r\n            ).done(function (buttonId, selected) {\r\n                if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                    Factory.createModel("UMLConstraint", parent, selected);\r\n                }\r\n            });\r\n        } else {\r\n            Factory.createModel("UMLConstraint", parent, "ownedElements");\r\n        }\r\n    }\r\n\r\n\r\n    function _handleStereotypeDisplay(value) {\r\n        var views = SelectionManager.getSelectedViews();\r\n        Engine.setElemsProperty(views, \'stereotypeDisplay\', value);\r\n    }\r\n\r\n    function _handleToggleProperty(field) {\r\n        var views = SelectionManager.getSelectedViews(),\r\n            boolVal = Helper.reduceValue(views, field);\r\n        if (_.isBoolean(boolVal)) {\r\n            Engine.setElemsProperty(views, field, !boolVal);\r\n        } else {\r\n            Engine.setElemsProperty(views, field, true);\r\n        }\r\n    }\r\n\r\n    function _updateCommands() {\r\n        var models = SelectionManager.getSelectedModels(),\r\n            views = SelectionManager.getSelectedViews(),\r\n            selected = SelectionManager.getSelected();\r\n\r\n        var isNone = (!selected),\r\n            isProject = selected instanceof Core.Project,\r\n            isExtensibleModel = selected instanceof type.ExtensibleModel,\r\n            isModelElement = selected instanceof type.UMLModelElement,\r\n            isPackage = selected instanceof type.UMLPackage || selected instanceof type.UMLSubsystem,\r\n            isProfile = selected instanceof type.UMLProfile,\r\n            isClassifier = selected instanceof type.UMLClassifier,\r\n            isEnumeration = selected instanceof type.UMLEnumeration,\r\n            isUseCase = selected instanceof type.UMLUseCase,\r\n            isAssociation = selected instanceof type.UMLAssociation,\r\n            isOperation = selected instanceof type.UMLOperation,\r\n            isInstance = selected instanceof type.UMLInstance,\r\n            isInteraction = selected instanceof type.UMLInteraction,\r\n            isStateMachine = selected instanceof type.UMLStateMachine,\r\n            isRegion = selected instanceof type.UMLRegion,\r\n            isState = selected instanceof type.UMLState,\r\n            isTransition = selected instanceof type.UMLTransition,\r\n            isActivity = selected instanceof type.UMLActivity,\r\n            isAction = selected instanceof type.UMLAction;\r\n\r\n        // Model: Packages\r\n        CommandManager.get(UMLCommands.MODEL_ADD_MODEL).setVisible(isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_SUBSYSTEM).setVisible(isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_PACKAGE).setVisible(isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_PROFILE).setVisible(isProject || isPackage);\r\n\r\n        // Model: Classes\r\n        CommandManager.get(UMLCommands.MODEL_ADD_CLASS).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_INTERFACE).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_SIGNAL).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DATATYPE).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_PRIMITIVETYPE).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_ENUMERATION).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_ARTIFACT).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_COMPONENT).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_NODE).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_USECASE).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_ACTOR).setVisible(isProject || isPackage || isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_STEREOTYPE).setVisible(isProfile);\r\n\r\n        // Model: Instances\r\n        // TODO: Menus for instace types never be enabled. (Delete them or enable them when an element is selected)\r\n        CommandManager.get(UMLCommands.MODEL_ADD_OBJECT).setVisible(false);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_ARTIFACTINSTANCE).setVisible(false);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_COMPONENTINSTANCE).setVisible(false);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_NODEINSTANCE).setVisible(false);\r\n\r\n        // Model: Behaviors\r\n        CommandManager.get(UMLCommands.MODEL_ADD_COLLABORATION).setVisible(isClassifier || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_INTERACTION).setVisible(isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_STATEMACHINE).setVisible(isClassifier || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_ACTIVITY).setVisible(isClassifier || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_OPAQUEBEHAVIOR).setVisible(isClassifier);\r\n\r\n        // Model: Features\r\n        CommandManager.get(UMLCommands.MODEL_ADD_TEMPLATEPARAMETER).setVisible(isClassifier || isOperation);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_PARAMETER).setVisible(isOperation);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_ENUMERATIONLITERAL).setVisible(isEnumeration);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_ATTRIBUTE).setVisible(isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_PORT).setVisible(isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_OPERATION).setVisible(isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_RECEPTION).setVisible(isClassifier);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_EXTENSIONPOINT).setVisible(isUseCase);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_SLOT).setVisible(isInstance);\r\n\r\n        // Model: States\r\n        CommandManager.get(UMLCommands.MODEL_ADD_STATE).setVisible(isRegion);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_REGION).setVisible(isState);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_ENTRY_ACTIVITY).setVisible(isState);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DO_ACTIVITY).setVisible(isState);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_EXIT_ACTIVITY).setVisible(isState);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_TRIGGER).setVisible(isAction || isTransition);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_EFFECT).setVisible(isTransition);\r\n\r\n        // Model: Actions\r\n        CommandManager.get(UMLCommands.MODEL_ADD_ACTION).setVisible(isActivity);\r\n\r\n        // Model: Common\r\n        CommandManager.get(UMLCommands.MODEL_ADD_CONSTRAINT).setVisible(isModelElement);\r\n\r\n        // Model: Diagrams\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_USECASE).setVisible(isNone || isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_CLASS).setVisible(isNone || isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_PACKAGE).setVisible(isNone || isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_OBJECT).setVisible(isNone || isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_COMPONENT).setVisible(isNone || isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_DEPLOYMENT).setVisible(isNone || isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_PROFILE).setVisible(isNone || isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_COMPOSITESTRUCTURE).setVisible(isNone || isProject || isPackage);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_SEQUENCE).setVisible(isNone || isProject || isPackage || isClassifier || isOperation || isInteraction);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_COMMUNICATION).setVisible(isNone || isProject || isPackage || isClassifier || isOperation || isInteraction);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_STATECHART).setVisible(isNone || isProject || isPackage || isClassifier || isOperation || isStateMachine);\r\n        CommandManager.get(UMLCommands.MODEL_ADD_DIAGRAM_ACTIVITY).setVisible(isNone || isProject || isPackage || isClassifier || isOperation || isActivity);\r\n\r\n        // Update Format > StereotypeDisplay\r\n        CommandManager.get(UMLCommands.FORMAT_STEREOTYPE).setEnabled(views.length > 0);\r\n        if (views.length > 0) {\r\n            var stereotypeDisplay = Helper.reduceValue(views, \'stereotypeDisplay\');\r\n            CommandManager.get(UMLCommands.FORMAT_STEREOTYPE_NONE).setChecked(stereotypeDisplay === UML.SD_NONE);\r\n            CommandManager.get(UMLCommands.FORMAT_STEREOTYPE_LABEL).setChecked(stereotypeDisplay === UML.SD_LABEL);\r\n            CommandManager.get(UMLCommands.FORMAT_STEREOTYPE_DECORATION).setChecked(stereotypeDisplay === UML.SD_DECORATION);\r\n            CommandManager.get(UMLCommands.FORMAT_STEREOTYPE_DECORATION_LABEL).setChecked(stereotypeDisplay === UML.SD_DECORATION_LABEL);\r\n            CommandManager.get(UMLCommands.FORMAT_STEREOTYPE_ICON).setChecked(stereotypeDisplay === UML.SD_ICON);\r\n            CommandManager.get(UMLCommands.FORMAT_STEREOTYPE_ICON_LABEL).setChecked(stereotypeDisplay === UML.SD_ICON_LABEL);\r\n        }\r\n\r\n        // Update Format > WordWrap\r\n        CommandManager.get(UMLCommands.FORMAT_WORD_WRAP).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_WORD_WRAP).setChecked(Helper.reduceValue(views, "wordWrap"));\r\n\r\n        // Update Format > ShowVisibility\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_VISIBILITY).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_VISIBILITY).setChecked(Helper.reduceValue(views, "showVisibility"));\r\n\r\n        // Update Format > ShowNamespace\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_NAMESPACE).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_NAMESPACE).setChecked(Helper.reduceValue(views, "showNamespace"));\r\n\r\n        // Update Format > ShowProperty\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_PROPERTY).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_PROPERTY).setChecked(Helper.reduceValue(views, "showProperty"));\r\n\r\n        // Update Format > ShowType\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_TYPE).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_TYPE).setChecked(Helper.reduceValue(views, "showType"));\r\n\r\n        // Update Format > ShowMultiplicity\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_MULTIPLICITY).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_MULTIPLICITY).setChecked(Helper.reduceValue(views, "showMultiplicity"));\r\n\r\n        // Update Format > ShowOperationSignature\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_OPERATION_SIGNATURE).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_SHOW_OPERATION_SIGNATURE).setChecked(Helper.reduceValue(views, "showOperationSignature"));\r\n\r\n        // Update Format > SuppressAttributes\r\n        CommandManager.get(UMLCommands.FORMAT_SUPPRESS_ATTRIBUTES).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_SUPPRESS_ATTRIBUTES).setChecked(Helper.reduceValue(views, "suppressAttributes"));\r\n\r\n        // Update Format > SuppressOperations\r\n        CommandManager.get(UMLCommands.FORMAT_SUPPRESS_OPERATIONS).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_SUPPRESS_OPERATIONS).setChecked(Helper.reduceValue(views, "suppressOperations"));\r\n\r\n        // Update Format > SuppressReceptions\r\n        CommandManager.get(UMLCommands.FORMAT_SUPPRESS_RECEPTIONS).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_SUPPRESS_RECEPTIONS).setChecked(Helper.reduceValue(views, "suppressReceptions"));\r\n\r\n        // Update Format > SuppressLiterals\r\n        CommandManager.get(UMLCommands.FORMAT_SUPPRESS_LITERALS).setEnabled(views.length > 0);\r\n        CommandManager.get(UMLCommands.FORMAT_SUPPRESS_LITERALS).setChecked(Helper.reduceValue(views, "suppressLiterals"));\r\n    }\r\n\r\n    // Register Commands\r\n    CommandManager.register(Strings.CMD_FILE_NEW_FROM_TEMPLATE_UML_MINIMAL,      UMLCommands.FILE_NEW_FROM_TEMPLATE_UML_MINIMAL,      _handleUMLMinimalTemplate);\r\n    CommandManager.register(Strings.CMD_FILE_NEW_FROM_TEMPLATE_UML_CONVENTIONAL, UMLCommands.FILE_NEW_FROM_TEMPLATE_UML_CONVENTIONAL, _handleUMLConventionalTemplate);\r\n    CommandManager.register(Strings.CMD_FILE_NEW_FROM_TEMPLATE_4P1VIEWMODEL,     UMLCommands.FILE_NEW_FROM_TEMPLATE_4P1VIEWMODEL,     _handle4p1ViewModelTemplate);\r\n    CommandManager.register(Strings.CMD_FILE_NEW_FROM_TEMPLATE_RATIONAL,         UMLCommands.FILE_NEW_FROM_TEMPLATE_RATIONAL,         _handleRationalTemplate);\r\n    // Model: Profiles\r\n    CommandManager.register(Strings.CMD_MODEL_APPLY_PROFILE,              UMLCommands.MODEL_APPLY_PROFILE,              _handleApplyProfile);\r\n    CommandManager.register(Strings.CMD_MODEL_APPLY_PROFILE_UML_STANDARD, UMLCommands.MODEL_APPLY_PROFILE_UML_STANDARD, _handleApplyUMLStandardProfile);\r\n    // Model: Packages\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_MODEL,     UMLCommands.MODEL_ADD_MODEL,     _.partial(Factory.createModel, "UMLModel"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_SUBSYSTEM, UMLCommands.MODEL_ADD_SUBSYSTEM, _.partial(Factory.createModel, "UMLSubsystem"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_PACKAGE,   UMLCommands.MODEL_ADD_PACKAGE,   _.partial(Factory.createModel, "UMLPackage"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_PROFILE,   UMLCommands.MODEL_ADD_PROFILE,   _.partial(Factory.createModel, "UMLProfile"));\r\n    // Model: Classes\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_CLASS,         UMLCommands.MODEL_ADD_CLASS,         _.partial(Factory.createModel, "UMLClass"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_INTERFACE,     UMLCommands.MODEL_ADD_INTERFACE,     _.partial(Factory.createModel, "UMLInterface"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_SIGNAL,        UMLCommands.MODEL_ADD_SIGNAL,        _.partial(Factory.createModel, "UMLSignal"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DATATYPE,      UMLCommands.MODEL_ADD_DATATYPE,      _.partial(Factory.createModel, "UMLDataType"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_PRIMITIVETYPE, UMLCommands.MODEL_ADD_PRIMITIVETYPE, _.partial(Factory.createModel, "UMLPrimitiveType"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_ENUMERATION,   UMLCommands.MODEL_ADD_ENUMERATION,   _.partial(Factory.createModel, "UMLEnumeration"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_ARTIFACT,      UMLCommands.MODEL_ADD_ARTIFACT,      _.partial(Factory.createModel, "UMLArtifact"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_COMPONENT,     UMLCommands.MODEL_ADD_COMPONENT,     _.partial(Factory.createModel, "UMLComponent"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_NODE,          UMLCommands.MODEL_ADD_NODE,          _.partial(Factory.createModel, "UMLNode"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_USECASE,       UMLCommands.MODEL_ADD_USECASE,       _.partial(Factory.createModel, "UMLUseCase"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_ACTOR,         UMLCommands.MODEL_ADD_ACTOR,         _.partial(Factory.createModel, "UMLActor"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_STEREOTYPE,    UMLCommands.MODEL_ADD_STEREOTYPE,    _.partial(Factory.createModel, "UMLStereotype"));\r\n    // Model: Instances\r\n    // TODO: Menus for instace types never be enabled. (Delete them or enable them when an element is selected)\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_OBJECT,            UMLCommands.MODEL_ADD_OBJECT,            _.partial(Factory.createModel, "UMLObject"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_ARTIFACTINSTANCE,  UMLCommands.MODEL_ADD_ARTIFACTINSTANCE,  _.partial(Factory.createModel, "UMLArtifactInstance"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_COMPONENTINSTANCE, UMLCommands.MODEL_ADD_COMPONENTINSTANCE, _.partial(Factory.createModel, "UMLComponentInstance"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_NODEINSTANCE,      UMLCommands.MODEL_ADD_NODEINSTANCE,      _.partial(Factory.createModel, "UMLNodeInstance"));\r\n    // Model: Behaviors\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_COLLABORATION,  UMLCommands.MODEL_ADD_COLLABORATION,  _.partial(Factory.createModel, "UMLCollaboration"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_INTERACTION,    UMLCommands.MODEL_ADD_INTERACTION,    _.partial(Factory.createModel, "UMLInteraction"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_STATEMACHINE,   UMLCommands.MODEL_ADD_STATEMACHINE,   _.partial(Factory.createModel, "UMLStateMachine"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_ACTIVITY,       UMLCommands.MODEL_ADD_ACTIVITY,       _.partial(Factory.createModel, "UMLActivity"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_OPAQUEBEHAVIOR, UMLCommands.MODEL_ADD_OPAQUEBEHAVIOR, _.partial(Factory.createModel, "UMLOpaqueBehavior"));\r\n    // Model: Features\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_TEMPLATEPARAMETER,  UMLCommands.MODEL_ADD_TEMPLATEPARAMETER,  _.partial(Factory.createModel, "UMLTemplateParameter",  null, "templateParameters"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_PARAMETER,          UMLCommands.MODEL_ADD_PARAMETER,          _.partial(Factory.createModel, "UMLParameter",          null, "parameters"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_ENUMERATIONLITERAL, UMLCommands.MODEL_ADD_ENUMERATIONLITERAL, _.partial(Factory.createModel, "UMLEnumerationLiteral", null, "literals"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_ATTRIBUTE,          UMLCommands.MODEL_ADD_ATTRIBUTE,          _.partial(Factory.createModel, "UMLAttribute",          null, "attributes"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_PORT,               UMLCommands.MODEL_ADD_PORT,               _.partial(Factory.createModel, "UMLPort",               null, "attributes"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_OPERATION,          UMLCommands.MODEL_ADD_OPERATION,          _.partial(Factory.createModel, "UMLOperation",          null, "operations"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_RECEPTION,          UMLCommands.MODEL_ADD_RECEPTION,          _.partial(Factory.createModel, "UMLReception",          null, "receptions"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_EXTENSIONPOINT,     UMLCommands.MODEL_ADD_EXTENSIONPOINT,     _.partial(Factory.createModel, "UMLExtensionPoint",     null, "extensionPoints"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_SLOT,               UMLCommands.MODEL_ADD_SLOT,               _.partial(Factory.createModel, "UMLSlot",               null, "slots"));\r\n    // Model: States\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_STATE,          UMLCommands.MODEL_ADD_STATE,          _.partial(Factory.createModel, "UMLState",  null, "vertices"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_REGION,         UMLCommands.MODEL_ADD_REGION,         _.partial(Factory.createModel, "UMLRegion", null, "regions"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_ENTRY_ACTIVITY, UMLCommands.MODEL_ADD_ENTRY_ACTIVITY, _handleEntryActivity);\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DO_ACTIVITY,    UMLCommands.MODEL_ADD_DO_ACTIVITY,    _handleDoActivity);\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_EXIT_ACTIVITY,  UMLCommands.MODEL_ADD_EXIT_ACTIVITY,  _handleExitActivity);\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_TRIGGER,        UMLCommands.MODEL_ADD_TRIGGER,        _.partial(Factory.createModel, "UMLEvent",  null, "triggers"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_EFFECT,         UMLCommands.MODEL_ADD_EFFECT,         _handleEffect);\r\n    // Model: Actions\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_ACTION,  UMLCommands.MODEL_ADD_ACTION,  _.partial(Factory.createModel, "UMLAction", null, "nodes"));\r\n    // Model: Common\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_CONSTRAINT, UMLCommands.MODEL_ADD_CONSTRAINT, _handleConstraint);\r\n    // Model: Diagrams\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_USECASE,            UMLCommands.MODEL_ADD_DIAGRAM_USECASE,            _.partial(Factory.createDiagram, "UMLUseCaseDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_CLASS,              UMLCommands.MODEL_ADD_DIAGRAM_CLASS,              _.partial(Factory.createDiagram, "UMLClassDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_PACKAGE,            UMLCommands.MODEL_ADD_DIAGRAM_PACKAGE,            _.partial(Factory.createDiagram, "UMLPackageDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_OBJECT,             UMLCommands.MODEL_ADD_DIAGRAM_OBJECT,             _.partial(Factory.createDiagram, "UMLObjectDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_COMPONENT,          UMLCommands.MODEL_ADD_DIAGRAM_COMPONENT,          _.partial(Factory.createDiagram, "UMLComponentDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_DEPLOYMENT,         UMLCommands.MODEL_ADD_DIAGRAM_DEPLOYMENT,         _.partial(Factory.createDiagram, "UMLDeploymentDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_PROFILE,            UMLCommands.MODEL_ADD_DIAGRAM_PROFILE,            _.partial(Factory.createDiagram, "UMLProfileDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_COMPOSITESTRUCTURE, UMLCommands.MODEL_ADD_DIAGRAM_COMPOSITESTRUCTURE, _.partial(Factory.createDiagram, "UMLCompositeStructureDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_SEQUENCE,           UMLCommands.MODEL_ADD_DIAGRAM_SEQUENCE,           _.partial(Factory.createDiagram, "UMLSequenceDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_COMMUNICATION,      UMLCommands.MODEL_ADD_DIAGRAM_COMMUNICATION,      _.partial(Factory.createDiagram, "UMLCommunicationDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_STATECHART,         UMLCommands.MODEL_ADD_DIAGRAM_STATECHART,         _.partial(Factory.createDiagram, "UMLStatechartDiagram"));\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_DIAGRAM_ACTIVITY,           UMLCommands.MODEL_ADD_DIAGRAM_ACTIVITY,           _.partial(Factory.createDiagram, "UMLActivityDiagram"));\r\n    // Format\r\n    CommandManager.register(Strings.CMD_FORMAT_STEREOTYPE,                    UMLCommands.FORMAT_STEREOTYPE,                  _handleStereotypeDisplay);\r\n    CommandManager.register(Strings.CMD_FORMAT_STEREOTYPE_NONE,               UMLCommands.FORMAT_STEREOTYPE_NONE,             _.partial(_handleStereotypeDisplay, UML.SD_NONE));\r\n    CommandManager.register(Strings.CMD_FORMAT_STEREOTYPE_LABEL,              UMLCommands.FORMAT_STEREOTYPE_LABEL,            _.partial(_handleStereotypeDisplay, UML.SD_LABEL));\r\n    CommandManager.register(Strings.CMD_FORMAT_STEREOTYPE_DECORATION,         UMLCommands.FORMAT_STEREOTYPE_DECORATION,       _.partial(_handleStereotypeDisplay, UML.SD_DECORATION));\r\n    CommandManager.register(Strings.CMD_FORMAT_STEREOTYPE_DECORATION_LABEL,   UMLCommands.FORMAT_STEREOTYPE_DECORATION_LABEL, _.partial(_handleStereotypeDisplay, UML.SD_DECORATION_LABEL));\r\n    CommandManager.register(Strings.CMD_FORMAT_STEREOTYPE_ICON,               UMLCommands.FORMAT_STEREOTYPE_ICON,             _.partial(_handleStereotypeDisplay, UML.SD_ICON));\r\n    CommandManager.register(Strings.CMD_FORMAT_STEREOTYPE_ICON_LABEL,         UMLCommands.FORMAT_STEREOTYPE_ICON_LABEL,       _.partial(_handleStereotypeDisplay, UML.SD_ICON_LABEL));\r\n    CommandManager.register(Strings.CMD_FORMAT_WORD_WRAP,                     UMLCommands.FORMAT_WORD_WRAP,                   _.partial(_handleToggleProperty, "wordWrap"));\r\n    CommandManager.register(Strings.CMD_FORMAT_SHOW_VISIBILITY,               UMLCommands.FORMAT_SHOW_VISIBILITY,             _.partial(_handleToggleProperty, "showVisibility"));\r\n    CommandManager.register(Strings.CMD_FORMAT_SHOW_NAMESPACE,                UMLCommands.FORMAT_SHOW_NAMESPACE,              _.partial(_handleToggleProperty, "showNamespace"));\r\n    CommandManager.register(Strings.CMD_FORMAT_SHOW_PROPERTY,                 UMLCommands.FORMAT_SHOW_PROPERTY,               _.partial(_handleToggleProperty, "showProperty"));\r\n    CommandManager.register(Strings.CMD_FORMAT_SHOW_TYPE,                     UMLCommands.FORMAT_SHOW_TYPE,                   _.partial(_handleToggleProperty, "showType"));\r\n    CommandManager.register(Strings.CMD_FORMAT_SHOW_MULTIPLICITY,             UMLCommands.FORMAT_SHOW_MULTIPLICITY,           _.partial(_handleToggleProperty, "showMultiplicity"));\r\n    CommandManager.register(Strings.CMD_FORMAT_SHOW_OPERATION_SIGNATURE,      UMLCommands.FORMAT_SHOW_OPERATION_SIGNATURE,    _.partial(_handleToggleProperty, "showOperationSignature"));\r\n    CommandManager.register(Strings.CMD_FORMAT_SUPPRESS_ATTRIBUTES,           UMLCommands.FORMAT_SUPPRESS_ATTRIBUTES,         _.partial(_handleToggleProperty, "suppressAttributes"));\r\n    CommandManager.register(Strings.CMD_FORMAT_SUPPRESS_OPERATIONS,           UMLCommands.FORMAT_SUPPRESS_OPERATIONS,         _.partial(_handleToggleProperty, "suppressOperations"));\r\n    CommandManager.register(Strings.CMD_FORMAT_SUPPRESS_RECEPTIONS,           UMLCommands.FORMAT_SUPPRESS_RECEPTIONS,         _.partial(_handleToggleProperty, "suppressReceptions"));\r\n    CommandManager.register(Strings.CMD_FORMAT_SUPPRESS_LITERALS,             UMLCommands.FORMAT_SUPPRESS_LITERALS,           _.partial(_handleToggleProperty, "suppressLiterals"));\r\n\r\n    // Update Commands\r\n    $(SelectionManager).on("selectionChanged", _updateCommands);\r\n    $(Repository).on("operationExecuted", _updateCommands);\r\n\r\n});\r\n\n//# sourceURL=/uml/UMLCommandHandlers.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n// TODO: Separate UMLQuickEdit.js\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell, type */\r\n\r\ndefine('uml/UMLToolbox',['require','exports','module','utils/AppInit','core/Repository','engine/Factory','diagrams/ToolboxView','diagrams/DiagramManager','dialogs/Dialogs','ui/Toast','ui/QuickEdit','dialogs/ElementPickerDialog','uml/UML','uml/UMLDiagram','uml/UMLFactory'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var AppInit                 = require(\"utils/AppInit\"),\r\n        Repository              = require(\"core/Repository\"),\r\n        Factory                 = require(\"engine/Factory\"),\r\n        Toolbox                 = require(\"diagrams/ToolboxView\"),\r\n        DiagramManager          = require(\"diagrams/DiagramManager\"),\r\n        Dialogs                 = require(\"dialogs/Dialogs\"),\r\n        Toast                   = require(\"ui/Toast\"),\r\n        QuickEdit               = require(\"ui/QuickEdit\"),\r\n        ElementPickerDialog     = require(\"dialogs/ElementPickerDialog\"),\r\n        UML                     = require(\"uml/UML\"),\r\n        UMLDiagram              = require(\"uml/UMLDiagram\"),\r\n        UMLFactory              = require(\"uml/UMLFactory\");\r\n\r\n\r\n    /**\r\n     * Toolbox Groups\r\n     * @const\r\n     */\r\n    var TXG_USECASE            = 'txg-usecase',\r\n        TXG_CLASS              = 'txg-class',\r\n        TXG_CLASS_ADV          = 'txg-class-adv',\r\n        TXG_PACKAGE            = 'txg-package',\r\n        TXG_INSTANCE           = 'txg-instance',\r\n        TXG_COMPOSITESTRUCTURE = 'txg-compositestructure',\r\n        TXG_SEQUENCE           = 'txg-sequence',\r\n        TXG_SEQUENCE_ADV       = 'txg-sequence-adv',\r\n        TXG_COMMUNICATION      = 'txg-communication',\r\n        TXG_STATECHART         = 'txg-statechart',\r\n        TXG_STATECHART_ADV     = 'txg-statechart-adv',\r\n        TXG_ACTIVITY           = 'txg-activity',\r\n        TXG_ACTIVITY_ADV       = 'txg-activity-adv',\r\n        TXG_COMPONENT          = 'txg-component',\r\n        TXG_DEPLOYMENT         = 'txg-deployment',\r\n        TXG_PROFILE            = 'txg-profile';\r\n\r\n    /**\r\n     * Toolbox Items\r\n     * @const\r\n     */\r\n    var // Classes (Basic)\r\n        TX_CLASS                = 'tx-class',\r\n        TX_INTERFACE            = 'tx-interface',\r\n        TX_ASSOCIATION          = 'tx-association',\r\n        TX_DIRECTEDASSOCIATION  = 'tx-directedassociation',\r\n        TX_AGGREGATION          = 'tx-aggregation',\r\n        TX_COMPOSITION          = 'tx-composition',\r\n        TX_GENERALIZATION       = 'tx-generalization',\r\n        TX_DEPENDENCY           = 'tx-dependency',\r\n        TX_INTERFACEREALIZATION = 'tx-interface-realization',\r\n        // Classes (Advanced)\r\n        TX_SIGNAL               = 'tx-signal',\r\n        TX_DATATYPE             = 'tx-datatype',\r\n        TX_PRIMITIVETYPE        = 'tx-primitivetype',\r\n        TX_ENUMERATION          = 'tx-enumeration',\r\n        TX_ASSOCIATIONCLASS     = 'tx-associationclass',\r\n        // Packages\r\n        TX_PACKAGE              = 'tx-package',\r\n        TX_MODEL                = 'tx-model',\r\n        TX_SUBSYSTEM            = 'tx-subsystem',\r\n        TX_CONTAINMENT          = 'tx-containment',\r\n        // Components\r\n        TX_ARTIFACT             = 'tx-artifact',\r\n        TX_COMPONENT            = 'tx-component',\r\n        TX_COMPONENTREALIZATION = 'tx-component-realization',\r\n        // Deployments\r\n        TX_NODE                 = 'tx-node',\r\n        TX_DEPLOYMENT           = 'tx-deployment',\r\n        TX_COMMUNICATIONPATH    = 'tx-communicationpath',\r\n        // Use Cases\r\n        TX_USECASE              = 'tx-usecase',\r\n        TX_ACTOR                = 'tx-actor',\r\n        TX_INCLUDE              = 'tx-include',\r\n        TX_EXTEND               = 'tx-extend',\r\n        TX_USECASESUBJECT       = 'tx-usecase-subject',\r\n        // Instances\r\n        TX_OBJECT               = 'tx-object',\r\n        TX_ARTIFACTINSTANCE     = 'tx-artifactinstance',\r\n        TX_COMPONENTINSTANCE    = 'tx-componentinstance',\r\n        TX_NODEINSTANCE         = 'tx-nodeinstance',\r\n        TX_LINK                 = 'tx-link',\r\n        TX_DIRECTEDLINK         = 'tx-directedlink',\r\n        // Composite Structures\r\n        TX_PORT                 = 'tx-port',\r\n        TX_PART                 = 'tx-part',\r\n        TX_CONNECTOR            = 'tx-connector',\r\n        TX_COLLABORATION        = 'tx-collaboration',\r\n        TX_COLLABORATIONUSE     = 'tx-collaborationuse',\r\n        TX_ROLEBINDING          = 'tx-rolebinding',\r\n        TX_REALIZATION          = 'tx-realization',\r\n        // Interactions (Basic) (Sequence Diagram)\r\n        TX_LIFELINE             = 'tx-lifeline',\r\n        TX_MESSAGE              = 'tx-message',\r\n        TX_SELFMESSAGE          = 'tx-selfmessage',\r\n        TX_ASYNC_MESSAGE        = 'tx-async-message',\r\n        TX_REPLY_MESSAGE        = 'tx-reply-message',\r\n        TX_CREATE_MESSAGE       = 'tx-create-message',\r\n        TX_DELETE_MESSAGE       = 'tx-delete-message',\r\n        TX_ASYNC_SIGNAL_MESSAGE = 'tx-async-signal-message',\r\n        // Interactions (Advanced) (Sequence Diagram)\r\n        TX_FOUND_MESSAGE        = 'tx-found-message',\r\n        TX_LOST_MESSAGE         = 'tx-lost-message',\r\n        TX_ENDPOINT             = 'tx-endpoint',\r\n        TX_GATE                 = 'tx-gate',\r\n        TX_STATEINVARIANT       = 'tx-stateinvariant',\r\n        TX_CONTINUATION         = 'tx-continuation',\r\n        TX_COMBINEDFRAGMENT     = 'tx-combinedfragment',\r\n        TX_INTERACTIONUSE       = 'tx-interactionuse',\r\n        // Interactions (Communication Diagram)\r\n        TX_COMMLIFELINE         = 'tx-commlifeline',\r\n        TX_COMMCONNECTOR        = 'tx-commconnector',\r\n        TX_COMMSELFCONNECTOR    = 'tx-commselfconnector',\r\n        TX_FORWARDMESSAGE       = 'tx-forwardmessage',\r\n        TX_REVERSEMESSAGE       = 'tx-reversemessage',\r\n        TX_FRAME                = 'tx-frame',\r\n        // State Machines (Basic)\r\n        TX_STATE                = 'tx-state',\r\n        TX_COMPOSITESTATE       = 'tx-compositestate',\r\n        TX_INITIALSTATE         = 'tx-initialstate',\r\n        TX_CHOICE               = 'tx-choice',\r\n        TX_JOIN                 = 'tx-join',\r\n        TX_FORK                 = 'tx-fork',\r\n        TX_FINALSTATE           = 'tx-finalstate',\r\n        TX_CONNECTIONPOINT      = 'tx-connection-point',\r\n        TX_TRANSITION           = 'tx-transition',\r\n        TX_SELFTRANSITION       = 'tx-selftransition',\r\n        // State Machines (Advanced)\r\n        TX_SUBMACHINESTATE      = 'tx-submachinestate',\r\n        TX_ORTHOGONALSTATE      = 'tx-orthogonalstate',\r\n        TX_JUNCTION             = 'tx-junction',\r\n        TX_SHALLOWHISTORY       = 'tx-shallowhistory',\r\n        TX_DEEPHISTORY          = 'tx-deephistory',\r\n        TX_ENTRYPOINT           = 'tx-entrypoint',\r\n        TX_EXITPOINT            = 'tx-exitpoint',\r\n        TX_TERMINATE            = 'tx-terminate',\r\n        // Activities (Basic)\r\n        TX_ACTION               = 'tx-action',\r\n        TX_INITIALNODE          = 'tx-initialnode',\r\n        TX_ACTIVITYFINALNODE    = 'tx-activityfinalnode',\r\n        TX_FORKNODE             = 'tx-forknode',\r\n        TX_JOINNODE             = 'tx-joinnode',\r\n        TX_MERGENODE            = 'tx-mergenode',\r\n        TX_DECISIONNODE         = 'tx-decisionnode',\r\n        TX_CONTROLFLOW          = 'tx-controlflow',\r\n        // Activities (Advanced)\r\n        TX_INPUTPIN             = 'tx-inputpin',\r\n        TX_OUTPUTPIN            = 'tx-outputpin',\r\n        TX_SWIMLANEVERT         = 'tx-swimlanevert',\r\n        TX_SWIMLANEHORZ         = 'tx-swimlanehorz',\r\n        TX_SENDSIGNAL           = 'tx-sendsignal',\r\n        TX_ACCEPTSIGNAL         = 'tx-acceptsignal',\r\n        TX_ACCEPTTIMEEVENT      = 'tx-acceptTimeEvent',\r\n        TX_FLOWFINALNODE        = 'tx-flowfinalnode',\r\n        TX_OBJECTNODE           = 'tx-objectnode',\r\n        TX_CENTRALBUFFERNODE    = 'tx-centralbuffernode',\r\n        TX_DATASTORENODE        = 'tx-datastorenode',\r\n        TX_INTERRUPTIBLEACTIVITYREGION = 'tx-interruptibleactivityregion',\r\n        TX_STRUCTUREDACTIVITYNODE = 'tx-structuredactivitynode',\r\n        TX_EXPANSIONREGION      = 'tx-expansionregion',\r\n        TX_INPUTEXPANSIONNODE   = 'tx-inputexpansionnode',\r\n        TX_OUTPUTEXPANSIONNODE  = 'tx-outputexpansionnode',\r\n        TX_OBJECTFLOW           = 'tx-objectflow',\r\n        TX_EXCEPTIONHANDLER     = 'tx-exceptionhandler',\r\n        TX_ACTIVITYINTERRUPT    = 'tx-activityinterrupt',\r\n        // Profile\r\n        TX_METACLASS            = 'tx-metaclass',\r\n        TX_STEREOTYPE           = 'tx-stereotype',\r\n        TX_EXTENSION            = 'tx-extension';\r\n\r\n\r\n    /**\r\n     * Error Messages\r\n     */\r\n    var ERR_INVALID_PARENT = \"{{.}} cannot be placed here.\",\r\n        ERR_INVALID_LINK   = \"Invalid connection ({{.}})\";\r\n\r\n    function _getViewByTypes(diagram, canvas, x, y, viewTypes) {\r\n        var i, len, _type, _view;\r\n        for (i = 0, len = viewTypes.length; i < len; i++) {\r\n            _type = viewTypes[i];\r\n            _view  = diagram.getViewAt(canvas, x, y, true, _type);\r\n            if (_view) {\r\n                return _view;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function setupToolbox() {\r\n        // Use Case\r\n        Toolbox.addGroup(TXG_USECASE, 'UseCase', [type.UMLUseCaseDiagram]);\r\n        Toolbox.addItem(TX_PACKAGE,             TXG_USECASE, 'Package',              'icon-UMLPackage',             'rect');\r\n        Toolbox.addItem(TX_USECASESUBJECT,      TXG_USECASE, 'Use Case Subject',     'icon-UMLUseCaseSubject',      'rect');\r\n        Toolbox.addItem(TX_USECASE,             TXG_USECASE, 'Use Case',             'icon-UMLUseCase',             'rect');\r\n        Toolbox.addItem(TX_ACTOR,               TXG_USECASE, 'Actor',                'icon-UMLActor',               'rect');\r\n        Toolbox.addItem(TX_FRAME,               TXG_USECASE, 'Frame',                'icon-UMLFrame',               'rect');\r\n        Toolbox.addItem(TX_ASSOCIATION,         TXG_USECASE, 'Association',          'icon-UMLAssociation',         'line');\r\n        Toolbox.addItem(TX_DIRECTEDASSOCIATION, TXG_USECASE, 'Directed Association', 'icon-UMLDirectedAssociation', 'line');\r\n        Toolbox.addItem(TX_GENERALIZATION,      TXG_USECASE, 'Generalization',       'icon-UMLGeneralization',      'line');\r\n        Toolbox.addItem(TX_DEPENDENCY,          TXG_USECASE, 'Dependency',           'icon-UMLDependency',          'line');\r\n        Toolbox.addItem(TX_INCLUDE,             TXG_USECASE, 'Include',              'icon-UMLInclude',             'line');\r\n        Toolbox.addItem(TX_EXTEND,              TXG_USECASE, 'Extend',               'icon-UMLExtend',              'line');\r\n        // Classes (Basic)\r\n        Toolbox.addGroup(TXG_CLASS, 'Classes (Basic)', [type.UMLClassDiagram, type.UMLCompositeStructureDiagram]);\r\n        Toolbox.addItem(TX_CLASS,                TXG_CLASS, 'Class',                 'icon-UMLClass',                'rect');\r\n        Toolbox.addItem(TX_INTERFACE,            TXG_CLASS, 'Interface',             'icon-UMLInterface',            'rect');\r\n        Toolbox.addItem(TX_ASSOCIATION,          TXG_CLASS, 'Association',           'icon-UMLAssociation',          'line');\r\n        Toolbox.addItem(TX_DIRECTEDASSOCIATION,  TXG_CLASS, 'Directed Association',  'icon-UMLDirectedAssociation',  'line');\r\n        Toolbox.addItem(TX_AGGREGATION,          TXG_CLASS, 'Aggregation',           'icon-UMLAggregation',          'line');\r\n        Toolbox.addItem(TX_COMPOSITION,          TXG_CLASS, 'Composition',           'icon-UMLComposition',          'line');\r\n        Toolbox.addItem(TX_DEPENDENCY,           TXG_CLASS, 'Dependency',            'icon-UMLDependency',           'line');\r\n        Toolbox.addItem(TX_GENERALIZATION,       TXG_CLASS, 'Generalization',        'icon-UMLGeneralization',       'line');\r\n        Toolbox.addItem(TX_INTERFACEREALIZATION, TXG_CLASS, 'Interface Realization', 'icon-UMLInterfaceRealization', 'line');\r\n        // Classes (Advanced)\r\n        Toolbox.addGroup(TXG_CLASS_ADV, 'Classes (Advanced)', [type.UMLClassDiagram, type.UMLCompositeStructureDiagram]);\r\n        Toolbox.addItem(TX_SIGNAL,              TXG_CLASS_ADV, 'Signal',               'icon-UMLSignal',               'rect');\r\n        Toolbox.addItem(TX_DATATYPE,            TXG_CLASS_ADV, 'DataType',             'icon-UMLDataType',             'rect');\r\n        Toolbox.addItem(TX_PRIMITIVETYPE,       TXG_CLASS_ADV, 'PrimitiveType',        'icon-UMLPrimitiveType',        'rect');\r\n        Toolbox.addItem(TX_ENUMERATION,         TXG_CLASS_ADV, 'Enumeration',          'icon-UMLEnumeration',          'rect');\r\n        Toolbox.addItem(TX_FRAME,               TXG_CLASS_ADV, 'Frame',                'icon-UMLFrame',                'rect');\r\n        Toolbox.addItem(TX_ASSOCIATIONCLASS,    TXG_CLASS_ADV, 'Association Class',    'icon-UMLAssociationClassLink', 'line');\r\n        // Packages\r\n        Toolbox.addGroup(TXG_PACKAGE, 'Packages', [type.UMLClassDiagram, type.UMLPackageDiagram]);\r\n        Toolbox.addItem(TX_PACKAGE,             TXG_PACKAGE, 'Package',               'icon-UMLPackage',              'rect');\r\n        Toolbox.addItem(TX_MODEL,               TXG_PACKAGE, 'Model',                 'icon-UMLModel',                'rect');\r\n        Toolbox.addItem(TX_SUBSYSTEM,           TXG_PACKAGE, 'Subsystem',             'icon-UMLSubsystem',            'rect');\r\n        Toolbox.addItem(TX_CONTAINMENT,         TXG_PACKAGE, 'Containment',           'icon-UMLContainment',          'line');\r\n        Toolbox.addItem(TX_DEPENDENCY,          TXG_PACKAGE, 'Dependency',            'icon-UMLDependency',           'line');\r\n        // Component\r\n        Toolbox.addGroup(TXG_COMPONENT, 'Component', [type.UMLComponentDiagram, type.UMLDeploymentDiagram]);\r\n        Toolbox.addItem(TX_COMPONENT,            TXG_COMPONENT, 'Component',             'icon-UMLComponent',            'rect');\r\n        Toolbox.addItem(TX_ARTIFACT,             TXG_COMPONENT, 'Artifact',              'icon-UMLArtifact',             'rect');\r\n        Toolbox.addItem(TX_INTERFACE,            TXG_COMPONENT, 'Interface',             'icon-UMLInterface',            'rect');\r\n        Toolbox.addItem(TX_FRAME,                TXG_COMPONENT, 'Frame',                 'icon-UMLFrame',                'rect');\r\n        Toolbox.addItem(TX_DEPENDENCY,           TXG_COMPONENT, 'Dependency',            'icon-UMLDependency',           'line');\r\n        Toolbox.addItem(TX_INTERFACEREALIZATION, TXG_COMPONENT, 'Interface Realization', 'icon-UMLInterfaceRealization', 'line');\r\n        Toolbox.addItem(TX_COMPONENTREALIZATION, TXG_COMPONENT, 'Component Realization', 'icon-UMLComponentRealization', 'line');\r\n        // Deployment\r\n        Toolbox.addGroup(TXG_DEPLOYMENT, 'Deployment', [type.UMLComponentDiagram, type.UMLDeploymentDiagram]);\r\n        Toolbox.addItem(TX_NODE,                TXG_DEPLOYMENT, 'Node',                 'icon-UMLNode',                'rect');\r\n        Toolbox.addItem(TX_DEPLOYMENT,          TXG_DEPLOYMENT, 'Deployment',           'icon-UMLDependency',          'line');\r\n        Toolbox.addItem(TX_COMMUNICATIONPATH,   TXG_DEPLOYMENT, 'Communication Path',   'icon-UMLCommunicationPath',   'line');\r\n        // Composite Structure\r\n        Toolbox.addGroup(TXG_COMPOSITESTRUCTURE, 'Composite Structure', [type.UMLClassDiagram, type.UMLCompositeStructureDiagram, type.UMLComponentDiagram]);\r\n        Toolbox.addItem(TX_COLLABORATION,    TXG_COMPOSITESTRUCTURE, 'Collaboration',     'icon-UMLCollaboration',    'rect');\r\n        Toolbox.addItem(TX_PORT,             TXG_COMPOSITESTRUCTURE, 'Port',              'icon-UMLPort',             'point');\r\n        Toolbox.addItem(TX_PART,             TXG_COMPOSITESTRUCTURE, 'Part',              'icon-UMLPart',             'rect');\r\n        Toolbox.addItem(TX_CONNECTOR,        TXG_COMPOSITESTRUCTURE, 'Connector',         'icon-UMLConnector',        'line');\r\n        Toolbox.addItem(TX_COLLABORATIONUSE, TXG_COMPOSITESTRUCTURE, 'Collaboration Use', 'icon-UMLCollaborationUse', 'rect');\r\n        Toolbox.addItem(TX_ROLEBINDING,      TXG_COMPOSITESTRUCTURE, 'Role Binding',      'icon-UMLDependency',       'line');\r\n        Toolbox.addItem(TX_REALIZATION,      TXG_COMPOSITESTRUCTURE, 'Realization',       'icon-UMLRealization',      'line');\r\n        // Instances\r\n        Toolbox.addGroup(TXG_INSTANCE, 'Instances', [type.UMLClassDiagram, type.UMLObjectDiagram, type.UMLComponentDiagram, type.UMLDeploymentDiagram]);\r\n        Toolbox.addItem(TX_OBJECT,            TXG_INSTANCE, 'Object',               'icon-UMLObject',            'rect');\r\n        Toolbox.addItem(TX_ARTIFACTINSTANCE,  TXG_INSTANCE, 'Artifact Instance',    'icon-UMLArtifactInstance',  'rect');\r\n        Toolbox.addItem(TX_COMPONENTINSTANCE, TXG_INSTANCE, 'Component Instance',   'icon-UMLComponentInstance', 'rect');\r\n        Toolbox.addItem(TX_NODEINSTANCE,      TXG_INSTANCE, 'Node Instance',        'icon-UMLNodeInstance',      'rect');\r\n        Toolbox.addItem(TX_LINK,              TXG_INSTANCE, 'Link',                 'icon-UMLLink',              'line');\r\n        Toolbox.addItem(TX_DIRECTEDLINK,      TXG_INSTANCE, 'Directed Link',        'icon-UMLDirectedLink',      'line');\r\n        // Sequence (Basic)\r\n        Toolbox.addGroup(TXG_SEQUENCE, 'Interactions (Basic)', [type.UMLSequenceDiagram]);\r\n        Toolbox.addItem(TX_LIFELINE,             TXG_SEQUENCE, 'Lifeline',             'icon-UMLLifeline',           'rect');\r\n        Toolbox.addItem(TX_MESSAGE,              TXG_SEQUENCE, 'Message',              'icon-UMLMessage',            'line');\r\n        Toolbox.addItem(TX_SELFMESSAGE,          TXG_SEQUENCE, 'Self Message',         'icon-UMLSelfMessage',        'point');\r\n        Toolbox.addItem(TX_ASYNC_MESSAGE,        TXG_SEQUENCE, 'Async Message',        'icon-UMLAsyncMessage',       'line');\r\n        Toolbox.addItem(TX_REPLY_MESSAGE,        TXG_SEQUENCE, 'Reply Message',        'icon-UMLReplyMessage',       'line');\r\n        Toolbox.addItem(TX_CREATE_MESSAGE,       TXG_SEQUENCE, 'Create Message',       'icon-UMLCreateMessage',      'line');\r\n        Toolbox.addItem(TX_DELETE_MESSAGE,       TXG_SEQUENCE, 'Delete Message',       'icon-UMLDeleteMessage',      'line');\r\n        Toolbox.addItem(TX_ASYNC_SIGNAL_MESSAGE, TXG_SEQUENCE, 'Async Signal Message', 'icon-UMLAsyncSignalMessage', 'line');\r\n        // Sequence (Advanced)\r\n        Toolbox.addGroup(TXG_SEQUENCE_ADV, 'Interactions (Advanced)', [type.UMLSequenceDiagram]);\r\n        Toolbox.addItem(TX_FOUND_MESSAGE,      TXG_SEQUENCE_ADV, 'Found Message',       'icon-UMLFoundMessage',       'line');\r\n        Toolbox.addItem(TX_LOST_MESSAGE,       TXG_SEQUENCE_ADV, 'Lost Message',        'icon-UMLLostMessage',        'line');\r\n        Toolbox.addItem(TX_ENDPOINT,           TXG_SEQUENCE_ADV, 'Endpoint',            'icon-UMLEndpoint',           'point');\r\n        Toolbox.addItem(TX_GATE,               TXG_SEQUENCE_ADV, 'Gate',                'icon-UMLGate',               'point');\r\n        Toolbox.addItem(TX_STATEINVARIANT,     TXG_SEQUENCE_ADV, 'State Invariant',     'icon-UMLStateInvariant',     'point');\r\n        Toolbox.addItem(TX_CONTINUATION,       TXG_SEQUENCE_ADV, 'Continuation',        'icon-UMLContinuation',       'rect');\r\n        Toolbox.addItem(TX_COMBINEDFRAGMENT,   TXG_SEQUENCE_ADV, 'Combined Fragment',   'icon-UMLCombinedFragment',   'rect');\r\n        Toolbox.addItem(TX_INTERACTIONUSE,     TXG_SEQUENCE_ADV, 'Interaction Use',     'icon-UMLInteractionUse',     'rect');\r\n        Toolbox.addItem(TX_FRAME,              TXG_SEQUENCE_ADV, 'Frame',               'icon-UMLFrame',              'rect');\r\n        // Communication\r\n        Toolbox.addGroup(TXG_COMMUNICATION, 'Communication', [type.UMLCommunicationDiagram]);\r\n        Toolbox.addItem(TX_COMMLIFELINE,      TXG_COMMUNICATION, 'Lifeline',        'icon-UMLObject',         'rect');\r\n        Toolbox.addItem(TX_COMMCONNECTOR,     TXG_COMMUNICATION, 'Connector',       'icon-UMLConnector',      'line');\r\n        Toolbox.addItem(TX_COMMSELFCONNECTOR, TXG_COMMUNICATION, 'Self Connector',  'icon-UMLSelfConnector',  'point');\r\n        Toolbox.addItem(TX_FORWARDMESSAGE,    TXG_COMMUNICATION, 'Forward Message', 'icon-UMLForwardMessage', 'line');\r\n        Toolbox.addItem(TX_REVERSEMESSAGE,    TXG_COMMUNICATION, 'Reverse Message', 'icon-UMLReverseMessage', 'line');\r\n        Toolbox.addItem(TX_FRAME,             TXG_COMMUNICATION, 'Frame',           'icon-UMLFrame',          'rect');\r\n        // Statechart (Basic)\r\n        Toolbox.addGroup(TXG_STATECHART, 'Statechart (Basic)', [type.UMLStatechartDiagram]);\r\n        Toolbox.addItem(TX_STATE,           TXG_STATECHART, 'Simple State',     'icon-UMLState',           'rect');\r\n        Toolbox.addItem(TX_INITIALSTATE,    TXG_STATECHART, 'Initial State',    'icon-UMLInitialState',    'point');\r\n        Toolbox.addItem(TX_CHOICE,          TXG_STATECHART, 'Choice',           'icon-UMLChoice',          'point');\r\n        Toolbox.addItem(TX_JOIN,            TXG_STATECHART, 'Join',             'icon-UMLJoin',            'rect');\r\n        Toolbox.addItem(TX_FORK,            TXG_STATECHART, 'Fork',             'icon-UMLFork',            'rect');\r\n        Toolbox.addItem(TX_FINALSTATE,      TXG_STATECHART, 'Final State',      'icon-UMLFinalState',      'point');\r\n        Toolbox.addItem(TX_TRANSITION,      TXG_STATECHART, 'Transition',       'icon-UMLTransition',      'line');\r\n        Toolbox.addItem(TX_SELFTRANSITION,  TXG_STATECHART, 'Self Transition',  'icon-UMLSelfTransition',  'point');\r\n        // Statechart (Advanced)\r\n        Toolbox.addGroup(TXG_STATECHART_ADV, 'Statechart (Advanced)', [type.UMLStatechartDiagram]);\r\n        Toolbox.addItem(TX_COMPOSITESTATE,  TXG_STATECHART_ADV, 'Composite State',            'icon-UMLCompositeState',           'rect');\r\n        Toolbox.addItem(TX_SUBMACHINESTATE, TXG_STATECHART_ADV, 'Submachine State',           'icon-UMLSubmachineState',          'rect');\r\n        Toolbox.addItem(TX_ORTHOGONALSTATE, TXG_STATECHART_ADV, 'Orthogonal State',           'icon-UMLOrthogonalState',          'rect');\r\n        Toolbox.addItem(TX_JUNCTION,        TXG_STATECHART_ADV, 'Junction',                   'icon-UMLJunction',                 'point');\r\n        Toolbox.addItem(TX_SHALLOWHISTORY,  TXG_STATECHART_ADV, 'Shallow History',            'icon-UMLShallowHistory',           'point');\r\n        Toolbox.addItem(TX_DEEPHISTORY,     TXG_STATECHART_ADV, 'Deep History',               'icon-UMLDeepHistory',              'point');\r\n        Toolbox.addItem(TX_ENTRYPOINT,      TXG_STATECHART_ADV, 'Entry Point',                'icon-UMLEntryPoint',               'point');\r\n        Toolbox.addItem(TX_EXITPOINT,       TXG_STATECHART_ADV, 'Exit Point',                 'icon-UMLExitPoint',                'point');\r\n        Toolbox.addItem(TX_TERMINATE,       TXG_STATECHART_ADV, 'Terminate',                  'icon-UMLTerminate',                'point');\r\n        Toolbox.addItem(TX_CONNECTIONPOINT, TXG_STATECHART_ADV, 'Connection Point Reference', 'icon-UMLConnectionPointReference', 'point');\r\n        Toolbox.addItem(TX_FRAME,           TXG_STATECHART_ADV, 'Frame',                      'icon-UMLFrame',                    'rect');\r\n        // Activity (Basic)\r\n        Toolbox.addGroup(TXG_ACTIVITY, 'Activities (Basic)', [type.UMLActivityDiagram]);\r\n        Toolbox.addItem(TX_ACTION,            TXG_ACTIVITY, 'Action',                'icon-UMLAction',            'rect');\r\n        Toolbox.addItem(TX_INITIALNODE,       TXG_ACTIVITY, 'Initial',               'icon-UMLInitialNode',       'point');\r\n        Toolbox.addItem(TX_ACTIVITYFINALNODE, TXG_ACTIVITY, 'Final',                 'icon-UMLActivityFinalNode', 'point');\r\n        Toolbox.addItem(TX_FORKNODE,          TXG_ACTIVITY, 'Fork',                  'icon-UMLForkNode',          'rect');\r\n        Toolbox.addItem(TX_JOINNODE,          TXG_ACTIVITY, 'Join',                  'icon-UMLJoinNode',          'rect');\r\n        Toolbox.addItem(TX_MERGENODE,         TXG_ACTIVITY, 'Merge',                 'icon-UMLMergeNode',         'point');\r\n        Toolbox.addItem(TX_DECISIONNODE,      TXG_ACTIVITY, 'Decision',              'icon-UMLDecisionNode',      'point');\r\n        Toolbox.addItem(TX_CONTROLFLOW,       TXG_ACTIVITY, 'Control Flow',          'icon-UMLControlFlow',       'line');\r\n        // Activity (Advanced)\r\n        Toolbox.addGroup(TXG_ACTIVITY_ADV, 'Activities (Advanced)', [type.UMLActivityDiagram]);\r\n        Toolbox.addItem(TX_SWIMLANEVERT,      TXG_ACTIVITY_ADV, 'Swimlane (Vertical)',   'icon-UMLSwimlaneVert',      'rect');\r\n        Toolbox.addItem(TX_SWIMLANEHORZ,      TXG_ACTIVITY_ADV, 'Swimlane (Horizontal)', 'icon-UMLSwimlaneHorz',      'rect');\r\n        Toolbox.addItem(TX_INTERRUPTIBLEACTIVITYREGION, TXG_ACTIVITY_ADV, 'Interruptible Activity Region', 'icon-UMLInterruptibleActivityRegion', 'rect');\r\n        Toolbox.addItem(TX_STRUCTUREDACTIVITYNODE, TXG_ACTIVITY_ADV, 'Structured Activity', 'icon-UMLStructuredActivityNode', 'rect');\r\n        Toolbox.addItem(TX_INPUTPIN,          TXG_ACTIVITY_ADV, 'Input Pin',             'icon-UMLInputPin',          'point');\r\n        Toolbox.addItem(TX_OUTPUTPIN,         TXG_ACTIVITY_ADV, 'Output Pin',            'icon-UMLOutputPin',         'point');\r\n        Toolbox.addItem(TX_SENDSIGNAL,        TXG_ACTIVITY_ADV, 'Send Signal',           'icon-UMLSendSignal',        'rect');\r\n        Toolbox.addItem(TX_ACCEPTSIGNAL,      TXG_ACTIVITY_ADV, 'Accept Signal',         'icon-UMLAcceptSignal',      'rect');\r\n        Toolbox.addItem(TX_ACCEPTTIMEEVENT,   TXG_ACTIVITY_ADV, 'Accept Time Event',     'icon-UMLAcceptTimeEvent',   'rect');\r\n        Toolbox.addItem(TX_FLOWFINALNODE,     TXG_ACTIVITY_ADV, 'Flow Final',            'icon-UMLFlowFinalNode',     'point');\r\n        Toolbox.addItem(TX_FRAME,             TXG_ACTIVITY_ADV, 'Frame',                 'icon-UMLFrame',             'rect');\r\n        Toolbox.addItem(TX_OBJECTNODE,        TXG_ACTIVITY_ADV, 'Object Node',           'icon-UMLObjectNode',        'rect');\r\n        Toolbox.addItem(TX_CENTRALBUFFERNODE, TXG_ACTIVITY_ADV, 'Central Buffer',        'icon-UMLCentralBufferNode', 'rect');\r\n        Toolbox.addItem(TX_DATASTORENODE,     TXG_ACTIVITY_ADV, 'Datastore',             'icon-UMLDataStoreNode',     'rect');\r\n        Toolbox.addItem(TX_EXPANSIONREGION,   TXG_ACTIVITY_ADV, 'Expansion Region',      'icon-UMLExpansionRegion',   'rect');\r\n        Toolbox.addItem(TX_INPUTEXPANSIONNODE, TXG_ACTIVITY_ADV,'Input Expansion Node',  'icon-UMLInputExpansionNode','point');\r\n        Toolbox.addItem(TX_OUTPUTEXPANSIONNODE,TXG_ACTIVITY_ADV,'Output Expansion Node', 'icon-UMLOutputExpansionNode','point');\r\n        Toolbox.addItem(TX_OBJECTFLOW,        TXG_ACTIVITY_ADV, 'Object Flow',           'icon-UMLObjectFlow',        'line');\r\n        Toolbox.addItem(TX_EXCEPTIONHANDLER,  TXG_ACTIVITY_ADV, 'Exception Handler',     'icon-UMLExceptionHandler',  'line');\r\n        Toolbox.addItem(TX_ACTIVITYINTERRUPT, TXG_ACTIVITY_ADV, 'Activity Interrupt',    'icon-UMLActivityInterrupt', 'line');\r\n        // Profile\r\n        Toolbox.addGroup(TXG_PROFILE, 'Profiles', [type.UMLProfileDiagram]);\r\n        Toolbox.addItem(TX_METACLASS,      TXG_PROFILE, 'MetaClass',      'icon-UMLMetaClass',      'rect');\r\n        Toolbox.addItem(TX_STEREOTYPE,     TXG_PROFILE, 'Stereotype',     'icon-UMLStereotype',     'rect');\r\n        Toolbox.addItem(TX_ENUMERATION,    TXG_PROFILE, 'Enumeration',    'icon-UMLEnumeration',    'rect');\r\n        Toolbox.addItem(TX_EXTENSION,      TXG_PROFILE, 'Extension',      'icon-UMLExtension',      'line');\r\n        Toolbox.addItem(TX_GENERALIZATION, TXG_PROFILE, 'Generalization', 'icon-UMLGeneralization', 'line');\r\n\r\n        // Event Handling\r\n        $(Toolbox).on('elementCreated', function (event, id, editor, x1, y1, x2, y2) {\r\n            try {\r\n                var diagram   = editor.diagram,\r\n                    parent    = diagram._parent,\r\n                    model     = null,\r\n                    view      = null,\r\n                    tailView  = diagram.getViewAt(editor.canvas, x1, y1, true),\r\n                    headView  = diagram.getViewAt(editor.canvas, x2, y2, true),\r\n                    tailModel = tailView ? tailView.model : null,\r\n                    headModel = headView ? headView.model : null,\r\n                    viewTypes;\r\n\r\n                var options = {\r\n                        x1        : x1,\r\n                        y1        : y1,\r\n                        x2        : x2,\r\n                        y2        : y2,\r\n                        tailView  : diagram.getViewAt(editor.canvas, x1, y1, true),\r\n                        headView  : diagram.getViewAt(editor.canvas, x2, y2, true),\r\n                        tailModel : tailView ? tailView.model : null,\r\n                        headModel : headView ? headView.model : null\r\n                    };\r\n\r\n                switch (id) {\r\n                // Classes\r\n                case TX_CLASS:\r\n                    view = Factory.createModelAndView(\"UMLClass\", parent, diagram, options);\r\n                    break;\r\n                case TX_INTERFACE:\r\n                    view = Factory.createModelAndView(\"UMLInterface\", parent, diagram, options);\r\n                    break;\r\n                case TX_SIGNAL:\r\n                    view = Factory.createModelAndView(\"UMLSignal\", parent, diagram, options);\r\n                    break;\r\n                case TX_DATATYPE:\r\n                    view = Factory.createModelAndView(\"UMLDataType\", parent, diagram, options);\r\n                    break;\r\n                case TX_PRIMITIVETYPE:\r\n                    view = Factory.createModelAndView(\"UMLPrimitiveType\", parent, diagram, options);\r\n                    break;\r\n                case TX_ENUMERATION:\r\n                    view = Factory.createModelAndView(\"UMLEnumeration\", parent, diagram, options);\r\n                    break;\r\n                case TX_ASSOCIATION:\r\n                    view = Factory.createModelAndView(\"UMLAssociation\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_DIRECTEDASSOCIATION:\r\n                    options.modelInitializer = function (model) {\r\n                        model.end1.navigable = false;\r\n                    };\r\n                    view = Factory.createModelAndView(\"UMLAssociation\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_AGGREGATION:\r\n                    options.modelInitializer = function (model) {\r\n                        model.end2.aggregation = UML.AK_SHARED;\r\n                    };\r\n                    view = Factory.createModelAndView(\"UMLAssociation\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_COMPOSITION:\r\n                    options.modelInitializer = function (model) {\r\n                        model.end2.aggregation = UML.AK_COMPOSITE;\r\n                    };\r\n                    view = Factory.createModelAndView(\"UMLAssociation\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_ASSOCIATIONCLASS:\r\n                    view = Factory.createModelAndView(\"UMLAssociationClass\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_DEPENDENCY:\r\n                    view = Factory.createModelAndView(\"UMLDependency\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_GENERALIZATION:\r\n                    view = Factory.createModelAndView(\"UMLGeneralization\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_INTERFACEREALIZATION:\r\n                    view = Factory.createModelAndView(\"UMLInterfaceRealization\", tailModel, diagram, options);\r\n                    break;\r\n\r\n                // Packages\r\n                case TX_MODEL:\r\n                    view = Factory.createModelAndView(\"UMLModel\", parent, diagram, options);\r\n                    break;\r\n                case TX_PACKAGE:\r\n                    view = Factory.createModelAndView(\"UMLPackage\", parent, diagram, options);\r\n                    break;\r\n                case TX_SUBSYSTEM:\r\n                    view = Factory.createModelAndView(\"UMLSubsystem\", parent, diagram, options);\r\n                    break;\r\n                case TX_CONTAINMENT:\r\n                    view = Factory.createModelAndView(\"UMLContainment\", tailModel, diagram, options);\r\n                    break;\r\n\r\n                // Composite Structures\r\n                case TX_PORT:\r\n                    options.containerView = headView;\r\n                    view = Factory.createModelAndView(\"UMLPort\", headModel, diagram, options);\r\n                    break;\r\n                case TX_PART:\r\n                    options.containerView = headView;\r\n                    view = Factory.createModelAndView(\"UMLPart\", headModel, diagram, options);\r\n                    break;\r\n                case TX_COLLABORATION:\r\n                    view = Factory.createModelAndView(\"UMLCollaboration\", parent, diagram, options);\r\n                    break;\r\n                case TX_COLLABORATIONUSE:\r\n                    view = Factory.createModelAndView(\"UMLCollaborationUse\", parent, diagram, options);\r\n                    break;\r\n                case TX_CONNECTOR:\r\n                    view = Factory.createModelAndView(\"UMLConnector\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_ROLEBINDING:\r\n                    view = Factory.createModelAndView(\"UMLRoleBinding\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_REALIZATION:\r\n                    view = Factory.createModelAndView(\"UMLRealization\", tailModel, diagram, options);\r\n                    break;\r\n\r\n                // Components\r\n                case TX_COMPONENT:\r\n                    view = Factory.createModelAndView(\"UMLComponent\", parent, diagram, options);\r\n                    break;\r\n                case TX_ARTIFACT:\r\n                    view = Factory.createModelAndView(\"UMLArtifact\", parent, diagram, options);\r\n                    break;\r\n                case TX_COMPONENTREALIZATION:\r\n                    view = Factory.createModelAndView(\"UMLComponentRealization\", tailModel, diagram, options);\r\n                    break;\r\n\r\n                // Deployments\r\n                case TX_NODE:\r\n                    view = Factory.createModelAndView(\"UMLNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_DEPLOYMENT:\r\n                    view = Factory.createModelAndView(\"UMLDeployment\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_COMMUNICATIONPATH:\r\n                    view = Factory.createModelAndView(\"UMLCommunicationPath\", tailModel, diagram, options);\r\n                    break;\r\n\r\n                // Instances\r\n                case TX_OBJECT:\r\n                    view = Factory.createModelAndView(\"UMLObject\", parent, diagram, options);\r\n                    break;\r\n                case TX_ARTIFACTINSTANCE:\r\n                    view = Factory.createModelAndView(\"UMLArtifactInstance\", parent, diagram, options);\r\n                    break;\r\n                case TX_COMPONENTINSTANCE:\r\n                    view = Factory.createModelAndView(\"UMLComponentInstance\", parent, diagram, options);\r\n                    break;\r\n                case TX_NODEINSTANCE:\r\n                    view = Factory.createModelAndView(\"UMLNodeInstance\", parent, diagram, options);\r\n                    break;\r\n                case TX_LINK:\r\n                    view = Factory.createModelAndView(\"UMLLink\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_DIRECTEDLINK:\r\n                    options.modelInitializer = function (m) { m.end1.navigable = false; };\r\n                    view = Factory.createModelAndView(\"UMLLink\", tailModel, diagram, options);\r\n                    break;\r\n\r\n                // Use Cases\r\n                case TX_USECASESUBJECT:\r\n                    view = Factory.createModelAndView(\"UMLUseCaseSubject\", parent, diagram, options);\r\n                    break;\r\n                case TX_USECASE:\r\n                    view = Factory.createModelAndView(\"UMLUseCase\", parent, diagram, options);\r\n                    break;\r\n                case TX_ACTOR:\r\n                    view = Factory.createModelAndView(\"UMLActor\", parent, diagram, options);\r\n                    break;\r\n                case TX_INCLUDE:\r\n                    view = Factory.createModelAndView(\"UMLInclude\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_EXTEND:\r\n                    view = Factory.createModelAndView(\"UMLExtend\", tailModel, diagram, options);\r\n                    break;\r\n\r\n                // Interactions (Sequence Diagram)\r\n                case TX_LIFELINE:\r\n                    view = Factory.createModelAndView(\"UMLLifeline\", parent, diagram, options);\r\n                    break;\r\n                case TX_ENDPOINT:\r\n                    view = Factory.createModelAndView(\"UMLEndpoint\", parent, diagram, options);\r\n                    break;\r\n                case TX_GATE:\r\n                    view = Factory.createModelAndView(\"UMLGate\", parent, diagram, options);\r\n                    break;\r\n                case TX_MESSAGE:\r\n                    viewTypes = [ type.UMLSeqLifelineView, type.UMLMessageEndpointView ];\r\n                    options.tailView  = _getViewByTypes(diagram, editor.canvas, x1, y1, viewTypes);\r\n                    options.headView  = _getViewByTypes(diagram, editor.canvas, x2, y2, viewTypes);\r\n                    options.tailModel = options.tailView ? options.tailView.model : null;\r\n                    options.headModel = options.headView ? options.headView.model : null;\r\n                    view = Factory.createModelAndView(\"UMLMessage\", parent, diagram, options);\r\n                    break;\r\n                case TX_SELFMESSAGE:\r\n                    viewTypes = [ type.UMLSeqLifelineView ];\r\n                    options.headView  = _getViewByTypes(diagram, editor.canvas, x2, y2, viewTypes);\r\n                    options.tailView = options.headView;\r\n                    options.headModel = options.headView ? options.headView.model : null;\r\n                    options.tailModel = options.headModel;\r\n                    view = Factory.createModelAndView(\"UMLMessage\", parent, diagram, options);\r\n                    break;\r\n                case TX_ASYNC_MESSAGE:\r\n                    viewTypes = [ type.UMLSeqLifelineView, type.UMLMessageEndpointView ];\r\n                    options.tailView  = _getViewByTypes(diagram, editor.canvas, x1, y1, viewTypes);\r\n                    options.headView  = _getViewByTypes(diagram, editor.canvas, x2, y2, viewTypes);\r\n                    options.tailModel = options.tailView ? options.tailView.model : null;\r\n                    options.headModel = options.headView ? options.headView.model : null;\r\n                    options.modelInitializer = function (model) {\r\n                        model.messageSort = UML.MS_ASYNCHCALL;\r\n                    };\r\n                    view = Factory.createModelAndView(\"UMLMessage\", parent, diagram, options);\r\n                    break;\r\n                case TX_REPLY_MESSAGE:\r\n                    viewTypes = [ type.UMLSeqLifelineView, type.UMLMessageEndpointView ];\r\n                    options.tailView  = _getViewByTypes(diagram, editor.canvas, x1, y1, viewTypes);\r\n                    options.headView  = _getViewByTypes(diagram, editor.canvas, x2, y2, viewTypes);\r\n                    options.tailModel = options.tailView ? options.tailView.model : null;\r\n                    options.headModel = options.headView ? options.headView.model : null;\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = \"\";\r\n                        model.messageSort = UML.MS_REPLY;\r\n                    };\r\n                    view = Factory.createModelAndView(\"UMLMessage\", parent, diagram, options);\r\n                    break;\r\n                case TX_CREATE_MESSAGE:\r\n                    viewTypes = [ type.UMLSeqLifelineView, type.UMLMessageEndpointView ];\r\n                    options.tailView  = _getViewByTypes(diagram, editor.canvas, x1, y1, viewTypes);\r\n                    options.headView  = _getViewByTypes(diagram, editor.canvas, x2, y2, viewTypes);\r\n                    options.tailModel = options.tailView ? options.tailView.model : null;\r\n                    options.headModel = options.headView ? options.headView.model : null;\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = \"\";\r\n                        model.messageSort = UML.MS_CREATEMESSAGE;\r\n                    };\r\n                    view = Factory.createModelAndView(\"UMLMessage\", parent, diagram, options);\r\n                    break;\r\n                case TX_DELETE_MESSAGE:\r\n                    viewTypes = [ type.UMLSeqLifelineView, type.UMLMessageEndpointView ];\r\n                    options.tailView  = _getViewByTypes(diagram, editor.canvas, x1, y1, viewTypes);\r\n                    options.headView  = _getViewByTypes(diagram, editor.canvas, x2, y2, viewTypes);\r\n                    options.tailModel = options.tailView ? options.tailView.model : null;\r\n                    options.headModel = options.headView ? options.headView.model : null;\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = \"\";\r\n                        model.messageSort = UML.MS_DELETEMESSAGE;\r\n                    };\r\n                    view = Factory.createModelAndView(\"UMLMessage\", parent, diagram, options);\r\n                    break;\r\n                case TX_ASYNC_SIGNAL_MESSAGE:\r\n                    viewTypes = [ type.UMLSeqLifelineView, type.UMLMessageEndpointView ];\r\n                    options.tailView  = _getViewByTypes(diagram, editor.canvas, x1, y1, viewTypes);\r\n                    options.headView  = _getViewByTypes(diagram, editor.canvas, x2, y2, viewTypes);\r\n                    options.tailModel = options.tailView ? options.tailView.model : null;\r\n                    options.headModel = options.headView ? options.headView.model : null;\r\n                    options.modelInitializer = function (model) {\r\n                        model.messageSort = UML.MS_ASYNCHSIGNAL;\r\n                    };\r\n                    view = Factory.createModelAndView(\"UMLMessage\", parent, diagram, options);\r\n                    break;\r\n                case TX_FOUND_MESSAGE:\r\n                    viewTypes = [ type.UMLSeqLifelineView, type.UMLMessageEndpointView ];\r\n                    options.headView  = _getViewByTypes(diagram, editor.canvas, x2, y2, viewTypes);\r\n                    options.headModel = options.headView ? options.headView.model : null;\r\n                    view = Factory.createModelAndView(\"UMLFoundMessage\", parent, diagram, options);\r\n                    break;\r\n                case TX_LOST_MESSAGE:\r\n                    viewTypes = [ type.UMLSeqLifelineView, type.UMLMessageEndpointView ];\r\n                    options.tailView  = _getViewByTypes(diagram, editor.canvas, x1, y1, viewTypes);\r\n                    options.tailModel = options.tailView ? options.tailView.model : null;\r\n                    view = Factory.createModelAndView(\"UMLLostMessage\", parent, diagram, options);\r\n                    break;\r\n                case TX_STATEINVARIANT:\r\n                    view = Factory.createModelAndView(\"UMLStateInvariant\", parent, diagram, options);\r\n                    break;\r\n                case TX_CONTINUATION:\r\n                    view = Factory.createModelAndView(\"UMLContinuation\", parent, diagram, options);\r\n                    break;\r\n                case TX_COMBINEDFRAGMENT:\r\n                    view = Factory.createModelAndView(\"UMLCombinedFragment\", parent, diagram, options);\r\n                    break;\r\n                case TX_INTERACTIONUSE:\r\n                    view = Factory.createModelAndView(\"UMLInteractionUse\", parent, diagram, options);\r\n                    break;\r\n                case TX_FRAME:\r\n                    ElementPickerDialog.showDialog(\"Select an element to be represented as Frame\", null, type.Model).done(function (buttonId, selected) {\r\n                        if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                            options.viewInitializer = function (v) {\r\n                                v.model = selected;\r\n                            };\r\n                            view = Factory.createModelAndView(\"UMLFrame\", parent, diagram, options);\r\n                        }\r\n                    });\r\n                    break;\r\n\r\n                // Interactions (Communication Diagram)\r\n                case TX_COMMLIFELINE:\r\n                    view = Factory.createModelAndView(\"UMLLifeline\", parent, diagram, options);\r\n                    break;\r\n                case TX_COMMCONNECTOR:\r\n                    view = Factory.createModelAndView(\"UMLConnector\", parent, diagram, options);\r\n                    break;\r\n                case TX_COMMSELFCONNECTOR:\r\n                    options.tailModel = options.headModel;\r\n                    options.tailView = options.headView;\r\n                    view = Factory.createModelAndView(\"UMLConnector\", parent, diagram, options);\r\n                    break;\r\n                case TX_FORWARDMESSAGE:\r\n                    options.direction = \"forward\";\r\n                    options.connector = options.headModel;\r\n                    view = Factory.createModelAndView(\"UMLMessage\", parent, diagram, options);\r\n                    break;\r\n                case TX_REVERSEMESSAGE:\r\n                    options.direction = \"reverse\";\r\n                    options.connector = options.headModel;\r\n                    view = Factory.createModelAndView(\"UMLMessage\", parent, diagram, options);\r\n                    break;\r\n\r\n                // State Machines\r\n                case TX_STATE:\r\n                    view = Factory.createModelAndView(\"UMLState\", parent, diagram, options);\r\n                    break;\r\n                case TX_COMPOSITESTATE:\r\n                    options.regionCount = 1;\r\n                    view = Factory.createModelAndView(\"UMLState\", parent, diagram, options);\r\n                    break;\r\n                case TX_SUBMACHINESTATE:\r\n                    view = Factory.createModelAndView(\"UMLSubmachineState\", parent, diagram, options);\r\n                    break;\r\n                case TX_ORTHOGONALSTATE:\r\n                    options.regionCount = 2;\r\n                    view = Factory.createModelAndView(\"UMLState\", parent, diagram, options);\r\n                    break;\r\n                case TX_INITIALSTATE:\r\n                    options.pseudostateKind = UML.PSK_INITIAL;\r\n                    view = Factory.createModelAndView(\"UMLPseudostate\", parent, diagram, options);\r\n                    break;\r\n                case TX_JUNCTION:\r\n                    options.pseudostateKind = UML.PSK_JUNCTION;\r\n                    view = Factory.createModelAndView(\"UMLPseudostate\", parent, diagram, options);\r\n                    break;\r\n                case TX_CHOICE:\r\n                    options.pseudostateKind = UML.PSK_CHOICE;\r\n                    view = Factory.createModelAndView(\"UMLPseudostate\", parent, diagram, options);\r\n                    break;\r\n                case TX_SHALLOWHISTORY:\r\n                    options.pseudostateKind = UML.PSK_SHALLOWHISTORY;\r\n                    view = Factory.createModelAndView(\"UMLPseudostate\", parent, diagram, options);\r\n                    break;\r\n                case TX_DEEPHISTORY:\r\n                    options.pseudostateKind = UML.PSK_DEEPHISTORY;\r\n                    view = Factory.createModelAndView(\"UMLPseudostate\", parent, diagram, options);\r\n                    break;\r\n                case TX_JOIN:\r\n                    options.pseudostateKind = UML.PSK_JOIN;\r\n                    view = Factory.createModelAndView(\"UMLPseudostate\", parent, diagram, options);\r\n                    break;\r\n                case TX_FORK:\r\n                    options.pseudostateKind = UML.PSK_FORK;\r\n                    view = Factory.createModelAndView(\"UMLPseudostate\", parent, diagram, options);\r\n                    break;\r\n                case TX_ENTRYPOINT:\r\n                    options.pseudostateKind = UML.PSK_ENTRYPOINT;\r\n                    view = Factory.createModelAndView(\"UMLPseudostate\", parent, diagram, options);\r\n                    break;\r\n                case TX_EXITPOINT:\r\n                    options.pseudostateKind = UML.PSK_EXITPOINT;\r\n                    view = Factory.createModelAndView(\"UMLPseudostate\", parent, diagram, options);\r\n                    break;\r\n                case TX_TERMINATE:\r\n                    options.pseudostateKind = UML.PSK_TERMINATE;\r\n                    view = Factory.createModelAndView(\"UMLPseudostate\", parent, diagram, options);\r\n                    break;\r\n                case TX_FINALSTATE:\r\n                    view = Factory.createModelAndView(\"UMLFinalState\", parent, diagram, options);\r\n                    break;\r\n                case TX_CONNECTIONPOINT:\r\n                    options.containerView = headView;\r\n                    view = Factory.createModelAndView(\"UMLConnectionPointReference\", headModel, diagram, options);\r\n                    break;\r\n                case TX_TRANSITION:\r\n                    view = Factory.createModelAndView(\"UMLTransition\", parent, diagram, options);\r\n                    break;\r\n                case TX_SELFTRANSITION:\r\n                    options.tailModel = options.headModel;\r\n                    options.tailView = options.headView;\r\n                    view = Factory.createModelAndView(\"UMLTransition\", parent, diagram, options);\r\n                    break;\r\n\r\n                // Activities\r\n                case TX_ACTION:\r\n                    view = Factory.createModelAndView(\"UMLAction\", parent, diagram, options);\r\n                    break;\r\n                case TX_OBJECTNODE:\r\n                    view = Factory.createModelAndView(\"UMLObjectNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_CENTRALBUFFERNODE:\r\n                    view = Factory.createModelAndView(\"UMLCentralBufferNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_DATASTORENODE:\r\n                    view = Factory.createModelAndView(\"UMLDataStoreNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_INITIALNODE:\r\n                    view = Factory.createModelAndView(\"UMLInitialNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_ACTIVITYFINALNODE:\r\n                    view = Factory.createModelAndView(\"UMLActivityFinalNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_FLOWFINALNODE:\r\n                    view = Factory.createModelAndView(\"UMLFlowFinalNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_FORKNODE:\r\n                    view = Factory.createModelAndView(\"UMLForkNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_JOINNODE:\r\n                    view = Factory.createModelAndView(\"UMLJoinNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_MERGENODE:\r\n                    view = Factory.createModelAndView(\"UMLMergeNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_DECISIONNODE:\r\n                    view = Factory.createModelAndView(\"UMLDecisionNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_INPUTPIN:\r\n                    options.containerView = headView;\r\n                    view = Factory.createModelAndView(\"UMLInputPin\", headModel, diagram, options);\r\n                    break;\r\n                case TX_OUTPUTPIN:\r\n                    options.containerView = headView;\r\n                    view = Factory.createModelAndView(\"UMLOutputPin\", headModel, diagram, options);\r\n                    break;\r\n                case TX_INPUTEXPANSIONNODE:\r\n                    options.containerView = headView;\r\n                    view = Factory.createModelAndView(\"UMLInputExpansionNode\", headModel, diagram, options);\r\n                    break;\r\n                case TX_OUTPUTEXPANSIONNODE:\r\n                    options.containerView = headView;\r\n                    view = Factory.createModelAndView(\"UMLOutputExpansionNode\", headModel, diagram, options);\r\n                    break;\r\n                case TX_SWIMLANEVERT:\r\n                    options.viewInitializer = function (v) { v.isVertical = true; };\r\n                    view = Factory.createModelAndView(\"UMLActivityPartition\", parent, diagram, options);\r\n                    break;\r\n                case TX_INTERRUPTIBLEACTIVITYREGION:\r\n                    view = Factory.createModelAndView(\"UMLInterruptibleActivityRegion\", parent, diagram, options);\r\n                    break;\r\n                case TX_STRUCTUREDACTIVITYNODE:\r\n                    view = Factory.createModelAndView(\"UMLStructuredActivityNode\", parent, diagram, options);\r\n                    break;\r\n                case TX_EXPANSIONREGION:\r\n                    view = Factory.createModelAndView(\"UMLExpansionRegion\", parent, diagram, options);\r\n                    break;\r\n                case TX_SWIMLANEHORZ:\r\n                    options.viewInitializer = function (v) { v.isVertical = false; };\r\n                    view = Factory.createModelAndView(\"UMLActivityPartition\", parent, diagram, options);\r\n                    break;\r\n                case TX_SENDSIGNAL:\r\n                    options.modelInitializer = function (m) { m.kind = UML.ACK_SENDSIGNAL; };\r\n                    view = Factory.createModelAndView(\"UMLAction\", parent, diagram, options);\r\n                    break;\r\n                case TX_ACCEPTSIGNAL:\r\n                    options.modelInitializer = function (m) { m.kind = UML.ACK_ACCEPTSIGNAL; };\r\n                    view = Factory.createModelAndView(\"UMLAction\", parent, diagram, options);\r\n                    break;\r\n                case TX_ACCEPTTIMEEVENT:\r\n                    options.modelInitializer = function (m) { m.kind = UML.ACK_TIMEEVENT; };\r\n                    view = Factory.createModelAndView(\"UMLAction\", parent, diagram, options);\r\n                    break;\r\n                case TX_CONTROLFLOW:\r\n                    view = Factory.createModelAndView(\"UMLControlFlow\", parent, diagram, options);\r\n                    break;\r\n                case TX_OBJECTFLOW:\r\n                    view = Factory.createModelAndView(\"UMLObjectFlow\", parent, diagram, options);\r\n                    break;\r\n                case TX_EXCEPTIONHANDLER:\r\n                    view = Factory.createModelAndView(\"UMLExceptionHandler\", parent, diagram, options);\r\n                    break;\r\n                case TX_ACTIVITYINTERRUPT:\r\n                    view = Factory.createModelAndView(\"UMLActivityInterrupt\", parent, diagram, options);\r\n                    break;\r\n\r\n                // Profiles\r\n                case TX_METACLASS:\r\n                    view = Factory.createModelAndView(\"UMLMetaClass\", parent, diagram, options);\r\n                    break;\r\n                case TX_STEREOTYPE:\r\n                    view = Factory.createModelAndView(\"UMLStereotype\", parent, diagram, options);\r\n                    break;\r\n                case TX_EXTENSION:\r\n                    view = Factory.createModelAndView(\"UMLExtension\", tailModel, diagram, options);\r\n                    break;\r\n                }\r\n\r\n                // Open QuickEdit for the created view.\r\n                if (view) {\r\n                    view = Repository.get(view._id);\r\n                    if (view instanceof type.NodeView) {\r\n                        _.defer(function () {\r\n                            QuickEdit.open(editor, view, view.left, view.top);\r\n                        });\r\n                    } else if (view instanceof type.EdgeView) {\r\n                        _.defer(function () {\r\n                            QuickEdit.open(editor, view, Math.round((x1 + x2) / 2), Math.round((y1 + y2) / 2));\r\n                        });\r\n                    }\r\n                }\r\n\r\n            } catch (err) {\r\n                if (_.isString(err)) {\r\n                    Toast.error(err);\r\n                } else {\r\n                    console.error(err.stack);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupDiagramManager() {\r\n        $(DiagramManager).on('currentDiagramChanged', function (event, diagram, editor) {\r\n            try {\r\n                if (diagram) {\r\n                    if (diagram instanceof type.UMLUseCaseDiagram) {\r\n                        Toolbox.expandGroup(TXG_USECASE);\r\n                    } else if (diagram instanceof type.UMLClassDiagram) {\r\n                        Toolbox.expandGroup(TXG_CLASS);\r\n                    } else if (diagram instanceof type.UMLCompositeStructureDiagram) {\r\n                        Toolbox.expandGroup(TXG_CLASS);\r\n                        Toolbox.expandGroup(TXG_COMPOSITESTRUCTURE);\r\n                    } else if (diagram instanceof type.UMLPackageDiagram) {\r\n                        Toolbox.expandGroup(TXG_PACKAGE);\r\n                    } else if (diagram instanceof type.UMLObjectDiagram) {\r\n                        Toolbox.expandGroup(TXG_INSTANCE);\r\n                    } else if (diagram instanceof type.UMLSequenceDiagram) {\r\n                        Toolbox.expandGroup(TXG_SEQUENCE);\r\n                    } else if (diagram instanceof type.UMLCommunicationDiagram) {\r\n                        Toolbox.expandGroup(TXG_COMMUNICATION);\r\n                    } else if (diagram instanceof type.UMLStatechartDiagram) {\r\n                        Toolbox.expandGroup(TXG_STATECHART);\r\n                    } else if (diagram instanceof type.UMLActivityDiagram) {\r\n                        Toolbox.expandGroup(TXG_ACTIVITY);\r\n                    } else if (diagram instanceof type.UMLComponentDiagram) {\r\n                        Toolbox.expandGroup(TXG_COMPONENT);\r\n                        Toolbox.expandGroup(TXG_DEPLOYMENT);\r\n                    } else if (diagram instanceof type.UMLDeploymentDiagram) {\r\n                        Toolbox.expandGroup(TXG_COMPONENT);\r\n                        Toolbox.expandGroup(TXG_DEPLOYMENT);\r\n                    } else if (diagram instanceof type.UMLProfileDiagram) {\r\n                        Toolbox.expandGroup(TXG_PROFILE);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupToolbox();\r\n        setupDiagramManager();\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/uml/UMLToolbox.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell */\r\ndefine(\'uml/UMLMenus\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Global\',\'utils/Helper\',\'command/Commands\',\'command/CommandManager\',\'menu/MenuManager\',\'menu/ContextMenuManager\',\'menu/DefaultMenus\',\'strings\',\'uml/UMLCommands\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit            = require("utils/AppInit"),\r\n        global             = require("core/Global").global,\r\n        Helper             = require("utils/Helper"),\r\n        Commands           = require("command/Commands"),\r\n        CommandManager     = require("command/CommandManager"),\r\n        MenuManager        = require("menu/MenuManager"),\r\n        ContextMenuManager = require("menu/ContextMenuManager"),\r\n        DefaultMenus       = require("menu/DefaultMenus"),\r\n        Strings            = require("strings"),\r\n        UMLCommands        = require("uml/UMLCommands");\r\n\r\n    /**\r\n     * Add context menu items to add an UML element.\r\n     */\r\n    function _addElementMenus(menu) {\r\n        // Model: Features\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_TEMPLATEPARAMETER, "icon-UMLTemplateParameter");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_PARAMETER, "icon-UMLParameter");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_ENUMERATIONLITERAL, "icon-UMLEnumerationLiteral");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_ATTRIBUTE, "icon-UMLAttribute");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_PORT, "icon-UMLPort");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_OPERATION, "icon-UMLOperation");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_RECEPTION, "icon-UMLReception");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_EXTENSIONPOINT, "icon-UMLExtensionPoint");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_SLOT, "icon-UMLSlot");\r\n        // Model: Packages\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_MODEL, "icon-UMLModel");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_SUBSYSTEM, "icon-UMLSubsystem");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_PACKAGE, "icon-UMLPackage");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_PROFILE, "icon-UMLProfile");\r\n        // Model: Classes\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_CLASS, "icon-UMLClass");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_INTERFACE, "icon-UMLInterface");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_SIGNAL, "icon-UMLSignal");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DATATYPE, "icon-UMLDataType");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_PRIMITIVETYPE, "icon-UMLPrimitiveType");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_ENUMERATION, "icon-UMLEnumeration");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_ARTIFACT, "icon-UMLArtifact");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_COMPONENT, "icon-UMLComponent");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_NODE, "icon-UMLNode");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_USECASE, "icon-UMLUseCase");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_ACTOR, "icon-UMLActor");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_STEREOTYPE, "icon-UMLStereotype");\r\n        // Model: Instances\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_OBJECT, "icon-UMLObject");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_ARTIFACTINSTANCE, "icon-UMLArtifactInstance");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_COMPONENTINSTANCE, "icon-UMLComponentInstance");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_NODEINSTANCE, "icon-UMLNodeInstance");\r\n        // Model: Behaviors\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_COLLABORATION, "icon-UMLCollaboration");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_INTERACTION, "icon-UMLInteraction");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_STATEMACHINE, "icon-UMLStateMachine");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_ACTIVITY, "icon-UMLActivity");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_OPAQUEBEHAVIOR, "icon-UMLOpaqueBehavior");\r\n        // Model: States\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_STATE, "icon-UMLState");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_REGION, "icon-UMLRegion");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_ENTRY_ACTIVITY, "icon-UMLEntryActivity");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DO_ACTIVITY, "icon-UMLDoActivity");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_EXIT_ACTIVITY, "icon-UMLExitActivity");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_TRIGGER, "icon-UMLEvent");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_EFFECT,  "icon-UMLEffect");\r\n        // Model: Actions\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_ACTION, "icon-UMLAction");\r\n        // Model: Common\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_CONSTRAINT, "icon-UMLConstraint");\r\n    }\r\n\r\n    /**\r\n     * Add context menu items to add an UML diagram.\r\n     */\r\n    function _addDiagramMenus(menu) {\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_CLASS, "icon-UMLClassDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_PACKAGE, "icon-UMLPackageDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_OBJECT, "icon-UMLObjectDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_COMPOSITESTRUCTURE, "icon-UMLCompositeStructureDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_COMPONENT, "icon-UMLComponentDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_DEPLOYMENT, "icon-UMLDeploymentDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_USECASE, "icon-UMLUseCaseDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_SEQUENCE, "icon-UMLSequenceDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_COMMUNICATION, "icon-UMLCommunicationDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_STATECHART, "icon-UMLStatechartDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_ACTIVITY, "icon-UMLActivityDiagram");\r\n        menu.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_PROFILE, "icon-UMLProfileDiagram");\r\n    }\r\n\r\n\r\n    function setupMenus() {\r\n        var menu,\r\n            menuItem;\r\n\r\n        // File: New From Template\r\n        menu = MenuManager.getMenuItem(Commands.FILE_NEW_FROM_TEMPLATE);\r\n        menu.addMenuItem(UMLCommands.FILE_NEW_FROM_TEMPLATE_UML_MINIMAL);\r\n        menu.addMenuItem(UMLCommands.FILE_NEW_FROM_TEMPLATE_UML_CONVENTIONAL);\r\n        menu.addMenuItem(UMLCommands.FILE_NEW_FROM_TEMPLATE_4P1VIEWMODEL);\r\n        menu.addMenuItem(UMLCommands.FILE_NEW_FROM_TEMPLATE_RATIONAL);\r\n\r\n        // Model\r\n        menu = MenuManager.getMenu(Commands.MODEL);\r\n        // Model: Features\r\n        menuItem = MenuManager.getMenuItem(Commands.MODEL_ADD);\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_TEMPLATEPARAMETER, null, null, null, "icon-UMLTemplateParameter");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_PARAMETER, null, null, null, "icon-UMLParameter");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_ENUMERATIONLITERAL, null, null, null, "icon-UMLEnumerationLiteral");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_ATTRIBUTE, null, null, null, "icon-UMLAttribute");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_PORT, null, null, null, "icon-UMLPort");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_OPERATION, null, null, null, "icon-UMLOperation");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_RECEPTION, null, null, null, "icon-UMLReception");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_EXTENSIONPOINT, null, null, null, "icon-UMLExtensionPoint");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_SLOT, null, null, null, "icon-UMLSlot");\r\n        // Model: Packages\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_MODEL, null, null, null, "icon-UMLModel");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_SUBSYSTEM, null, null, null, "icon-UMLSubsystem");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_PACKAGE, null, null, null, "icon-UMLPackage");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_PROFILE, null, null, null, "icon-UMLProfile");\r\n        // Model: Classes\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_CLASS, null, null, null, "icon-UMLClass");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_INTERFACE, null, null, null, "icon-UMLInterface");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_SIGNAL, null, null, null, "icon-UMLSignal");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DATATYPE, null, null, null, "icon-UMLDataType");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_PRIMITIVETYPE, null, null, null, "icon-UMLPrimitiveType");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_ENUMERATION, null, null, null, "icon-UMLEnumeration");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_ARTIFACT, null, null, null, "icon-UMLArtifact");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_COMPONENT, null, null, null, "icon-UMLComponent");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_NODE, null, null, null, "icon-UMLNode");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_USECASE, null, null, null, "icon-UMLUseCase");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_ACTOR, null, null, null, "icon-UMLActor");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_STEREOTYPE, null, null, null, "icon-UMLStereotype");\r\n        // Model: Instances\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_OBJECT, null, null, null, "icon-UMLObject");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_ARTIFACTINSTANCE, null, null, null, "icon-UMLArtifactInstance");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_COMPONENTINSTANCE, null, null, null, "icon-UMLComponentInstance");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_NODEINSTANCE, null, null, null, "icon-UMLNodeInstance");\r\n        // Model: Behaviors\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_COLLABORATION, null, null, null, "icon-UMLCollaboration");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_INTERACTION, null, null, null, "icon-UMLInteraction");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_STATEMACHINE, null, null, null, "icon-UMLStateMachine");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_ACTIVITY, null, null, null, "icon-UMLActivity");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_OPAQUEBEHAVIOR, null, null, null, "icon-UMLOpaqueBehavior");\r\n        // Model: States\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_STATE, null, null, null, "icon-UMLState");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_REGION, null, null, null, "icon-UMLRegion");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_ENTRY_ACTIVITY, null, null, null, "icon-UMLEntryActivity");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DO_ACTIVITY, null, null, null, "icon-UMLDoActivity");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_EXIT_ACTIVITY, null, null, null, "icon-UMLExitActivity");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_TRIGGER, null, null, null, "icon-UMLEvent");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_EFFECT, null, null, null, "icon-UMLEffect");\r\n        // Model: Actions\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_ACTION, null, null, null, "icon-UMLAction");\r\n        // Model: Common\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_CONSTRAINT, null, null, null, "icon-UMLConstraint");\r\n        // Model: Diagrams\r\n        menuItem = MenuManager.getMenuItem(Commands.MODEL_ADD_DIAGRAM);\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_CLASS, null, null, null, "icon-UMLClassDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_PACKAGE, null, null, null, "icon-UMLPackageDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_OBJECT, null, null, null, "icon-UMLObjectDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_COMPOSITESTRUCTURE, null, null, null, "icon-UMLCompositeStructureDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_COMPONENT, null, null, null, "icon-UMLComponentDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_DEPLOYMENT, null, null, null, "icon-UMLDeploymentDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_USECASE, null, null, null, "icon-UMLUseCaseDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_SEQUENCE, null, null, null, "icon-UMLSequenceDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_COMMUNICATION, null, null, null, "icon-UMLCommunicationDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_STATECHART, null, null, null, "icon-UMLStatechartDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_ACTIVITY, null, null, null, "icon-UMLActivityDiagram");\r\n        menuItem.addMenuItem(UMLCommands.MODEL_ADD_DIAGRAM_PROFILE, null, null, null, "icon-UMLProfileDiagram");\r\n\r\n        // Model: Profiles\r\n        menu.addMenuDivider();\r\n        menuItem = menu.addMenuItem(UMLCommands.MODEL_APPLY_PROFILE);\r\n        menuItem.addMenuItem(UMLCommands.MODEL_APPLY_PROFILE_UML_STANDARD);\r\n\r\n        // Format\r\n        menu = MenuManager.getMenu(Commands.FORMAT);\r\n        menu.addMenuDivider();\r\n        menuItem = menu.addMenuItem(UMLCommands.FORMAT_STEREOTYPE);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_NONE);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_LABEL);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_DECORATION);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_DECORATION_LABEL);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_ICON);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_ICON_LABEL);\r\n        menu.addMenuItem(UMLCommands.FORMAT_WORD_WRAP);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_VISIBILITY);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_NAMESPACE);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_PROPERTY);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_TYPE);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_MULTIPLICITY);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_OPERATION_SIGNATURE);\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(UMLCommands.FORMAT_SUPPRESS_ATTRIBUTES);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SUPPRESS_OPERATIONS);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SUPPRESS_RECEPTIONS);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SUPPRESS_LITERALS);\r\n    }\r\n\r\n    /**\r\n     * Extend ContextMenu for Diagram\r\n     */\r\n    function setupContextMenuForDiagram() {\r\n        var contextMenu, menu, menuItem;\r\n        contextMenu = ContextMenuManager.getContextMenu(DefaultMenus.contextMenus.DIAGRAM);\r\n\r\n        // Model Add\r\n        menu = contextMenu.getMenuItem(Commands.MODEL_ADD);\r\n        _addElementMenus(menu);\r\n\r\n        // Format\r\n        menu = contextMenu.getMenuItem(Commands.FORMAT);\r\n        menu.addMenuDivider();\r\n        menuItem = menu.addMenuItem(UMLCommands.FORMAT_STEREOTYPE);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_NONE);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_LABEL);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_DECORATION);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_DECORATION_LABEL);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_ICON);\r\n        menuItem.addMenuItem(UMLCommands.FORMAT_STEREOTYPE_ICON_LABEL);\r\n        menu.addMenuItem(UMLCommands.FORMAT_WORD_WRAP);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_VISIBILITY);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_NAMESPACE);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_PROPERTY);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_TYPE);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_MULTIPLICITY);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SHOW_OPERATION_SIGNATURE);\r\n        menu.addMenuDivider();\r\n        menu.addMenuItem(UMLCommands.FORMAT_SUPPRESS_ATTRIBUTES);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SUPPRESS_OPERATIONS);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SUPPRESS_RECEPTIONS);\r\n        menu.addMenuItem(UMLCommands.FORMAT_SUPPRESS_LITERALS);\r\n    }\r\n\r\n    /**\r\n     * Extend ContextMenu for Explorer\r\n     */\r\n    function setupContextMenuForExplorer() {\r\n        var contextMenu, menu;\r\n        contextMenu = ContextMenuManager.getContextMenu(DefaultMenus.contextMenus.EXPLORER);\r\n\r\n        // Model Add Diagram\r\n        menu = contextMenu.getMenuItem(Commands.MODEL_ADD_DIAGRAM);\r\n        _addDiagramMenus(menu);\r\n\r\n        // Model Add\r\n        menu = contextMenu.getMenuItem(Commands.MODEL_ADD);\r\n        _addElementMenus(menu);\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupMenus();\r\n        setupContextMenuForDiagram();\r\n        setupContextMenuForExplorer();\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/uml/UMLMenus.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, staruml */\r\n\r\ndefine(\'uml/UMLPreferences\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Core\',\'uml/UML\',\'core/PreferenceManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit           = require("utils/AppInit"),\r\n        Core              = require("core/Core"),\r\n        UML               = require("uml/UML"),\r\n        PreferenceManager = require("core/PreferenceManager");\r\n\r\n    var UMLPreferences = {\r\n        "uml.package": {\r\n            text: "Package",\r\n            type: "Section"\r\n        },\r\n        "uml.package.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Package.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.model": {\r\n            text: "Model",\r\n            type: "Section"\r\n        },\r\n        "uml.model.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Model.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.subsystem": {\r\n            text: "Subsystem",\r\n            type: "Section"\r\n        },\r\n        "uml.subsystem.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Subsystem.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.class": {\r\n            text: "Class",\r\n            type: "Section"\r\n        },\r\n        "uml.class.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Class.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.class.stereotypeDisplay": {\r\n            text: "Stereotype Display",\r\n            description: "Default stereotype display of Class.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: UML.SD_NONE,             text: "None" },\r\n                { value: UML.SD_LABEL,            text: "Label" },\r\n                { value: UML.SD_DECORATION,       text: "Decoration" },\r\n                { value: UML.SD_DECORATION_LABEL, text: "Decoration with Label" },\r\n                { value: UML.SD_ICON,             text: "Icon" },\r\n                { value: UML.SD_ICON_LABEL,       text: "Icon with Label" }\r\n            ],\r\n            default: UML.SD_LABEL\r\n        },\r\n        "uml.class.suppressAttributes": {\r\n            text: "Suppress Attributes",\r\n            description: "Suppress attributes of Class.",\r\n            type: "Check",\r\n            default: false\r\n        },\r\n        "uml.class.suppressOperations": {\r\n            text: "Suppress Operations",\r\n            description: "Suppress operations of Class.",\r\n            type: "Check",\r\n            default: false\r\n        },\r\n        "uml.interface": {\r\n            text: "Interface",\r\n            type: "Section"\r\n        },\r\n        "uml.interface.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Interface.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.interface.stereotypeDisplay": {\r\n            text: "Stereotype Display",\r\n            description: "Default stereotype display of Interface.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: UML.SD_NONE,             text: "None" },\r\n                { value: UML.SD_LABEL,            text: "Label" },\r\n                { value: UML.SD_DECORATION,       text: "Decoration" },\r\n                { value: UML.SD_DECORATION_LABEL, text: "Decoration with Label" },\r\n                { value: UML.SD_ICON,             text: "Icon" },\r\n                { value: UML.SD_ICON_LABEL,       text: "Icon with Label" }\r\n            ],\r\n            default: UML.SD_ICON\r\n        },\r\n        "uml.interface.suppressAttributes": {\r\n            text: "Suppress Attributes",\r\n            description: "Suppress attributes of Interface.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.interface.suppressOperations": {\r\n            text: "Suppress Operations",\r\n            description: "Suppress operations of Interface.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.signal": {\r\n            text: "Signal",\r\n            type: "Section"\r\n        },\r\n        "uml.signal.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Signal.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.datatype": {\r\n            text: "DataType",\r\n            type: "Section"\r\n        },\r\n        "uml.datatype.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of DataType.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.primitivetype": {\r\n            text: "Primitive Type",\r\n            type: "Section"\r\n        },\r\n        "uml.primitivetype.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Primitive Type.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.enumeration": {\r\n            text: "Enumeration",\r\n            type: "Section"\r\n        },\r\n        "uml.enumeration.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Enumeration.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.enumeration.stereotypeDisplay": {\r\n            text: "Stereotype Display",\r\n            description: "Default stereotype display of Enumeration.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: UML.SD_NONE,             text: "None" },\r\n                { value: UML.SD_LABEL,            text: "Label" },\r\n                { value: UML.SD_DECORATION,       text: "Decoration" },\r\n                { value: UML.SD_DECORATION_LABEL, text: "Decoration with Label" },\r\n                { value: UML.SD_ICON,             text: "Icon" },\r\n                { value: UML.SD_ICON_LABEL,       text: "Icon with Label" }\r\n            ],\r\n            default: UML.SD_LABEL\r\n        },\r\n        "uml.enumeration.suppressAttributes": {\r\n            text: "Suppress Attributes",\r\n            description: "Suppress attributes of Enumeration.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.enumeration.suppressOperations": {\r\n            text: "Suppress Operations",\r\n            description: "Suppress operations of Enumeration.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.enumeration.suppressLiterals": {\r\n            text: "Suppress Literals",\r\n            description: "Suppress literals of Enumeration.",\r\n            type: "Check",\r\n            default: false\r\n        },\r\n        "uml.port": {\r\n            text: "Port",\r\n            type: "Section"\r\n        },\r\n        "uml.port.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Port.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.part": {\r\n            text: "Part",\r\n            type: "Section"\r\n        },\r\n        "uml.part.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Part.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.collaboration": {\r\n            text: "Collaboration",\r\n            type: "Section"\r\n        },\r\n        "uml.collaboration.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Collaboration.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.collaborationuse": {\r\n            text: "Collaboration Use",\r\n            type: "Section"\r\n        },\r\n        "uml.collaborationuse.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Collaboration Use.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.artifact": {\r\n            text: "Artifact",\r\n            type: "Section"\r\n        },\r\n        "uml.artifact.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Artifact.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.artifact.stereotypeDisplay": {\r\n            text: "Stereotype Display",\r\n            description: "Default stereotype display of Artifact.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: UML.SD_NONE,             text: "None" },\r\n                { value: UML.SD_LABEL,            text: "Label" },\r\n                { value: UML.SD_DECORATION,       text: "Decoration" },\r\n                { value: UML.SD_DECORATION_LABEL, text: "Decoration with Label" },\r\n                { value: UML.SD_ICON,             text: "Icon" },\r\n                { value: UML.SD_ICON_LABEL,       text: "Icon with Label" }\r\n            ],\r\n            default: UML.SD_ICON\r\n        },\r\n        "uml.artifact.suppressAttributes": {\r\n            text: "Suppress Attributes",\r\n            description: "Suppress attributes of Artifact.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.artifact.suppressOperations": {\r\n            text: "Suppress Operations",\r\n            description: "Suppress operations of Artifact.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.component": {\r\n            text: "Component",\r\n            type: "Section"\r\n        },\r\n        "uml.component.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Component.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.component.stereotypeDisplay": {\r\n            text: "Stereotype Display",\r\n            description: "Default stereotype display of Component.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: UML.SD_NONE,             text: "None" },\r\n                { value: UML.SD_LABEL,            text: "Label" },\r\n                { value: UML.SD_DECORATION,       text: "Decoration" },\r\n                { value: UML.SD_DECORATION_LABEL, text: "Decoration with Label" },\r\n                { value: UML.SD_ICON,             text: "Icon" },\r\n                { value: UML.SD_ICON_LABEL,       text: "Icon with Label" }\r\n            ],\r\n            default: UML.SD_LABEL\r\n        },\r\n        "uml.component.suppressAttributes": {\r\n            text: "Suppress Attributes",\r\n            description: "Suppress attributes of Component.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.component.suppressOperations": {\r\n            text: "Suppress Operations",\r\n            description: "Suppress operations of Component.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.node": {\r\n            text: "Node",\r\n            type: "Section"\r\n        },\r\n        "uml.node.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Node.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.node.stereotypeDisplay": {\r\n            text: "Stereotype Display",\r\n            description: "Default stereotype display of Node.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: UML.SD_NONE,             text: "None" },\r\n                { value: UML.SD_LABEL,            text: "Label" },\r\n                { value: UML.SD_DECORATION,       text: "Decoration" },\r\n                { value: UML.SD_DECORATION_LABEL, text: "Decoration with Label" },\r\n                { value: UML.SD_ICON,             text: "Icon" },\r\n                { value: UML.SD_ICON_LABEL,       text: "Icon with Label" }\r\n            ],\r\n            default: UML.SD_LABEL\r\n        },\r\n        "uml.node.suppressAttributes": {\r\n            text: "Suppress Attributes",\r\n            description: "Suppress attributes of Node.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.node.suppressOperations": {\r\n            text: "Suppress Operations",\r\n            description: "Suppress operations of Node.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.object": {\r\n            text: "Object",\r\n            type: "Section"\r\n        },\r\n        "uml.object.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Object.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.artifactinstance": {\r\n            text: "Artifact Instance",\r\n            type: "Section"\r\n        },\r\n        "uml.artifactinstance.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Artifact Instance.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.componentinstance": {\r\n            text: "Component Instance",\r\n            type: "Section"\r\n        },\r\n        "uml.componentinstance.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Component Instance.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.nodeinstance": {\r\n            text: "Node Instance",\r\n            type: "Section"\r\n        },\r\n        "uml.nodeinstance.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Node Instance.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.usecase": {\r\n            text: "Use Case",\r\n            type: "Section"\r\n        },\r\n        "uml.usecase.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Use Case.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.usecase.stereotypeDisplay": {\r\n            text: "Stereotype Display",\r\n            description: "Default stereotype display of Use Case.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: UML.SD_NONE,             text: "None" },\r\n                { value: UML.SD_LABEL,            text: "Label" },\r\n                { value: UML.SD_DECORATION,       text: "Decoration" },\r\n                { value: UML.SD_DECORATION_LABEL, text: "Decoration with Label" },\r\n                { value: UML.SD_ICON,             text: "Icon" },\r\n                { value: UML.SD_ICON_LABEL,       text: "Icon with Label" }\r\n            ],\r\n            default: UML.SD_LABEL\r\n        },\r\n        "uml.usecase.suppressAttributes": {\r\n            text: "Suppress Attributes",\r\n            description: "Suppress attributes of Use Case.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.usecase.suppressOperations": {\r\n            text: "Suppress Operations",\r\n            description: "Suppress operations of Use Case.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.actor": {\r\n            text: "Actor",\r\n            type: "Section"\r\n        },\r\n        "uml.actor.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Actor.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.actor.stereotypeDisplay": {\r\n            text: "Stereotype Display",\r\n            description: "Default stereotype display of Actor.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: UML.SD_NONE,             text: "None" },\r\n                { value: UML.SD_LABEL,            text: "Label" },\r\n                { value: UML.SD_DECORATION,       text: "Decoration" },\r\n                { value: UML.SD_DECORATION_LABEL, text: "Decoration with Label" },\r\n                { value: UML.SD_ICON,             text: "Icon" },\r\n                { value: UML.SD_ICON_LABEL,       text: "Icon with Label" }\r\n            ],\r\n            default: UML.SD_LABEL\r\n        },\r\n        "uml.actor.suppressAttributes": {\r\n            text: "Suppress Attributes",\r\n            description: "Suppress attributes of Actor.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.actor.suppressOperations": {\r\n            text: "Suppress Operations",\r\n            description: "Suppress operations of Actor.",\r\n            type: "Check",\r\n            default: true\r\n        },\r\n        "uml.lifeline": {\r\n            text: "Lifeline",\r\n            type: "Section"\r\n        },\r\n        "uml.lifeline.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Lifeline.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.state": {\r\n            text: "State",\r\n            type: "Section"\r\n        },\r\n        "uml.state.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of State.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.action": {\r\n            text: "Action",\r\n            type: "Section"\r\n        },\r\n        "uml.action.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Action.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.objectnode": {\r\n            text: "Object Node",\r\n            type: "Section"\r\n        },\r\n        "uml.objectnode.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Object Node.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.metaclass": {\r\n            text: "MetaClass",\r\n            type: "Section"\r\n        },\r\n        "uml.metaclass.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of MetaClass.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.stereotype": {\r\n            text: "Stereotype",\r\n            type: "Section"\r\n        },\r\n        "uml.stereotype.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Stereotype.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "uml.note": {\r\n            text: "Note",\r\n            type: "Section"\r\n        },\r\n        "uml.note.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Note.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n    };\r\n\r\n    AppInit.htmlReady(function () {\r\n        PreferenceManager.register("uml", "UML", UMLPreferences);\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/uml/UMLPreferences.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n// TODO: Separate UMLToolbox.js\r\n// TODO: Separate UMLQuickEdit.js\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell, type */\r\n\r\ndefine(\'uml/main\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Global\',\'utils/Helper\',\'core/Graphics\',\'core/Core\',\'file/FileUtils\',\'core/OperationBuilder\',\'core/Repository\',\'engine/SelectionManager\',\'engine/Engine\',\'engine/Factory\',\'engine/ClipboardManager\',\'engine/ProjectManager\',\'core/PreferenceManager\',\'command/Commands\',\'command/CommandManager\',\'utils/KeyEvent\',\'diagrams/DiagramManager\',\'diagrams/ToolboxView\',\'ui/QuickEdit\',\'explorer/ModelExplorerView\',\'dialogs/Dialogs\',\'ui/Toast\',\'dialogs/ElementPickerDialog\',\'dialogs/ElementListPickerDialog\',\'uml/UMLCommands\',\'uml/UML\',\'uml/UMLDiagram\',\'uml/UMLFactory\',\'uml/UMLQuickEdit\',\'uml/UMLUtils\',\'uml/UML-meta\',\'uml/UML-rules\',\'uml/UMLCommandHandlers\',\'uml/UMLToolbox\',\'uml/UMLMenus\',\'uml/UMLPreferences\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit                 = require("utils/AppInit"),\r\n        global                  = require("core/Global").global,\r\n        Helper                  = require("utils/Helper"),\r\n        Graphics                = require("core/Graphics"),\r\n        Core                    = require("core/Core"),\r\n        FileUtils               = require("file/FileUtils"),\r\n        OperationBuilder        = require("core/OperationBuilder"),\r\n        Repository              = require("core/Repository"),\r\n        SelectionManager        = require("engine/SelectionManager"),\r\n        Engine                  = require("engine/Engine"),\r\n        Factory                 = require("engine/Factory"),\r\n        ClipboardManager        = require("engine/ClipboardManager"),\r\n        ProjectManager          = require("engine/ProjectManager"),\r\n        PreferenceManager       = require("core/PreferenceManager"),\r\n        Commands                = require("command/Commands"),\r\n        CommandManager          = require("command/CommandManager"),\r\n        KeyEvent                = require("utils/KeyEvent"),\r\n        DiagramManager          = require("diagrams/DiagramManager"),\r\n        Toolbox                 = require("diagrams/ToolboxView"),\r\n        QuickEdit               = require("ui/QuickEdit"),\r\n        ModelExplorerView       = require("explorer/ModelExplorerView"),\r\n        Dialogs                 = require("dialogs/Dialogs"),\r\n        Toast                   = require("ui/Toast"),\r\n        ElementPickerDialog     = require("dialogs/ElementPickerDialog"),\r\n        ElementListPickerDialog = require("dialogs/ElementListPickerDialog"),\r\n        UMLCommands             = require("uml/UMLCommands"),\r\n        UML                     = require("uml/UML"),\r\n        UMLDiagram              = require("uml/UMLDiagram"),\r\n        UMLFactory              = require("uml/UMLFactory"),\r\n        UMLQuickEdit            = require("uml/UMLQuickEdit"),\r\n        UMLUtils                = require("uml/UMLUtils");\r\n\r\n    require("uml/UML-meta");\r\n    require("uml/UML-rules");\r\n    require("uml/UMLCommandHandlers");\r\n    require("uml/UMLToolbox");\r\n    require("uml/UMLMenus");\r\n    require("uml/UMLPreferences");\r\n\r\n    // --- QuickEdit Actions ---\r\n\r\n    function _ensure(elem, field, value) {\r\n        if (elem[field] !== value) {\r\n            Engine.setProperty(elem, field, value);\r\n        }\r\n    }\r\n\r\n    function _setNameExpression(model, expression, feedback) {\r\n        try {\r\n            var ast = UMLUtils.parseNameExpression(expression);\r\n            UMLUtils.setNameExpression(model, ast);\r\n        } catch (e) {\r\n            feedback.success = false;\r\n        }\r\n    }\r\n\r\n    function _setAttributeExpression(model, expression, feedback) {\r\n        try {\r\n            var ast = UMLUtils.parseAttributeExpression(expression);\r\n            UMLUtils.setAttributeExpression(model, ast);\r\n        } catch (e) {\r\n            feedback.success = false;\r\n        }\r\n    }\r\n\r\n    function _setOperationExpression(model, expression, feedback) {\r\n        try {\r\n            var ast = UMLUtils.parseOperationExpression(expression);\r\n            UMLUtils.setOperationExpression(model, ast);\r\n        } catch (e) {\r\n            feedback.success = false;\r\n        }\r\n    }\r\n\r\n    function _setTemplateParameterExpression(model, expression, feedback) {\r\n        try {\r\n            var ast = UMLUtils.parseTemplateParameterExpression(expression);\r\n            UMLUtils.setTemplateParameterExpression(model, ast);\r\n        } catch (e) {\r\n            feedback.success = false;\r\n        }\r\n    }\r\n\r\n    function _setObjectExpression(model, expression, feedback) {\r\n        try {\r\n            var ast = UMLUtils.parseObjectExpression(expression);\r\n            UMLUtils.setObjectExpression(model, ast);\r\n        } catch (e) {\r\n            feedback.success = false;\r\n        }\r\n    }\r\n\r\n    function _setSlotExpression(model, expression, feedback) {\r\n        try {\r\n            var ast = UMLUtils.parseSlotExpression(expression);\r\n            UMLUtils.setSlotExpression(model, ast);\r\n        } catch (e) {\r\n            feedback.success = false;\r\n        }\r\n    }\r\n\r\n    function _setLifelineExpression(model, expression, feedback) {\r\n        try {\r\n            var ast = UMLUtils.parseLifelineExpression(expression);\r\n            UMLUtils.setLifelineExpression(model, ast);\r\n        } catch (e) {\r\n            feedback.success = false;\r\n        }\r\n    }\r\n\r\n    function _setMessageExpression(model, expression, feedback) {\r\n        try {\r\n            var ast = UMLUtils.parseMessageExpression(expression);\r\n            UMLUtils.setMessageExpression(model, ast);\r\n        } catch (e) {\r\n            feedback.success = false;\r\n        }\r\n    }\r\n\r\n    function _setTransitionExpression(model, expression, feedback) {\r\n        try {\r\n            var ast = UMLUtils.parseTransitionExpression(expression);\r\n            UMLUtils.setTransitionExpression(model, ast);\r\n        } catch (e) {\r\n            feedback.success = false;\r\n        }\r\n    }\r\n\r\n    function setupQuickEdit() {\r\n        // QuickEdit Value Changed Event Handlers\r\n        $(QuickEdit).on(\'change\', function (event, id, itemId, view, value, feedback) {\r\n            try {\r\n                // Items for Specific QuickEdit\r\n                switch (id) {\r\n                case UMLQuickEdit.QUICKEDIT_GENERAL:\r\n                case UMLQuickEdit.QUICKEDIT_PACKAGE:\r\n                case UMLQuickEdit.QUICKEDIT_SUBSYSTEM:\r\n                case UMLQuickEdit.QUICKEDIT_CLASSIFIER:\r\n                case UMLQuickEdit.QUICKEDIT_CLASS:\r\n                case UMLQuickEdit.QUICKEDIT_INTERFACE:\r\n                case UMLQuickEdit.QUICKEDIT_COMPONENT:\r\n                case UMLQuickEdit.QUICKEDIT_NODE:\r\n                case UMLQuickEdit.QUICKEDIT_ACTOR:\r\n                case UMLQuickEdit.QUICKEDIT_USECASE:\r\n                case UMLQuickEdit.QUICKEDIT_ENUMERATION:\r\n                case UMLQuickEdit.QUICKEDIT_METACLASS:\r\n                case UMLQuickEdit.QUICKEDIT_STEREOTYPE:\r\n                case UMLQuickEdit.QUICKEDIT_RECEPTION:\r\n                case UMLQuickEdit.QUICKEDIT_OBJECT_NODE:\r\n                case UMLQuickEdit.QUICKEDIT_INTERNAL_TRANSITION:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT: _setNameExpression(view.model, value, feedback); break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: UMLUtils.setVisibility(view.model, value); break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_FLOATINGNODE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT: if (view instanceof Core.NodeLabelView) { _setNameExpression(view._parent.model, value, feedback); } break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_ATTRIBUTE:\r\n                case UMLQuickEdit.QUICKEDIT_PART:\r\n                case UMLQuickEdit.QUICKEDIT_PORT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setAttributeExpression(view.model, value, feedback); break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: UMLUtils.setVisibility(view.model, value);  break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_OPERATION:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setOperationExpression(view.model, value, feedback); break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: UMLUtils.setVisibility(view.model, value);  break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_TEMPLATE_PARAMETER:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setTemplateParameterExpression(view.model, value, feedback); break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: UMLUtils.setVisibility(view.model, value);          break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_QUALIFIER:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setAttributeExpression(view.model, value, feedback); break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: UMLUtils.setVisibility(view.model, value);  break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_LITERAL:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setNameExpression(view.model, value, feedback);     break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: UMLUtils.setVisibility(view.model, value); break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_EXTENSION_POINT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setNameExpression(view.model, value, feedback);     break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: UMLUtils.setVisibility(view.model, value); break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_OBJECT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setObjectExpression(view.model, value, feedback); break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: UMLUtils.setVisibility(view.model, value);  break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_SLOT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setSlotExpression(view.model, value, feedback); break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: UMLUtils.setVisibility(view.model, value); break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_SEQ_LIFELINE:\r\n                case UMLQuickEdit.QUICKEDIT_COMM_LIFELINE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setLifelineExpression(view.model, value, feedback); break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: UMLUtils.setVisibility(view.model, value);  break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_SEQ_MESSAGE:\r\n                case UMLQuickEdit.QUICKEDIT_COMM_MESSAGE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setMessageExpression(view.model, value, feedback); break;\r\n                    case UMLQuickEdit.ITEM_MESSAGE_SORT: Engine.setProperty(view.model, \'messageSort\', value); break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_STATEINVARIANT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:\r\n                        Engine.setProperty(view.model, \'invariant\', value);\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_CONTINUATION:\r\n                case UMLQuickEdit.QUICKEDIT_COMBINEDFRAGMENT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setNameExpression(view.model, value, feedback);     break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_OPERAND:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:\r\n                        Engine.setProperty(view.model, \'guard\', value);\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_DIRECTED:\r\n                case UMLQuickEdit.QUICKEDIT_CONNECTOR:\r\n                case UMLQuickEdit.QUICKEDIT_ASSOCIATION:\r\n                case UMLQuickEdit.QUICKEDIT_UNDIRECTED:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       if (view instanceof Core.EdgeLabelView) { _setNameExpression(view._parent.model, value, feedback); } break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY: if (view instanceof Core.EdgeLabelView) { UMLUtils.setVisibility(view._parent.model, value); } break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_UNDIRECTED_TAIL:\r\n                case UMLQuickEdit.QUICKEDIT_ASSOCIATION_TAIL:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:         if (view instanceof Core.EdgeLabelView) { Engine.setProperty(view._parent.model.end1, \'name\', value); } break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY:   if (view instanceof Core.EdgeLabelView) { Engine.setProperty(view._parent.model.end1, \'visibility\', value); } break;\r\n                    case UMLQuickEdit.ITEM_AGGREGATION:  if (view instanceof Core.EdgeLabelView) { Engine.setProperty(view._parent.model.end1, \'aggregation\', value); } break;\r\n                    case UMLQuickEdit.ITEM_NAVIGABILITY: if (view instanceof Core.EdgeLabelView) { Engine.setProperty(view._parent.model.end1, \'navigable\', value); } break;\r\n                    case UMLQuickEdit.ITEM_MULTIPLICITY: if (view instanceof Core.EdgeLabelView) { Engine.setProperty(view._parent.model.end1, \'multiplicity\', value); } break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_UNDIRECTED_HEAD:\r\n                case UMLQuickEdit.QUICKEDIT_ASSOCIATION_HEAD:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:         if (view instanceof Core.EdgeLabelView) { Engine.setProperty(view._parent.model.end2, \'name\', value); } break;\r\n                    case UMLQuickEdit.ITEM_VISIBILITY:   if (view instanceof Core.EdgeLabelView) { Engine.setProperty(view._parent.model.end2, \'visibility\', value); } break;\r\n                    case UMLQuickEdit.ITEM_AGGREGATION:  if (view instanceof Core.EdgeLabelView) { Engine.setProperty(view._parent.model.end2, \'aggregation\', value); } break;\r\n                    case UMLQuickEdit.ITEM_NAVIGABILITY: if (view instanceof Core.EdgeLabelView) { Engine.setProperty(view._parent.model.end2, \'navigable\', value); } break;\r\n                    case UMLQuickEdit.ITEM_MULTIPLICITY: if (view instanceof Core.EdgeLabelView) { Engine.setProperty(view._parent.model.end2, \'multiplicity\', value); } break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_STATE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT: _setNameExpression(view.model, value, feedback); break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_INTERNAL_ACTIVITY:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT: _setNameExpression(view.model, value, feedback); break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_TRANSITION:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:\r\n                        if (view instanceof Core.EdgeLabelView) {\r\n                            _setTransitionExpression(view._parent.model, value, feedback);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_ACTION:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT: _setNameExpression(view.model, value, feedback); break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_ACTIVITYEDGE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT: if (view instanceof Core.EdgeLabelView) { _setNameExpression(view._parent.model, value, feedback); } break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_PARTITION:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT:       _setNameExpression(view.model, value, feedback);     break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_CONSTRAINT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT: Engine.setProperty(view.model, \'specification\', value); break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_TEXTAREA:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_EDIT: Engine.setProperty(view, \'text\', value); break;\r\n                    }\r\n                    break;\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        function _newSeqLifelinePosition(diagram) {\r\n            var lifelines = _.filter(diagram.ownedViews, function (e) { return (e instanceof type.UMLSeqLifelineView); });\r\n            var rightMost = _.max(lifelines, function (e) { return e.getRight(); });\r\n            var options = {\r\n                x1: rightMost.getRight() + 20,\r\n                y1: rightMost.top,\r\n                x2: rightMost.getRight() + 20,\r\n                y2: rightMost.top\r\n            };\r\n            return options;\r\n        }\r\n\r\n        function _newSeqMessagePosition(fromLifeline, toLifeline, diagram, interval) {\r\n            interval = interval || 35;\r\n            var options2 = {\r\n                x1        : fromLifeline.left,\r\n                x2        : toLifeline.left,\r\n                y1        : (fromLifeline instanceof type.UMLSeqLifelineView ? fromLifeline.linePart.top + 20 : fromLifeline.top),\r\n                y2        : (fromLifeline instanceof type.UMLSeqLifelineView ? fromLifeline.linePart.top + 20 : fromLifeline.top),\r\n                tailView  : fromLifeline,\r\n                headView  : toLifeline,\r\n                tailModel : fromLifeline.model || null,\r\n                headModel : toLifeline.model || null\r\n            };\r\n            var messages = _.filter(diagram.ownedViews, function (e) {\r\n                return (e instanceof type.UMLSeqMessageView);\r\n            });\r\n            if (messages.length > 0) {\r\n                var bottomMost = _.max(messages, function (e) { return e.points.points[0].y; });\r\n                options2.y1 = bottomMost.points.points[0].y + interval;\r\n                options2.y2 = bottomMost.points.points[0].y + interval;\r\n            }\r\n            return options2;\r\n        }\r\n\r\n        // QuickEdit Button Click Event Handlers\r\n        $(QuickEdit).on(\'click\', function (event, id, itemId, view) {\r\n            var diagram      = DiagramManager.getEditor().diagram,\r\n                diagramOwner = diagram._parent,\r\n                parent,\r\n                nodes, nodeView, nodeView1, nodeView2, edgeView, options1, options2, _x, _y;\r\n            try {\r\n\r\n                // Common Items\r\n                switch (itemId) {\r\n                case UMLQuickEdit.ITEM_ADD_NOTE:\r\n                    nodes = QuickEdit.getBothNodes(view, type.UMLNoteLinkView);\r\n                    options1 = QuickEdit.getRightPosition(view, nodes);\r\n                    options1.x2 = options1.x1 + 100;\r\n                    options1.y2 = options1.y1 + 50;\r\n                    nodeView = Factory.createModelAndView("Note", diagramOwner, diagram, options1);\r\n                    options2 = {\r\n                        tailView  : view,\r\n                        headView  : nodeView\r\n                    };\r\n                    if (options2.tailView instanceof type.EdgeLabelView || options2.tailView instanceof type.NodeLabelView) {\r\n                        options2.tailView = options2.tailView._parent;\r\n                    }\r\n                    if (options2.headView instanceof type.EdgeLabelView || options2.headView instanceof type.NodeLabelView) {\r\n                        options2.headView = options2.headView._parent;\r\n                    }\r\n                    edgeView = Factory.createModelAndView("NoteLink", diagramOwner, diagram, options2);\r\n                    break;\r\n                case UMLQuickEdit.ITEM_ADD_ATTRIBUTE:\r\n                    _ensure(view, \'suppressAttributes\', false);\r\n                    QuickEdit.addInQuickEdit(view.model, \'attributes\', view, \'attributeCompartment\', type.UMLAttribute, \'Attribute\');\r\n                    break;\r\n                case UMLQuickEdit.ITEM_ADD_OPERATION:\r\n                    _ensure(view, \'suppressOperations\', false);\r\n                    QuickEdit.addInQuickEdit(view.model, \'operations\', view, \'operationCompartment\', type.UMLOperation, \'Operation\');\r\n                    break;\r\n                case UMLQuickEdit.ITEM_ADD_RECEPTION:\r\n                    _ensure(view, \'suppressReceptions\', false);\r\n                    QuickEdit.addInQuickEdit(view.model, \'receptions\', view, \'receptionCompartment\', type.UMLReception, \'Reception\');\r\n                    break;\r\n                case UMLQuickEdit.ITEM_ADD_PROVIDED_INTERFACE:\r\n                    if (view instanceof type.NodeLabelView) {\r\n                        view = view._parent;\r\n                    }\r\n                    nodes = QuickEdit.getHeadNodes(view, type.UMLInterfaceRealizationView);\r\n                    options1 = QuickEdit.getTopPosition(view, nodes);\r\n                    if (view.containerView) {\r\n                        if (view.getRight() > view.containerView.getRight()) {\r\n                            options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        } else if (view.left < view.containerView.left) {\r\n                            options1 = QuickEdit.getLeftPosition(view, nodes);\r\n                        } else if (view.getBottom() > view.containerView.getBottom()) {\r\n                            options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        }\r\n                    }\r\n                    nodeView = Factory.createModelAndView("UMLInterface", diagramOwner, diagram, options1);\r\n                    if ((view.model instanceof type.UMLPort) && !(view.model.type instanceof type.UMLClassifier)) {\r\n                        var _portType = Factory.createModel("UMLClass", view.containerView.model._parent, "ownedElements", {\r\n                            modelInitializer: function (e) {\r\n                                e.name = view.model.name + "Type";\r\n                            }\r\n                        });\r\n                        Engine.setProperty(view.model, \'type\', _portType);\r\n                    }\r\n                    options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                    edgeView = Factory.createModelAndView("UMLInterfaceRealization", view.model, diagram, options2);\r\n                    break;\r\n                case UMLQuickEdit.ITEM_ADD_REQUIRED_INTERFACE:\r\n                    if (view instanceof type.NodeLabelView) {\r\n                        view = view._parent;\r\n                    }\r\n                    nodes = QuickEdit.getHeadNodes(view, type.UMLDependencyView);\r\n                    options1 = QuickEdit.getTopPosition(view, nodes);\r\n                    if (view.containerView) {\r\n                        if (view.getRight() > view.containerView.getRight()) {\r\n                            options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        } else if (view.left < view.containerView.left) {\r\n                            options1 = QuickEdit.getLeftPosition(view, nodes);\r\n                        } else if (view.getBottom() > view.containerView.getBottom()) {\r\n                            options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        }\r\n                    }\r\n                    nodeView = Factory.createModelAndView("UMLInterface", diagramOwner, diagram, options1);\r\n                    options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                    edgeView = Factory.createModelAndView("UMLDependency", view.model, diagram, options2);\r\n                    break;\r\n                case UMLQuickEdit.ITEM_ADD_PORT:\r\n                    _x = view.left + Math.round(Math.random() * view.width);\r\n                    _y = view.top + Math.round(Math.random() * view.height);\r\n                    options1 = { x1: _x, y1: _y, x2: _x, y2: _y, containerView: view };\r\n                    nodeView = Factory.createModelAndView("UMLPort", view.model, diagram, options1);\r\n                    break;\r\n                case UMLQuickEdit.ITEM_ADD_PART:\r\n                    nodes = _.filter(view.containedViews, function (e) { return (e instanceof type.UMLPartView); });\r\n                    options1 = {\r\n                        x1: view.left + 10,\r\n                        y1: view.top + 30,\r\n                        x2: view.left + 10,\r\n                        y2: view.top + 30,\r\n                        containerView: view\r\n                    };\r\n                    if (nodes.length > 0) {\r\n                        var _rightMost = _.max(nodes, function (e) { return e.getRight(); });\r\n                        options1.x1 = _rightMost.getRight() + 10;\r\n                        options1.y1 = _rightMost.top;\r\n                        options1.x2 = _rightMost.getRight() + 10;\r\n                        options1.y2 = _rightMost.top;\r\n                    }\r\n                    nodeView = Factory.createModelAndView("UMLPart", view.model, diagram, options1);\r\n                    break;\r\n                case UMLQuickEdit.ITEM_SELECT_TYPE: // for Part/Port\r\n                    if (view.model instanceof type.UMLAttribute) {\r\n                        ElementPickerDialog.showDialog("Select Type", view.model.type, type.UMLClassifier).done(function (buttonId, selected) {\r\n                            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                Engine.setProperty(view.model, \'type\', selected);\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.ITEM_CREATE_TYPE: // for Part/Port\r\n                    if (view.model instanceof type.UMLAttribute) {\r\n                        parent = view.model._parent;\r\n                        if (parent) {\r\n                            Dialogs.showInputDialog(\r\n                                "Enter a type name to create"\r\n                            ).done(function (modal, result) {\r\n                                if (modal === Dialogs.DIALOG_BTN_OK && result.length > 0) {\r\n                                    OperationBuilder.begin("assign new class");\r\n                                    var model = new type.UMLClass();\r\n                                    model._parent = parent;\r\n                                    model.name = result;\r\n                                    OperationBuilder.insert(model);\r\n                                    OperationBuilder.fieldInsert(parent, \'ownedElements\', model);\r\n                                    OperationBuilder.fieldAssign(view.model, \'type\', model);\r\n                                    OperationBuilder.end();\r\n                                    var cmd = OperationBuilder.getOperation();\r\n                                    Repository.doOperation(cmd);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n\r\n                // Items for Specific QuickEdit\r\n                switch (id) {\r\n\r\n                // Package\r\n                case UMLQuickEdit.QUICKEDIT_PACKAGE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_SUBPACKAGE:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLContainmentView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLPackage", view.model, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLContainment", view.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_DEPENDANT_PACKAGE:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLDependencyView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLPackage", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLDependency", nodeView.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_DEPENDING_PACKAGE:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLDependencyView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLPackage", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLDependency", view.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Class\r\n                case UMLQuickEdit.QUICKEDIT_CLASS:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_SUPERCLASS:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLGeneralizationView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLClass", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLGeneralization", view.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_SUBCLASS:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLGeneralizationView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLClass", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLGeneralization", nodeView.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_ASSOCIATION:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLAssociationView, function (e) {\r\n                            return (e.tail === view && e.model.end1.aggregation === UML.AK_NONE);\r\n                        });\r\n                        options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLClass", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLAssociation", nodeView.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_AGGREGATION:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLAssociationView, function (e) {\r\n                            return (e.tail === view && e.model.end1.aggregation === UML.AK_SHARED);\r\n                        });\r\n                        options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLClass", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        options2.modelInitializer = function (model) {\r\n                            model.end1.aggregation = UML.AK_SHARED;\r\n                        };\r\n                        edgeView = Factory.createModelAndView("UMLAssociation", nodeView.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_COMPOSITION:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLAssociationView, function (e) {\r\n                            return (e.tail === view && e.model.end1.aggregation === UML.AK_SHARED);\r\n                        });\r\n                        options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLClass", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        options2.modelInitializer = function (model) {\r\n                            model.end1.aggregation = UML.AK_COMPOSITE;\r\n                        };\r\n                        edgeView = Factory.createModelAndView("UMLAssociation", nodeView.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Interface\r\n                case UMLQuickEdit.QUICKEDIT_INTERFACE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_SUPERINTERFACE:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLGeneralizationView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLInterface", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLGeneralization", view.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_SUBINTERFACE:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLGeneralizationView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLInterface", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLGeneralization", view.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_REALIZING_CLASS:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLInterfaceRealizationView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLClass", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLInterfaceRealization", view.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Node\r\n                case UMLQuickEdit.QUICKEDIT_NODE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_COMMUNICATING_NODE:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLCommunicationPathView);\r\n                        options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLNode", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLCommunicationPath", nodeView.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_DEPLOYED_ARTIFACT:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLDeploymentView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLArtifact", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLDeployment", view.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_DEPLOYED_COMPONENT:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLDeploymentView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLComponent", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLDeployment", view.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Actor\r\n                case UMLQuickEdit.QUICKEDIT_ACTOR:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_SUPERACTOR:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLGeneralizationView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLActor", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLGeneralization", view.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_SUBACTOR:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLGeneralizationView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLActor", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLGeneralization", nodeView.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_ASSOCIATED_USECASE:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLAssociationView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLUseCase", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLAssociation", nodeView.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Use Case\r\n                case UMLQuickEdit.QUICKEDIT_USECASE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_EXTENSIONPOINT:\r\n                        QuickEdit.addInQuickEdit(view.model, \'extensionPoints\', view, \'extensionPointCompartment\', type.UMLExtensionPoint, \'ExtensionPoint\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_ASSOCIATED_ACTOR:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLAssociationView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getLeftPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLActor", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLAssociation", nodeView.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_INCLUDED_USECASE:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLIncludeView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLUseCase", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLInclude", view.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_EXTENDED_USECASE:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLExtendView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLUseCase", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLExtend", nodeView.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Enumeration\r\n                case UMLQuickEdit.QUICKEDIT_ENUMERATION:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_LITERAL:\r\n                        _ensure(view, \'suppressLiterals\', false);\r\n                        QuickEdit.addInQuickEdit(view.model, \'literals\', view, \'enumerationLiteralCompartment\', type.UMLEnumerationLiteral, \'Literal\');\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // MetaClass\r\n                case UMLQuickEdit.QUICKEDIT_METACLASS:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_STEREOTYPE:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLExtensionView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLStereotype", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLExtension", nodeView.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Stereotype\r\n                case UMLQuickEdit.QUICKEDIT_STEREOTYPE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_SUPERSTEREOTYPE:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLGeneralizationView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLStereotype", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLGeneralization", view.model, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_SUBSTEREOTYPE:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLGeneralizationView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLStereotype", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLGeneralization", nodeView.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Attribute\r\n                case UMLQuickEdit.QUICKEDIT_ATTRIBUTE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD:\r\n                        QuickEdit.addInQuickEdit(view.model._parent, \'attributes\', view._parent._parent, \'attributeCompartment\', type.UMLAttribute, \'Attribute\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_DELETE:\r\n                        QuickEdit.deleteInQuickEdit(view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEUP:\r\n                        QuickEdit.moveUpInQuickEdit(view.model._parent, \'attributes\', view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEDOWN:\r\n                        QuickEdit.moveDownInQuickEdit(view.model._parent, \'attributes\', view);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Operation\r\n                case UMLQuickEdit.QUICKEDIT_OPERATION:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD:\r\n                        QuickEdit.addInQuickEdit(view.model._parent, \'operations\', view._parent._parent, \'operationCompartment\', type.UMLOperation, \'Operation\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_DELETE:\r\n                        QuickEdit.deleteInQuickEdit(view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEUP:\r\n                        QuickEdit.moveUpInQuickEdit(view.model._parent, \'operations\', view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEDOWN:\r\n                        QuickEdit.moveDownInQuickEdit(view.model._parent, \'operations\', view);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Reception\r\n                case UMLQuickEdit.QUICKEDIT_RECEPTION:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD:\r\n                        QuickEdit.addInQuickEdit(view.model._parent, \'receptions\', view._parent._parent, \'receptionCompartment\', type.UMLReception, \'Reception\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_DELETE:\r\n                        QuickEdit.deleteInQuickEdit(view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEUP:\r\n                        QuickEdit.moveUpInQuickEdit(view.model._parent, \'receptions\', view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEDOWN:\r\n                        QuickEdit.moveDownInQuickEdit(view.model._parent, \'receptions\', view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_SELECT_SIGNAL:\r\n                        ElementPickerDialog.showDialog("Select Signal", view.model.signature, type.UMLSignal).done(function (buttonId, selected) {\r\n                            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                Engine.setProperty(view.model, \'signal\', selected);\r\n                            }\r\n                        });\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Port\r\n                case UMLQuickEdit.QUICKEDIT_PORT:\r\n                    if (view instanceof type.NodeLabelView) {\r\n                        view = view._parent;\r\n                    }\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_CONNECTED_PART:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLConnectorView);\r\n                        if (view.getRight() > view.containerView.getRight()) {\r\n                            options1 = QuickEdit.getLeftPosition(view, nodes);\r\n                        } else if (view.left < view.containerView.left) {\r\n                            options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        } else if (view.getBottom() > view.containerView.getBottom()) {\r\n                            options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        } else {\r\n                            options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        }\r\n                        options1.containerView = view.containerView;\r\n                        nodeView = Factory.createModelAndView("UMLPart", view.model._parent, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLConnector", view.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Part\r\n                case UMLQuickEdit.QUICKEDIT_PART:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_CONNECTED_PART:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLConnectorView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        options1.containerView = view.containerView;\r\n                        nodeView = Factory.createModelAndView("UMLPart", view.model._parent, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLConnector", view.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Parameter\r\n                case UMLQuickEdit.QUICKEDIT_TEMPLATE_PARAMETER:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD:\r\n                        QuickEdit.addInQuickEdit(view.model._parent, \'templateParameters\', view._parent._parent, \'templateParameterCompartment\', type.UMLTemplateParameter, \'TemplateParameter\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_DELETE:\r\n                        QuickEdit.deleteInQuickEdit(view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEUP:\r\n                        QuickEdit.moveUpInQuickEdit(view.model._parent, \'templateParameters\', view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEDOWN:\r\n                        QuickEdit.moveDownInQuickEdit(view.model._parent, \'templateParameters\', view);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Qualifer\r\n                case UMLQuickEdit.QUICKEDIT_QUALIFIER:\r\n                    var asso      = view._parent._parent,\r\n                        comp      = view._parent,\r\n                        end       = null,\r\n                        compField = null;\r\n                    if (asso.tailQualifiersCompartment == comp) {\r\n                        end = asso.model.end1;\r\n                        compField = "tailQualifiersCompartment";\r\n                    } else if (asso.headQualifiersCompartment == comp) {\r\n                        end = asso.model.end2;\r\n                        compField = "headQualifiersCompartment";\r\n                    }\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD:\r\n                        QuickEdit.addInQuickEdit(end, \'qualifiers\', asso, compField, type.UMLAttribute, \'Qualifier\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_DELETE:\r\n                        QuickEdit.deleteInQuickEdit(view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEUP:\r\n                        QuickEdit.moveUpInQuickEdit(end, \'qualifiers\', view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEDOWN:\r\n                        QuickEdit.moveDownInQuickEdit(end, \'qualifiers\', view);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Literal\r\n                case UMLQuickEdit.QUICKEDIT_LITERAL:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD:\r\n                        QuickEdit.addInQuickEdit(view.model._parent, \'literals\', view._parent._parent, \'enumerationLiteralCompartment\', type.UMLEnumerationLiteral, \'Literal\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_DELETE:\r\n                        QuickEdit.deleteInQuickEdit(view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEUP:\r\n                        QuickEdit.moveUpInQuickEdit(view.model._parent, \'literals\', view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEDOWN:\r\n                        QuickEdit.moveDownInQuickEdit(view.model._parent, \'literals\', view);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Extension Point\r\n                case UMLQuickEdit.QUICKEDIT_EXTENSION_POINT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD:\r\n                        QuickEdit.addInQuickEdit(view.model._parent, \'extensionPoints\', view._parent._parent, \'extensionPointCompartment\', type.UMLExtensionPoint, \'ExtensionPoint\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_DELETE:\r\n                        QuickEdit.deleteInQuickEdit(view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEUP:\r\n                        QuickEdit.moveUpInQuickEdit(view.model._parent, \'extensionPoints\', view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEDOWN:\r\n                        QuickEdit.moveDownInQuickEdit(view.model._parent, \'extensionPoints\', view);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Association (Main, Tail, Head)\r\n                case UMLQuickEdit.QUICKEDIT_ASSOCIATION:\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_ASSOCIATION_TAIL:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_QUALIFIER:\r\n                        if (view instanceof Core.EdgeLabelView) {\r\n                            QuickEdit.addInQuickEdit(view._parent.model.end1, \'qualifiers\', view._parent, \'tailQualifiersCompartment\', type.UMLAttribute, \'Qualifier\');\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_ASSOCIATION_HEAD:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_QUALIFIER:\r\n                        if (view instanceof Core.EdgeLabelView) {\r\n                            QuickEdit.addInQuickEdit(view._parent.model.end2, \'qualifiers\', view._parent, \'headQualifiersCompartment\', type.UMLAttribute, \'Qualifier\');\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Object\r\n                case UMLQuickEdit.QUICKEDIT_OBJECT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_SLOT:\r\n                        QuickEdit.addInQuickEdit(view.model, \'slots\', view, \'slotCompartment\', type.UMLSlot, \'Slot\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_LINKED_OBJECT:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLLinkView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLObject", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLLink", nodeView.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Slot\r\n                case UMLQuickEdit.QUICKEDIT_SLOT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD:\r\n                        QuickEdit.addInQuickEdit(view.model._parent, \'slots\', view._parent._parent, \'slotCompartment\', type.UMLSlot, \'Slot\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_DELETE:\r\n                        QuickEdit.deleteInQuickEdit(view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEUP:\r\n                        QuickEdit.moveUpInQuickEdit(view.model._parent, \'slots\', view);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_MOVEDOWN:\r\n                        QuickEdit.moveDownInQuickEdit(view.model._parent, \'slots\', view);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Lifeline (Sequence & Communications)\r\n                case UMLQuickEdit.QUICKEDIT_SEQ_LIFELINE:\r\n                case UMLQuickEdit.QUICKEDIT_COMM_LIFELINE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_SELECT_TYPE:\r\n                        if (view.model.represent instanceof type.UMLAttribute) {\r\n                            ElementPickerDialog.showDialog("Select Type", view.model.represent.type, type.UMLClassifier).done(function (buttonId, selected) {\r\n                                if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                    Engine.setProperty(view.model.represent, \'type\', selected);\r\n                                }\r\n                            });\r\n                        } else {\r\n                            Dialogs.showAlertDialog("Lifeline should represent a role. (connect \'represent\' field to an Attribute of the container Collaboration)");\r\n                        }\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_CREATE_TYPE:\r\n                        if (view.model.represent instanceof type.UMLAttribute) {\r\n                            parent = view.model.represent._parent._parent;\r\n                            if (parent) {\r\n                                Dialogs.showInputDialog(\r\n                                    "Enter a type name to create"\r\n                                ).done(function (modal, result) {\r\n                                    if (modal === Dialogs.DIALOG_BTN_OK && result.length > 0) {\r\n                                        OperationBuilder.begin("assign new class");\r\n                                        var model = new type.UMLClass();\r\n                                        model._parent = parent;\r\n                                        model.name = result;\r\n                                        OperationBuilder.insert(model);\r\n                                        OperationBuilder.fieldInsert(parent, \'ownedElements\', model);\r\n                                        OperationBuilder.fieldAssign(view.model.represent, \'type\', model);\r\n                                        OperationBuilder.end();\r\n                                        var cmd = OperationBuilder.getOperation();\r\n                                        Repository.doOperation(cmd);\r\n                                    }\r\n                                });\r\n                            }\r\n                        } else {\r\n                            Dialogs.showAlertDialog("Lifeline should represent a role. (connect \'represent\' field to an Attribute of the container Collaboration)");\r\n                        }\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_MESSAGE_LIFELINE:\r\n                        options1 = _newSeqLifelinePosition(diagram);\r\n                        nodeView = Factory.createModelAndView("UMLLifeline", diagramOwner, diagram, options1);\r\n                        options2 = _newSeqMessagePosition(view, nodeView, diagram);\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_CREATE_MESSAGE_LIFELINE:\r\n                        options1 = _newSeqLifelinePosition(diagram);\r\n                        nodeView = Factory.createModelAndView("UMLLifeline", diagramOwner, diagram, options1);\r\n                        options2 = _newSeqMessagePosition(view, nodeView, diagram, 45);\r\n                        options2.modelInitializer = function (model) {\r\n                            model.messageSort = UML.MS_CREATEMESSAGE;\r\n                        };\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_SELF_MESSAGE:\r\n                        options2 = _newSeqMessagePosition(view, view, diagram);\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_MESSAGE_FROM_GATE:\r\n                        options1 = _newSeqMessagePosition(view, view, diagram);\r\n                        options1.x1 = view.left - 70;\r\n                        options1.x2 = view.left - 70;\r\n                        QuickEdit.setInside(options1);\r\n                        nodeView = Factory.createModelAndView("UMLGate", diagramOwner, diagram, options1);\r\n                        options2 = _newSeqMessagePosition(nodeView, view, diagram);\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_MESSAGE_TO_GATE:\r\n                        options1 = _newSeqMessagePosition(view, view, diagram);\r\n                        options1.x1 = view.getRight() + 70;\r\n                        options1.x2 = view.getRight() + 70;\r\n                        nodeView = Factory.createModelAndView("UMLGate", diagramOwner, diagram, options1);\r\n                        options2 = _newSeqMessagePosition(view, nodeView, diagram);\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_FOUND_MESSAGE:\r\n                        options1 = _newSeqMessagePosition(view, view, diagram);\r\n                        options1.x1 = view.left - 70;\r\n                        options1.x2 = view.left - 70;\r\n                        QuickEdit.setInside(options1);\r\n                        nodeView = Factory.createModelAndView("UMLEndpoint", diagramOwner, diagram, options1);\r\n                        options2 = _newSeqMessagePosition(nodeView, view, diagram);\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_LOST_MESSAGE:\r\n                        options1 = _newSeqMessagePosition(view, view, diagram);\r\n                        options1.x1 = view.getRight() + 70;\r\n                        options1.x2 = view.getRight() + 70;\r\n                        nodeView = Factory.createModelAndView("UMLEndpoint", diagramOwner, diagram, options1);\r\n                        options2 = _newSeqMessagePosition(view, nodeView, diagram);\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_CONNECTED_LIFELINE:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLConnectorView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLLifeline", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLConnector", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_SELF_CONNECTOR:\r\n                        options2 = QuickEdit.getEdgeViewOption(view, view);\r\n                        view = Factory.createModelAndView("UMLConnector", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_FORWARD_MESSAGE:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLConnectorView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLLifeline", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLConnector", diagramOwner, diagram, options2);\r\n                        options2 = {\r\n                            x1        : edgeView.points.points[0].x,\r\n                            y1        : edgeView.points.points[0].y,\r\n                            x2        : edgeView.points.points[0].x,\r\n                            y2        : edgeView.points.points[0].y,\r\n                            direction : "forward",\r\n                            connector : edgeView.model,\r\n                            headView  : edgeView\r\n                        };\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_REVERSE_MESSAGE:\r\n                        nodes = QuickEdit.getBothNodes(view, type.UMLConnectorView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLLifeline", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLConnector", diagramOwner, diagram, options2);\r\n                        options2 = {\r\n                            x1        : edgeView.points.points[0].x,\r\n                            y1        : edgeView.points.points[0].y,\r\n                            x2        : edgeView.points.points[0].x,\r\n                            y2        : edgeView.points.points[0].y,\r\n                            direction : "reverse",\r\n                            connector : edgeView.model,\r\n                            headView  : edgeView\r\n                        };\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Message (Sequence & Communications)\r\n                case UMLQuickEdit.QUICKEDIT_SEQ_MESSAGE:\r\n                case UMLQuickEdit.QUICKEDIT_COMM_MESSAGE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_SELECT_OPERATION:\r\n                        // TODO: THIS IMPLEMENTATION SHOULD REPLACED BY ELEMENTLISTPICKER UI\r\n                        if ((view.model.target.represent instanceof type.UMLAttribute) && (view.model.target.represent.type instanceof type.UMLClassifier)) {\r\n                            var ops = _.union(view.model.target.represent.type.getInheritedOperations(true), view.model.target.represent.type.operations);\r\n                            ElementListPickerDialog.showDialog(\r\n                                "Select Operation",\r\n                                ops\r\n                            ).done(function (buttonId, selected) {\r\n                                if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                    Engine.setProperty(view.model, \'signature\', selected);\r\n                                }\r\n                            });\r\n                        } else {\r\n                            Dialogs.showAlertDialog("Lifeline should have a type.");\r\n                        }\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_CREATE_OPERATION:\r\n                        if ((view.model.target.represent instanceof type.UMLAttribute) && (view.model.target.represent.type instanceof type.UMLClassifier)) {\r\n                            parent = view.model.target.represent.type; // Type of target Lifeline\r\n                            Dialogs.showInputDialog(\r\n                                "Enter an operation name to create"\r\n                            ).done(function (buttonId, result) {\r\n                                if (buttonId === Dialogs.DIALOG_BTN_OK && result.length > 0) {\r\n                                    OperationBuilder.begin("assign new operation");\r\n                                    var model = new type.UMLOperation();\r\n                                    model._parent = parent;\r\n                                    model.name = result;\r\n                                    OperationBuilder.insert(model);\r\n                                    OperationBuilder.fieldInsert(parent, \'operations\', model);\r\n                                    OperationBuilder.fieldAssign(view.model, \'signature\', model);\r\n                                    OperationBuilder.end();\r\n                                    var cmd = OperationBuilder.getOperation();\r\n                                    Repository.doOperation(cmd);\r\n                                }\r\n                            });\r\n                        } else {\r\n                            Dialogs.showAlertDialog("Lifeline should have a type.");\r\n                        }\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_SELECT_SIGNAL:\r\n                        ElementPickerDialog.showDialog("Select Signal", view.model.signature, type.UMLSignal).done(function (buttonId, selected) {\r\n                            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                Engine.setProperty(view.model, \'signature\', selected);\r\n                            }\r\n                        });\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_CREATE_SIGNAL:\r\n                        parent = view.model._parent._parent._parent; // owner of Collaboration\r\n                        if (parent) {\r\n                            Dialogs.showInputDialog(\r\n                                "Enter a signal name to create"\r\n                            ).done(function (buttonId, result) {\r\n                                if (buttonId === Dialogs.DIALOG_BTN_OK && result.length > 0) {\r\n                                    OperationBuilder.begin("assign new signal");\r\n                                    var model = new type.UMLSignal();\r\n                                    model._parent = parent;\r\n                                    model.name = result;\r\n                                    OperationBuilder.insert(model);\r\n                                    OperationBuilder.fieldInsert(parent, \'ownedElements\', model);\r\n                                    OperationBuilder.fieldAssign(view.model, \'signature\', model);\r\n                                    OperationBuilder.end();\r\n                                    var cmd = OperationBuilder.getOperation();\r\n                                    Repository.doOperation(cmd);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_REPLY_MESSAGE:\r\n                        if (diagram instanceof type.UMLSequenceDiagram) {\r\n                            if (view instanceof type.EdgeLabelView) {\r\n                                view = view._parent;\r\n                            }\r\n                            if (view.head instanceof type.UMLLinePartView && view.tail instanceof type.UMLLinePartView) {\r\n                                options2 = {\r\n                                    x1        : view.head.left,\r\n                                    x2        : view.tail.left,\r\n                                    y1        : view.points.points[0].y + 20,\r\n                                    y2        : view.points.points[0].y + 20,\r\n                                    tailView  : view.head,\r\n                                    headView  : view.tail,\r\n                                    tailModel : view.head.model || null,\r\n                                    headModel : view.tail.model || null,\r\n                                    modelInitializer : function (model) {\r\n                                        model.messageSort = UML.MS_REPLY;\r\n                                    }\r\n                                };\r\n                                edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                            }\r\n                        } else if (diagram instanceof type.UMLCommunicationDiagram) {\r\n                            if (view instanceof type.NodeLabelView) {\r\n                                view = view._parent;\r\n                            }\r\n                            options2 = {\r\n                                x1        : view.hostEdge.points.points[0].x,\r\n                                y1        : view.hostEdge.points.points[0].y,\r\n                                x2        : view.hostEdge.points.points[0].x,\r\n                                y2        : view.hostEdge.points.points[0].y,\r\n                                direction : (view.model.source === view.hostEdge.tail.model ? "reverse" : "forward"),\r\n                                connector : view.hostEdge.model,\r\n                                headView  : view.hostEdge,\r\n                                modelInitializer : function (model) {\r\n                                    model.messageSort = UML.MS_REPLY;\r\n                                }\r\n                            };\r\n                            edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Connector (Composite Structure & Communications)\r\n                case UMLQuickEdit.QUICKEDIT_CONNECTOR:\r\n                    if (view instanceof type.EdgeLabelView) {\r\n                        view = view._parent;\r\n                    }\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_FORWARD_MESSAGE:\r\n                        options2 = {\r\n                            x1        : view.points.points[0].x,\r\n                            y1        : view.points.points[0].y,\r\n                            x2        : view.points.points[0].x,\r\n                            y2        : view.points.points[0].y,\r\n                            direction : "forward",\r\n                            connector : view.model,\r\n                            headView  : view\r\n                        };\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_REVERSE_MESSAGE:\r\n                        options2 = {\r\n                            x1        : view.points.points[0].x,\r\n                            y1        : view.points.points[0].y,\r\n                            x2        : view.points.points[0].x,\r\n                            y2        : view.points.points[0].y,\r\n                            direction : "reverse",\r\n                            connector : view.model,\r\n                            headView  : view\r\n                        };\r\n                        edgeView = Factory.createModelAndView("UMLMessage", diagramOwner, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Combined Fragment\r\n                case UMLQuickEdit.QUICKEDIT_COMBINEDFRAGMENT:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_OPERAND:\r\n                        Factory.createModel("UMLInteractionOperand", view.model, \'operands\');\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // State\r\n                case UMLQuickEdit.QUICKEDIT_STATE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_REGION:\r\n                        Factory.createModel("UMLRegion", view.model, \'regions\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_CONNECTION_POINT_REFERENCE:\r\n                        _x = view.left + Math.round(Math.random() * view.width);\r\n                        _y = view.top + Math.round(Math.random() * view.height);\r\n                        options1 = { x1: _x, y1: _y, x2: _x, y2: _y, containerView: view };\r\n                        nodeView = Factory.createModelAndView("UMLConnectionPointReference", view.model, diagram, options1);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_ENTRY_ACTIVITY:\r\n                        Dialogs.showSelectRadioDialog(\r\n                            "Select one to create as an entry Activity",\r\n                            [\r\n                                { text: "OpaqueBehavior", value: "1", checked: true},\r\n                                { text: "Activity",       value: "2"},\r\n                                { text: "StateMachine",   value: "3"},\r\n                                { text: "Interaction",    value: "4"}\r\n                            ]\r\n                        ).done(function (buttonId, selected) {\r\n                            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                switch (selected) {\r\n                                case "1": QuickEdit.addInQuickEdit(view.model, \'entryActivities\', view, \'internalActivityCompartment\', type.UMLOpaqueBehavior, \'EntryActivity\'); break;\r\n                                case "2": QuickEdit.addInQuickEdit(view.model, \'entryActivities\', view, \'internalActivityCompartment\', type.UMLActivity,       \'EntryActivity\'); break;\r\n                                case "3": QuickEdit.addInQuickEdit(view.model, \'entryActivities\', view, \'internalActivityCompartment\', type.UMLStateMachine,   \'EntryActivity\'); break;\r\n                                case "4": QuickEdit.addInQuickEdit(view.model, \'entryActivities\', view, \'internalActivityCompartment\', type.UMLInteraction,    \'EntryActivity\'); break;\r\n                                }\r\n                            }\r\n                        });\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_DO_ACTIVITY:\r\n                        Dialogs.showSelectRadioDialog(\r\n                            "Select one to create as an do Activity",\r\n                            [\r\n                                { text: "OpaqueBehavior", value: "1", checked: true},\r\n                                { text: "Activity",       value: "2"},\r\n                                { text: "StateMachine",   value: "3"},\r\n                                { text: "Interaction",    value: "4"}\r\n                            ]\r\n                        ).done(function (buttonId, selected) {\r\n                            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                switch (selected) {\r\n                                case "1": QuickEdit.addInQuickEdit(view.model, \'doActivities\', view, \'internalActivityCompartment\', type.UMLOpaqueBehavior, \'DoActivity\'); break;\r\n                                case "2": QuickEdit.addInQuickEdit(view.model, \'doActivities\', view, \'internalActivityCompartment\', type.UMLActivity,       \'DoActivity\'); break;\r\n                                case "3": QuickEdit.addInQuickEdit(view.model, \'doActivities\', view, \'internalActivityCompartment\', type.UMLStateMachine,   \'DoActivity\'); break;\r\n                                case "4": QuickEdit.addInQuickEdit(view.model, \'doActivities\', view, \'internalActivityCompartment\', type.UMLInteraction,    \'DoActivity\'); break;\r\n                                }\r\n                            }\r\n                        });\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_EXIT_ACTIVITY:\r\n                        Dialogs.showSelectRadioDialog(\r\n                            "Select one to create as an exit Activity",\r\n                            [\r\n                                { text: "OpaqueBehavior", value: "1", checked: true},\r\n                                { text: "Activity",       value: "2"},\r\n                                { text: "StateMachine",   value: "3"},\r\n                                { text: "Interaction",    value: "4"}\r\n                            ]\r\n                        ).done(function (buttonId, selected) {\r\n                            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                switch (selected) {\r\n                                case "1": QuickEdit.addInQuickEdit(view.model, \'exitActivities\', view, \'internalActivityCompartment\', type.UMLOpaqueBehavior, \'ExitActivity\'); break;\r\n                                case "2": QuickEdit.addInQuickEdit(view.model, \'exitActivities\', view, \'internalActivityCompartment\', type.UMLActivity,       \'ExitActivity\'); break;\r\n                                case "3": QuickEdit.addInQuickEdit(view.model, \'exitActivities\', view, \'internalActivityCompartment\', type.UMLStateMachine,   \'ExitActivity\'); break;\r\n                                case "4": QuickEdit.addInQuickEdit(view.model, \'exitActivities\', view, \'internalActivityCompartment\', type.UMLInteraction,    \'ExitActivity\'); break;\r\n                                }\r\n                            }\r\n                        });\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_INTERNAL_TRANSITION:\r\n                        if (view.model.regions.length > 0) {\r\n                            QuickEdit.addInQuickEdit(view.model.regions[0], \'transitions\', view, \'internalTransitionCompartment\', type.UMLTransition, \'InternalTransition\', function (m) {\r\n                                m.source = view.model;\r\n                                m.target = view.model;\r\n                                m.kind = UML.TK_INTERNAL;\r\n                            });\r\n                        } else {\r\n                            Toast.info("Simple State cannot have Internal Transitions.");\r\n                        }\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_OUTGOING_TRANSITION:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLTransitionView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLState", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_INCOMING_TRANSITION:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLTransitionView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLState", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_INITIAL_STATE:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLTransitionView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        options1.pseudostateKind = UML.PSK_INITIAL;\r\n                        nodeView = Factory.createModelAndView("UMLPseudostate", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_FINAL_STATE:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLTransitionView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLFinalState", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_CHOICE:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLTransitionView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes, 40);\r\n                        options1.pseudostateKind = UML.PSK_CHOICE;\r\n                        nodeView = Factory.createModelAndView("UMLPseudostate", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        // left state\r\n                        options1 = {\r\n                            x1: nodeView.left - 70,\r\n                            y1: nodeView.getBottom() + 50,\r\n                            x2: nodeView.left - 70,\r\n                            y2: nodeView.getBottom() + 50\r\n                        };\r\n                        nodeView1 = Factory.createModelAndView("UMLState", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, nodeView1);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        // right state\r\n                        options1 = {\r\n                            x1: nodeView.getRight() + 35,\r\n                            y1: nodeView.getBottom() + 50,\r\n                            x2: nodeView.getRight() + 35,\r\n                            y2: nodeView.getBottom() + 50\r\n                        };\r\n                        nodeView2 = Factory.createModelAndView("UMLState", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, nodeView2);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_FORK:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLTransitionView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes, 40);\r\n                        options1.pseudostateKind = UML.PSK_FORK;\r\n                        nodeView = Factory.createModelAndView("UMLPseudostate", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        // left state\r\n                        options1 = {\r\n                            x1: nodeView.left - 40,\r\n                            y1: nodeView.getBottom() + 40,\r\n                            x2: nodeView.left - 40,\r\n                            y2: nodeView.getBottom() + 40\r\n                        };\r\n                        nodeView1 = Factory.createModelAndView("UMLState", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, nodeView1);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        // right state\r\n                        options1 = {\r\n                            x1: nodeView.getRight() + 50,\r\n                            y1: nodeView.getBottom() + 40,\r\n                            x2: nodeView.getRight() + 50,\r\n                            y2: nodeView.getBottom() + 40\r\n                        };\r\n                        nodeView2 = Factory.createModelAndView("UMLState", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, nodeView2);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_JOIN:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLTransitionView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes, 40);\r\n                        options1.pseudostateKind = UML.PSK_JOIN;\r\n                        nodeView = Factory.createModelAndView("UMLPseudostate", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        // left state\r\n                        options1 = {\r\n                            x1: nodeView.left - 40,\r\n                            y1: nodeView.top - 80,\r\n                            x2: nodeView.left - 40,\r\n                            y2: nodeView.top - 80\r\n                        };\r\n                        QuickEdit.setInside(options1);\r\n                        nodeView1 = Factory.createModelAndView("UMLState", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView1, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        // right state\r\n                        options1 = {\r\n                            x1: nodeView.getRight() + 50,\r\n                            y1: nodeView.top - 80,\r\n                            x2: nodeView.getRight() + 50,\r\n                            y2: nodeView.top - 80\r\n                        };\r\n                        QuickEdit.setInside(options1);\r\n                        nodeView2 = Factory.createModelAndView("UMLState", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView2, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLTransition", diagramOwner, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Internal Transition\r\n                case UMLQuickEdit.QUICKEDIT_INTERNAL_TRANSITION:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_TRIGGER:\r\n                        Factory.createModel("UMLEvent", view.model, \'triggers\');\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_EFFECT:\r\n                        Dialogs.showSelectRadioDialog(\r\n                            "Select one to create as an effect Behavior",\r\n                            [\r\n                                { text: "OpaqueBehavior", value: "UMLOpaqueBehavior", checked: true},\r\n                                { text: "Activity",       value: "UMLActivity"},\r\n                                { text: "StateMachine",   value: "UMLStateMachine"},\r\n                                { text: "Interaction",    value: "UMLInteraction"}\r\n                            ]\r\n                        ).done(function (buttonId, selected) {\r\n                            if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                Factory.createModel(selected, view.model, \'effects\');\r\n                            }\r\n                        });\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Transition\r\n                case UMLQuickEdit.QUICKEDIT_TRANSITION:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_TRIGGER:\r\n                        if (view instanceof Core.EdgeLabelView) {\r\n                            Dialogs.showInputDialog(\r\n                                "Enter name of an event to create"\r\n                            ).done(function (modal, result) {\r\n                                if (modal === Dialogs.DIALOG_BTN_OK && result.length > 0) {\r\n                                    var options = {\r\n                                        modelInitializer: function (elem) {\r\n                                            elem.name = result;\r\n                                        }\r\n                                    };\r\n                                    Factory.createModel("UMLEvent", view._parent.model, \'triggers\', options);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_EFFECT:\r\n                        if (view instanceof Core.EdgeLabelView) {\r\n                            Dialogs.showSelectRadioDialog(\r\n                                "Select one to create as an effect Behavior",\r\n                                [\r\n                                    { text: "OpaqueBehavior", value: "UMLOpaqueBehavior", checked: true},\r\n                                    { text: "Activity",       value: "UMLActivity"},\r\n                                    { text: "StateMachine",   value: "UMLStateMachine"},\r\n                                    { text: "Interaction",    value: "UMLInteraction"}\r\n                                ]\r\n                            ).done(function (buttonId, selected) {\r\n                                if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                    Factory.createModel(selected, view._parent.model, \'effects\');\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n\r\n                // Action & ObjectNode\r\n                case UMLQuickEdit.QUICKEDIT_ACTION:\r\n                case UMLQuickEdit.QUICKEDIT_OBJECT_NODE:\r\n                    switch (itemId) {\r\n                    case UMLQuickEdit.ITEM_ADD_TRIGGER:\r\n                        if (view instanceof type.UMLActionView) {\r\n                            Factory.createModel("UMLEvent", view.model, \'triggers\');\r\n                        }\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_INPUT_PIN:\r\n                        _x = view.left + Math.round(Math.random() * view.width);\r\n                        _y = view.top + Math.round(Math.random() * view.height);\r\n                        options1 = { x1: _x, y1: _y, x2: _x, y2: _y, containerView: view };\r\n                        nodeView = Factory.createModelAndView("UMLInputPin", view.model, diagram, options1);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_OUTPUT_PIN:\r\n                        _x = view.left + Math.round(Math.random() * view.width);\r\n                        _y = view.top + Math.round(Math.random() * view.height);\r\n                        options1 = { x1: _x, y1: _y, x2: _x, y2: _y, containerView: view };\r\n                        nodeView = Factory.createModelAndView("UMLOutputPin", view.model, diagram, options1);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_OUTGOING_CONTROL_FLOW:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLControlFlowView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLAction", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_INCOMING_CONTROL_FLOW:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLControlFlowView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLAction", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_OUTGOING_OBJECT_FLOW:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLObjectFlowView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLObjectNode", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLObjectFlow", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_INCOMING_OBJECT_FLOW:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLObjectFlowView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLObjectNode", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLObjectFlow", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_DECISION:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLControlFlowView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes, 40);\r\n                        nodeView = Factory.createModelAndView("UMLDecisionNode", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        // left action\r\n                        options1 = {\r\n                            x1: nodeView.left - 60,\r\n                            y1: nodeView.getBottom() + 40,\r\n                            x2: nodeView.left - 60,\r\n                            y2: nodeView.getBottom() + 40\r\n                        };\r\n                        nodeView1 = Factory.createModelAndView("UMLAction", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, nodeView1);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        // right action\r\n                        options1 = {\r\n                            x1: nodeView.getRight(),\r\n                            y1: nodeView.getBottom() + 40,\r\n                            x2: nodeView.getRight(),\r\n                            y2: nodeView.getBottom() + 40\r\n                        };\r\n                        nodeView2 = Factory.createModelAndView("UMLAction", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, nodeView2);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_MERGE:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLControlFlowView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes, 40);\r\n                        nodeView = Factory.createModelAndView("UMLMergeNode", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        // left state\r\n                        options1 = {\r\n                            x1: nodeView.left - 60,\r\n                            y1: nodeView.top - 80,\r\n                            x2: nodeView.left - 60,\r\n                            y2: nodeView.top - 80\r\n                        };\r\n                        QuickEdit.setInside(options1);\r\n                        nodeView1 = Factory.createModelAndView("UMLAction", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView1, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        // right state\r\n                        options1 = {\r\n                            x1: nodeView.getRight(),\r\n                            y1: nodeView.top - 80,\r\n                            x2: nodeView.getRight(),\r\n                            y2: nodeView.top - 80\r\n                        };\r\n                        QuickEdit.setInside(options1);\r\n                        nodeView2 = Factory.createModelAndView("UMLAction", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView2, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_ACTIVITY_FORK:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLControlFlowView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes, 40);\r\n                        nodeView = Factory.createModelAndView("UMLForkNode", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        // left action\r\n                        options1 = {\r\n                            x1: nodeView.left - 50,\r\n                            y1: nodeView.getBottom() + 40,\r\n                            x2: nodeView.left - 50,\r\n                            y2: nodeView.getBottom() + 40\r\n                        };\r\n                        nodeView1 = Factory.createModelAndView("UMLAction", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, nodeView1);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        // right action\r\n                        options1 = {\r\n                            x1: nodeView.getRight(),\r\n                            y1: nodeView.getBottom() + 40,\r\n                            x2: nodeView.getRight(),\r\n                            y2: nodeView.getBottom() + 40\r\n                        };\r\n                        nodeView2 = Factory.createModelAndView("UMLAction", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, nodeView2);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_ACTIVITY_JOIN:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLControlFlowView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes, 40);\r\n                        nodeView = Factory.createModelAndView("UMLJoinNode", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        // left state\r\n                        options1 = {\r\n                            x1: nodeView.left - 50,\r\n                            y1: nodeView.top - 80,\r\n                            x2: nodeView.left - 50,\r\n                            y2: nodeView.top - 80\r\n                        };\r\n                        QuickEdit.setInside(options1);\r\n                        nodeView1 = Factory.createModelAndView("UMLAction", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView1, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        // right state\r\n                        options1 = {\r\n                            x1: nodeView.getRight(),\r\n                            y1: nodeView.top - 80,\r\n                            x2: nodeView.getRight(),\r\n                            y2: nodeView.top - 80\r\n                        };\r\n                        QuickEdit.setInside(options1);\r\n                        nodeView2 = Factory.createModelAndView("UMLAction", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView2, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_INITIAL_NODE:\r\n                        nodes = QuickEdit.getTailNodes(view, type.UMLControlFlowView);\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLInitialNode", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        break;\r\n                    case UMLQuickEdit.ITEM_ADD_FINAL_NODE:\r\n                        nodes = QuickEdit.getHeadNodes(view, type.UMLControlFlowView);\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView("UMLActivityFinalNode", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView("UMLControlFlow", diagramOwner, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n                }\r\n            } catch (err) {\r\n                Toast.error(err);\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        // QuickEdit Keydown Event Handlers\r\n        $(QuickEdit).on(\'keydown\', function (event, id, itemId, view, keyEvent) {\r\n            var v;\r\n            try {\r\n                switch (id) {\r\n                case UMLQuickEdit.QUICKEDIT_GENERAL:\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_CLASSIFIER:\r\n                case UMLQuickEdit.QUICKEDIT_CLASS:\r\n                case UMLQuickEdit.QUICKEDIT_INTERFACE:\r\n                case UMLQuickEdit.QUICKEDIT_ENUMERATION:\r\n                case UMLQuickEdit.QUICKEDIT_USECASE:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_UP:\r\n                        if (view.templateParameterCompartment && view.templateParameterCompartment.subViews.length > 0) {\r\n                            v = view.templateParameterCompartment.subViews[view.templateParameterCompartment.subViews.length - 1];\r\n                            _.defer(function () {\r\n                                QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                            });\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (view.suppressLiterals !== true && view.enumerationLiteralCompartment && view.enumerationLiteralCompartment.subViews.length > 0) {\r\n                            v = view.enumerationLiteralCompartment.subViews[0];\r\n                            _.defer(function () {\r\n                                QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                            });\r\n                        } else if (view.suppressAttributes !== true && view.attributeCompartment && view.attributeCompartment.subViews.length > 0) {\r\n                            v = view.attributeCompartment.subViews[0];\r\n                            _.defer(function () {\r\n                                QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                            });\r\n                        } else if (view.suppressOperations !== true && view.operationCompartment && view.operationCompartment.subViews.length > 0) {\r\n                            v = view.operationCompartment.subViews[0];\r\n                            _.defer(function () {\r\n                                QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                            });\r\n                        } else if (view.suppressReceptions !== true && view.receptionCompartment && view.receptionCompartment.subViews.length > 0) {\r\n                            v = view.receptionCompartment.subViews[0];\r\n                            _.defer(function () {\r\n                                QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                            });\r\n                        } else if (view.extensionPointCompartment && view.extensionPointCompartment.subViews.length > 0) {\r\n                            v = view.extensionPointCompartment.subViews[0];\r\n                            _.defer(function () {\r\n                                QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                            });\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            if (keyEvent.shiftKey) {\r\n                                _ensure(view, \'suppressOperations\', false);\r\n                                QuickEdit.addInQuickEdit(view.model, \'operations\', view, \'operationCompartment\', type.UMLOperation, \'Operation\');\r\n                            } else {\r\n                                if (view instanceof type.UMLEnumerationView) {\r\n                                    _ensure(view, \'suppressLiterals\', false);\r\n                                    QuickEdit.addInQuickEdit(view.model, \'literals\', view, \'enumerationLiteralCompartment\', type.UMLEnumerationLiteral, \'Literal\');\r\n                                } else {\r\n                                    _ensure(view, \'suppressAttributes\', false);\r\n                                    QuickEdit.addInQuickEdit(view.model, \'attributes\', view, \'attributeCompartment\', type.UMLAttribute, \'Attribute\');\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_ATTRIBUTE:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_UP:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveUpInQuickEdit(view.model._parent, \'attributes\', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === 0) {\r\n                                v = view._parent._parent;\r\n                                _.defer(function () {\r\n                                    QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                });\r\n                            } else {\r\n                                QuickEdit.openUpInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveDownInQuickEdit(view.model._parent, \'attributes\', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === (view._parent.subViews.length - 1)) {\r\n                                v = view._parent._parent;\r\n                                if (v.suppressOperations !== true && v.operationCompartment && v.operationCompartment.subViews.length > 0) {\r\n                                    v = v.operationCompartment.subViews[0];\r\n                                    _.defer(function () {\r\n                                        QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                    });\r\n                                } else if (v.suppressReceptions !== true && v.receptionCompartment && v.receptionCompartment.subViews.length > 0) {\r\n                                    v = v.receptionCompartment.subViews[0];\r\n                                    _.defer(function () {\r\n                                        QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                QuickEdit.openDownInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(view.model._parent, \'attributes\', view._parent._parent, \'attributeCompartment\', type.UMLAttribute, \'Attribute\');\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_BACK_SPACE:\r\n                    case KeyEvent.DOM_VK_DELETE:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.deleteInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_OPERATION:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_UP:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveUpInQuickEdit(view.model._parent, \'operations\', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === 0) {\r\n                                v = view._parent._parent;\r\n                                if (v.suppressAttributes !== true && v.attributeCompartment && v.attributeCompartment.subViews.length > 0) {\r\n                                    v = v.attributeCompartment.subViews[v.attributeCompartment.subViews.length - 1];\r\n                                    _.defer(function () {\r\n                                        QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                    });\r\n                                } else {\r\n                                    _.defer(function () {\r\n                                        QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                QuickEdit.openUpInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveDownInQuickEdit(view.model._parent, \'operations\', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === (view._parent.subViews.length - 1)) {\r\n                                v = view._parent._parent;\r\n                                if (v.suppressReceptions !== true && v.receptionCompartment && v.receptionCompartment.subViews.length > 0) {\r\n                                    v = v.receptionCompartment.subViews[0];\r\n                                    _.defer(function () {\r\n                                        QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                QuickEdit.openDownInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(view.model._parent, \'operations\', view._parent._parent, \'operationCompartment\', type.UMLOperation, \'Operation\');\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_BACK_SPACE:\r\n                    case KeyEvent.DOM_VK_DELETE:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.deleteInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_RECEPTION:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_UP:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveUpInQuickEdit(view.model._parent, \'receptions\', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === 0) {\r\n                                v = view._parent._parent;\r\n                                if (v.suppressOperations !== true && v.operationCompartment && v.operationCompartment.subViews.length > 0) {\r\n                                    v = v.operationCompartment.subViews[v.operationCompartment.subViews.length - 1];\r\n                                    _.defer(function () {\r\n                                        QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                    });\r\n                                } else if (v.suppressAttributes !== true && v.attributeCompartment && v.attributeCompartment.subViews.length > 0) {\r\n                                    v = v.attributeCompartment.subViews[v.attributeCompartment.subViews.length - 1];\r\n                                    _.defer(function () {\r\n                                        QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                    });\r\n                                } else {\r\n                                    _.defer(function () {\r\n                                        QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                QuickEdit.openUpInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveDownInQuickEdit(view.model._parent, \'receptions\', view);\r\n                        } else {\r\n                            QuickEdit.openDownInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(view.model._parent, \'receptions\', view._parent._parent, \'receptionCompartment\', type.UMLReception, \'Reception\');\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_BACK_SPACE:\r\n                    case KeyEvent.DOM_VK_DELETE:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.deleteInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_TEMPLATE_PARAMETER:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_UP:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveUpInQuickEdit(view.model._parent, \'templateParameters\', view);\r\n                        } else {\r\n                            QuickEdit.openUpInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveDownInQuickEdit(view.model._parent, \'templateParameters\', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === (view._parent.subViews.length - 1)) {\r\n                                v = view._parent._parent;\r\n                                _.defer(function () {\r\n                                    QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                });\r\n                            } else {\r\n                                QuickEdit.openDownInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(view.model._parent, \'templateParameters\', view._parent._parent, \'templateParameterCompartment\', type.UMLTemplateParameter, \'TemplateParameter\');\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_BACK_SPACE:\r\n                    case KeyEvent.DOM_VK_DELETE:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.deleteInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_QUALIFIER:\r\n                    var asso      = view._parent._parent,\r\n                        comp      = view._parent,\r\n                        end       = null,\r\n                        compField = null;\r\n                    if (asso.tailQualifiersCompartment == comp) {\r\n                        end = asso.model.end1;\r\n                        compField = "tailQualifiersCompartment";\r\n                    } else if (asso.headQualifiersCompartment == comp) {\r\n                        end = asso.model.end2;\r\n                        compField = "headQualifiersCompartment";\r\n                    }\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_UP:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveUpInQuickEdit(end, \'qualifiers\', view);\r\n                        } else {\r\n                            QuickEdit.openUpInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveDownInQuickEdit(end, \'qualifiers\', view);\r\n                        } else {\r\n                            QuickEdit.openDownInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(end, \'qualifiers\', asso, compField, type.UMLAttribute, \'Qualifier\');\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_BACK_SPACE:\r\n                    case KeyEvent.DOM_VK_DELETE:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.deleteInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_LITERAL:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_UP:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveUpInQuickEdit(view.model._parent, \'literals\', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === 0) {\r\n                                v = view._parent._parent;\r\n                                _.defer(function () {\r\n                                    QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                });\r\n                            } else {\r\n                                QuickEdit.openUpInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveDownInQuickEdit(view.model._parent, \'literals\', view);\r\n                        } else {\r\n                            QuickEdit.openDownInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(view.model._parent, \'literals\', view._parent._parent, \'enumerationLiteralCompartment\', type.UMLEnumerationLiteral, \'Literal\');\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_BACK_SPACE:\r\n                    case KeyEvent.DOM_VK_DELETE:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.deleteInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_EXTENSION_POINT:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_UP:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveUpInQuickEdit(view.model._parent, \'extensionPoints\', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === 0) {\r\n                                v = view._parent._parent;\r\n                                _.defer(function () {\r\n                                    QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                });\r\n                            } else {\r\n                                QuickEdit.openUpInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveDownInQuickEdit(view.model._parent, \'extensionPoints\', view);\r\n                        } else {\r\n                            QuickEdit.openDownInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(view.model._parent, \'extensionPoints\', view._parent._parent, \'extensionPointCompartment\', type.UMLExtensionPoint, \'ExtensionPoint\');\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_BACK_SPACE:\r\n                    case KeyEvent.DOM_VK_DELETE:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.deleteInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_ASSOCIATION:\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_ASSOCIATION_TAIL:\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_ASSOCIATION_HEAD:\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_OBJECT:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (view.slotCompartment && view.slotCompartment.visible === true && view.slotCompartment.subViews.length > 0) {\r\n                            v = view.slotCompartment.subViews[0];\r\n                            _.defer(function () {\r\n                                QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                            });\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(view.model, \'slots\', view, \'slotCompartment\', type.UMLSlot, \'Slot\');\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case UMLQuickEdit.QUICKEDIT_SLOT:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_UP:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveUpInQuickEdit(view.model._parent, \'slots\', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === 0) {\r\n                                v = view._parent._parent;\r\n                                _.defer(function () {\r\n                                    QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                });\r\n                            } else {\r\n                                QuickEdit.openUpInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveDownInQuickEdit(view.model._parent, \'slots\', view);\r\n                        } else {\r\n                            QuickEdit.openDownInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(view.model._parent, \'slots\', view._parent._parent, \'slotCompartment\', type.UMLSlot, \'Slot\');\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_BACK_SPACE:\r\n                    case KeyEvent.DOM_VK_DELETE:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.deleteInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupDiagramManager() {\r\n        // 다이어그램 영역에서 Views들을 이동하면 containerView를 변경할 때.\r\n        $(DiagramManager).on(\'containerViewChanged\', function (event, views, dx, dy, containerView) {\r\n            try {\r\n                var diagram = DiagramManager.getEditor().diagram;\r\n                var containerModel = null;\r\n                if (containerView) {\r\n                    containerModel = containerView.model;\r\n                } else {\r\n                    if (diagram instanceof type.UMLStatechartDiagram) {\r\n                        containerModel = diagram._parent.regions[0];\r\n                    } else {\r\n                        containerModel = diagram._parent;\r\n                    }\r\n                }\r\n                Engine.moveViewsChangingContainer(DiagramManager.getEditor(), views, dx, dy, containerView, containerModel);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(DiagramManager).on(\'workingDiagramRemove\', function (event, diagram) {\r\n        });\r\n        $(DiagramManager).on(\'edgeReconnected\', function (event, edge, points, newParticipant, isTailSide) {\r\n            try {\r\n                if (edge.canConnectTo(newParticipant, isTailSide)) {\r\n                    if (edge instanceof type.UMLSeqMessageView && newParticipant instanceof type.UMLSeqLifelineView) {\r\n                        Engine.reconnectEdge(DiagramManager.getEditor(), edge, points, newParticipant.linePart, isTailSide);\r\n                    } else {\r\n                        Engine.reconnectEdge(DiagramManager.getEditor(), edge, points, newParticipant, isTailSide);\r\n                    }\r\n                } else {\r\n                    if (edge.model && newParticipant.model) {\r\n                        Toast.error(edge.model.getDisplayClassName() + " cannot be connected to " + newParticipant.model.getDisplayClassName());\r\n                    } else {\r\n                        Toast.error("Invalid Connection");\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    function _toSingleLine(text) {\r\n        return text.trim().split("\\n").join("");\r\n    }\r\n\r\n    function loadStereotypeIcons() {\r\n        var css = [];\r\n        var stereotypes = Repository.findAll(function (e) {\r\n            return (e instanceof type.UMLStereotype && e.icon && e.icon.smallIcon && e.icon.smallIcon.trim().length > 0);\r\n        });\r\n        stereotypes.forEach(function (elem) {\r\n            if (elem.icon.smallIcon.indexOf("\'") < 0) {\r\n                css.push("." + elem.getIconClass() + " { background-image: url(\'data:image/svg+xml," + _toSingleLine(elem.icon.smallIcon) + "\') !important; background-repeat: no-repeat; background-position: 0px 0px; width: 16px; height: 16px; background-clip: content-box; }");\r\n            } else {\r\n                console.error("Stereotype\'s smallIcon should not have `\'` (single quote) character.");\r\n            }\r\n        });\r\n        $("#uml-stereotype-small-icons").remove();\r\n        if (css.length > 0) {\r\n            return $("<style id=\'uml-stereotype-small-icons\'>").text(css.join("\\n")).appendTo("head")[0];\r\n        }\r\n    }\r\n\r\n    function setupProjectManager() {\r\n        $(ProjectManager).on(\'projectLoaded\', function (event, filename, project) {\r\n            try {\r\n                loadStereotypeIcons();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(ProjectManager).on(\'imported\', function (event, filename, elem) {\r\n            try {\r\n                loadStereotypeIcons();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupQuickEdit();\r\n        setupDiagramManager();\r\n        setupProjectManager();\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/uml/main.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, browser: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, app*/\r\n\r\ndefine(\'erd/ERD-meta\',[\'require\',\'exports\',\'module\',\'core/MetaModelManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var MetaModelManager  = require("core/MetaModelManager");\r\n\r\n    var metaModel = {\r\n        "ERDElement": {\r\n            "kind": "class",\r\n            "super": "ExtensibleModel"\r\n        },\r\n        "ERDDataModel": {\r\n            "kind": "class",\r\n            "super": "ERDElement"\r\n        },\r\n        "ERDDiagram": {\r\n            "kind": "class",\r\n            "super": "Diagram",\r\n            "views": [\r\n                "ERDEntityView",\r\n                "ERDRelationshipView",\r\n            ]\r\n        },\r\n        "ERDColumn": {\r\n            "kind": "class",\r\n            "super": "ERDElement",\r\n            "attributes": [\r\n                { "name": "type",        "kind": "prim", "type": "String",    "visible": true, "options": [ "VARCHAR", "BOOLEAN", "INTEGER", "CHAR", "BINARY", "VARBINARY", "BLOB", "TEXT", "SMALLINT", "BIGINT", "DECIMAL", "NUMERIC", "FLOAT", "DOUBLE", "BIT", "DATE", "TIME", "DATETIME", "TIMESTAMP", "GEOMETRY", "POINT", "LINESTRING", "POLYGON" ] },\r\n                { "name": "length",      "kind": "prim", "type": "String",    "visible": true },\r\n                { "name": "primaryKey",  "kind": "prim", "type": "Boolean",   "visible": true },\r\n                { "name": "foreignKey",  "kind": "prim", "type": "Boolean",   "visible": true },\r\n                { "name": "referenceTo", "kind": "ref",  "type": "ERDColumn", "visible": true },\r\n                { "name": "uniqueWith", "kind": "ref",  "type": "ERDColumn", "visible": true },\r\n                { "name": "nullable",    "kind": "prim", "type": "Boolean",   "visible": true },\r\n                { "name": "unique",      "kind": "prim", "type": "Boolean",   "visible": true }\r\n            ]\r\n        },\r\n        "ERDEntity": {\r\n            "kind": "class",\r\n            "super": "ERDElement",\r\n            "view": "ERDEntityView",\r\n            "attributes": [\r\n                { "name": "columns", "kind": "objs", "type": "ERDColumn" }\r\n            ],\r\n            "ordering": 1200\r\n        },\r\n        "ERDRelationshipEnd": {\r\n            "kind": "class",\r\n            "super": "RelationshipEnd",\r\n            "attributes": [\r\n                { "name": "cardinality", "kind": "prim", "type": "String", "visible": true, "default": "1", "options": [ "0..1", "1", "0..*", "1..*" ] }\r\n            ],\r\n            "ordering": 1800\r\n        },\r\n        "ERDRelationship": {\r\n            "kind": "class",\r\n            "super": "UndirectedRelationship",\r\n            "view": "ERDRelationshipView",\r\n            "attributes": [\r\n                { "name": "identifying", "kind": "prim", "type": "Boolean", "visible": true, "default": true }\r\n            ],\r\n            "ordering": 1801\r\n        },\r\n        "ERDColumnView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "ERDColumnCompartmentView": {\r\n            "kind": "class",\r\n            "super": "NodeView"\r\n        },\r\n        "ERDEntityView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "nameLabel",         "kind": "ref", "type": "LabelView", "embedded": "subViews" },\r\n                { "name": "columnCompartment", "kind": "ref", "type": "ERDColumnCompartmentView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "ERDRelationshipView": {\r\n            "kind": "class",\r\n            "super": "EdgeView",\r\n            "attributes": [\r\n                { "name": "nameLabel",     "kind": "ref",  "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "tailNameLabel", "kind": "ref",  "type": "EdgeLabelView", "embedded": "subViews" },\r\n                { "name": "headNameLabel", "kind": "ref",  "type": "EdgeLabelView", "embedded": "subViews" }\r\n            ]\r\n        }\r\n    };\r\n\r\n    // Register Meta-model\r\n    MetaModelManager.register(metaModel);\r\n\r\n});\r\n\n//# sourceURL=/erd/ERD-meta.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, loopfunc: true */\r\n/*global define, $, _, window, app, type, appshell, document */\r\n\r\ndefine(\'erd/ERD\',[\'require\',\'exports\',\'module\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Core\',\'core/MetaModelManager\',\'core/Repository\',\'core/PreferenceManager\',\'erd/ERD-meta\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Graphics          = require("core/Graphics"),\r\n        Point             = require("core/Graphics").Point,\r\n        Rect              = require("core/Graphics").Rect,\r\n        Core              = require("core/Core"),\r\n        MetaModelManager  = require("core/MetaModelManager"),\r\n        Repository        = require("core/Repository"),\r\n        PreferenceManager = require("core/PreferenceManager");\r\n\r\n    require("erd/ERD-meta");\r\n\r\n\r\n    /**\r\n     * ERDElement\r\n     * @constructor\r\n     */\r\n    function ERDElement() {\r\n        type.ExtensibleModel.apply(this, arguments);\r\n    }\r\n    // inherits from ExtensibleModel\r\n    ERDElement.prototype = Object.create(type.ExtensibleModel.prototype);\r\n    ERDElement.prototype.constructor = ERDElement;\r\n\r\n    ERDElement.prototype.getDisplayClassName = function () {\r\n        var name = this.getClassName();\r\n        return name.substring(3, name.length);\r\n    };\r\n\r\n    /**\r\n     * ERDDataModel\r\n     * @constructor\r\n     */\r\n    function ERDDataModel() {\r\n        ERDElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    ERDDataModel.prototype = Object.create(ERDElement.prototype);\r\n    ERDDataModel.prototype.constructor = ERDDataModel;\r\n\r\n    /**\r\n     * ERDDiagram\r\n     * @constructor\r\n     */\r\n    function ERDDiagram() {\r\n        type.Diagram.apply(this, arguments);\r\n    }\r\n    // inherits from Diagram\r\n    ERDDiagram.prototype = Object.create(type.Diagram.prototype);\r\n    ERDDiagram.prototype.constructor = ERDDiagram;\r\n\r\n    ERDDiagram.prototype.canAcceptModel = function (model) {\r\n        return (model instanceof type.Hyperlink) ||\r\n               (model instanceof type.Diagram) ||\r\n               (model instanceof type.ERDEntity) ||\r\n               (model instanceof type.ERDRelationship);\r\n    };\r\n\r\n\r\n    /**\r\n     * ERDColumn\r\n     * @constructor\r\n     */\r\n    function ERDColumn() {\r\n        ERDElement.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.type = \'\';\r\n\r\n        /** @member {string} */\r\n        this.length = \'\';\r\n\r\n        /** @member {boolean} */\r\n        this.primaryKey = false;\r\n\r\n        /** @member {boolean} */\r\n        this.foreignKey = false;\r\n\r\n        /** @member {ERDColumn} */\r\n        this.referenceTo = null;\r\n\r\n        /** @member {ERDColumn} */\r\n        this.uniqueWith = null;\r\n\r\n        /** @member {boolean} */\r\n        this.nullable = false;\r\n\r\n        /** @member {boolean} */\r\n        this.unique = false;\r\n    }\r\n    // inherits from FCModelElement\r\n    ERDColumn.prototype = Object.create(ERDElement.prototype);\r\n    ERDColumn.prototype.constructor = ERDColumn;\r\n\r\n    ERDColumn.prototype.getKeyString = function () {\r\n        var _key = this.primaryKey ? "PK" : "";\r\n        if (this.foreignKey) {\r\n            _key += (_key.length > 0) ? ",FK" : "FK";\r\n        }\r\n        if (!this.primaryKey && this.nullable) {\r\n            _key += (_key.length > 0) ? ",N" : "N";\r\n        }\r\n        if (!this.primaryKey && this.unique) {\r\n            _key += (_key.length > 0) ? ",U" : "U";\r\n        }\r\n        if (!this.primaryKey && this.uniqueWith) {\r\n        var uniqueWithStr = "Uw(" + this.uniqueWith.name + ")"; if(_key.length > 0){				_key += "," + uniqueWithStr;			}	else _key += uniqueWithStr; \r\n        }\r\n        return _key;\r\n    };\r\n\r\n    ERDColumn.prototype.getNameString = function () {\r\n        return this.name;\r\n    };\r\n\r\n    ERDColumn.prototype.getTypeString = function () {\r\n        var _type = \'\';\r\n        if (this.type && this.type.length > 0) {\r\n            _type += this.type;\r\n        }\r\n        if (this.length || (_.isString(this.length) && this.length.length > 0)) {\r\n            _type += "(" + this.length + ")";\r\n        }\r\n        return _type;\r\n    };\r\n\r\n    ERDColumn.prototype.getString = function () {\r\n        return this.getKeyString() + " " + this.name + ": " + this.type;\r\n    };\r\n\r\n    /**\r\n     * ERDEntity\r\n     * @constructor\r\n     */\r\n    function ERDEntity() {\r\n        ERDElement.apply(this, arguments);\r\n\r\n        /** @member {Array.<ERDColumn>} */\r\n        this.columns = [];\r\n    }\r\n    // inherits from FCModelElement\r\n    ERDEntity.prototype = Object.create(ERDElement.prototype);\r\n    ERDEntity.prototype.constructor = ERDEntity;\r\n\r\n    /**\r\n     * Get all relationships\r\n     * @return {Array.<ERDRelationship>}\r\n     */\r\n    ERDEntity.prototype.getRelationships = function () {\r\n        var rels = Repository.getRelationshipsOf(this, function (r) { return (r instanceof type.ERDRelationship); });\r\n        return rels;\r\n    };\r\n\r\n    /**\r\n     * Get all relationship ends linked to this element or counterpart\r\n     * @param {boolean} counterpart Returns whether counterpart (opposite-side) relationship ends or not.\r\n     * @return {Array.<ERDRelationshipEnd>}\r\n     */\r\n    ERDEntity.prototype.getRelationshipEnds = function (counterpart) {\r\n        var self = this,\r\n            rels = Repository.getRelationshipsOf(self, function (r) { return (r instanceof type.ERDRelationship); }),\r\n            ends = _.map(rels, function (r) {\r\n                if (counterpart === true) {\r\n                    return (r.end1.reference === self ? r.end2 : r.end1);\r\n                } else {\r\n                    return (r.end1.reference === self ? r.end1 : r.end2);\r\n                }\r\n            });\r\n        return ends;\r\n    };\r\n\r\n    /**\r\n     * ERDRelationshipEnd\r\n     * @constructor\r\n     */\r\n    function ERDRelationshipEnd() {\r\n        type.RelationshipEnd.apply(this, arguments);\r\n\r\n        /** @member {string} */\r\n        this.cardinality = \'1\';\r\n    }\r\n    // inherits from RelationshipEnd\r\n    ERDRelationshipEnd.prototype = Object.create(type.RelationshipEnd.prototype);\r\n    ERDRelationshipEnd.prototype.constructor = ERDRelationshipEnd;\r\n\r\n\r\n    /**\r\n     * ERDRelationship\r\n     * @constructor\r\n     */\r\n    function ERDRelationship() {\r\n        type.UndirectedRelationship.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.identifying = true;\r\n\r\n        /** @member {ERDRelationshipEnd} */\r\n        this.end1 = new ERDRelationshipEnd();\r\n        this.end1._parent = this;\r\n\r\n        /** @member {ERDRelationshipEnd} */\r\n        this.end2 = new ERDRelationshipEnd();\r\n        this.end2._parent = this;\r\n    }\r\n    // inherits from UndirectedRelationship\r\n    ERDRelationship.prototype = Object.create(type.UndirectedRelationship.prototype);\r\n    ERDRelationship.prototype.constructor = ERDRelationship;\r\n\r\n    /**************************************************************************\r\n     *                                                                        *\r\n     *                              VIEW ELEMENTS                             *\r\n     *                                                                        *\r\n     **************************************************************************/\r\n\r\n    var SHADOW_OFFSET = 7,\r\n        SHADOW_ALPHA = 0.2,\r\n        SHADOW_COLOR = Graphics.Color.LIGHT_GRAY;\r\n\r\n    var COMPARTMENT_ITEM_INTERVAL = 2,\r\n        COMPARTMENT_LEFT_PADDING = 5,\r\n        COMPARTMENT_RIGHT_PADDING = 5,\r\n        COMPARTMENT_TOP_PADDING = 5,\r\n        COMPARTMENT_BOTTOM_PADDING = 5;\r\n\r\n    /**\r\n     * ERDColumnView\r\n     * @constructor\r\n     * @extends LabelView\r\n     */\r\n    function ERDColumnView() {\r\n        type.LabelView.apply(this, arguments);\r\n        this.horizontalAlignment = Graphics.AL_LEFT;\r\n        this.selectable = Core.SK_YES;\r\n        this.sizable = Core.SZ_NONE;\r\n        this.movable = Core.MM_NONE;\r\n        this.parentStyle = true;\r\n\r\n        this._nameOffset = 0;\r\n        this._typeOffset = 0;\r\n        this._width      = 0;\r\n    }\r\n    // inherits from LabelView\r\n    ERDColumnView.prototype = Object.create(type.LabelView.prototype);\r\n    ERDColumnView.prototype.constructor = ERDColumnView;\r\n\r\n    ERDColumnView.prototype.update = function (canvas) {\r\n        type.LabelView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    ERDColumnView.prototype.size = function (canvas) {\r\n        type.LabelView.prototype.size.call(this, canvas);\r\n        this.minWidth = this._width;\r\n        this.height = this.minHeight;\r\n    };\r\n\r\n    ERDColumnView.prototype.draw = function (canvas) {\r\n        this.assignStyleToCanvas(canvas);\r\n        if (this.model) {\r\n            canvas.textOut(this.left, this.top, this.model.getKeyString());\r\n            canvas.textOut(this.left + this._nameOffset + COMPARTMENT_LEFT_PADDING, this.top, this.model.getNameString());\r\n            canvas.textOut(this.left + this._typeOffset + COMPARTMENT_LEFT_PADDING, this.top, this.model.getTypeString());\r\n        }\r\n        type.View.prototype.draw.call(this, canvas);\r\n    };\r\n\r\n    /**\r\n     * ERDColumnCompartmentView\r\n     * @constructor\r\n     * @extends NodeView\r\n     */\r\n    function ERDColumnCompartmentView() {\r\n        type.NodeView.apply(this, arguments);\r\n        this.selectable = Core.SK_PROPAGATE;\r\n        this.parentStyle = true;\r\n\r\n        this._nameOffset = 0;\r\n        this._typeOffset = 0;\r\n    }\r\n    // inherits from NodeView\r\n    ERDColumnCompartmentView.prototype = Object.create(type.NodeView.prototype);\r\n    ERDColumnCompartmentView.prototype.constructor = ERDColumnCompartmentView;\r\n\r\n    ERDColumnCompartmentView.prototype.update = function (canvas) {\r\n        if (this.model.columns) {\r\n            var i, len, tempViews = this.subViews;\r\n            this.subViews = [];\r\n            for (i = 0, len = this.model.columns.length; i < len; i++) {\r\n                var column = this.model.columns[i];\r\n                var columnView = _.find(tempViews, function (v) { return v.model === column; });\r\n                if (!columnView) {\r\n                    columnView = new ERDColumnView();\r\n                    columnView.model = column;\r\n                    columnView._parent = this;\r\n                    // Insert columnView to subViewsby bypass command.\r\n                    Repository.bypassInsert(this, \'subViews\', columnView);\r\n                } else {\r\n                    this.addSubView(columnView);\r\n                }\r\n                columnView.setup(canvas);\r\n            }\r\n        }\r\n        type.NodeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    ERDColumnCompartmentView.prototype.size = function (canvas) {\r\n        var i,\r\n            len,\r\n            item,\r\n            _keyWidth = 0,\r\n            _nameWidth = 0,\r\n            _typeWidth = 0;\r\n\r\n        // Compute min-width of key, name, and type column\r\n        var _key, _name, _type;\r\n        for (i = 0, len = this.subViews.length; i < len; i++) {\r\n            item = this.subViews[i];\r\n            if (item.visible && item.model) {\r\n                _key  = canvas.textExtent(item.model.getKeyString()).x;\r\n                _name = canvas.textExtent(item.model.getNameString()).x;\r\n                _type = canvas.textExtent(item.model.getTypeString()).x;\r\n                _keyWidth  = Math.max(_keyWidth, _key);\r\n                _nameWidth = Math.max(_nameWidth, _name);\r\n                _typeWidth = Math.max(_typeWidth, _type);\r\n            }\r\n        }\r\n        this._nameOffset = _keyWidth + COMPARTMENT_RIGHT_PADDING;\r\n        this._typeOffset = this._nameOffset + COMPARTMENT_LEFT_PADDING + _nameWidth + COMPARTMENT_RIGHT_PADDING;\r\n\r\n        // Compute size\r\n        var w = 0,\r\n            h = 0;\r\n        for (i = 0, len = this.subViews.length; i < len; i++) {\r\n            item = this.subViews[i];\r\n            item._nameOffset = this._nameOffset;\r\n            item._typeOffset = this._typeOffset;\r\n            item._width      = this._typeOffset + COMPARTMENT_LEFT_PADDING + _typeWidth;\r\n            if (item.parentStyle) {\r\n                item.font.size = item._parent.font.size;\r\n            }\r\n            item.size(canvas);\r\n            if (item.visible) {\r\n                if (w < item.minWidth) {\r\n                    w = item.minWidth;\r\n                }\r\n                if (i > 0) {\r\n                    h += COMPARTMENT_ITEM_INTERVAL;\r\n                }\r\n                h += item.minHeight;\r\n            }\r\n        }\r\n        this.minWidth = w + COMPARTMENT_LEFT_PADDING + COMPARTMENT_RIGHT_PADDING;\r\n        this.minHeight = h + COMPARTMENT_TOP_PADDING + COMPARTMENT_BOTTOM_PADDING;\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    ERDColumnCompartmentView.prototype.arrange = function (canvas) {\r\n        var i,\r\n            len,\r\n            item,\r\n            _keyWidth = 0,\r\n            _nameWidth = 0,\r\n            _typeWidth = 0;\r\n\r\n        // Compute min-width of key, name, and type column\r\n        var _key, _name, _type;\r\n        for (i = 0, len = this.subViews.length; i < len; i++) {\r\n            item = this.subViews[i];\r\n            if (item.visible && item.model) {\r\n                _key  = canvas.textExtent(item.model.getKeyString()).x;\r\n                _name = canvas.textExtent(item.model.getNameString()).x;\r\n                _type = canvas.textExtent(item.model.getTypeString()).x;\r\n                _keyWidth  = Math.max(_keyWidth, _key);\r\n                _nameWidth = Math.max(_nameWidth, _name);\r\n                _typeWidth = Math.max(_typeWidth, _type);\r\n            }\r\n        }\r\n\r\n        var h = COMPARTMENT_TOP_PADDING;\r\n        for (i = 0, len = this.subViews.length; i < len; i++) {\r\n            item = this.subViews[i];\r\n            if (item.visible) {\r\n                if (i > 0) { h += COMPARTMENT_ITEM_INTERVAL; }\r\n                item.left = this.left + COMPARTMENT_LEFT_PADDING;\r\n                item.top = this.top + h;\r\n                item.width = this.width - COMPARTMENT_LEFT_PADDING - COMPARTMENT_RIGHT_PADDING;\r\n                h += item.height;\r\n            }\r\n            item.arrange(canvas);\r\n        }\r\n        h += COMPARTMENT_BOTTOM_PADDING;\r\n        this.height = h;\r\n        this.sizeConstraints();\r\n    };\r\n\r\n    /**\r\n     * ERDEntityView\r\n     * @constructor\r\n     */\r\n    function ERDEntityView() {\r\n        type.NodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("erd.entity.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n\r\n        /** @member {LabelView} */\r\n        this.nameLabel = new type.LabelView();\r\n        this.nameLabel.horizontalAlignment = Graphics.AL_CENTER;\r\n        this.nameLabel.parentStyle = true;\r\n        this.addSubView(this.nameLabel);\r\n\r\n        /** @member {ERDColumnCompartmentView} */\r\n        this.columnCompartment = new ERDColumnCompartmentView();\r\n        this.columnCompartment.parentStyle = true;\r\n        this.addSubView(this.columnCompartment);\r\n    }\r\n    // inherits from NodeView\r\n    ERDEntityView.prototype = Object.create(type.NodeView.prototype);\r\n    ERDEntityView.prototype.constructor = ERDEntityView;\r\n\r\n    ERDEntityView.prototype.update = function (canvas) {\r\n        // Assign this.model to columnCompartment.model by bypass command.\r\n        if (this.columnCompartment.model !== this.model) {\r\n            Repository.bypassFieldAssign(this.columnCompartment, \'model\', this.model);\r\n        }\r\n        if (this.model) {\r\n            this.nameLabel.text = this.model.name;\r\n            this.nameLabel.font.style = Graphics.FS_BOLD;\r\n        }\r\n        type.NodeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    ERDEntityView.prototype.sizeObject = function (canvas) {\r\n        type.NodeView.prototype.sizeObject.call(this, canvas);\r\n        var _h = 0, _w = 0;\r\n        _h += COMPARTMENT_TOP_PADDING + this.nameLabel.minHeight + COMPARTMENT_BOTTOM_PADDING;\r\n        _h += this.columnCompartment.minHeight;\r\n        _w = Math.max(this.nameLabel.minWidth + COMPARTMENT_LEFT_PADDING + COMPARTMENT_RIGHT_PADDING, this.columnCompartment.minWidth);\r\n        this.minHeight = _h;\r\n        this.minWidth = _w;\r\n    };\r\n\r\n    ERDEntityView.prototype.arrangeObject = function (canvas) {\r\n        var _y = this.top + COMPARTMENT_TOP_PADDING;\r\n        this.nameLabel.top = _y;\r\n        this.nameLabel.left = this.left;\r\n        this.nameLabel.width = this.width;\r\n        this.nameLabel.height = this.nameLabel.minHeight;\r\n        _y += this.nameLabel.height + COMPARTMENT_BOTTOM_PADDING;\r\n        this.columnCompartment.top = _y;\r\n        this.columnCompartment.left = this.left;\r\n        this.columnCompartment.width = this.width;\r\n        type.NodeView.prototype.arrangeObject.call(this, canvas);\r\n    };\r\n\r\n    ERDEntityView.prototype.drawShadow = function (canvas) {\r\n        canvas.storeState();\r\n        canvas.alpha = SHADOW_ALPHA;\r\n        canvas.fillColor = SHADOW_COLOR;\r\n        canvas.fillRect(\r\n            this.left + SHADOW_OFFSET,\r\n            this.top + SHADOW_OFFSET,\r\n            this.getRight() + SHADOW_OFFSET,\r\n            this.getBottom() + SHADOW_OFFSET\r\n        );\r\n        canvas.restoreState();\r\n    };\r\n\r\n    ERDEntityView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        if (this.columnCompartment.subViews.length > 0) {\r\n            canvas.line(this.left, this.columnCompartment.top, this.getRight(), this.columnCompartment.top);\r\n            var _x1 = this.left + COMPARTMENT_LEFT_PADDING + this.columnCompartment._nameOffset,\r\n                _x2 = this.left + COMPARTMENT_LEFT_PADDING + this.columnCompartment._typeOffset;\r\n            canvas.line(_x1, this.columnCompartment.top, _x1, this.getBottom());\r\n            canvas.line(_x2, this.columnCompartment.top, _x2, this.getBottom());\r\n        }\r\n        type.NodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n    /**\r\n     * ERDRelationshipView\r\n     * @constructor\r\n     * @extends EdgeView\r\n     */\r\n    function ERDRelationshipView() {\r\n        type.EdgeView.apply(this, arguments);\r\n        this.lineStyle = PreferenceManager.get("erd.relationship.lineStyle", Core.LS_ROUNDRECT) || PreferenceManager.get("view.lineStyle", Core.LS_OBLIQUE);\r\n\r\n        this.headEndStyle = Core.ES_CROWFOOT_ONE;\r\n        this.tailEndStyle = Core.ES_CROWFOOT_ONE;\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.nameLabel = new type.EdgeLabelView();\r\n        this.nameLabel.hostEdge = this;\r\n        this.nameLabel.edgePosition = Core.EP_MIDDLE;\r\n        this.nameLabel.distance = 15;\r\n        this.nameLabel.alpha = Math.PI / 2;\r\n        this.addSubView(this.nameLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.tailNameLabel = new type.EdgeLabelView();\r\n        this.tailNameLabel.hostEdge = this;\r\n        this.tailNameLabel.edgePosition = Core.EP_TAIL;\r\n        this.tailNameLabel.alpha = Math.PI / 6;\r\n        this.tailNameLabel.distance = 30;\r\n        this.addSubView(this.tailNameLabel);\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.headNameLabel = new type.EdgeLabelView();\r\n        this.headNameLabel.hostEdge = this;\r\n        this.headNameLabel.edgePosition = Core.EP_HEAD;\r\n        this.headNameLabel.alpha = -Math.PI / 6;\r\n        this.headNameLabel.distance = 30;\r\n        this.addSubView(this.headNameLabel);\r\n    }\r\n    // inherits from EdgeView\r\n    ERDRelationshipView.prototype = Object.create(type.EdgeView.prototype);\r\n    ERDRelationshipView.prototype.constructor = ERDRelationshipView;\r\n\r\n    ERDRelationshipView.prototype.update = function (canvas) {\r\n        if (this.model) {\r\n            this.nameLabel.visible = (this.model.name.length > 0);\r\n            this.nameLabel.text = this.model.name;\r\n            if (this.model.end1) {\r\n                this.tailNameLabel.text = this.model.end1.name;\r\n                switch (this.model.end1.cardinality) {\r\n                case "0..1":\r\n                    this.tailEndStyle = Core.ES_CROWFOOT_ZERO_ONE;\r\n                    break;\r\n                case "1":\r\n                    this.tailEndStyle = Core.ES_CROWFOOT_ONE;\r\n                    break;\r\n                case "0..*":\r\n                    this.tailEndStyle = Core.ES_CROWFOOT_ZERO_MANY;\r\n                    break;\r\n                case "1..*":\r\n                    this.tailEndStyle = Core.ES_CROWFOOT_MANY;\r\n                    break;\r\n                default:\r\n                    this.tailEndStyle = Core.ES_CROWFOOT_ONE;\r\n                }\r\n            }\r\n            if (this.model.end2) {\r\n                this.headNameLabel.text = this.model.end2.name;\r\n                switch (this.model.end2.cardinality) {\r\n                case "0..1":\r\n                    this.headEndStyle = Core.ES_CROWFOOT_ZERO_ONE;\r\n                    break;\r\n                case "1":\r\n                    this.headEndStyle = Core.ES_CROWFOOT_ONE;\r\n                    break;\r\n                case "0..*":\r\n                    this.headEndStyle = Core.ES_CROWFOOT_ZERO_MANY;\r\n                    break;\r\n                case "1..*":\r\n                    this.headEndStyle = Core.ES_CROWFOOT_MANY;\r\n                    break;\r\n                default:\r\n                    this.headEndStyle = Core.ES_CROWFOOT_ONE;\r\n                }\r\n            }\r\n            if (this.model.identifying) {\r\n                this.lineMode = Core.LM_SOLID;\r\n            } else {\r\n                this.lineMode = Core.LM_DOT;\r\n            }\r\n        }\r\n        type.EdgeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n\r\n    /* ************************** Type definitions ***************************/\r\n\r\n    type.ERDElement         = ERDElement;\r\n    type.ERDDataModel       = ERDDataModel;\r\n    type.ERDDiagram         = ERDDiagram;\r\n    type.ERDColumn          = ERDColumn;\r\n    type.ERDEntity          = ERDEntity;\r\n    type.ERDRelationshipEnd = ERDRelationshipEnd;\r\n    type.ERDRelationship    = ERDRelationship;\r\n\r\n    type.ERDColumnView            = ERDColumnView;\r\n    type.ERDColumnCompartmentView = ERDColumnCompartmentView;\r\n    type.ERDEntityView            = ERDEntityView;\r\n    type.ERDRelationshipView      = ERDRelationshipView;\r\n\r\n});\r\n\n//# sourceURL=/erd/ERD.js'),eval('define(\'text!grammars/erd-column.pegjs\',[],function () { return \'/**\\r\\n * Grammar for PEG.js\\r\\n * ERD Column Expression Grammar\\r\\n * e.g.) name : type(length)\\r\\n */\\r\\n\\r\\nstart\\r\\n    = _ name:identifier _ type:type?\\r\\n    {\\r\\n        var ast = { name: name };\\r\\n        if (type) { ast.type = type; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\ntype\\r\\n    = ":" _ typeName:identifier _ typeSize:typeSize?\\r\\n    {\\r\\n        var ast = {};\\r\\n        if (typeName) { ast.name = typeName; }\\r\\n        if (typeSize) { ast.size = typeSize; }\\r\\n        return ast;\\r\\n    }\\r\\n\\r\\ntypeSize\\r\\n    = "(" _ number:number _ ")"\\r\\n    {\\r\\n        return number;\\r\\n    }\\r\\n\\r\\n\\r\\nnumber\\r\\n    = val:[0-9,.-:~]+ { return val.join(""); }\\r\\n\\r\\nidentifier\\r\\n    = id:[ 0-9A-Za-z`!@$%^&*_|{};.?\\\\[\\\\]"\\\\u00a0-\\\\ufff0]+ { return id.join(""); }\\r\\n\\r\\n_   // whitespace\\r\\n    = [ \\\\t\\\\n\\\\r]*\\r\\n\';});\n\n//# sourceURL=/text!grammars/erd-column.pegjs'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, PEG */\r\ndefine(\'erd/ERDUtils\',[\'require\',\'exports\',\'module\',\'core/Core\',\'core/Repository\',\'core/OperationBuilder\',\'engine/Engine\',\'erd/ERD\',\'text!grammars/erd-column.pegjs\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Core                     = require("core/Core"),\r\n        Repository               = require("core/Repository"),\r\n        OperationBuilder         = require("core/OperationBuilder"),\r\n        Engine                   = require("engine/Engine"),\r\n        ERD                      = require("erd/ERD");\r\n\r\n    var GrammarColumn            = require("text!grammars/erd-column.pegjs");\r\n\r\n    function parseColumnExpression(expr) {\r\n        var parser = PEG.buildParser(GrammarColumn);\r\n        var ast = parser.parse(expr);\r\n        return ast;\r\n    }\r\n\r\n    function getColumnExpression(elem) {\r\n        var str = elem.name;\r\n        if (elem.type && elem.type.length > 0) {\r\n            str = str + ": " + elem.type;\r\n            if (elem.length) {\r\n                str = str + "(" + elem.length + ")";\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n\r\n    function setColumnExpression(elem, ast) {\r\n        var fields = {};\r\n        // name\r\n        if (ast.name) {\r\n            fields.name = ast.name.trim();\r\n        }\r\n        // type\r\n        if (ast.type) {\r\n            if (ast.type.name) {\r\n                fields.type = ast.type.name.trim();\r\n            } else {\r\n                fields.type = "";\r\n            }\r\n            if (ast.type.size) {\r\n                fields.length = ast.type.size;\r\n            } else {\r\n                fields.length = 0;\r\n            }\r\n        } else {\r\n            fields.type = "";\r\n            fields.length = 0;\r\n        }\r\n        Engine.setProperties(elem, fields);\r\n    }\r\n\r\n    exports.parseColumnExpression = parseColumnExpression;\r\n    exports.getColumnExpression   = getColumnExpression;\r\n    exports.setColumnExpression   = setColumnExpression;\r\n\r\n});\r\n\n//# sourceURL=/erd/ERDUtils.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell, type */\r\n\r\ndefine('erd/ERDQuickEdit',['require','exports','module','ui/QuickEdit','core/Graphics','core/Core','erd/ERDUtils'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var QuickEdit  = require(\"ui/QuickEdit\"),\r\n        Graphics   = require(\"core/Graphics\"),\r\n        Core       = require(\"core/Core\"),\r\n        ERDUtils   = require(\"erd/ERDUtils\");\r\n\r\n    /**\r\n     * @const\r\n     * QuickEdit IDs\r\n     */\r\n    var QUICKEDIT_ENTITY               = 'erd-entity',\r\n        QUICKEDIT_COLUMN               = 'erd-column',\r\n        QUICKEDIT_RELATIONSHIP         = 'erd-relationship',\r\n        QUICKEDIT_RELATIONSHIP_HEAD    = 'erd-relationship-head',\r\n        QUICKEDIT_RELATIONSHIP_TAIL    = 'erd-relationship-tail';\r\n\r\n    /**\r\n     * @const\r\n     * QuickEdit Item IDs\r\n     */\r\n    var ITEM_EDIT             = 'edit',\r\n        ITEM_ADD              = 'add',\r\n        ITEM_DELETE           = 'delete',\r\n        ITEM_MOVEUP           = 'moveup',\r\n        ITEM_MOVEDOWN         = 'movedown',\r\n        ITEM_ADD_NOTE         = 'add-note',\r\n        ITEM_ADD_COLUMN       = 'add-column',\r\n        ITEM_CARDINALITY      = 'cardinality',\r\n        ITEM_IDENTIFYING      = 'identifying',\r\n        ITEM_PRIMARY_KEY      = 'primary-key',\r\n        ITEM_ADD_ONE_TO_ONE   = 'add-one-to-one',\r\n        ITEM_ADD_ONE_TO_MANY  = 'add-one-to-many',\r\n        ITEM_ADD_MANY_TO_MANY = 'add-many-to-many';\r\n\r\n\r\n    /* Quick Edit Buttons */\r\n    var QE_ADD              = { type: 'button', id: ITEM_ADD,        icon: 'quick-edit-icon-add',        hint: 'Add',        key: 'Ctrl-Enter' },\r\n        QE_DELETE           = { type: 'button', id: ITEM_DELETE,     icon: 'quick-edit-icon-delete',     hint: 'Delete',     key: 'Ctrl-Delete' },\r\n        QE_MOVEUP           = { type: 'button', id: ITEM_MOVEUP,     icon: 'quick-edit-icon-moveup',     hint: 'Move Up',    key: 'Ctrl-Up' },\r\n        QE_MOVEDOWN         = { type: 'button', id: ITEM_MOVEDOWN,   icon: 'quick-edit-icon-movedown',   hint: 'Move Down',  key: 'Ctrl-Down' },\r\n        QE_ADD_NOTE         = { type: 'button', id: ITEM_ADD_NOTE,   icon: 'quick-edit-icon-add-note',   hint: 'Add Note' },\r\n        QE_ADD_COLUMN       = { type: 'button', id: ITEM_ADD_COLUMN, icon: 'quick-edit-icon-erd-column', hint: 'Add Column', key: 'Ctrl-Enter' },\r\n        QE_ADD_ONE_TO_ONE   = { type: 'button', id: ITEM_ADD_ONE_TO_ONE,   icon: 'quick-edit-icon-erd-add-one-to-one',   hint: 'Add One to One' },\r\n        QE_ADD_ONE_TO_MANY  = { type: 'button', id: ITEM_ADD_ONE_TO_MANY,  icon: 'quick-edit-icon-erd-add-one-to-many',  hint: 'Add One to Many' },\r\n        QE_ADD_MANY_TO_MANY = { type: 'button', id: ITEM_ADD_MANY_TO_MANY, icon: 'quick-edit-icon-erd-add-many-to-many', hint: 'Add Many to Many' };\r\n\r\n    /* Quick Edit Inputs */\r\n    var QE_EDIT_GENERAL = { type: 'input', id: ITEM_EDIT, hint: \"name\" },\r\n        QE_EDIT_COLUMN  = { type: 'input', id: ITEM_EDIT, hint: \"name : type (length)\" };\r\n\r\n    /* Quick Edit ComboBoxes */\r\n    var QE_CARDINALITY = {\r\n            type: 'dropdown',\r\n            id: ITEM_CARDINALITY,\r\n            hint: 'Cardinality',\r\n            dropdownWidth: 170,\r\n            items: [\r\n                { icon: 'quick-edit-icon-erd-zero-one',  text: 'Zero or One',  value: '0..1' },\r\n                { icon: 'quick-edit-icon-erd-one',       text: 'One',          value: '1' },\r\n                { icon: 'quick-edit-icon-erd-zero-many', text: 'Zero or Many', value: '0..*' },\r\n                { icon: 'quick-edit-icon-erd-many',      text: 'Many',         value: '1..*' }\r\n            ]\r\n        },\r\n        QE_IDENTIFYING = {\r\n            type: 'dropdown',\r\n            id: ITEM_IDENTIFYING,\r\n            hint: 'Identifying',\r\n            dropdownWidth: 180,\r\n            items: [\r\n                { icon: 'quick-edit-icon-erd-identifying',     text: 'Identifying',     value: true },\r\n                { icon: 'quick-edit-icon-erd-non-identifying', text: 'Non-Identifying', value: false }\r\n            ]\r\n        },\r\n        QE_PRIMARY_KEY = {\r\n            type: 'dropdown',\r\n            id: ITEM_PRIMARY_KEY,\r\n            hint: 'Primary Key',\r\n            dropdownWidth: 180,\r\n            items: [\r\n                { icon: 'quick-edit-icon-erd-column-key',    text: 'Primary Key', value: true },\r\n                { icon: 'quick-edit-icon-erd-column-nonkey', text: 'Not Key',     value: false }\r\n            ]\r\n        };\r\n\r\n\r\n    // QuickEdit for Entity\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.ERDEntityView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_ENTITY,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_COLUMN ],\r\n                rightSection2: [ QE_ADD_ONE_TO_ONE, QE_ADD_ONE_TO_MANY, QE_ADD_MANY_TO_MANY ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, view.model.name);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Column\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.ERDColumnView) && (view._parent instanceof type.ERDColumnCompartmentView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var rect  = new Graphics.Rect(view._parent.left, view.top, view._parent.getRight(), view.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_COLUMN,\r\n                main: QE_EDIT_COLUMN,\r\n                leftSection: [ QE_PRIMARY_KEY ],\r\n                rightSection: [ QE_ADD, QE_DELETE, QE_MOVEUP, QE_MOVEDOWN ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, ERDUtils.getColumnExpression(view.model));\r\n            QuickEdit.setDropdownValue(ITEM_PRIMARY_KEY, view.model.primaryKey);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Relationship\r\n    QuickEdit.register({\r\n        when: function (view, x, y, pass) {\r\n            pass.position = 'center';\r\n            // when RelationshipView was clicked\r\n            if (view instanceof type.ERDRelationshipView) {\r\n                pass.position = QuickEdit.getPositionOfEdge(view.points, x, y);\r\n                return true;\r\n            }\r\n            // when Labels belongs to RelationshipView was clicked\r\n            if ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.ERDRelationshipView)) {\r\n                if (view === view._parent.headNameLabel) {\r\n                    pass.position = 'head';\r\n                } else if (view === view._parent.tailNameLabel) {\r\n                    pass.position = 'tail';\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        popup: function (editor, position, view, pass) {\r\n            var endView, rect;\r\n            switch (pass.position) {\r\n            case 'center':\r\n                endView = view.nameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.nameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_RELATIONSHIP,\r\n                    main: QE_EDIT_GENERAL,\r\n                    leftSection: [ QE_IDENTIFYING ],\r\n                    leftSection2: [ QE_ADD_NOTE ],\r\n                    rightSection: []\r\n                });\r\n                break;\r\n            case 'tail':\r\n                endView = view.tailNameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.tailNameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_RELATIONSHIP_TAIL,\r\n                    main: QE_EDIT_GENERAL,\r\n                    leftSection: [],\r\n                    rightSection: [ QE_CARDINALITY ]\r\n                });\r\n                break;\r\n            case 'head':\r\n                endView = view.headNameLabel;\r\n                if (view instanceof Core.EdgeLabelView) { endView = view._parent.headNameLabel; }\r\n                rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n                rect.add(position);\r\n                QuickEdit.render(editor, rect, endView, {\r\n                    id: QUICKEDIT_RELATIONSHIP_HEAD,\r\n                    main: QE_EDIT_GENERAL,\r\n                    leftSection: [],\r\n                    rightSection: [ QE_CARDINALITY ]\r\n                });\r\n                break;\r\n            }\r\n        },\r\n        init: function (view, pass) {\r\n            var model = view.model;\r\n            if (view instanceof Core.EdgeLabelView) { model = view._parent.model; }\r\n            switch (pass.position) {\r\n            case 'center':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.name);\r\n                QuickEdit.setDropdownValue(ITEM_IDENTIFYING, model.identifying);\r\n                break;\r\n            case 'tail':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.end1.name);\r\n                QuickEdit.setDropdownValue(ITEM_CARDINALITY, model.end1.cardinality);\r\n                break;\r\n            case 'head':\r\n                QuickEdit.setInputValue(ITEM_EDIT, model.end2.name);\r\n                QuickEdit.setDropdownValue(ITEM_CARDINALITY, model.end2.cardinality);\r\n                break;\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    // Define public API\r\n    exports.ITEM_EDIT             = ITEM_EDIT;\r\n    exports.ITEM_ADD              = ITEM_ADD;\r\n    exports.ITEM_DELETE           = ITEM_DELETE;\r\n    exports.ITEM_MOVEUP           = ITEM_MOVEUP;\r\n    exports.ITEM_MOVEDOWN         = ITEM_MOVEDOWN;\r\n    exports.ITEM_ADD_NOTE         = ITEM_ADD_NOTE;\r\n    exports.ITEM_ADD_COLUMN       = ITEM_ADD_COLUMN;\r\n    exports.ITEM_CARDINALITY      = ITEM_CARDINALITY;\r\n    exports.ITEM_IDENTIFYING      = ITEM_IDENTIFYING;\r\n    exports.ITEM_PRIMARY_KEY      = ITEM_PRIMARY_KEY;\r\n    exports.ITEM_ADD_ONE_TO_ONE   = ITEM_ADD_ONE_TO_ONE;\r\n    exports.ITEM_ADD_ONE_TO_MANY  = ITEM_ADD_ONE_TO_MANY;\r\n    exports.ITEM_ADD_MANY_TO_MANY = ITEM_ADD_MANY_TO_MANY;\r\n\r\n    exports.QUICKEDIT_ENTITY            = QUICKEDIT_ENTITY;\r\n    exports.QUICKEDIT_COLUMN            = QUICKEDIT_COLUMN;\r\n    exports.QUICKEDIT_RELATIONSHIP      = QUICKEDIT_RELATIONSHIP;\r\n    exports.QUICKEDIT_RELATIONSHIP_HEAD = QUICKEDIT_RELATIONSHIP_HEAD;\r\n    exports.QUICKEDIT_RELATIONSHIP_TAIL = QUICKEDIT_RELATIONSHIP_TAIL;\r\n\r\n});\r\n\n//# sourceURL=/erd/ERDQuickEdit.js"),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, browser: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, _, type, meta*/\r\n\r\ndefine(\'erd/ERD-rules\',[\'require\',\'exports\',\'module\',\'core/Validator\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Validator = require("core/Validator");\r\n\r\n    var rules = [\r\n        {\r\n            id: "ERD001",\r\n            message: "Primary key cannot be nullable.",\r\n            appliesTo: [ "ERDColumn" ],\r\n            exceptions: [],\r\n            constraint: function (elem) {\r\n                if (elem.primaryKey === true && elem.nullable === true) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        {\r\n            id: "ERD002",\r\n            message: "No relationship with the foreign key reference.",\r\n            appliesTo: [ "ERDColumn" ],\r\n            exceptions: [],\r\n            constraint: function (elem) {\r\n                if (elem.foreignKey && elem.referenceTo) {\r\n                    var ends = elem._parent.getRelationshipEnds(true);\r\n                    return _.some(ends, function (e) {\r\n                        return e.reference === elem.referenceTo._parent;\r\n                    });\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n    ];\r\n\r\n    Validator.addRules(rules);\r\n\r\n});\r\n\n//# sourceURL=/erd/ERD-rules.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define */\r\n\r\ndefine('erd/ERDCommands',['require','exports','module'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    exports.FILE_NEW_FROM_TEMPLATE_DATAMODEL = 'file.newFromTemplate.DataModel';\r\n    exports.ERD_ADD_DIAGRAM                  = 'erd.add.diagram';\r\n    exports.ERD_ADD_MODEL                    = 'erd.add.model';\r\n    exports.ERD_ADD_ENTITY                   = 'erd.add.entity';\r\n    exports.ERD_ADD_COLUMN                   = 'erd.add.column';\r\n\r\n});\r\n\n//# sourceURL=/erd/ERDCommands.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell, Mustache */\r\n\r\ndefine(\'erd/ERDFactory\',[\'require\',\'exports\',\'module\',\'utils/Helper\',\'core/Core\',\'core/OperationBuilder\',\'core/Repository\',\'engine/Engine\',\'engine/Factory\',\'engine/ProjectManager\',\'erd/ERD\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Helper           = require("utils/Helper"),\r\n        Core             = require("core/Core"),\r\n        OperationBuilder = require("core/OperationBuilder"),\r\n        Repository       = require("core/Repository"),\r\n        Engine           = require("engine/Engine"),\r\n        Factory          = require("engine/Factory"),\r\n        ProjectManager   = require("engine/ProjectManager");\r\n\r\n    require("erd/ERD");\r\n\r\n    // Preconditions ...........................................................\r\n\r\n    function entityLinkPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.ERDEntity) && (options.headModel instanceof type.ERDEntity),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    // Create ER diagram function ..............................................\r\n\r\n    function diagramFn(parent, options) {\r\n        var model,\r\n            diagram;\r\n        parent = parent || ProjectManager.getProject();\r\n        if (parent instanceof type.ERDDataModel) {\r\n            diagram = new type.ERDDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, diagram.getDisplayClassName());\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', diagram);\r\n        } else {\r\n            model = new type.ERDDataModel();\r\n            model.name = Core.getNewName(parent.ownedElements, "Data Model");\r\n            model._parent = parent;\r\n            diagram = new type.ERDDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, diagram.getDisplayClassName());\r\n            model.ownedElements.push(diagram);\r\n            diagram._parent = model;\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', model);\r\n        }\r\n        if (diagram) {\r\n            diagram = Repository.get(diagram._id);\r\n        }\r\n        options.triggerDiagramCreated(diagram);\r\n        return diagram;\r\n    }\r\n\r\n    // Create Diagram ..........................................................\r\n\r\n    Factory.registerDiagramFn("ERDDiagram", diagramFn);\r\n\r\n    // Create Model ............................................................\r\n\r\n    Factory.registerModelFn("ERDDataModel", Factory.defaultModelFn);\r\n    Factory.registerModelFn("ERDEntity",    Factory.defaultModelFn);\r\n    Factory.registerModelFn("ERDColumn",    Factory.defaultModelFn);\r\n\r\n    // Create Model And View ...................................................\r\n\r\n    Factory.registerModelAndViewFn("ERDEntity",       Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("ERDRelationship", Factory.defaultUndirectedRelationshipFn, { precondition: entityLinkPrecondition });\r\n\r\n    // Create View .............................................................\r\n\r\n    Factory.registerViewOfFn("ERDDiagram", Factory.defaultViewOnDiagramFn);\r\n\r\n});\r\n\n//# sourceURL=/erd/ERDFactory.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell */\r\ndefine(\'erd/ERDCommandHandlers\',[\'require\',\'exports\',\'module\',\'command/CommandManager\',\'core/Repository\',\'engine/SelectionManager\',\'engine/Factory\',\'command/Commands\',\'diagrams/DiagramManager\',\'explorer/ModelExplorerView\',\'file/FileUtils\',\'erd/ERDCommands\',\'erd/ERDFactory\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var CommandManager    = require("command/CommandManager"),\r\n        Repository        = require("core/Repository"),\r\n        SelectionManager  = require("engine/SelectionManager"),\r\n        Factory           = require("engine/Factory"),\r\n        Commands          = require("command/Commands"),\r\n        DiagramManager    = require("diagrams/DiagramManager"),\r\n        ModelExplorerView = require("explorer/ModelExplorerView"),\r\n        FileUtils         = require("file/FileUtils"),\r\n        ERDCommands       = require("erd/ERDCommands"),\r\n        ERDFactory        = require("erd/ERDFactory");\r\n\r\n    function _handleDataModelTemplate() {\r\n        var path = FileUtils.getApplicationDirectoryPath() + "templates/DataModel.mdj";\r\n        return CommandManager.execute(Commands.FILE_NEW, path);\r\n    }\r\n\r\n    function _updateCommands() {\r\n        var selected    = SelectionManager.getSelected(),\r\n            isNone      = (!selected),\r\n            isProject   = selected instanceof type.Project,\r\n            isPackage   = selected instanceof type.UMLPackage || selected instanceof type.UMLSubsystem,\r\n            isDataModel = selected instanceof type.ERDDataModel,\r\n            isEntity    = selected instanceof type.ERDEntity;\r\n\r\n        CommandManager.get(ERDCommands.ERD_ADD_DIAGRAM).setVisible(isNone || isProject || isPackage || isDataModel);\r\n        CommandManager.get(ERDCommands.ERD_ADD_MODEL).setVisible(isProject || isPackage);\r\n        CommandManager.get(ERDCommands.ERD_ADD_ENTITY).setVisible(isDataModel);\r\n        CommandManager.get(ERDCommands.ERD_ADD_COLUMN).setVisible(isEntity);\r\n    }\r\n\r\n    CommandManager.register("Data Model", ERDCommands.FILE_NEW_FROM_TEMPLATE_DATAMODEL, _handleDataModelTemplate);\r\n    CommandManager.register("ER Diagram", ERDCommands.ERD_ADD_DIAGRAM,                  _.partial(Factory.createDiagram, "ERDDiagram"));\r\n    CommandManager.register("Data Model", ERDCommands.ERD_ADD_MODEL,                    _.partial(Factory.createModel,   "ERDDataModel"));\r\n    CommandManager.register("Entity",     ERDCommands.ERD_ADD_ENTITY,                   _.partial(Factory.createModel,   "ERDEntity"));\r\n    CommandManager.register("Column",     ERDCommands.ERD_ADD_COLUMN,                   _.partial(Factory.createModel,   "ERDColumn",null, "columns"));\r\n\r\n    // Update Commands\r\n    $(SelectionManager).on("selectionChanged", _updateCommands);\r\n    $(Repository).on("operationExecuted", _updateCommands);\r\n\r\n});\r\n\n//# sourceURL=/erd/ERDCommandHandlers.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell */\r\n\r\ndefine(\'erd/ERDMenus\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'command/Commands\',\'menu/MenuManager\',\'menu/ContextMenuManager\',\'menu/DefaultMenus\',\'uml/UMLCommands\',\'erd/ERDCommands\',\'erd/ERDCommandHandlers\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit            = require("utils/AppInit"),\r\n        Commands           = require("command/Commands"),\r\n        MenuManager        = require("menu/MenuManager"),\r\n        ContextMenuManager = require("menu/ContextMenuManager"),\r\n        DefaultMenus       = require("menu/DefaultMenus"),\r\n        UMLCommands        = require("uml/UMLCommands");\r\n\r\n    var ERDCommands = require("erd/ERDCommands");\r\n    require("erd/ERDCommandHandlers");\r\n\r\n    function _addElementMenus(menu) {\r\n        menu.addMenuItem(ERDCommands.ERD_ADD_MODEL,   "icon-ERDDataModel");\r\n        menu.addMenuItem(ERDCommands.ERD_ADD_ENTITY,  "icon-ERDEntity");\r\n        menu.addMenuItem(ERDCommands.ERD_ADD_COLUMN,  "icon-ERDColumn");\r\n    }\r\n\r\n    /**\r\n     * Extend MenuBar\r\n     */\r\n    function setupMenus() {\r\n        var menu, menuItem;\r\n\r\n        // File: New From Template\r\n        menu = MenuManager.getMenuItem(Commands.FILE_NEW_FROM_TEMPLATE);\r\n        menu.addMenuItem(ERDCommands.FILE_NEW_FROM_TEMPLATE_DATAMODEL);\r\n\r\n        // Add Diagram\r\n        menuItem = MenuManager.getMenuItem(Commands.MODEL_ADD_DIAGRAM);\r\n        menuItem.addMenuItem(ERDCommands.ERD_ADD_DIAGRAM);\r\n\r\n        // Add Model\r\n        menuItem = MenuManager.getMenuItem(Commands.MODEL_ADD);\r\n        menuItem.addMenuItem(ERDCommands.ERD_ADD_MODEL);\r\n        menuItem.addMenuItem(ERDCommands.ERD_ADD_ENTITY);\r\n        menuItem.addMenuItem(ERDCommands.ERD_ADD_COLUMN);\r\n    }\r\n\r\n    /**\r\n     * Extend ContextMenu for Diagram\r\n     */\r\n    function setupContextMenuForDiagram() {\r\n        var contextMenu, menu, menuItem;\r\n        contextMenu = ContextMenuManager.getContextMenu(DefaultMenus.contextMenus.DIAGRAM);\r\n\r\n        // Add\r\n        menu = contextMenu.getMenuItem(Commands.MODEL_ADD);\r\n        _addElementMenus(menu);\r\n    }\r\n\r\n    /**\r\n     * Extend ContextMenu for Explorer\r\n     */\r\n    function setupContextMenuForExplorer() {\r\n        var contextMenu, menu;\r\n        contextMenu = ContextMenuManager.getContextMenu(DefaultMenus.contextMenus.EXPLORER);\r\n\r\n        // Add Diagram\r\n        menu = contextMenu.getMenuItem(Commands.MODEL_ADD_DIAGRAM);\r\n        menu.addMenuItem(ERDCommands.ERD_ADD_DIAGRAM, "icon-ERDDiagram");\r\n\r\n        // Add\r\n        menu = contextMenu.getMenuItem(Commands.MODEL_ADD);\r\n        _addElementMenus(menu);\r\n    }\r\n\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupMenus();\r\n        setupContextMenuForDiagram();\r\n        setupContextMenuForExplorer();\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/erd/ERDMenus.js'),eval("/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell, document */\r\n\r\ndefine('erd/ERDToolbox',['require','exports','module','utils/AppInit','core/Repository','engine/Factory','diagrams/DiagramManager','diagrams/ToolboxView','ui/QuickEdit','ui/Toast','erd/ERDFactory'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var AppInit        = require(\"utils/AppInit\"),\r\n        Repository     = require(\"core/Repository\"),\r\n        Factory        = require(\"engine/Factory\"),\r\n        DiagramManager = require(\"diagrams/DiagramManager\"),\r\n        Toolbox        = require(\"diagrams/ToolboxView\"),\r\n        QuickEdit      = require(\"ui/QuickEdit\"),\r\n        Toast          = require(\"ui/Toast\"),\r\n        ERDFactory     = require(\"erd/ERDFactory\");\r\n\r\n    /**\r\n     * Toolbox Groups\r\n     * @const\r\n     */\r\n    var TXG_ERD  = 'txg-erd';\r\n\r\n    /**\r\n     * Toolbox Items\r\n     * @const\r\n     */\r\n    var TX_ENTITY       = 'tx-erd-entity',\r\n        TX_ONE_TO_ONE   = 'tx-erd-one-to-one',\r\n        TX_ONE_TO_MANY  = 'tx-erd-one-to-many',\r\n        TX_MANY_TO_MANY = 'tx-erd-many-to-many';\r\n\r\n    function setupToolbox() {\r\n        Toolbox.addGroup(TXG_ERD, 'Entity-Relationship', [type.ERDDiagram]);\r\n        Toolbox.addItem(TX_ENTITY,       TXG_ERD, 'Entity',       'icon-ERDEntity',     'rect');\r\n        Toolbox.addItem(TX_ONE_TO_ONE,   TXG_ERD, 'One to One Relationship',   'icon-ERDOneToOne',   'line');\r\n        Toolbox.addItem(TX_ONE_TO_MANY,  TXG_ERD, 'One to Many Relationship',  'icon-ERDOneToMany',  'line');\r\n        Toolbox.addItem(TX_MANY_TO_MANY, TXG_ERD, 'Many to Many Relationship', 'icon-ERDManyToMany', 'line');\r\n\r\n        // Event Handling\r\n        $(Toolbox).on('elementCreated', function (event, id, editor, x1, y1, x2, y2) {\r\n            try {\r\n                var diagram   = editor.diagram,\r\n                    parent    = diagram._parent,\r\n                    model     = null,\r\n                    view      = null,\r\n                    tailView  = diagram.getViewAt(editor.canvas, x1, y1, true),\r\n                    headView  = diagram.getViewAt(editor.canvas, x2, y2, true),\r\n                    tailModel = tailView ? tailView.model : null,\r\n                    headModel = headView ? headView.model : null;\r\n\r\n                var options = {\r\n                        x1        : x1,\r\n                        y1        : y1,\r\n                        x2        : x2,\r\n                        y2        : y2,\r\n                        tailView  : diagram.getViewAt(editor.canvas, x1, y1, true),\r\n                        headView  : diagram.getViewAt(editor.canvas, x2, y2, true),\r\n                        tailModel : tailView ? tailView.model : null,\r\n                        headModel : headView ? headView.model : null\r\n                    };\r\n\r\n                switch (id) {\r\n                case TX_ENTITY:\r\n                    view = Factory.createModelAndView(\"ERDEntity\", parent, diagram, options);\r\n                    break;\r\n                case TX_ONE_TO_ONE:\r\n                    view = Factory.createModelAndView(\"ERDRelationship\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_ONE_TO_MANY:\r\n                    options.modelInitializer = function (elem) {\r\n                        elem.end2.cardinality = \"0..*\";\r\n                    };\r\n                    view = Factory.createModelAndView(\"ERDRelationship\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_MANY_TO_MANY:\r\n                    options.modelInitializer = function (elem) {\r\n                        elem.end1.cardinality = \"0..*\";\r\n                        elem.end2.cardinality = \"0..*\";\r\n                    };\r\n                    view = Factory.createModelAndView(\"ERDRelationship\", tailModel, diagram, options);\r\n                    break;\r\n                }\r\n\r\n\r\n                // Open QuickEdit for the created view.\r\n                if (view) {\r\n                    view = Repository.get(view._id);\r\n                    if (view instanceof type.NodeView) {\r\n                        _.defer(function () {\r\n                            QuickEdit.open(editor, view, view.left, view.top);\r\n                        });\r\n                    } else if (view instanceof type.EdgeView) {\r\n                        _.defer(function () {\r\n                            QuickEdit.open(editor, view, Math.round((x1 + x2) / 2), Math.round((y1 + y2) / 2));\r\n                        });\r\n                    }\r\n                }\r\n\r\n            } catch (err) {\r\n                if (_.isString(err)) {\r\n                    Toast.error(err);\r\n                } else {\r\n                    console.error(err.stack);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupDiagramManager() {\r\n        $(DiagramManager).on('currentDiagramChanged', function (event, diagram, editor) {\r\n            try {\r\n                if (diagram instanceof type.ERDDiagram) {\r\n                    Toolbox.expandGroup(TXG_ERD);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupToolbox();\r\n        setupDiagramManager();\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/erd/ERDToolbox.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, staruml */\r\n\r\ndefine(\'erd/ERDPreferences\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Core\',\'core/PreferenceManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit           = require("utils/AppInit"),\r\n        Core              = require("core/Core"),\r\n        PreferenceManager = require("core/PreferenceManager");\r\n\r\n    var ERDPreferences = {\r\n        "erd.entity": {\r\n            text: "Entity",\r\n            type: "Section"\r\n        },\r\n        "erd.entity.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Subsystem.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "erd.relationship": {\r\n            text: "Relationship",\r\n            type: "Section"\r\n        },\r\n        "erd.relationship.lineStyle": {\r\n            text: "Line Style",\r\n            description: "Default line style of entity relationships.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: Core.LS_RECTILINEAR, text: "Rectilinear" },\r\n                { value: Core.LS_OBLIQUE,     text: "Oblique" },\r\n                { value: Core.LS_ROUNDRECT,   text: "Rounded Rectilinear" },\r\n                { value: Core.LS_CURVE,       text: "Curve" }\r\n            ],\r\n            default: Core.LS_ROUNDRECT\r\n        }\r\n    };\r\n\r\n    AppInit.htmlReady(function () {\r\n        PreferenceManager.register("erd", "ERD", ERDPreferences);\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/erd/ERDPreferences.js'),eval("/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell, document */\r\n\r\ndefine('erd/main',['require','exports','module','utils/AppInit','engine/Engine','engine/Factory','diagrams/DiagramManager','ui/QuickEdit','utils/KeyEvent','erd/ERDQuickEdit','erd/ERDUtils','erd/ERD-meta','erd/ERD-rules','erd/ERD','erd/ERDCommands','erd/ERDCommandHandlers','erd/ERDMenus','erd/ERDToolbox','erd/ERDPreferences'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var AppInit        = require(\"utils/AppInit\"),\r\n        Engine         = require(\"engine/Engine\"),\r\n        Factory        = require(\"engine/Factory\"),\r\n        DiagramManager = require(\"diagrams/DiagramManager\"),\r\n        QuickEdit      = require(\"ui/QuickEdit\"),\r\n        KeyEvent       = require(\"utils/KeyEvent\"),\r\n        ERDQuickEdit   = require(\"erd/ERDQuickEdit\"),\r\n        ERDUtils       = require(\"erd/ERDUtils\");\r\n\r\n    require(\"erd/ERD-meta\");\r\n    require(\"erd/ERD-rules\");\r\n    require(\"erd/ERD\");\r\n    require(\"erd/ERDCommands\");\r\n    require(\"erd/ERDCommandHandlers\");\r\n    require(\"erd/ERDMenus\");\r\n    require(\"erd/ERDToolbox\");\r\n    require(\"erd/ERDPreferences\");\r\n\r\n    function _setColumnExpression(model, expression, feedback) {\r\n        try {\r\n            var ast = ERDUtils.parseColumnExpression(expression);\r\n            ERDUtils.setColumnExpression(model, ast);\r\n        } catch (e) {\r\n            feedback.success = false;\r\n        }\r\n    }\r\n\r\n    function setupQuickEdit() {\r\n        // QuickEdit Value Changed Event Handlers\r\n        $(QuickEdit).on('change', function (event, id, itemId, view, value, feedback) {\r\n            try {\r\n                switch (id) {\r\n                case ERDQuickEdit.QUICKEDIT_ENTITY:\r\n                    switch (itemId) {\r\n                    case ERDQuickEdit.ITEM_EDIT:\r\n                        Engine.setProperty(view.model, 'name', value);\r\n                        break;\r\n                    }\r\n                    break;\r\n                case ERDQuickEdit.QUICKEDIT_COLUMN:\r\n                    switch (itemId) {\r\n                    case ERDQuickEdit.ITEM_EDIT:\r\n                        _setColumnExpression(view.model, value, feedback);\r\n                        break;\r\n                    case ERDQuickEdit.ITEM_PRIMARY_KEY:\r\n                        Engine.setProperty(view.model, 'primaryKey', value);\r\n                        break;\r\n                    }\r\n                    break;\r\n                case ERDQuickEdit.QUICKEDIT_RELATIONSHIP:\r\n                    switch (itemId) {\r\n                    case ERDQuickEdit.ITEM_EDIT:\r\n                        if (view instanceof type.EdgeLabelView) { Engine.setProperty(view._parent.model, 'name', value); }\r\n                        break;\r\n                    case ERDQuickEdit.ITEM_IDENTIFYING:\r\n                        if (view instanceof type.EdgeLabelView) { Engine.setProperty(view._parent.model, 'identifying', value); }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case ERDQuickEdit.QUICKEDIT_RELATIONSHIP_TAIL:\r\n                    switch (itemId) {\r\n                    case ERDQuickEdit.ITEM_EDIT:\r\n                        if (view instanceof type.EdgeLabelView) { Engine.setProperty(view._parent.model.end1, 'name', value); }\r\n                        break;\r\n                    case ERDQuickEdit.ITEM_CARDINALITY:\r\n                        if (view instanceof type.EdgeLabelView) { Engine.setProperty(view._parent.model.end1, 'cardinality', value); }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case ERDQuickEdit.QUICKEDIT_RELATIONSHIP_HEAD:\r\n                    switch (itemId) {\r\n                    case ERDQuickEdit.ITEM_EDIT:\r\n                        if (view instanceof type.EdgeLabelView) { Engine.setProperty(view._parent.model.end2, 'name', value); }\r\n                        break;\r\n                    case ERDQuickEdit.ITEM_CARDINALITY:\r\n                        if (view instanceof type.EdgeLabelView) { Engine.setProperty(view._parent.model.end2, 'cardinality', value); }\r\n                        break;\r\n                    }\r\n                    break;\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        // QuickEdit Button Click Event Handlers\r\n        $(QuickEdit).on('click', function (event, id, itemId, view) {\r\n            var diagram      = DiagramManager.getEditor().diagram,\r\n                diagramOwner = diagram._parent,\r\n                parent,\r\n                nodes, nodeView, nodeView1, nodeView2, edgeView, options1, options2, _x, _y;\r\n            try {\r\n                switch (id) {\r\n                case ERDQuickEdit.QUICKEDIT_ENTITY:\r\n                    switch (itemId) {\r\n                    case ERDQuickEdit.ITEM_ADD_COLUMN:\r\n                        QuickEdit.addInQuickEdit(view.model, 'columns', view, 'columnCompartment', type.ERDColumn, 'Column');\r\n                        break;\r\n                    case ERDQuickEdit.ITEM_ADD_ONE_TO_ONE:\r\n                        nodes = QuickEdit.getBothNodes(view, type.ERDRelationshipView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView(\"ERDEntity\", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView(\"ERDRelationship\", nodeView.model, diagram, options2);\r\n                        break;\r\n                    case ERDQuickEdit.ITEM_ADD_ONE_TO_MANY:\r\n                        nodes = QuickEdit.getBothNodes(view, type.ERDRelationshipView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView(\"ERDEntity\", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        options2.modelInitializer = function (elem) {\r\n                            elem.end2.cardinality = \"0..*\";\r\n                        };\r\n                        edgeView = Factory.createModelAndView(\"ERDRelationship\", nodeView.model, diagram, options2);\r\n                        break;\r\n                    case ERDQuickEdit.ITEM_ADD_MANY_TO_MANY:\r\n                        nodes = QuickEdit.getBothNodes(view, type.ERDRelationshipView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getRightPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView(\"ERDEntity\", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        options2.modelInitializer = function (elem) {\r\n                            elem.end1.cardinality = \"0..*\";\r\n                            elem.end2.cardinality = \"0..*\";\r\n                        };\r\n                        edgeView = Factory.createModelAndView(\"ERDRelationship\", nodeView.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n                case ERDQuickEdit.QUICKEDIT_COLUMN:\r\n                    switch (itemId) {\r\n                    case ERDQuickEdit.ITEM_ADD:\r\n                        QuickEdit.addInQuickEdit(view.model._parent, 'columns', view._parent._parent, 'columnCompartment', type.ERDColumn, 'Column');\r\n                        break;\r\n                    case ERDQuickEdit.ITEM_DELETE:\r\n                        QuickEdit.deleteInQuickEdit(view);\r\n                        break;\r\n                    case ERDQuickEdit.ITEM_MOVEUP:\r\n                        QuickEdit.moveUpInQuickEdit(view.model._parent, 'columns', view);\r\n                        break;\r\n                    case ERDQuickEdit.ITEM_MOVEDOWN:\r\n                        QuickEdit.moveDownInQuickEdit(view.model._parent, 'columns', view);\r\n                        break;\r\n                    }\r\n                    break;\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        // QuickEdit Keydown Event Handlers\r\n        $(QuickEdit).on('keydown', function (event, id, itemId, view, keyEvent) {\r\n            var v;\r\n            try {\r\n                switch (id) {\r\n                case ERDQuickEdit.QUICKEDIT_ENTITY:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (view.columnCompartment && view.columnCompartment.subViews.length > 0) {\r\n                            v = view.columnCompartment.subViews[0];\r\n                            _.defer(function () {\r\n                                QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                            });\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(view.model, 'columns', view, 'columnCompartment', type.ERDColumn, 'Column');\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                case ERDQuickEdit.QUICKEDIT_COLUMN:\r\n                    switch (keyEvent.which) {\r\n                    case KeyEvent.DOM_VK_UP:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveUpInQuickEdit(view.model._parent, 'columns', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === 0) {\r\n                                v = view._parent._parent;\r\n                                _.defer(function () {\r\n                                    QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                });\r\n                            } else {\r\n                                QuickEdit.openUpInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_DOWN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.moveDownInQuickEdit(view.model._parent, 'columns', view);\r\n                        } else {\r\n                            if (_.indexOf(view._parent.subViews, view) === (view._parent.subViews.length - 1)) {\r\n                                v = view._parent._parent;\r\n                                if (v.suppressOperations !== true && v.operationCompartment && v.operationCompartment.subViews.length > 0) {\r\n                                    v = v.operationCompartment.subViews[0];\r\n                                    _.defer(function () {\r\n                                        QuickEdit.open(DiagramManager.getEditor(), v, v.left, v.top);\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                QuickEdit.openDownInQuickEdit(view);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_RETURN:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.addInQuickEdit(view.model._parent, 'columns', view._parent._parent, 'columnCompartment', type.ERDColumn, 'Column');\r\n                        }\r\n                        break;\r\n                    case KeyEvent.DOM_VK_BACK_SPACE:\r\n                    case KeyEvent.DOM_VK_DELETE:\r\n                        if (keyEvent.ctrlKey || keyEvent.metaKey) {\r\n                            QuickEdit.deleteInQuickEdit(view);\r\n                        }\r\n                        break;\r\n                    }\r\n                    break;\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupQuickEdit();\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/erd/main.js"),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell, type */\r\n\r\ndefine('flowchart/FlowchartQuickEdit',['require','exports','module','ui/QuickEdit','core/Graphics','core/Core'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var QuickEdit  = require(\"ui/QuickEdit\"),\r\n        Graphics   = require(\"core/Graphics\"),\r\n        Core       = require(\"core/Core\");\r\n\r\n    /**\r\n     * @const\r\n     * QuickEdit IDs\r\n     */\r\n    var QUICKEDIT_NODE = 'fc-node',\r\n        QUICKEDIT_EDGE = 'fc-edge';\r\n\r\n    /**\r\n     * @const\r\n     * QuickEdit Item IDs\r\n     */\r\n    var ITEM_EDIT                  = 'edit',\r\n        ITEM_ADD_NOTE              = 'add-note',\r\n        ITEM_ADD_OUTGOING_PROCESS  = 'add-outgoing-process',\r\n        ITEM_ADD_INCOMING_PROCESS  = 'add-incoming-process',\r\n        ITEM_ADD_OUTGOING_DECISION = 'add-outgoing-decision',\r\n        ITEM_ADD_INCOMING_DECISION = 'add-incoming-decision';\r\n\r\n\r\n    /* Quick Edit Buttons */\r\n    var QE_ADD_NOTE              = { type: 'button', id: ITEM_ADD_NOTE,              icon: 'quick-edit-icon-add-note',              hint: 'Add Note' },\r\n        QE_ADD_OUTGOING_PROCESS  = { type: 'button', id: ITEM_ADD_OUTGOING_PROCESS,  icon: 'quick-edit-icon-add-outgoing-process',  hint: 'Add Outgoing Process' },\r\n        QE_ADD_INCOMING_PROCESS  = { type: 'button', id: ITEM_ADD_INCOMING_PROCESS,  icon: 'quick-edit-icon-add-incoming-process',  hint: 'Add Incoming Process' },\r\n        QE_ADD_OUTGOING_DECISION = { type: 'button', id: ITEM_ADD_OUTGOING_DECISION, icon: 'quick-edit-icon-add-outgoing-decision', hint: 'Add Outgoing Decision' },\r\n        QE_ADD_INCOMING_DECISION = { type: 'button', id: ITEM_ADD_INCOMING_DECISION, icon: 'quick-edit-icon-add-incoming-decision', hint: 'Add Incoming Decision' };\r\n\r\n    \r\n    /* Quick Edit Inputs */\r\n    var QE_EDIT_GENERAL = { type: 'input', id: ITEM_EDIT, hint: \"name\" };\r\n\r\n\r\n    // QuickEdit for Nodes\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.FCGeneralNodeView);\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var label = view.nameLabel,\r\n                rect  = new Graphics.Rect(view.left, label.top, view.getRight(), label.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, view, {\r\n                id: QUICKEDIT_NODE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_ADD_NOTE ],\r\n                rightSection: [ QE_ADD_OUTGOING_PROCESS, QE_ADD_INCOMING_PROCESS ],\r\n                rightSection2: [ QE_ADD_OUTGOING_DECISION, QE_ADD_INCOMING_DECISION ],\r\n            });\r\n        },\r\n        init: function (view) {\r\n            QuickEdit.setInputValue(ITEM_EDIT, view.model.name);\r\n        }\r\n    });\r\n\r\n    // QuickEdit for Edges\r\n    QuickEdit.register({\r\n        when: function (view) {\r\n            return (view instanceof type.FCGeneralEdgeView) ||\r\n                   ((view instanceof Core.EdgeLabelView) && (view._parent instanceof type.FCGeneralEdgeView));\r\n        },\r\n        popup: function (editor, position, view) {\r\n            var endView = view.nameLabel;\r\n            if (view instanceof Core.EdgeLabelView) { endView = view._parent.nameLabel; }\r\n            var rect  = new Graphics.Rect(endView.left, endView.top, endView.left+70, endView.getBottom());\r\n            rect.add(position);\r\n            QuickEdit.render(editor, rect, endView, {\r\n                id: QUICKEDIT_EDGE,\r\n                main: QE_EDIT_GENERAL,\r\n                leftSection: [ QE_ADD_NOTE ]\r\n            });\r\n        },\r\n        init: function (view) {\r\n            var model = view.model;\r\n            if (view instanceof Core.EdgeLabelView) { model = view._parent.model; }\r\n            QuickEdit.setInputValue(ITEM_EDIT, model.name);\r\n        }\r\n    });\r\n\r\n\r\n    // Define public API\r\n    exports.QUICKEDIT_NODE = QUICKEDIT_NODE;\r\n    exports.QUICKEDIT_EDGE = QUICKEDIT_EDGE;\r\n    \r\n    exports.ITEM_EDIT                  = ITEM_EDIT;\r\n    exports.ITEM_ADD_NOTE              = ITEM_ADD_NOTE;\r\n    exports.ITEM_ADD_OUTGOING_PROCESS  = ITEM_ADD_OUTGOING_PROCESS;\r\n    exports.ITEM_ADD_INCOMING_PROCESS  = ITEM_ADD_INCOMING_PROCESS;\r\n    exports.ITEM_ADD_OUTGOING_DECISION = ITEM_ADD_OUTGOING_DECISION;\r\n    exports.ITEM_ADD_INCOMING_DECISION = ITEM_ADD_INCOMING_DECISION;\r\n\r\n});\r\n\n//# sourceURL=/flowchart/FlowchartQuickEdit.js"),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, browser: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, app*/\r\n\r\ndefine(\'flowchart/Flowchart-meta\',[\'require\',\'exports\',\'module\',\'core/MetaModelManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var MetaModelManager  = require("core/MetaModelManager");\r\n\r\n    var metaModel = {\r\n        "FCModelElement": {\r\n            "kind": "class",\r\n            "super": "ExtensibleModel"\r\n        },\r\n        "FCFlowchart": {\r\n            "kind": "class",\r\n            "super": "FCModelElement"\r\n        },\r\n        "FCFlowchartDiagram": {\r\n            "kind": "class",\r\n            "super": "Diagram"\r\n        },\r\n        "FCProcess": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCProcessView"\r\n        },\r\n        "FCTerminator": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCTerminatorView"\r\n        },\r\n        "FCDecision": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCDecisionView"\r\n        },\r\n        "FCDelay": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCDelayView"\r\n        },\r\n        "FCPredefinedProcess": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCPredefinedProcessView"\r\n        },\r\n        "FCAlternateProcess": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCAlternateProcessView"\r\n        },\r\n        "FCData": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCDataView"\r\n        },\r\n        "FCDocument": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCDocumentView"\r\n        },\r\n        "FCMultiDocument": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCMultiDocumentView"\r\n        },\r\n        "FCPreparation": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCPreparationView"\r\n        },\r\n        "FCDisplay": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCDisplayView"\r\n        },\r\n        "FCManualInput": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCManualInputView"\r\n        },\r\n        "FCManualOperation": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCManualOperationView"\r\n        },\r\n        "FCCard": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCCardView"\r\n        },\r\n        "FCPunchedTape": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCPunchedTapeView"\r\n        },\r\n        "FCConnector": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCConnectorView"\r\n        },\r\n        "FCOffPageConnector": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCOffPageConnectorView"\r\n        },\r\n        "FCOr": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCOrView"\r\n        },\r\n        "FCSummingJunction": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCSummingJunctionView"\r\n        },\r\n        "FCCollate": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCCollateView"\r\n        },\r\n        "FCSort": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCSortView"\r\n        },\r\n        "FCMerge": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCMergeView"\r\n        },\r\n        "FCExtract": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCExtractView"\r\n        },\r\n        "FCStoredData": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCStoredDataView"\r\n        },\r\n        "FCDatabase": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCDatabaseView"\r\n        },\r\n        "FCDirectAccessStorage": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCDirectAccessStorageView"\r\n        },\r\n        "FCInternalStorage": {\r\n            "kind": "class",\r\n            "super": "FCModelElement",\r\n            "view":  "FCInternalStorageView"\r\n        },\r\n        "FCFlow": {\r\n            "kind": "class",\r\n            "super": "DirectedRelationship",\r\n            "view": "FCFlowView"\r\n        },\r\n        "FCGeneralNodeView": {\r\n            "kind": "class",\r\n            "super": "NodeView",\r\n            "attributes": [\r\n                { "name": "nameLabel", "kind": "ref",  "type": "LabelView", "embedded": "subViews" },\r\n                { "name": "wordWrap",  "kind": "prim", "type": "Boolean", "default": true }\r\n            ]\r\n        },\r\n        "FCGeneralEdgeView": {\r\n            "kind": "class",\r\n            "super": "EdgeView",\r\n            "attributes": [\r\n                { "name": "nameLabel", "kind": "ref",  "type": "EdgeLabelView", "embedded": "subViews" }\r\n            ]\r\n        },\r\n        "FCProcessView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCTerminatorView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCDecisionView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCDelayView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCPredefinedProcessView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCAlternateProcessView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCDataView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCDocumentView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCMultiDocumentView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCPreparationView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCDisplayView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCManualInputView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCManualOperationView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCCardView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCPunchedTapeView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCConnectorView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCOffPageConnectorView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCOrView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCSummingJunctionView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCCollateView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCSortView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCMergeView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCExtractView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCStoredDataView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCDatabaseView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCDirectAccessStorageView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCInternalStorageView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralNodeView"\r\n        },\r\n        "FCFlowView": {\r\n            "kind": "class",\r\n            "super": "FCGeneralEdgeView"\r\n        }\r\n    };\r\n\r\n    // Register Meta-model\r\n    MetaModelManager.register(metaModel);\r\n\r\n});\r\n\n//# sourceURL=/flowchart/Flowchart-meta.js'),eval('/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell, document */\r\n\r\ndefine(\'flowchart/Flowchart\',[\'require\',\'exports\',\'module\',\'core/Graphics\',\'core/Graphics\',\'core/Graphics\',\'core/Core\',\'core/MetaModelManager\',\'core/Repository\',\'core/PreferenceManager\',\'flowchart/Flowchart-meta\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Graphics          = require("core/Graphics"),\r\n        Point             = require("core/Graphics").Point,\r\n        Rect              = require("core/Graphics").Rect,\r\n        Core              = require("core/Core"),\r\n        MetaModelManager  = require("core/MetaModelManager"),\r\n        Repository        = require("core/Repository"),\r\n        PreferenceManager = require("core/PreferenceManager");\r\n\r\n    require("flowchart/Flowchart-meta");\r\n\r\n    var LEFT_PADDING   = 10,\r\n        RIGHT_PADDING  = 10,\r\n        TOP_PADDING    = 10,\r\n        BOTTOM_PADDING = 10;\r\n\r\n    var DECISION_MINWIDTH  = 50,\r\n        DECISION_MINHEIGHT = 30,\r\n        MERGE_MINWIDTH  = 30,\r\n        MERGE_MINHEIGHT = 25,\r\n        EXTRACT_MINWIDTH  = 30,\r\n        EXTRACT_MINHEIGHT = 25;\r\n\r\n    /**\r\n     * FCModelElement\r\n     * @constructor\r\n     */\r\n    function FCModelElement() {\r\n        type.ExtensibleModel.apply(this, arguments);\r\n    }\r\n    // inherits from ExtensibleModel\r\n    FCModelElement.prototype = Object.create(type.ExtensibleModel.prototype);\r\n    FCModelElement.prototype.constructor = FCModelElement;\r\n\r\n    FCModelElement.prototype.getDisplayClassName = function () {\r\n        var name = this.getClassName();\r\n        return name.substring(2, name.length);\r\n    };\r\n\r\n    /**\r\n     * FCFlowchart\r\n     * @constructor\r\n     */\r\n    function FCFlowchart() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCFlowchart.prototype = Object.create(FCModelElement.prototype);\r\n    FCFlowchart.prototype.constructor = FCFlowchart;\r\n\r\n    /**\r\n     * FCFlowchartDiagram\r\n     * @constructor\r\n     */\r\n    function FCFlowchartDiagram() {\r\n        type.Diagram.apply(this, arguments);\r\n    }\r\n    // inherits from Diagram\r\n    FCFlowchartDiagram.prototype = Object.create(type.Diagram.prototype);\r\n    FCFlowchartDiagram.prototype.constructor = FCFlowchartDiagram;\r\n\r\n    FCFlowchartDiagram.prototype.getDisplayClassName = function () {\r\n        return "FlowchartDiagram";\r\n    };\r\n\r\n\r\n    /**\r\n     * FCProcess\r\n     * @constructor\r\n     */\r\n    function FCProcess() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCProcess.prototype = Object.create(FCModelElement.prototype);\r\n    FCProcess.prototype.constructor = FCProcess;\r\n\r\n\r\n    /**\r\n     * FCTerminator\r\n     * @constructor\r\n     */\r\n    function FCTerminator() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCTerminator.prototype = Object.create(FCModelElement.prototype);\r\n    FCTerminator.prototype.constructor = FCTerminator;\r\n\r\n\r\n    /**\r\n     * FCDecision\r\n     * @constructor\r\n     */\r\n    function FCDecision() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCDecision.prototype = Object.create(FCModelElement.prototype);\r\n    FCDecision.prototype.constructor = FCDecision;\r\n\r\n\r\n    /**\r\n     * FCDelay\r\n     * @constructor\r\n     */\r\n    function FCDelay() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCDelay.prototype = Object.create(FCModelElement.prototype);\r\n    FCDelay.prototype.constructor = FCDelay;\r\n\r\n\r\n    /**\r\n     * FCPredefinedProcess\r\n     * @constructor\r\n     */\r\n    function FCPredefinedProcess() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCPredefinedProcess.prototype = Object.create(FCModelElement.prototype);\r\n    FCPredefinedProcess.prototype.constructor = FCPredefinedProcess;\r\n\r\n\r\n    /**\r\n     * FCAlternateProcess\r\n     * @constructor\r\n     */\r\n    function FCAlternateProcess() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCAlternateProcess.prototype = Object.create(FCModelElement.prototype);\r\n    FCAlternateProcess.prototype.constructor = FCAlternateProcess;\r\n\r\n\r\n    /**\r\n     * FCData\r\n     * @constructor\r\n     */\r\n    function FCData() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCData.prototype = Object.create(FCModelElement.prototype);\r\n    FCData.prototype.constructor = FCData;\r\n\r\n\r\n    /**\r\n     * FCDocument\r\n     * @constructor\r\n     */\r\n    function FCDocument() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCDocument.prototype = Object.create(FCModelElement.prototype);\r\n    FCDocument.prototype.constructor = FCDocument;\r\n\r\n\r\n    /**\r\n     * FCMultiDocument\r\n     * @constructor\r\n     */\r\n    function FCMultiDocument() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCMultiDocument.prototype = Object.create(FCModelElement.prototype);\r\n    FCMultiDocument.prototype.constructor = FCMultiDocument;\r\n\r\n\r\n    /**\r\n     * FCPreparation\r\n     * @constructor\r\n     */\r\n    function FCPreparation() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCPreparation.prototype = Object.create(FCModelElement.prototype);\r\n    FCPreparation.prototype.constructor = FCPreparation;\r\n\r\n\r\n    /**\r\n     * FCDisplay\r\n     * @constructor\r\n     */\r\n    function FCDisplay() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCDisplay.prototype = Object.create(FCModelElement.prototype);\r\n    FCDisplay.prototype.constructor = FCDisplay;\r\n\r\n\r\n    /**\r\n     * FCManualInput\r\n     * @constructor\r\n     */\r\n    function FCManualInput() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCManualInput.prototype = Object.create(FCModelElement.prototype);\r\n    FCManualInput.prototype.constructor = FCManualInput;\r\n\r\n\r\n    /**\r\n     * FCManualOperation\r\n     * @constructor\r\n     */\r\n    function FCManualOperation() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCManualOperation.prototype = Object.create(FCModelElement.prototype);\r\n    FCManualOperation.prototype.constructor = FCManualOperation;\r\n\r\n\r\n    /**\r\n     * FCCard\r\n     * @constructor\r\n     */\r\n    function FCCard() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCCard.prototype = Object.create(FCModelElement.prototype);\r\n    FCCard.prototype.constructor = FCCard;\r\n\r\n\r\n    /**\r\n     * FCPunchedTape\r\n     * @constructor\r\n     */\r\n    function FCPunchedTape() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCPunchedTape.prototype = Object.create(FCModelElement.prototype);\r\n    FCPunchedTape.prototype.constructor = FCPunchedTape;\r\n\r\n\r\n    /**\r\n     * FCConnector\r\n     * @constructor\r\n     */\r\n    function FCConnector() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCConnector.prototype = Object.create(FCModelElement.prototype);\r\n    FCConnector.prototype.constructor = FCConnector;\r\n\r\n\r\n    /**\r\n     * FCOffPageConnector\r\n     * @constructor\r\n     */\r\n    function FCOffPageConnector() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCOffPageConnector.prototype = Object.create(FCModelElement.prototype);\r\n    FCOffPageConnector.prototype.constructor = FCOffPageConnector;\r\n\r\n\r\n    /**\r\n     * FCOr\r\n     * @constructor\r\n     */\r\n    function FCOr() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCOr.prototype = Object.create(FCModelElement.prototype);\r\n    FCOr.prototype.constructor = FCOr;\r\n\r\n\r\n    /**\r\n     * FCSummingJunction\r\n     * @constructor\r\n     */\r\n    function FCSummingJunction() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCSummingJunction.prototype = Object.create(FCModelElement.prototype);\r\n    FCSummingJunction.prototype.constructor = FCSummingJunction;\r\n\r\n\r\n    /**\r\n     * FCCollate\r\n     * @constructor\r\n     */\r\n    function FCCollate() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCCollate.prototype = Object.create(FCModelElement.prototype);\r\n    FCCollate.prototype.constructor = FCCollate;\r\n\r\n\r\n    /**\r\n     * FCSort\r\n     * @constructor\r\n     */\r\n    function FCSort() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCSort.prototype = Object.create(FCModelElement.prototype);\r\n    FCSort.prototype.constructor = FCSort;\r\n\r\n\r\n    /**\r\n     * FCMerge\r\n     * @constructor\r\n     */\r\n    function FCMerge() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCMerge.prototype = Object.create(FCModelElement.prototype);\r\n    FCMerge.prototype.constructor = FCMerge;\r\n\r\n\r\n    /**\r\n     * FCExtract\r\n     * @constructor\r\n     */\r\n    function FCExtract() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCExtract.prototype = Object.create(FCModelElement.prototype);\r\n    FCExtract.prototype.constructor = FCExtract;\r\n\r\n\r\n    /**\r\n     * FCStoredData\r\n     * @constructor\r\n     */\r\n    function FCStoredData() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCStoredData.prototype = Object.create(FCModelElement.prototype);\r\n    FCStoredData.prototype.constructor = FCStoredData;\r\n\r\n\r\n    /**\r\n     * FCDatabase\r\n     * @constructor\r\n     */\r\n    function FCDatabase() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCDatabase.prototype = Object.create(FCModelElement.prototype);\r\n    FCDatabase.prototype.constructor = FCDatabase;\r\n\r\n\r\n    /**\r\n     * FCDirectAccessStorage\r\n     * @constructor\r\n     */\r\n    function FCDirectAccessStorage() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCDirectAccessStorage.prototype = Object.create(FCModelElement.prototype);\r\n    FCDirectAccessStorage.prototype.constructor = FCDirectAccessStorage;\r\n\r\n\r\n    /**\r\n     * FCInternalStorage\r\n     * @constructor\r\n     */\r\n    function FCInternalStorage() {\r\n        FCModelElement.apply(this, arguments);\r\n    }\r\n    // inherits from FCModelElement\r\n    FCInternalStorage.prototype = Object.create(FCModelElement.prototype);\r\n    FCInternalStorage.prototype.constructor = FCInternalStorage;\r\n\r\n\r\n    /**\r\n     * FCFlow\r\n     * @constructor\r\n     */\r\n    function FCFlow() {\r\n        type.DirectedRelationship.apply(this, arguments);\r\n    }\r\n    // inherits from DirectedRelationship\r\n    FCFlow.prototype = Object.create(type.DirectedRelationship.prototype);\r\n    FCFlow.prototype.constructor = FCFlow;\r\n\r\n\r\n    /* -------------------------- View Elements ---------------------------- */\r\n\r\n    /**\r\n     * FCGeneralNodeView\r\n     * @constructor\r\n     */\r\n    function FCGeneralNodeView() {\r\n        type.NodeView.apply(this, arguments);\r\n\r\n        /** @member {boolean} */\r\n        this.wordWrap = true;\r\n\r\n        /** @member {LabelView} */\r\n        this.nameLabel = new type.LabelView();\r\n        this.nameLabel.horizontalAlignment = Graphics.AL_CENTER;\r\n        this.nameLabel.parentStyle = true;\r\n        this.addSubView(this.nameLabel);\r\n    }\r\n    // inherits from NodeView\r\n    FCGeneralNodeView.prototype = Object.create(type.NodeView.prototype);\r\n    FCGeneralNodeView.prototype.constructor = FCGeneralNodeView;\r\n\r\n    FCGeneralNodeView.prototype.update = function (canvas) {\r\n        type.NodeView.prototype.update.call(this, canvas);\r\n        if (this.model) {\r\n            this.nameLabel.text = this.model.name;\r\n        }\r\n        this.nameLabel.wordWrap = this.wordWrap;\r\n    };\r\n\r\n    FCGeneralNodeView.prototype.sizeObject = function (canvas) {\r\n        type.NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = this.nameLabel.minWidth + LEFT_PADDING + RIGHT_PADDING;\r\n        this.minHeight = this.nameLabel.minHeight + TOP_PADDING + BOTTOM_PADDING;\r\n    };\r\n\r\n    FCGeneralNodeView.prototype.arrangeObject = function (canvas) {\r\n        type.NodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.nameLabel.left = this.left + LEFT_PADDING;\r\n        this.nameLabel.top = this.top + TOP_PADDING;\r\n        this.nameLabel.width = this.width - LEFT_PADDING - RIGHT_PADDING;\r\n        this.nameLabel.height = this.nameLabel.minHeight;\r\n        // this.nameLabel.height = this.height - TOP_PADDING - BOTTOM_PADDING;\r\n    };\r\n\r\n    FCGeneralNodeView.prototype.drawObject = function (canvas) {\r\n        type.NodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n    FCGeneralNodeView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * FCGeneralEdgeView\r\n     * @constructor\r\n     */\r\n    function FCGeneralEdgeView() {\r\n        type.EdgeView.apply(this, arguments);\r\n        this.tailEndStyle = Core.ES_FLAT;\r\n        this.headEndStyle = Core.ES_SOLID_ARROW;\r\n        this.lineMode = Core.LM_SOLID;\r\n\r\n        /** @member {EdgeLabelView} */\r\n        this.nameLabel = new type.EdgeLabelView();\r\n        this.nameLabel.hostEdge = this;\r\n        this.nameLabel.edgePosition = Core.EP_MIDDLE;\r\n        this.nameLabel.distance = 15;\r\n        this.nameLabel.alpha = Math.PI / 2;\r\n        this.addSubView(this.nameLabel);\r\n    }\r\n    // inherits from EdgeView\r\n    FCGeneralEdgeView.prototype = Object.create(type.EdgeView.prototype);\r\n    FCGeneralEdgeView.prototype.constructor = FCGeneralEdgeView;\r\n\r\n    FCGeneralEdgeView.prototype.update = function (canvas) {\r\n        if (this.model) {\r\n            // nameLabel\r\n            this.nameLabel.visible = (this.model.name.length > 0);\r\n            if (this.model.name) {\r\n                this.nameLabel.text = this.model.name;\r\n            }\r\n            // Enforce nameLabel.mode refers to this.model by using Bypass Command.\r\n            if (this.nameLabel.model !== this.model) {\r\n                Repository.bypassFieldAssign(this.nameLabel, \'model\', this.model);\r\n            }\r\n        }\r\n        type.EdgeView.prototype.update.call(this, canvas);\r\n    };\r\n\r\n    FCGeneralEdgeView.prototype.canConnectTo = function (view, isTail) {\r\n        return (view.model instanceof FCModelElement);\r\n    };\r\n\r\n    FCGeneralEdgeView.prototype.canDelete = function () {\r\n        return false;\r\n    };\r\n\r\n\r\n    /**\r\n     * FCProcessView\r\n     * @constructor\r\n     */\r\n    function FCProcessView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.process.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCProcessView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCProcessView.prototype.constructor = FCProcessView;\r\n\r\n    FCProcessView.prototype.drawObject = function (canvas) {\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n    /**\r\n     * FCTerminatorView\r\n     * @constructor\r\n     */\r\n    function FCTerminatorView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.terminator.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCTerminatorView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCTerminatorView.prototype.constructor = FCTerminatorView;\r\n\r\n    FCTerminatorView.prototype.drawObject = function (canvas) {\r\n        var round = Math.min(this.height, this.width) / 2;\r\n        canvas.fillRoundRect(this.left, this.top, this.getRight(), this.getBottom(), round);\r\n        canvas.roundRect(this.left, this.top, this.getRight(), this.getBottom(), round);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FDecisionView\r\n     * @constructor\r\n     */\r\n    function FCDecisionView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.decision.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCDecisionView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCDecisionView.prototype.constructor = FCDecisionView;\r\n\r\n    FCDecisionView.prototype.sizeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = Math.max(this.nameLabel.minWidth * 2, DECISION_MINWIDTH);\r\n        this.minHeight = Math.max(this.nameLabel.minHeight * 2, DECISION_MINHEIGHT);\r\n    };\r\n\r\n    FCDecisionView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.nameLabel.left = this.left + (this.width / 4);\r\n        this.nameLabel.top = this.top + (this.height / 4);\r\n        this.nameLabel.width = (this.width / 2);\r\n        this.nameLabel.height = (this.height / 2);\r\n    };\r\n\r\n    FCDecisionView.prototype.drawObject = function (canvas) {\r\n        var x = (this.left + this.getRight()) / 2,\r\n            y = (this.top + this.getBottom()) / 2;\r\n        canvas.fillPolygon([new Point(this.left, y), new Point(x, this.top), new Point(this.getRight(), y), new Point(x, this.getBottom()), new Point(this.left, y)]);\r\n        canvas.polygon([new Point(this.left, y), new Point(x, this.top), new Point(this.getRight(), y), new Point(x, this.getBottom()), new Point(this.left, y)]);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCDelayView\r\n     * @constructor\r\n     */\r\n    function FCDelayView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.delay.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCDelayView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCDelayView.prototype.constructor = FCDelayView;\r\n\r\n    FCDelayView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.nameLabel.width = (this.width * 0.75);\r\n    };\r\n\r\n    FCDelayView.prototype.drawObject = function (canvas) {\r\n        var r = this.height / 2;\r\n        canvas.fillRect(this.left, this.top, this.getRight() - r, this.getBottom());\r\n        canvas.fillArc(this.getRight() - r, this.top + r, r, -(Math.PI / 2), Math.PI / 2);\r\n        canvas.line(this.left, this.top, this.left, this.getBottom());\r\n        canvas.line(this.left, this.top, this.getRight() - r, this.top);\r\n        canvas.line(this.left, this.top + this.height, this.getRight() - r, this.top + this.height);\r\n        canvas.arc(this.getRight() - r, this.top + r, r, -(Math.PI / 2), Math.PI / 2);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCPredefinedProcessView\r\n     * @constructor\r\n     */\r\n    function FCPredefinedProcessView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.predefined-process.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCPredefinedProcessView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCPredefinedProcessView.prototype.constructor = FCPredefinedProcessView;\r\n\r\n    FCPredefinedProcessView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.nameLabel.left = this.left + LEFT_PADDING + 5;\r\n        this.nameLabel.width = this.width - LEFT_PADDING - RIGHT_PADDING - 5;\r\n    };\r\n\r\n    FCPredefinedProcessView.prototype.drawObject = function (canvas) {\r\n        var gap = 5;\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.line(this.left + gap, this.top, this.left + gap, this.getBottom());\r\n        canvas.line(this.getRight() - gap, this.top, this.getRight() - gap, this.getBottom());\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCAlternateProcessView\r\n     * @constructor\r\n     */\r\n    function FCAlternateProcessView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.alternate-process.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCAlternateProcessView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCAlternateProcessView.prototype.constructor = FCAlternateProcessView;\r\n\r\n    FCAlternateProcessView.prototype.drawObject = function (canvas) {\r\n        var round = 10;\r\n        canvas.fillRoundRect(this.left, this.top, this.getRight(), this.getBottom(), round);\r\n        canvas.roundRect(this.left, this.top, this.getRight(), this.getBottom(), round);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCDataView\r\n     * @constructor\r\n     */\r\n    function FCDataView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.data.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCDataView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCDataView.prototype.constructor = FCDataView;\r\n\r\n    FCDataView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = Math.floor(this.width / 6);\r\n        this.nameLabel.left = this.left + LEFT_PADDING + g;\r\n        this.nameLabel.width = this.width - LEFT_PADDING - RIGHT_PADDING - (g * 2);\r\n    };\r\n\r\n    FCDataView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            g = Math.floor(this.width / 6),\r\n            pts = [\r\n                new Point(r.x1 + g, r.y1),\r\n                new Point(r.x2, r.y1),\r\n                new Point(r.x2 - g, r.y2),\r\n                new Point(r.x1, r.y2),\r\n                new Point(r.x1 + g, r.y1)\r\n            ];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCDocumentView\r\n     * @constructor\r\n     */\r\n    function FCDocumentView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.document.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCDocumentView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCDocumentView.prototype.constructor = FCDocumentView;\r\n\r\n    FCDocumentView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var h = Math.floor(this.height / 6);\r\n        this.nameLabel.height = this.height - TOP_PADDING - BOTTOM_PADDING - h;\r\n    };\r\n\r\n    FCDocumentView.prototype.drawDocument = function (canvas, rect) {\r\n        var h = Math.floor(rect.getHeight() / 6),\r\n            g = Math.floor(rect.getWidth() / 3);\r\n        canvas.fillPath([[\'M\', rect.x1, rect.y1],\r\n                         [\'L\', rect.x2, rect.y1],\r\n                         [\'L\', rect.x2, rect.y2],\r\n                         [\'C\', rect.x2 - g, rect.y2 - (h * 2), rect.x1 + g, rect.y2 + (h * 1.5), rect.x1, rect.y2 - h],\r\n                         [\'L\', rect.x1, rect.y1],\r\n                         [\'Z\']], true);\r\n    };\r\n\r\n    FCDocumentView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        this.drawDocument(canvas, r);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCMultiDocumentView\r\n     * @constructor\r\n     */\r\n    function FCMultiDocumentView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.multidocument.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCMultiDocumentView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCMultiDocumentView.prototype.constructor = FCMultiDocumentView;\r\n\r\n    FCMultiDocumentView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = 5,\r\n            h = Math.floor(this.height / 6);\r\n        this.nameLabel.top = this.top + TOP_PADDING + (g * 2);\r\n        this.nameLabel.left = this.left + LEFT_PADDING + (g * 2);\r\n        this.nameLabel.width = this.width - LEFT_PADDING - RIGHT_PADDING - (g * 2);\r\n        this.nameLabel.height = this.height - TOP_PADDING - BOTTOM_PADDING - h - (g * 2);\r\n    };\r\n\r\n    FCMultiDocumentView.prototype.drawObject = function (canvas) {\r\n        var g = 5,\r\n            r1 = new Rect(this.left, this.top, this.getRight() - (g * 2), this.getBottom() - (g * 2)),\r\n            r2 = new Rect(this.left + g, this.top + g, this.getRight() - g, this.getBottom() - g),\r\n            r3 = new Rect(this.left + (g * 2), this.top + (g * 2), this.getRight(), this.getBottom());\r\n        FCDocumentView.prototype.drawDocument(canvas, r1);\r\n        FCDocumentView.prototype.drawDocument(canvas, r2);\r\n        FCDocumentView.prototype.drawDocument(canvas, r3);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCPreparationView\r\n     * @constructor\r\n     */\r\n    function FCPreparationView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.preparation.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCPreparationView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCPreparationView.prototype.constructor = FCPreparationView;\r\n\r\n    FCPreparationView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = Math.floor(this.width / 6);\r\n        this.nameLabel.left = this.left + LEFT_PADDING + g;\r\n        this.nameLabel.width = this.width - LEFT_PADDING - RIGHT_PADDING - (g * 2);\r\n    };\r\n\r\n    FCPreparationView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            m = (r.y1 + r.y2) / 2,\r\n            g = Math.floor(this.width / 6),\r\n            pts = [\r\n                new Point(r.x1, m),\r\n                new Point(r.x1 + g, r.y1),\r\n                new Point(r.x2 - g, r.y1),\r\n                new Point(r.x2, m),\r\n                new Point(r.x2 - g, r.y2),\r\n                new Point(r.x1 + g, r.y2),\r\n                new Point(r.x1, m)\r\n            ];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCDisplayView\r\n     * @constructor\r\n     */\r\n    function FCDisplayView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.display.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCDisplayView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCDisplayView.prototype.constructor = FCDisplayView;\r\n\r\n    FCDisplayView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = Math.floor(this.width / 6);\r\n        this.nameLabel.left = this.left + LEFT_PADDING + g;\r\n        this.nameLabel.width = this.width - LEFT_PADDING - RIGHT_PADDING - (g * 2);\r\n    };\r\n\r\n    FCDisplayView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            m = (r.y1 + r.y2) / 2,\r\n            g = Math.floor(this.width / 6);\r\n        canvas.fillPath([[\'M\', r.x1, m],\r\n                         [\'L\', r.x1 + g, r.y1],\r\n                         [\'L\', r.x2 - g, r.y1],\r\n                         [\'Q\', r.x2, r.y1, r.x2, m],\r\n                         [\'Q\', r.x2, r.y2, r.x2 - g, r.y2],\r\n                         [\'L\', r.x1 + g, r.y2],\r\n                         [\'L\', r.x1, m],\r\n                         [\'Z\']], true);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCManualInputView\r\n     * @constructor\r\n     */\r\n    function FCManualInputView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.manual-input.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCManualInputView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCManualInputView.prototype.constructor = FCManualInputView;\r\n\r\n    FCManualInputView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = Math.floor(this.height / 6);\r\n        this.nameLabel.top = this.top + TOP_PADDING + g;\r\n        this.nameLabel.height = this.height - TOP_PADDING - BOTTOM_PADDING - g;\r\n    };\r\n\r\n    FCManualInputView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            g = Math.floor(this.height / 6),\r\n            pts = [\r\n                new Point(r.x1, r.y1 + g),\r\n                new Point(r.x2, r.y1),\r\n                new Point(r.x2, r.y2),\r\n                new Point(r.x1, r.y2),\r\n                new Point(r.x1, r.y1 + g)\r\n            ];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCManualOperationView\r\n     * @constructor\r\n     */\r\n    function FCManualOperationView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.manual-operation.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCManualOperationView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCManualOperationView.prototype.constructor = FCManualOperationView;\r\n\r\n    FCManualOperationView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = Math.floor(this.width / 6);\r\n        this.nameLabel.left = this.left + LEFT_PADDING + g;\r\n        this.nameLabel.width = this.width - LEFT_PADDING - RIGHT_PADDING - (g * 2);\r\n    };\r\n\r\n    FCManualOperationView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            g = Math.floor(this.width / 6),\r\n            pts = [\r\n                new Point(r.x1, r.y1),\r\n                new Point(r.x2, r.y1),\r\n                new Point(r.x2 - g, r.y2),\r\n                new Point(r.x1 + g, r.y2),\r\n                new Point(r.x1, r.y1)\r\n            ];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCCardView\r\n     * @constructor\r\n     */\r\n    function FCCardView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.card.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCCardView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCCardView.prototype.constructor = FCCardView;\r\n\r\n    FCCardView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            g = Math.floor(this.width / 8),\r\n            pts = [\r\n                new Point(r.x1 + g, r.y1),\r\n                new Point(r.x2, r.y1),\r\n                new Point(r.x2, r.y2),\r\n                new Point(r.x1, r.y2),\r\n                new Point(r.x1, r.y1 + g),\r\n                new Point(r.x1 + g, r.y1)\r\n            ];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCPunchedTapeView\r\n     * @constructor\r\n     */\r\n    function FCPunchedTapeView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.punched-tape.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCPunchedTapeView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCPunchedTapeView.prototype.constructor = FCPunchedTapeView;\r\n\r\n    FCPunchedTapeView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = Math.floor(this.height / 6);\r\n        this.nameLabel.top = this.top + TOP_PADDING + g;\r\n        this.nameLabel.height = this.height - TOP_PADDING - BOTTOM_PADDING - (g * 2);\r\n    };\r\n\r\n    FCPunchedTapeView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            h = Math.floor(r.getHeight() / 6),\r\n            g = Math.floor(r.getWidth() / 3);\r\n        canvas.fillPath([[\'M\', r.x1, r.y1],\r\n                         [\'C\', r.x1 + g, r.y1 + (h * 2), r.x2 - g, r.y1 - (h * 1.5), r.x2, r.y1 + h],\r\n                         [\'L\', r.x2, r.y2],\r\n                         [\'C\', r.x2 - g, r.y2 - (h * 2), r.x1 + g, r.y2 + (h * 1.5), r.x1, r.y2 - h],\r\n                         [\'L\', r.x1, r.y1],\r\n                         [\'Z\']], true);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCConnectorView\r\n     * @constructor\r\n     */\r\n    function FCConnectorView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.connector.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCConnectorView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCConnectorView.prototype.constructor = FCConnectorView;\r\n\r\n    FCConnectorView.prototype.sizeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = Math.max(30, this.nameLabel.minWidth);\r\n        this.minHeight = Math.max(30, this.nameLabel.minHeight);\r\n    };\r\n\r\n    FCConnectorView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.nameLabel.left = this.left + (this.width / 4);\r\n        this.nameLabel.top = this.top + (this.height / 4);\r\n        this.nameLabel.width = (this.width / 2);\r\n        this.nameLabel.height = (this.height / 2);\r\n    };\r\n\r\n    FCConnectorView.prototype.drawObject = function (canvas) {\r\n        canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCOffPageConnectorView\r\n     * @constructor\r\n     */\r\n    function FCOffPageConnectorView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.off-page-connector.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCOffPageConnectorView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCOffPageConnectorView.prototype.constructor = FCOffPageConnectorView;\r\n\r\n    FCOffPageConnectorView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = Math.floor(this.height / 4);\r\n        this.nameLabel.height = this.height - TOP_PADDING - BOTTOM_PADDING - g;\r\n    };\r\n\r\n    FCOffPageConnectorView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            g = Math.floor(this.height / 4),\r\n            pts = [\r\n                new Point(r.x1, r.y1),\r\n                new Point(r.x2, r.y1),\r\n                new Point(r.x2, r.y2 - g),\r\n                new Point((r.x1 + r.x2) / 2, r.y2),\r\n                new Point(r.x1, r.y2 - g),\r\n                new Point(r.x1, r.y1)\r\n            ];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCOrView\r\n     * @constructor\r\n     */\r\n    function FCOrView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.or.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCOrView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCOrView.prototype.constructor = FCOrView;\r\n\r\n    FCOrView.prototype.sizeObject = function (canvas) {\r\n        type.NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.nameLabel.visible = false;\r\n        this.minWidth = 30;\r\n        this.minHeight = 30;\r\n        if (this.height !== this.width) {\r\n            this.width  = Math.min(this.width, this.height);\r\n            this.height = Math.min(this.width, this.height);\r\n        }\r\n    };\r\n\r\n    FCOrView.prototype.drawObject = function (canvas) {\r\n        canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n        var p = Graphics.Coord.getCenter(new Rect(this.left, this.top, this.getRight(), this.getBottom()));\r\n        var d = Math.round(Math.sqrt(2) * this.width / 4);\r\n        canvas.line(p.x, this.top, p.x, this.getBottom());\r\n        canvas.line(this.left, p.y, this.getRight(), p.y);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCSummingJunctionView\r\n     * @constructor\r\n     */\r\n    function FCSummingJunctionView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.summing-junction.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCSummingJunctionView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCSummingJunctionView.prototype.constructor = FCSummingJunctionView;\r\n\r\n    FCSummingJunctionView.prototype.sizeObject = function (canvas) {\r\n        type.NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.nameLabel.visible = false;\r\n        this.minWidth = 30;\r\n        this.minHeight = 30;\r\n        if (this.height !== this.width) {\r\n            this.width  = Math.min(this.width, this.height);\r\n            this.height = Math.min(this.width, this.height);\r\n        }\r\n    };\r\n\r\n    FCSummingJunctionView.prototype.drawObject = function (canvas) {\r\n        canvas.fillEllipse(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.ellipse(this.left, this.top, this.getRight(), this.getBottom());\r\n        var p = Graphics.Coord.getCenter(new Rect(this.left, this.top, this.getRight(), this.getBottom()));\r\n        var d = Math.round(Math.sqrt(2) * this.width / 4);\r\n        canvas.line(p.x - d, p.y - d, p.x + d, p.y + d);\r\n        canvas.line(p.x + d, p.y - d, p.x - d, p.y + d);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCCollateView\r\n     * @constructor\r\n     */\r\n    function FCCollateView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.collate.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCCollateView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCCollateView.prototype.constructor = FCCollateView;\r\n\r\n    FCCollateView.prototype.sizeObject = function (canvas) {\r\n        type.NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.nameLabel.visible = false;\r\n        this.minWidth = 30;\r\n        this.minHeight = 30;\r\n    };\r\n\r\n    FCCollateView.prototype.drawObject = function (canvas) {\r\n        var r   = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            pts = [\r\n                new Point(r.x1, r.y1),\r\n                new Point(r.x2, r.y1),\r\n                new Point(r.x1, r.y2),\r\n                new Point(r.x2, r.y2),\r\n                new Point(r.x1, r.y1)\r\n            ];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCSortView\r\n     * @constructor\r\n     */\r\n    function FCSortView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.sort.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCSortView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCSortView.prototype.constructor = FCSortView;\r\n\r\n    FCSortView.prototype.sizeObject = function (canvas) {\r\n        type.NodeView.prototype.sizeObject.call(this, canvas);\r\n        this.nameLabel.visible = false;\r\n        this.minWidth = 30;\r\n        this.minHeight = 30;\r\n    };\r\n\r\n    FCSortView.prototype.drawObject = function (canvas) {\r\n        var xm = (this.left + this.getRight()) / 2,\r\n            ym = (this.top + this.getBottom()) / 2,\r\n            pts = [\r\n                new Point(this.left, ym),\r\n                new Point(xm, this.top),\r\n                new Point(this.getRight(), ym),\r\n                new Point(xm, this.getBottom()),\r\n                new Point(this.left, ym)\r\n            ];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        canvas.line(this.left, ym, this.getRight(), ym);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCMergeView\r\n     * @constructor\r\n     */\r\n    function FCMergeView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.merge.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCMergeView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCMergeView.prototype.constructor = FCMergeView;\r\n\r\n    FCMergeView.prototype.sizeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = Math.max(this.nameLabel.minWidth * 2, MERGE_MINWIDTH);\r\n        this.minHeight = Math.max(this.nameLabel.minHeight * 2, MERGE_MINHEIGHT);\r\n    };\r\n\r\n    FCMergeView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.nameLabel.left = this.left + (this.width / 4);\r\n        this.nameLabel.top = this.top + TOP_PADDING;\r\n        this.nameLabel.width = (this.width / 2);\r\n        this.nameLabel.height = (this.height / 2);\r\n    };\r\n\r\n    FCMergeView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            pts = [\r\n                new Point(r.x1, r.y1),\r\n                new Point(r.x2, r.y1),\r\n                new Point((r.x1 + r.x2) / 2, r.y2),\r\n                new Point(r.x1, r.y1)\r\n            ];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCExtractView\r\n     * @constructor\r\n     */\r\n    function FCExtractView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.extract.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCExtractView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCExtractView.prototype.constructor = FCExtractView;\r\n\r\n    FCExtractView.prototype.sizeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.sizeObject.call(this, canvas);\r\n        this.minWidth = Math.max(this.nameLabel.minWidth * 2, EXTRACT_MINWIDTH);\r\n        this.minHeight = Math.max(this.nameLabel.minHeight * 2, EXTRACT_MINHEIGHT);\r\n    };\r\n\r\n    FCExtractView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        this.nameLabel.left = this.left + (this.width / 4);\r\n        this.nameLabel.top = this.top + (this.height / 2) - BOTTOM_PADDING;\r\n        this.nameLabel.width = (this.width / 2);\r\n        this.nameLabel.height = (this.height / 2);\r\n    };\r\n\r\n    FCExtractView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            pts = [\r\n                new Point((r.x1 + r.x2) / 2, r.y1),\r\n                new Point(r.x2, r.y2),\r\n                new Point(r.x1, r.y2),\r\n                new Point((r.x1 + r.x2) / 2, r.y1)\r\n            ];\r\n        canvas.fillPolygon(pts);\r\n        canvas.polygon(pts);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCStoredDataView\r\n     * @constructor\r\n     */\r\n    function FCStoredDataView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.stored-data.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCStoredDataView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCStoredDataView.prototype.constructor = FCStoredDataView;\r\n\r\n    FCStoredDataView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = Math.floor(this.width / 8);\r\n        this.nameLabel.left = this.left + LEFT_PADDING + g;\r\n        this.nameLabel.width = this.width - LEFT_PADDING - RIGHT_PADDING - (g * 2);\r\n    };\r\n\r\n    FCStoredDataView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            w = r.getWidth(),\r\n            h = r.getHeight(),\r\n            ym = (r.y1 + r.y2) / 2,\r\n            g = Math.floor(w / 8),\r\n            kappa = 0.5522848,\r\n            ox = g * kappa,       // control point offset horizontal\r\n            oy = (h / 2) * kappa; // control point offset vertical\r\n\r\n        canvas.fillPath([[\'M\', r.x2, r.y1],\r\n                         [\'C\', r.x2 - ox, r.y1, r.x2 - g, ym - oy, r.x2 - g, ym],\r\n                         [\'C\', r.x2 - g, ym + oy, r.x2 - ox, r.y2, r.x2, r.y2],\r\n                         [\'L\', r.x1 + g, r.y2],\r\n                         [\'C\', r.x1 + g - ox, r.y2, r.x1, ym + oy, r.x1, ym],\r\n                         [\'C\', r.x1, ym - oy, r.x1 + g - ox, r.y1, r.x1 + g, r.y1],\r\n                         [\'L\', r.x2, r.y1],\r\n                         [\'Z\']], true);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCDatabaseView\r\n     * @constructor\r\n     */\r\n    function FCDatabaseView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.database.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCDatabaseView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCDatabaseView.prototype.constructor = FCDatabaseView;\r\n\r\n    FCDatabaseView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = Math.floor(this.height / 8);\r\n        this.nameLabel.top = this.top + TOP_PADDING + (g * 2);\r\n        this.nameLabel.height = this.height - TOP_PADDING - BOTTOM_PADDING - (g * 3);\r\n    };\r\n\r\n    FCDatabaseView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            w = r.getWidth(),\r\n            h = r.getHeight(),\r\n            xm = (r.x1 + r.x2) / 2,\r\n            g = Math.floor(h / 8),\r\n            kappa = 0.5522848,\r\n            ox = (w / 2) * kappa, // control point offset horizontal\r\n            oy = g * kappa;       // control point offset vertical\r\n\r\n        canvas.fillPath([[\'M\', r.x1, r.y1 + g],\r\n                         [\'C\', r.x1, r.y1 + g - oy, xm - ox, r.y1, xm, r.y1],\r\n                         [\'C\', xm + ox, r.y1, r.x2, r.y1 + g - oy, r.x2, r.y1 + g],\r\n                         [\'L\', r.x2, r.y2 - g],\r\n                         [\'C\', r.x2, r.y2 - g + oy, xm + ox, r.y2, xm, r.y2],\r\n                         [\'C\', xm - ox, r.y2, r.x1, r.y2 - g + oy, r.x1, r.y2 - g],\r\n                         [\'L\', r.x1, r.y1 + g],\r\n                         [\'Z\']], true);\r\n        canvas.path([[\'M\', r.x1, r.y1 + g],\r\n                     [\'C\', r.x1, r.y1 + g + oy, xm - ox, r.y1 + (g * 2), xm, r.y1 + (g * 2)],\r\n                     [\'C\', xm + ox, r.y1 + (g * 2), r.x2, r.y1 + g + oy, r.x2, r.y1 + g]]);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCDirectAccessStorageView\r\n     * @constructor\r\n     */\r\n    function FCDirectAccessStorageView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.direct-access-storage.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCDirectAccessStorageView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCDirectAccessStorageView.prototype.constructor = FCDirectAccessStorageView;\r\n\r\n    FCDirectAccessStorageView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = Math.floor(this.width / 8);\r\n        this.nameLabel.left = this.left + LEFT_PADDING + g;\r\n        this.nameLabel.width = this.width - LEFT_PADDING - RIGHT_PADDING - (g * 3);\r\n    };\r\n\r\n    FCDirectAccessStorageView.prototype.drawObject = function (canvas) {\r\n        var r = new Rect(this.left, this.top, this.getRight(), this.getBottom()),\r\n            w = r.getWidth(),\r\n            h = r.getHeight(),\r\n            ym = (r.y1 + r.y2) / 2,\r\n            g = Math.floor(w / 8),\r\n            kappa = 0.5522848,\r\n            ox = g * kappa,       // control point offset horizontal\r\n            oy = (h / 2) * kappa; // control point offset vertical\r\n\r\n        canvas.fillPath([[\'M\', r.x2 - g, r.y1],\r\n                         [\'C\', r.x2 - g + ox, r.y1, r.x2, ym - oy, r.x2, ym],\r\n                         [\'C\', r.x2, ym + oy, r.x2 - g + ox, r.y2, r.x2 - g, r.y2],\r\n                         [\'L\', r.x1 + g, r.y2],\r\n                         [\'C\', r.x1 + g - ox, r.y2, r.x1, ym + oy, r.x1, ym],\r\n                         [\'C\', r.x1, ym - oy, r.x1 + g - ox, r.y1, r.x1 + g, r.y1],\r\n                         [\'L\', r.x2 - g, r.y1],\r\n                         [\'Z\']], true);\r\n        canvas.path([[\'M\', r.x2 - g, r.y1],\r\n                     [\'C\', r.x2 - g - ox, r.y1, r.x2 - (g * 2), ym - oy, r.x2 - (g * 2), ym],\r\n                     [\'C\', r.x2 - (g * 2), ym + oy, r.x2 - g - ox, r.y2, r.x2 - g, r.y2]]);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCInternalStorageView\r\n     * @constructor\r\n     */\r\n    function FCInternalStorageView() {\r\n        FCGeneralNodeView.apply(this, arguments);\r\n        this.fillColor = PreferenceManager.get("flowchart.internal-storage.fillColor", "#ffffff") || PreferenceManager.get("view.fillColor", "#ffffff");\r\n    }\r\n    // inherits from FCGeneralNodeView\r\n    FCInternalStorageView.prototype = Object.create(FCGeneralNodeView.prototype);\r\n    FCInternalStorageView.prototype.constructor = FCInternalStorageView;\r\n\r\n    FCInternalStorageView.prototype.arrangeObject = function (canvas) {\r\n        FCGeneralNodeView.prototype.arrangeObject.call(this, canvas);\r\n        var g = 10;\r\n        this.nameLabel.left = this.left + LEFT_PADDING + g;\r\n        this.nameLabel.top = this.top + TOP_PADDING + g;\r\n        this.nameLabel.width = this.width - LEFT_PADDING - RIGHT_PADDING - g;\r\n        this.nameLabel.height = this.height - TOP_PADDING - BOTTOM_PADDING - g;\r\n    };\r\n\r\n    FCInternalStorageView.prototype.drawObject = function (canvas) {\r\n        var gap = 10;\r\n        canvas.fillRect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.rect(this.left, this.top, this.getRight(), this.getBottom());\r\n        canvas.line(this.left + gap, this.top, this.left + gap, this.getBottom());\r\n        canvas.line(this.left, this.top + gap, this.getRight(), this.top + gap);\r\n        FCGeneralNodeView.prototype.drawObject.call(this, canvas);\r\n    };\r\n\r\n\r\n    /**\r\n     * FCFlowView\r\n     * @constructor\r\n     */\r\n    function FCFlowView() {\r\n        FCGeneralEdgeView.apply(this, arguments);\r\n        this.lineStyle = PreferenceManager.get("flowchart.flow.lineStyle", Core.LS_ROUNDRECT) || PreferenceManager.get("view.lineStyle", Core.LS_OBLIQUE);\r\n    }\r\n    // inherits from FCGeneralEdgeView\r\n    FCFlowView.prototype = Object.create(FCGeneralEdgeView.prototype);\r\n    FCFlowView.prototype.constructor = FCFlowView;\r\n\r\n\r\n    /* ************************** Type definitions ***************************/\r\n\r\n    type.FCModelElement            = FCModelElement;\r\n    type.FCFlowchart               = FCFlowchart;\r\n    type.FCFlowchartDiagram        = FCFlowchartDiagram;\r\n    type.FCProcess                 = FCProcess;\r\n    type.FCTerminator              = FCTerminator;\r\n    type.FCDecision                = FCDecision;\r\n    type.FCDelay                   = FCDelay;\r\n    type.FCPredefinedProcess       = FCPredefinedProcess;\r\n    type.FCAlternateProcess        = FCAlternateProcess;\r\n    type.FCData                    = FCData;\r\n    type.FCDocument                = FCDocument;\r\n    type.FCMultiDocument           = FCMultiDocument;\r\n    type.FCPreparation             = FCPreparation;\r\n    type.FCDisplay                 = FCDisplay;\r\n    type.FCManualInput             = FCManualInput;\r\n    type.FCManualOperation         = FCManualOperation;\r\n    type.FCCard                    = FCCard;\r\n    type.FCPunchedTape             = FCPunchedTape;\r\n    type.FCConnector               = FCConnector;\r\n    type.FCOffPageConnector        = FCOffPageConnector;\r\n    type.FCOr                      = FCOr;\r\n    type.FCSummingJunction         = FCSummingJunction;\r\n    type.FCCollate                 = FCCollate;\r\n    type.FCSort                    = FCSort;\r\n    type.FCMerge                   = FCMerge;\r\n    type.FCExtract                 = FCExtract;\r\n    type.FCStoredData              = FCStoredData;\r\n    type.FCDatabase                = FCDatabase;\r\n    type.FCDirectAccessStorage     = FCDirectAccessStorage;\r\n    type.FCInternalStorage         = FCInternalStorage;\r\n    type.FCFlow                    = FCFlow;\r\n\r\n    type.FCGeneralNodeView         = FCGeneralNodeView;\r\n    type.FCGeneralEdgeView         = FCGeneralEdgeView;\r\n    type.FCProcessView             = FCProcessView;\r\n    type.FCTerminatorView          = FCTerminatorView;\r\n    type.FCDecisionView            = FCDecisionView;\r\n    type.FCDelayView               = FCDelayView;\r\n    type.FCPredefinedProcessView   = FCPredefinedProcessView;\r\n    type.FCAlternateProcessView    = FCAlternateProcessView;\r\n    type.FCDataView                = FCDataView;\r\n    type.FCDocumentView            = FCDocumentView;\r\n    type.FCMultiDocumentView       = FCMultiDocumentView;\r\n    type.FCPreparationView         = FCPreparationView;\r\n    type.FCDisplayView             = FCDisplayView;\r\n    type.FCManualInputView         = FCManualInputView;\r\n    type.FCManualOperationView     = FCManualOperationView;\r\n    type.FCCardView                = FCCardView;\r\n    type.FCPunchedTapeView         = FCPunchedTapeView;\r\n    type.FCConnectorView           = FCConnectorView;\r\n    type.FCOffPageConnectorView    = FCOffPageConnectorView;\r\n    type.FCOrView                  = FCOrView;\r\n    type.FCSummingJunctionView     = FCSummingJunctionView;\r\n    type.FCCollateView             = FCCollateView;\r\n    type.FCSortView                = FCSortView;\r\n    type.FCMergeView               = FCMergeView;\r\n    type.FCExtractView             = FCExtractView;\r\n    type.FCStoredDataView          = FCStoredDataView;\r\n    type.FCDatabaseView            = FCDatabaseView;\r\n    type.FCDirectAccessStorageView = FCDirectAccessStorageView;\r\n    type.FCInternalStorageView     = FCInternalStorageView;\r\n    type.FCFlowView                = FCFlowView;\r\n\r\n});\r\n\n//# sourceURL=/flowchart/Flowchart.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define */\r\n\r\ndefine('flowchart/FlowchartCommands',['require','exports','module'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    exports.FLOWCHART_ADD_DIAGRAM = 'flowchart.add.diagram';\r\n\r\n});\n//# sourceURL=/flowchart/FlowchartCommands.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell, Mustache */\r\ndefine(\'flowchart/FlowchartFactory\',[\'require\',\'exports\',\'module\',\'utils/Helper\',\'core/Core\',\'core/OperationBuilder\',\'core/Repository\',\'engine/ProjectManager\',\'engine/Engine\',\'engine/Factory\',\'flowchart/Flowchart\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Helper           = require("utils/Helper"),\r\n        Core             = require("core/Core"),\r\n        OperationBuilder = require("core/OperationBuilder"),\r\n        Repository       = require("core/Repository"),\r\n        ProjectManager   = require("engine/ProjectManager"),\r\n        Engine           = require("engine/Engine"),\r\n        Factory          = require("engine/Factory");\r\n\r\n    require("flowchart/Flowchart");\r\n\r\n    // Preconditions ...........................................................\r\n\r\n    function flowPrecondition(options) {\r\n        Helper.assert(\r\n            (options.tailModel instanceof type.FCModelElement) && (options.headModel instanceof type.FCModelElement),\r\n            Mustache.render(Factory.ERR_INVALID_LINK, options.modelType)\r\n        );\r\n    }\r\n\r\n    // Create ER diagram function ..............................................\r\n\r\n    function diagramFn(parent, options) {\r\n        var model,\r\n            diagram;\r\n        parent = parent || ProjectManager.getProject();\r\n        if (parent instanceof type.FCFlowchart) {\r\n            diagram = new type.FCFlowchartDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, diagram.getDisplayClassName());\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', diagram);\r\n        } else {\r\n            model = new type.FCFlowchart();\r\n            model.name = Core.getNewName(parent.ownedElements, "Flowchart");\r\n            model._parent = parent;\r\n            diagram = new type.FCFlowchartDiagram();\r\n            diagram.name = Core.getNewName(parent.ownedElements, diagram.getDisplayClassName());\r\n            model.ownedElements.push(diagram);\r\n            diagram._parent = model;\r\n            if (options.diagramInitializer) {\r\n                options.diagramInitializer(diagram);\r\n            }\r\n            Engine.addModel(parent, \'ownedElements\', model);\r\n        }\r\n        if (diagram) {\r\n            diagram = Repository.get(diagram._id);\r\n        }\r\n        options.triggerDiagramCreated(diagram);\r\n        return diagram;\r\n    }\r\n\r\n\r\n    // Create Diagram ..........................................................\r\n\r\n    Factory.registerDiagramFn("FCFlowchartDiagram", diagramFn);\r\n\r\n    // Create Model And View ...................................................\r\n\r\n    Factory.registerModelAndViewFn("FCFlow",                Factory.defaultDirectedRelationshipFn, { precondition: flowPrecondition });\r\n    Factory.registerModelAndViewFn("FCProcess",             Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCTerminator",          Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCDecision",            Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCDelay",               Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCPredefinedProcess",   Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCAlternateProcess",    Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCData",                Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCDocument",            Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCMultiDocument",       Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCPreparation",         Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCDisplay",             Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCManualInput",         Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCManualOperation",     Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCCard",                Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCPunchedTape",         Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCConnector",           Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCOffPageConnector",    Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCOr",                  Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCSummingJunction",     Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCCollate",             Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCSort",                Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCMerge",               Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCExtract",             Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCStoredData",          Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCDatabase",            Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCDirectAccessStorage", Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("FCInternalStorage",     Factory.defaultModelAndViewFn);\r\n\r\n});\r\n\n//# sourceURL=/flowchart/FlowchartFactory.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell */\r\ndefine(\'flowchart/FlowchartCommandHandlers\',[\'require\',\'exports\',\'module\',\'command/CommandManager\',\'core/Repository\',\'engine/SelectionManager\',\'engine/Factory\',\'diagrams/DiagramManager\',\'explorer/ModelExplorerView\',\'flowchart/FlowchartCommands\',\'flowchart/FlowchartFactory\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var CommandManager    = require("command/CommandManager"),\r\n        Repository        = require("core/Repository"),\r\n        SelectionManager  = require("engine/SelectionManager"),\r\n        Factory           = require("engine/Factory"),\r\n        DiagramManager    = require("diagrams/DiagramManager"),\r\n        ModelExplorerView = require("explorer/ModelExplorerView"),\r\n        FlowchartCommands = require("flowchart/FlowchartCommands"),\r\n        FlowchartFactory  = require("flowchart/FlowchartFactory");\r\n\r\n    function _updateCommands() {\r\n        var selected = SelectionManager.getSelected(),\r\n            isModel  = selected instanceof type.Model;\r\n        CommandManager.get(FlowchartCommands.FLOWCHART_ADD_DIAGRAM).setEnabled(isModel);\r\n    }\r\n\r\n    CommandManager.register("Flowchart Diagram", FlowchartCommands.FLOWCHART_ADD_DIAGRAM, _.partial(Factory.createDiagram, "FCFlowchartDiagram"));\r\n\r\n    // Update Commands\r\n    $(SelectionManager).on("selectionChanged", _updateCommands);\r\n    $(Repository).on("operationExecuted", _updateCommands);\r\n\r\n});\r\n\n//# sourceURL=/flowchart/FlowchartCommandHandlers.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell */\r\ndefine('flowchart/FlowchartMenus',['require','exports','module','utils/AppInit','command/Commands','menu/MenuManager','menu/ContextMenuManager','menu/DefaultMenus','uml/UMLCommands','flowchart/FlowchartCommands','flowchart/FlowchartCommandHandlers'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var AppInit            = require(\"utils/AppInit\"),\r\n        Commands           = require(\"command/Commands\"),\r\n        MenuManager        = require(\"menu/MenuManager\"),\r\n        ContextMenuManager = require(\"menu/ContextMenuManager\"),\r\n        DefaultMenus       = require(\"menu/DefaultMenus\"),\r\n        UMLCommands        = require(\"uml/UMLCommands\"),\r\n        FlowchartCommands =  require(\"flowchart/FlowchartCommands\");\r\n\r\n    require(\"flowchart/FlowchartCommandHandlers\");\r\n\r\n    /**\r\n     * Extend MenuBar\r\n     */\r\n    function setupMenus() {\r\n        var menuItem;\r\n        // Add Diagram\r\n        menuItem = MenuManager.getMenuItem(Commands.MODEL_ADD_DIAGRAM);\r\n        menuItem.addMenuItem(FlowchartCommands.FLOWCHART_ADD_DIAGRAM);\r\n    }\r\n\r\n    /**\r\n     * Extend ContextMenu for Explorer\r\n     */\r\n    function setupContextMenuForExplorer() {\r\n        var contextMenu, menu;\r\n        contextMenu = ContextMenuManager.getContextMenu(DefaultMenus.contextMenus.EXPLORER);\r\n\r\n        // Add Diagram\r\n        menu = contextMenu.getMenuItem(Commands.MODEL_ADD_DIAGRAM);\r\n        menu.addMenuItem(FlowchartCommands.FLOWCHART_ADD_DIAGRAM, \"icon-FCFlowchartDiagram\");\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupMenus();\r\n        setupContextMenuForExplorer();\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/flowchart/FlowchartMenus.js"),eval("/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell, document */\r\n\r\ndefine('flowchart/FlowchartToolbox',['require','exports','module','utils/AppInit','core/Core','core/Repository','engine/Factory','diagrams/ToolboxView','diagrams/DiagramManager','ui/QuickEdit','ui/Toast'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var AppInit          = require(\"utils/AppInit\"),\r\n        Core             = require(\"core/Core\"),\r\n        Repository       = require(\"core/Repository\"),\r\n        Factory          = require(\"engine/Factory\"),\r\n        Toolbox          = require(\"diagrams/ToolboxView\"),\r\n        DiagramManager   = require(\"diagrams/DiagramManager\"),\r\n        QuickEdit        = require(\"ui/QuickEdit\"),\r\n        Toast            = require(\"ui/Toast\");\r\n\r\n    /**\r\n     * Toolbox Groups\r\n     * @const\r\n     */\r\n    var TXG_FLOWCHART  = 'txg-fc';\r\n\r\n    /**\r\n     * Toolbox Items\r\n     * @const\r\n     */\r\n    var TX_PROCESS               = 'tx-fc-process',\r\n        TX_TERMINATOR            = 'tx-fc-terminator',\r\n        TX_DECISION              = 'tx-fc-decision',\r\n        TX_DELAY                 = 'tx-fc-delay',\r\n        TX_PREDEFINED_PROCESS    = 'tx-fc-predefined-process',\r\n        TX_ALTERNATE_PROCESS     = 'tx-fc-alternate-process',\r\n        TX_DATA                  = 'tx-fc-data',\r\n        TX_DOCUMENT              = 'tx-fc-document',\r\n        TX_MULTI_DOCUMENT        = 'tx-fc-multidocument',\r\n        TX_PREPARATION           = 'tx-fc-preparation',\r\n        TX_DISPLAY               = 'tx-fc-display',\r\n        TX_MANUAL_INPUT          = 'tx-fc-manualinput',\r\n        TX_MANUAL_OPERATION      = 'tx-fc-manualoperation',\r\n        TX_CARD                  = 'tx-fc-card',\r\n        TX_PUNCHED_TAPE          = 'tx-fc-punchedtape',\r\n        TX_CONNECTOR             = 'tx-fc-connector',\r\n        TX_OFF_PAGE_CONNECTOR    = 'tx-fc-offpageconnector',\r\n        TX_OR                    = 'tx-fc-or',\r\n        TX_SUMMING_JUNCTION      = 'tx-fc-summingjunction',\r\n        TX_COLLATE               = 'tx-fc-collate',\r\n        TX_SORT                  = 'tx-fc-sort',\r\n        TX_MERGE                 = 'tx-fc-merge',\r\n        TX_EXTRACT               = 'tx-fc-extract',\r\n        TX_STORED_DATA           = 'tx-fc-storeddata',\r\n        TX_DATABASE              = 'tx-fc-database',\r\n        TX_DIRECT_ACCESS_STORAGE = 'tx-fc-directaccessstorage',\r\n        TX_INTERNAL_STORAGE      = 'tx-fc-internalstorage',\r\n        TX_FLOW                  = 'tx-fc-flow';\r\n\r\n    function setupToolbox() {\r\n        Toolbox.addGroup(TXG_FLOWCHART, 'Flowchart', [type.FCFlowchartDiagram]);\r\n        Toolbox.addItem(TX_FLOW,                  TXG_FLOWCHART, 'Flow',                  'icon-FCFlow',                'line');\r\n        Toolbox.addItem(TX_PROCESS,               TXG_FLOWCHART, 'Process',               'icon-FCProcess',             'rect');\r\n        Toolbox.addItem(TX_TERMINATOR,            TXG_FLOWCHART, 'Terminator',            'icon-FCTerminator',          'rect');\r\n        Toolbox.addItem(TX_DECISION,              TXG_FLOWCHART, 'Decision',              'icon-FCDecision',            'rect');\r\n        Toolbox.addItem(TX_DELAY,                 TXG_FLOWCHART, 'Delay',                 'icon-FCDelay',               'rect');\r\n        Toolbox.addItem(TX_PREDEFINED_PROCESS,    TXG_FLOWCHART, 'Predefined Process',    'icon-FCPredefinedProcess',   'rect');\r\n        Toolbox.addItem(TX_ALTERNATE_PROCESS,     TXG_FLOWCHART, 'Alternate Process',     'icon-FCAlternateProcess',    'rect');\r\n        Toolbox.addItem(TX_DATA,                  TXG_FLOWCHART, 'Data',                  'icon-FCData',                'rect');\r\n        Toolbox.addItem(TX_DOCUMENT,              TXG_FLOWCHART, 'Document',              'icon-FCDocument',            'rect');\r\n        Toolbox.addItem(TX_MULTI_DOCUMENT,        TXG_FLOWCHART, 'Multi-Document',        'icon-FCMultiDocument',       'rect');\r\n        Toolbox.addItem(TX_PREPARATION,           TXG_FLOWCHART, 'Preparation',           'icon-FCPreparation',         'rect');\r\n        Toolbox.addItem(TX_DISPLAY,               TXG_FLOWCHART, 'Display',               'icon-FCDisplay',             'rect');\r\n        Toolbox.addItem(TX_MANUAL_INPUT,          TXG_FLOWCHART, 'Manual Input',          'icon-FCManualInput',         'rect');\r\n        Toolbox.addItem(TX_MANUAL_OPERATION,      TXG_FLOWCHART, 'Manual Operation',      'icon-FCManualOperation',     'rect');\r\n        Toolbox.addItem(TX_CARD,                  TXG_FLOWCHART, 'Card',                  'icon-FCCard',                'rect');\r\n        Toolbox.addItem(TX_PUNCHED_TAPE,          TXG_FLOWCHART, 'Punched Tape',          'icon-FCPunchedTape',         'rect');\r\n        Toolbox.addItem(TX_CONNECTOR,             TXG_FLOWCHART, 'Connector',             'icon-FCConnector',           'rect');\r\n        Toolbox.addItem(TX_OFF_PAGE_CONNECTOR,    TXG_FLOWCHART, 'Off-Page Connector',    'icon-FCOffPageConnector',    'rect');\r\n        Toolbox.addItem(TX_OR,                    TXG_FLOWCHART, 'Or',                    'icon-FCOr',                  'rect');\r\n        Toolbox.addItem(TX_SUMMING_JUNCTION,      TXG_FLOWCHART, 'Summing Junction',      'icon-FCSummingJunction',     'rect');\r\n        Toolbox.addItem(TX_COLLATE,               TXG_FLOWCHART, 'Collate',               'icon-FCCollate',             'rect');\r\n        Toolbox.addItem(TX_SORT,                  TXG_FLOWCHART, 'Sort',                  'icon-FCSort',                'rect');\r\n        Toolbox.addItem(TX_MERGE,                 TXG_FLOWCHART, 'Merge',                 'icon-FCMerge',               'rect');\r\n        Toolbox.addItem(TX_EXTRACT,               TXG_FLOWCHART, 'Extract',               'icon-FCExtract',             'rect');\r\n        Toolbox.addItem(TX_STORED_DATA,           TXG_FLOWCHART, 'Stored Data',           'icon-FCStoredData',          'rect');\r\n        Toolbox.addItem(TX_DATABASE,              TXG_FLOWCHART, 'Database',              'icon-FCDatabase',            'rect');\r\n        Toolbox.addItem(TX_DIRECT_ACCESS_STORAGE, TXG_FLOWCHART, 'Direct Access Storage', 'icon-FCDirectAccessStorage', 'rect');\r\n        Toolbox.addItem(TX_INTERNAL_STORAGE,      TXG_FLOWCHART, 'Internal Storage',      'icon-FCInternalStorage',     'rect');\r\n\r\n        // Event Handling\r\n        $(Toolbox).on('elementCreated', function (event, id, editor, x1, y1, x2, y2) {\r\n            try {\r\n                var diagram   = editor.diagram,\r\n                    parent    = diagram._parent,\r\n                    model     = null,\r\n                    view      = null,\r\n                    tailView  = diagram.getViewAt(editor.canvas, x1, y1, true),\r\n                    headView  = diagram.getViewAt(editor.canvas, x2, y2, true),\r\n                    tailModel = tailView ? tailView.model : null,\r\n                    headModel = headView ? headView.model : null;\r\n\r\n                var options = {\r\n                        x1        : x1,\r\n                        y1        : y1,\r\n                        x2        : x2,\r\n                        y2        : y2,\r\n                        tailView  : diagram.getViewAt(editor.canvas, x1, y1, true),\r\n                        headView  : diagram.getViewAt(editor.canvas, x2, y2, true),\r\n                        tailModel : tailView ? tailView.model : null,\r\n                        headModel : headView ? headView.model : null\r\n                    };                \r\n                \r\n                switch (id) {\r\n                case TX_FLOW:\r\n                    view = Factory.createModelAndView(\"FCFlow\", tailModel, diagram, options);\r\n                    break;\r\n                case TX_PROCESS:\r\n                    view = Factory.createModelAndView(\"FCProcess\", parent, diagram, options);\r\n                    break;\r\n                case TX_TERMINATOR:\r\n                    view = Factory.createModelAndView(\"FCTerminator\", parent, diagram, options);\r\n                    break;\r\n                case TX_DECISION:\r\n                    view = Factory.createModelAndView(\"FCDecision\", parent, diagram, options);\r\n                    break;\r\n                case TX_DELAY:\r\n                    view = Factory.createModelAndView(\"FCDelay\", parent, diagram, options);\r\n                    break;\r\n                case TX_PREDEFINED_PROCESS:\r\n                    view = Factory.createModelAndView(\"FCPredefinedProcess\", parent, diagram, options);\r\n                    break;\r\n                case TX_ALTERNATE_PROCESS:\r\n                    view = Factory.createModelAndView(\"FCAlternateProcess\", parent, diagram, options);\r\n                    break;\r\n                case TX_DATA:\r\n                    view = Factory.createModelAndView(\"FCData\", parent, diagram, options);\r\n                    break;\r\n                case TX_DOCUMENT:\r\n                    view = Factory.createModelAndView(\"FCDocument\", parent, diagram, options);\r\n                    break;\r\n                case TX_MULTI_DOCUMENT:\r\n                    view = Factory.createModelAndView(\"FCMultiDocument\", parent, diagram, options);\r\n                    break;\r\n                case TX_PREPARATION:\r\n                    view = Factory.createModelAndView(\"FCPreparation\", parent, diagram, options);\r\n                    break;\r\n                case TX_DISPLAY:\r\n                    view = Factory.createModelAndView(\"FCDisplay\", parent, diagram, options);\r\n                    break;\r\n                case TX_MANUAL_INPUT:\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = Core.getNewName(model._parent.ownedElements, \"Input\");\r\n                    };                                            \r\n                    view = Factory.createModelAndView(\"FCManualInput\", parent, diagram, options);\r\n                    break;\r\n                case TX_MANUAL_OPERATION:\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = Core.getNewName(model._parent.ownedElements, \"Operation\");\r\n                    };                                            \r\n                    view = Factory.createModelAndView(\"FCManualOperation\", parent, diagram, options);\r\n                    break;\r\n                case TX_CARD:\r\n                    view = Factory.createModelAndView(\"FCCard\", parent, diagram, options);\r\n                    break;\r\n                case TX_PUNCHED_TAPE:\r\n                    view = Factory.createModelAndView(\"FCPunchedTape\", parent, diagram, options);\r\n                    break;\r\n                case TX_CONNECTOR:\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = Core.getNewName(model._parent.ownedElements, \"C\");\r\n                    };                    \r\n                    view = Factory.createModelAndView(\"FCConnector\", parent, diagram, options);\r\n                    break;\r\n                case TX_OFF_PAGE_CONNECTOR:\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = Core.getNewName(model._parent.ownedElements, \"P\");\r\n                    };                                            \r\n                    view = Factory.createModelAndView(\"FCOffPageConnector\", parent, diagram, options);\r\n                    break;\r\n                case TX_OR:\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = \"\";\r\n                    };\r\n                    view = Factory.createModelAndView(\"FCOr\", parent, diagram, options);\r\n                    break;\r\n                case TX_SUMMING_JUNCTION:\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = \"\";\r\n                    };\r\n                    view = Factory.createModelAndView(\"FCSummingJunction\", parent, diagram, options);\r\n                    break;\r\n                case TX_COLLATE:\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = \"\";\r\n                    };\r\n                    view = Factory.createModelAndView(\"FCCollate\", parent, diagram, options);\r\n                    break;\r\n                case TX_SORT:\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = \"\";\r\n                    };\r\n                    view = Factory.createModelAndView(\"FCSort\", parent, diagram, options);\r\n                    break;\r\n                case TX_MERGE:\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = \"\";\r\n                    };\r\n                    view = Factory.createModelAndView(\"FCMerge\", parent, diagram, options);\r\n                    break;\r\n                case TX_EXTRACT:\r\n                    options.modelInitializer = function (model) {\r\n                        model.name = \"\";\r\n                    };\r\n                    view = Factory.createModelAndView(\"FCExtract\", parent, diagram, options);\r\n                    break;\r\n                case TX_STORED_DATA:\r\n                    view = Factory.createModelAndView(\"FCStoredData\", parent, diagram, options);\r\n                    break;\r\n                case TX_DATABASE:\r\n                    view = Factory.createModelAndView(\"FCDatabase\", parent, diagram, options);\r\n                    break;\r\n                case TX_DIRECT_ACCESS_STORAGE:\r\n                    view = Factory.createModelAndView(\"FCDirectAccessStorage\", parent, diagram, options);\r\n                    break;\r\n                case TX_INTERNAL_STORAGE:\r\n                    view = Factory.createModelAndView(\"FCInternalStorage\", parent, diagram, options);\r\n                    break;\r\n                }\r\n                \r\n                // Open QuickEdit for the created view.\r\n                if (view) {\r\n                    view = Repository.get(view._id);\r\n                    if (view instanceof type.NodeView) {\r\n                        _.defer(function () {\r\n                            QuickEdit.open(editor, view, view.left, view.top);\r\n                        });\r\n                    } else if (view instanceof type.EdgeView) {\r\n                        _.defer(function () {\r\n                            QuickEdit.open(editor, view, Math.round((x1 + x2) / 2), Math.round((y1 + y2) / 2));\r\n                        });\r\n                    }\r\n                }\r\n                                \r\n            } catch (err) {\r\n                if (_.isString(err)) {\r\n                    Toast.error(err);\r\n                } else {\r\n                    console.error(err.stack);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupDiagramManager() {\r\n        $(DiagramManager).on('currentDiagramChanged', function (event, diagram, editor) {\r\n            try {\r\n                if (diagram instanceof type.FCFlowchartDiagram) {\r\n                    Toolbox.expandGroup(TXG_FLOWCHART);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n    \r\n    AppInit.htmlReady(function () {\r\n        setupToolbox();\r\n        setupDiagramManager();\r\n    });    \r\n\r\n});\r\n\n//# sourceURL=/flowchart/FlowchartToolbox.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell, staruml */\r\n\r\ndefine(\'flowchart/FlowchartPreferences\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Core\',\'core/PreferenceManager\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit           = require("utils/AppInit"),\r\n        Core              = require("core/Core"),\r\n        PreferenceManager = require("core/PreferenceManager");\r\n\r\n    var FlowchartPreferences = {\r\n        "flowchart.flow": {\r\n            text: "Flow",\r\n            type: "Section"\r\n        },\r\n        "flowchart.flow.lineStyle": {\r\n            text: "Line Style",\r\n            description: "Default line style of flow.",\r\n            type: "Dropdown",\r\n            options: [\r\n                { value: Core.LS_RECTILINEAR, text: "Rectilinear" },\r\n                { value: Core.LS_OBLIQUE,     text: "Oblique" },\r\n                { value: Core.LS_ROUNDRECT,   text: "Rounded Rectilinear" },\r\n                { value: Core.LS_CURVE,       text: "Curve" }\r\n            ],\r\n            default: Core.LS_ROUNDRECT\r\n        },\r\n        "flowchart.process": {\r\n            text: "Process",\r\n            type: "Section"\r\n        },\r\n        "flowchart.process.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Process.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.terminator": {\r\n            text: "Terminator",\r\n            type: "Section"\r\n        },\r\n        "flowchart.terminator.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Terminator.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.decision": {\r\n            text: "Decision",\r\n            type: "Section"\r\n        },\r\n        "flowchart.decision.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Decision.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.delay": {\r\n            text: "Delay",\r\n            type: "Section"\r\n        },\r\n        "flowchart.delay.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Delay.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.predefined-process": {\r\n            text: "Predefined Process",\r\n            type: "Section"\r\n        },\r\n        "flowchart.predefined-process.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Predefined Process.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.alternate-process": {\r\n            text: "Alternate Process",\r\n            type: "Section"\r\n        },\r\n        "flowchart.alternate-process.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Alternate Process.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.data": {\r\n            text: "Data",\r\n            type: "Section"\r\n        },\r\n        "flowchart.data.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Data.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.document": {\r\n            text: "Document",\r\n            type: "Section"\r\n        },\r\n        "flowchart.document.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Document.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.multidocument": {\r\n            text: "Multi-Document",\r\n            type: "Section"\r\n        },\r\n        "flowchart.multidocument.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Multi-Document.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.preparation": {\r\n            text: "Preparation",\r\n            type: "Section"\r\n        },\r\n        "flowchart.preparation.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Preparation.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.display": {\r\n            text: "Display",\r\n            type: "Section"\r\n        },\r\n        "flowchart.display.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Display.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.manual-input": {\r\n            text: "Manual Input",\r\n            type: "Section"\r\n        },\r\n        "flowchart.manual-input.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Manual Input.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.manual-operation": {\r\n            text: "Manual Operation",\r\n            type: "Section"\r\n        },\r\n        "flowchart.manual-operation.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Manual Operation.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.card": {\r\n            text: "Card",\r\n            type: "Section"\r\n        },\r\n        "flowchart.card.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Card.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.punched-tape": {\r\n            text: "Punched Tape",\r\n            type: "Section"\r\n        },\r\n        "flowchart.punched-tape.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Punched Tape.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.connector": {\r\n            text: "Connector",\r\n            type: "Section"\r\n        },\r\n        "flowchart.connector.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Connector.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.off-page-connector": {\r\n            text: "Off-Page Connector",\r\n            type: "Section"\r\n        },\r\n        "flowchart.off-page-connector.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Off-Page Connector.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.or": {\r\n            text: "Or",\r\n            type: "Section"\r\n        },\r\n        "flowchart.or.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Or.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.summing-junction": {\r\n            text: "Summing Junction",\r\n            type: "Section"\r\n        },\r\n        "flowchart.summing-junction.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Summing Junction.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.collate": {\r\n            text: "Collate",\r\n            type: "Section"\r\n        },\r\n        "flowchart.collate.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Collate.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.sort": {\r\n            text: "Sort",\r\n            type: "Section"\r\n        },\r\n        "flowchart.sort.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Sort.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.merge": {\r\n            text: "Merge",\r\n            type: "Section"\r\n        },\r\n        "flowchart.merge.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Merge.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.extract": {\r\n            text: "Extract",\r\n            type: "Section"\r\n        },\r\n        "flowchart.extract.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Extract.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.stored-data": {\r\n            text: "Stored Data",\r\n            type: "Section"\r\n        },\r\n        "flowchart.stored-data.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Stored Data.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.database": {\r\n            text: "Database",\r\n            type: "Section"\r\n        },\r\n        "flowchart.database.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Database.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.direct-access-storage": {\r\n            text: "Direct Access Storage",\r\n            type: "Section"\r\n        },\r\n        "flowchart.direct-access-storage.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Direct Access Storage.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n        "flowchart.internal-storage": {\r\n            text: "Internal Storage",\r\n            type: "Section"\r\n        },\r\n        "flowchart.internal-storage.fillColor": {\r\n            text: "Fill Color",\r\n            description: "Fill color of Internal Storage.",\r\n            type: "Color",\r\n            default: null,\r\n            defaultButton: {\r\n                text: "Use Default"\r\n            }\r\n        },\r\n    };\r\n\r\n    AppInit.htmlReady(function () {\r\n        PreferenceManager.register("flowchart", "Flowchart", FlowchartPreferences);\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/flowchart/FlowchartPreferences.js'),eval("/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell, document */\r\n\r\ndefine('flowchart/main',['require','exports','module','utils/AppInit','utils/ExtensionUtils','engine/Engine','engine/Factory','diagrams/DiagramManager','ui/QuickEdit','flowchart/FlowchartQuickEdit','flowchart/Flowchart-meta','flowchart/Flowchart','flowchart/FlowchartCommands','flowchart/FlowchartCommandHandlers','flowchart/FlowchartMenus','flowchart/FlowchartToolbox','flowchart/FlowchartPreferences'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var AppInit            = require(\"utils/AppInit\"),\r\n        ExtensionUtils     = require(\"utils/ExtensionUtils\"),\r\n        Engine             = require(\"engine/Engine\"),\r\n        Factory            = require(\"engine/Factory\"),\r\n        DiagramManager     = require(\"diagrams/DiagramManager\"),\r\n        QuickEdit          = require(\"ui/QuickEdit\"),\r\n        FlowchartQuickEdit = require(\"flowchart/FlowchartQuickEdit\");\r\n\r\n    require(\"flowchart/Flowchart-meta\");\r\n    require(\"flowchart/Flowchart\");\r\n    require(\"flowchart/FlowchartCommands\");\r\n    require(\"flowchart/FlowchartCommandHandlers\");\r\n    require(\"flowchart/FlowchartMenus\");\r\n    require(\"flowchart/FlowchartToolbox\");\r\n    require(\"flowchart/FlowchartPreferences\");\r\n\r\n    function setupQuickEdit() {\r\n        // QuickEdit Value Changed Event Handlers\r\n        $(QuickEdit).on('change', function (event, id, itemId, view, value, feedback) {\r\n            try {\r\n                switch (id) {\r\n                case FlowchartQuickEdit.QUICKEDIT_NODE:\r\n                    switch (itemId) {\r\n                    case FlowchartQuickEdit.ITEM_EDIT:\r\n                        Engine.setProperty(view.model, 'name', value);\r\n                        break;\r\n                    }\r\n                    break;\r\n                case FlowchartQuickEdit.QUICKEDIT_EDGE:\r\n                    switch (itemId) {\r\n                    case FlowchartQuickEdit.ITEM_EDIT:\r\n                        if (view instanceof type.EdgeLabelView) { Engine.setProperty(view._parent.model, 'name', value); }\r\n                        break;\r\n                    }\r\n                    break;\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        // QuickEdit Button Click Event Handlers\r\n        $(QuickEdit).on('click', function (event, id, itemId, view) {\r\n            var diagram      = DiagramManager.getEditor().diagram,\r\n                diagramOwner = diagram._parent,\r\n                parent,\r\n                nodes, nodeView, nodeView1, nodeView2, edgeView, options1, options2, _x, _y;\r\n            try {\r\n                switch (id) {\r\n                case FlowchartQuickEdit.QUICKEDIT_NODE:\r\n                    switch (itemId) {\r\n                    case FlowchartQuickEdit.ITEM_ADD_COLUMN:\r\n                        QuickEdit.addInQuickEdit(view.model, 'columns', view, 'columnCompartment', type.ERDColumn, 'Column');\r\n                        break;\r\n                    case FlowchartQuickEdit.ITEM_ADD_OUTGOING_PROCESS:\r\n                        nodes = QuickEdit.getBothNodes(view, type.FCFlowView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView(\"FCProcess\", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView(\"FCFlow\", view.model, diagram, options2);\r\n                        break;\r\n                    case FlowchartQuickEdit.ITEM_ADD_INCOMING_PROCESS:\r\n                        nodes = QuickEdit.getBothNodes(view, type.FCFlowView, function (e) {\r\n                            return (e.head === view);\r\n                        });\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView(\"FCProcess\", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView(\"FCFlow\", nodeView.model, diagram, options2);\r\n                        break;\r\n                    case FlowchartQuickEdit.ITEM_ADD_OUTGOING_DECISION:\r\n                        nodes = QuickEdit.getBothNodes(view, type.FCFlowView, function (e) {\r\n                            return (e.tail === view);\r\n                        });\r\n                        options1 = QuickEdit.getBottomPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView(\"FCDecision\", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(view, nodeView);\r\n                        edgeView = Factory.createModelAndView(\"FCFlow\", view.model, diagram, options2);\r\n                        break;\r\n                    case FlowchartQuickEdit.ITEM_ADD_INCOMING_DECISION:\r\n                        nodes = QuickEdit.getBothNodes(view, type.FCFlowView, function (e) {\r\n                            return (e.head === view);\r\n                        });\r\n                        options1 = QuickEdit.getTopPosition(view, nodes);\r\n                        nodeView = Factory.createModelAndView(\"FCDecision\", diagramOwner, diagram, options1);\r\n                        options2 = QuickEdit.getEdgeViewOption(nodeView, view);\r\n                        edgeView = Factory.createModelAndView(\"FCFlow\", nodeView.model, diagram, options2);\r\n                        break;\r\n                    }\r\n                    break;\r\n                case FlowchartQuickEdit.QUICKEDIT_EDGE:\r\n                    switch (itemId) {\r\n                    case FlowchartQuickEdit.ITEM_ADD:\r\n                        QuickEdit.addInQuickEdit(view.model._parent, 'columns', view._parent._parent, 'columnCompartment', type.ERDColumn, 'Column');\r\n                        break;\r\n                    case FlowchartQuickEdit.ITEM_DELETE:\r\n                        QuickEdit.deleteInQuickEdit(view);\r\n                        break;\r\n                    case FlowchartQuickEdit.ITEM_MOVEUP:\r\n                        QuickEdit.moveUpInQuickEdit(view.model._parent, 'columns', view);\r\n                        break;\r\n                    case FlowchartQuickEdit.ITEM_MOVEDOWN:\r\n                        QuickEdit.moveDownInQuickEdit(view.model._parent, 'columns', view);\r\n                        break;\r\n                    }\r\n                    break;\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    \r\n    AppInit.htmlReady(function () {\r\n        setupQuickEdit();\r\n    });\r\n    \r\n});\r\n\n//# sourceURL=/flowchart/main.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true, vars: true */\r\n/*global define, $, _, window, appshell, type, Mustache */\r\n\r\ndefine(\'common/CommonFactory\',[\'require\',\'exports\',\'module\',\'engine/Factory\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Factory = require("engine/Factory");\r\n\r\n    // Common Elements\r\n    Factory.registerModelFn("Tag", Factory.defaultModelFn);\r\n\r\n    // Annotations\r\n    Factory.registerModelAndViewFn("Text",      Factory.defaultViewOnlyFn, { viewType: "UMLTextView" });\r\n    Factory.registerModelAndViewFn("Note",      Factory.defaultViewOnlyFn, { viewType: "UMLNoteView" });\r\n    Factory.registerModelAndViewFn("NoteLink",  Factory.defaultEdgeViewOnlyFn, { viewType: "UMLNoteLinkView" });\r\n    Factory.registerModelAndViewFn("Hyperlink", Factory.defaultModelAndViewFn);\r\n    Factory.registerModelAndViewFn("Rect",      Factory.defaultViewOnlyFn, { viewType: "RectangleView" });\r\n    Factory.registerModelAndViewFn("RoundRect", Factory.defaultViewOnlyFn, { viewType: "RoundRectView" });\r\n    Factory.registerModelAndViewFn("Ellipse",   Factory.defaultViewOnlyFn, { viewType: "EllipseView" });\r\n\r\n});\r\n\n//# sourceURL=/common/CommonFactory.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell */\r\ndefine('common/CommonCommands',['require','exports','module'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    exports.MODEL_ADD_TAG = 'model.add.tag';\r\n\r\n});\r\n\n//# sourceURL=/common/CommonCommands.js"),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell */\r\ndefine(\'common/CommonCommandHandlers\',[\'require\',\'exports\',\'module\',\'core/Repository\',\'engine/Factory\',\'engine/SelectionManager\',\'command/CommandManager\',\'common/CommonCommands\',\'strings\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var Repository        = require("core/Repository"),\r\n        Factory           = require("engine/Factory"),\r\n        SelectionManager  = require("engine/SelectionManager"),\r\n        CommandManager    = require("command/CommandManager"),\r\n        CommonCommands    = require("common/CommonCommands"),\r\n        Strings           = require("strings");\r\n\r\n    function _updateCommands() {\r\n        var models = SelectionManager.getSelectedModels(),\r\n            views = SelectionManager.getSelectedViews(),\r\n            selected = SelectionManager.getSelected();\r\n\r\n        var isNone = (!selected),\r\n            isExtensibleModel = selected instanceof type.ExtensibleModel;\r\n\r\n        CommandManager.get(CommonCommands.MODEL_ADD_TAG).setVisible(isExtensibleModel);\r\n    }\r\n\r\n    CommandManager.register(Strings.CMD_MODEL_ADD_TAG, CommonCommands.MODEL_ADD_TAG, _.partial(Factory.createModel, "Tag", null, "tags"));\r\n\r\n    // Update Commands\r\n    $(SelectionManager).on("selectionChanged", _updateCommands);\r\n    $(Repository).on("operationExecuted", _updateCommands);\r\n\r\n});\r\n\n//# sourceURL=/common/CommonCommandHandlers.js'),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, appshell */\r\ndefine('common/CommonMenu',['require','exports','module','utils/AppInit','command/Commands','menu/MenuManager','menu/ContextMenuManager','menu/DefaultMenus','common/CommonCommands'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var AppInit            = require(\"utils/AppInit\"),\r\n        Commands           = require(\"command/Commands\"),\r\n        MenuManager        = require(\"menu/MenuManager\"),\r\n        ContextMenuManager = require(\"menu/ContextMenuManager\"),\r\n        DefaultMenus       = require(\"menu/DefaultMenus\"),\r\n        CommonCommands     = require(\"common/CommonCommands\");\r\n\r\n    function setupMenus() {\r\n        var menuItem;\r\n        menuItem = MenuManager.getMenuItem(Commands.MODEL_ADD);\r\n        menuItem.addMenuItem(CommonCommands.MODEL_ADD_TAG, null, null, null, \"icon-Tag\");\r\n    }\r\n\r\n    function setupContextMenuForDiagram() {\r\n        var contextMenu, menu, menuItem;\r\n        contextMenu = ContextMenuManager.getContextMenu(DefaultMenus.contextMenus.DIAGRAM);\r\n\r\n        // Model Add\r\n        menu = contextMenu.getMenuItem(Commands.MODEL_ADD);\r\n        menu.addMenuItem(CommonCommands.MODEL_ADD_TAG, \"icon-Tag\");\r\n    }\r\n\r\n    function setupContextMenuForExplorer() {\r\n        var contextMenu, menu;\r\n        contextMenu = ContextMenuManager.getContextMenu(DefaultMenus.contextMenus.EXPLORER);\r\n\r\n        // Model Add\r\n        menu = contextMenu.getMenuItem(Commands.MODEL_ADD);\r\n        menu.addMenuItem(CommonCommands.MODEL_ADD_TAG, \"icon-Tag\");\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupMenus();\r\n        setupContextMenuForDiagram();\r\n        setupContextMenuForExplorer();\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/common/CommonMenu.js"),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, appshell, type */\r\n\r\ndefine('common/CommonToolbox',['require','exports','module','utils/AppInit','core/Repository','engine/Factory','diagrams/ToolboxView','dialogs/Dialogs','ui/Toast','ui/QuickEdit','uml/UML','uml/UMLDiagram','uml/UMLFactory','uml/UMLToolbox','erd/ERDToolbox','flowchart/FlowchartToolbox'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var AppInit                 = require(\"utils/AppInit\"),\r\n        Repository              = require(\"core/Repository\"),\r\n        Factory                 = require(\"engine/Factory\"),\r\n        Toolbox                 = require(\"diagrams/ToolboxView\"),\r\n        Dialogs                 = require(\"dialogs/Dialogs\"),\r\n        Toast                   = require(\"ui/Toast\"),\r\n        QuickEdit               = require(\"ui/QuickEdit\"),\r\n        UML                     = require(\"uml/UML\"),\r\n        UMLDiagram              = require(\"uml/UMLDiagram\"),\r\n        UMLFactory              = require(\"uml/UMLFactory\");\r\n\r\n    // for loading priority\r\n    require(\"uml/UMLToolbox\");\r\n    require(\"erd/ERDToolbox\");\r\n    require(\"flowchart/FlowchartToolbox\");\r\n\r\n    /**\r\n     * Toolbox Groups\r\n     * @const\r\n     */\r\n    var TXG_ANNOTATION         = 'txg-annotation';\r\n\r\n    /**\r\n     * Toolbox Items\r\n     * @const\r\n     */\r\n    var TX_TEXT                 = 'tx-text',\r\n        TX_NOTE                 = 'tx-note',\r\n        TX_NOTELINK             = 'tx-notelink',\r\n        TX_HYPERLINK            = 'tx-hyperlink',\r\n        TX_RECT                 = 'tx-rect',\r\n        TX_ROUNDRECT            = 'tx-roundrect',\r\n        TX_ELLIPSE              = 'tx-ellipse';\r\n\r\n    /**\r\n     * Error Messages\r\n     */\r\n    var ERR_INVALID_PARENT = \"{{.}} cannot be placed here.\",\r\n        ERR_INVALID_LINK   = \"Invalid connection ({{.}})\";\r\n\r\n\r\n    function setupToolbox() {\r\n        // Annotation\r\n        Toolbox.addGroup(TXG_ANNOTATION, 'Annotations', []); // for all diagrams\r\n        Toolbox.addItem(TX_TEXT,      TXG_ANNOTATION, 'Text',              'icon-UMLText',          'rect');\r\n        Toolbox.addItem(TX_NOTE,      TXG_ANNOTATION, 'Note',              'icon-UMLNote',          'rect');\r\n        Toolbox.addItem(TX_NOTELINK,  TXG_ANNOTATION, 'Note Link',         'icon-UMLNoteLink',      'line');\r\n        Toolbox.addItem(TX_HYPERLINK, TXG_ANNOTATION, 'Hyperlink',         'icon-Hyperlink',        'rect');\r\n        Toolbox.addItem(TX_RECT,      TXG_ANNOTATION, 'Rectangle',         'icon-Rectangle',        'rect');\r\n        Toolbox.addItem(TX_ROUNDRECT, TXG_ANNOTATION, 'Rounded Rectangle', 'icon-RoundedRectangle', 'rect');\r\n        Toolbox.addItem(TX_ELLIPSE,   TXG_ANNOTATION, 'Ellipse',           'icon-Ellipse',          'rect');\r\n\r\n        // Event Handling\r\n        $(Toolbox).on('elementCreated', function (event, id, editor, x1, y1, x2, y2) {\r\n            try {\r\n                var diagram   = editor.diagram,\r\n                    parent    = diagram._parent,\r\n                    model     = null,\r\n                    view      = null,\r\n                    tailView  = diagram.getViewAt(editor.canvas, x1, y1, true),\r\n                    headView  = diagram.getViewAt(editor.canvas, x2, y2, true),\r\n                    tailModel = tailView ? tailView.model : null,\r\n                    headModel = headView ? headView.model : null,\r\n                    viewTypes;\r\n\r\n                var options = {\r\n                        x1        : x1,\r\n                        y1        : y1,\r\n                        x2        : x2,\r\n                        y2        : y2,\r\n                        tailView  : diagram.getViewAt(editor.canvas, x1, y1, true),\r\n                        headView  : diagram.getViewAt(editor.canvas, x2, y2, true),\r\n                        tailModel : tailView ? tailView.model : null,\r\n                        headModel : headView ? headView.model : null\r\n                    };\r\n\r\n                switch (id) {\r\n                case TX_TEXT:\r\n                    if ((options.x2 - options.x1) < 5) { options.x2 = options.x1 + 60; }\r\n                    if ((options.y2 - options.y1) < 5) { options.y2 = options.y1 + 15; }\r\n                    view = Factory.createModelAndView(\"Text\", parent, diagram, options);\r\n                    break;\r\n                case TX_NOTE:\r\n                    if ((options.x2 - options.x1) < 5) { options.x2 = options.x1 + 70; }\r\n                    if ((options.y2 - options.y1) < 5) { options.y2 = options.y1 + 40; }\r\n                    view = Factory.createModelAndView(\"Note\", parent, diagram, options);\r\n                    break;\r\n                case TX_NOTELINK:\r\n                    view = Factory.createModelAndView(\"NoteLink\", parent, diagram, options);\r\n                    break;\r\n                case TX_HYPERLINK:\r\n                    if ((options.x2 - options.x1) < 5) { options.x2 = options.x1 + 70; }\r\n                    if ((options.y2 - options.y1) < 5) { options.y2 = options.y1 + 20; }\r\n                    view = Factory.createModelAndView(\"Hyperlink\", parent, diagram, options);\r\n                    break;\r\n                case TX_RECT:\r\n                    if ((options.x2 - options.x1) < 5) { options.x2 = options.x1 + 50; }\r\n                    if ((options.y2 - options.y1) < 5) { options.y2 = options.y1 + 50; }\r\n                    view = Factory.createModelAndView(\"Rect\", parent, diagram, options);\r\n                    break;\r\n                case TX_ROUNDRECT:\r\n                    if ((options.x2 - options.x1) < 5) { options.x2 = options.x1 + 50; }\r\n                    if ((options.y2 - options.y1) < 5) { options.y2 = options.y1 + 50; }\r\n                    view = Factory.createModelAndView(\"RoundRect\", parent, diagram, options);\r\n                    break;\r\n                case TX_ELLIPSE:\r\n                    if ((options.x2 - options.x1) < 5) { options.x2 = options.x1 + 50; }\r\n                    if ((options.y2 - options.y1) < 5) { options.y2 = options.y1 + 50; }\r\n                    view = Factory.createModelAndView(\"Ellipse\", parent, diagram, options);\r\n                    break;\r\n                }\r\n\r\n                // Open QuickEdit for the created view.\r\n                if (view) {\r\n                    view = Repository.get(view._id);\r\n                    if (view instanceof type.NodeView) {\r\n                        _.defer(function () {\r\n                            QuickEdit.open(editor, view, view.left, view.top);\r\n                        });\r\n                    } else if (view instanceof type.EdgeView) {\r\n                        _.defer(function () {\r\n                            QuickEdit.open(editor, view, Math.round((x1 + x2) / 2), Math.round((y1 + y2) / 2));\r\n                        });\r\n                    }\r\n                }\r\n\r\n            } catch (err) {\r\n                if (_.isString(err)) {\r\n                    Toast.error(err);\r\n                } else {\r\n                    console.error(err.stack);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupToolbox();\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/common/CommonToolbox.js"),eval("/*\r\n * Copyright (c) 2014 MKLab. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, app, type, appshell, document */\r\n\r\ndefine('common/main',['require','exports','module','common/CommonFactory','common/CommonCommandHandlers','common/CommonMenu','common/CommonToolbox'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    require(\"common/CommonFactory\");\r\n    require(\"common/CommonCommandHandlers\");\r\n    require(\"common/CommonMenu\");\r\n    require(\"common/CommonToolbox\");\r\n\r\n});\r\n\n//# sourceURL=/common/main.js"),eval("/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global define, $, _, window, type, app, appshell, document, localStorage, setInterval */\r\ndefine('Application',['require','exports','module','core/Global','utils/Initializer','utils/Helper','utils/AppInit','utils/ExtensionUtils','utils/PanelManager','core/Graphics','core/Core','core/MetaModelManager','core/PreferenceManager','preference/PreferenceDialog','core/Repository','engine/ProjectManager','core/OperationBuilder','engine/Engine','engine/SelectionManager','engine/ClipboardManager','engine/Factory','extensibility/ExtensionManager','extensibility/ExtensionManagerDialog','file/FileUtils','filesystem/FileSystem','filesystem/FileSystemError','command/CommandManager','command/Commands','utils/KeyEvent','explorer/NavigatorView','explorer/ModelExplorerView','editors/EditorsHolder','editors/StyleEditorView','editors/PropertyEditorView','editors/DocumentationEditorView','diagrams/DiagramManager','diagrams/SidebarView','diagrams/WorkingDiagramsView','diagrams/ToolboxView','ui/Toolbar','ui/StatusBar','dialogs/Dialogs','dialogs/AboutDialog','ui/QuickEdit','dialogs/ElementPickerDialog','utils/CheckUpdates','utils/Analytics','license/LicenseManager','validation/Validator','utils/FontManager','core/Core-meta','core/Core-rules','utils/ExtensionUtils','utils/NodeDomain','utils/Async','command/KeyBindingManager','menu/DefaultMenus','command/DefaultCommandHandlers','menu/RecentFiles','preference/DefaultPreferences','uml/main','erd/main','flowchart/main','common/main','core/Core','core/Core','diagrams/Editor'],function (require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var _global                 = require(\"core/Global\").global,\r\n        Initializer             = require(\"utils/Initializer\"),\r\n        Helper                  = require(\"utils/Helper\"),\r\n        AppInit                 = require(\"utils/AppInit\"),\r\n        ExtensionUtils          = require(\"utils/ExtensionUtils\"),\r\n        PanelManager            = require(\"utils/PanelManager\"),\r\n        Graphics                = require(\"core/Graphics\"),\r\n        Core                    = require(\"core/Core\"),\r\n        MetaModelManager        = require(\"core/MetaModelManager\"),\r\n        PreferenceManager       = require(\"core/PreferenceManager\"),\r\n        PreferenceDialog        = require(\"preference/PreferenceDialog\"),\r\n        Repository              = require(\"core/Repository\"),\r\n        ProjectManager          = require(\"engine/ProjectManager\"),\r\n        OperationBuilder        = require(\"core/OperationBuilder\"),\r\n        Engine                  = require(\"engine/Engine\"),\r\n        SelectionManager        = require(\"engine/SelectionManager\"),\r\n        ClipboardManager        = require(\"engine/ClipboardManager\"),\r\n        Factory                 = require(\"engine/Factory\"),\r\n        ExtensionManager        = require(\"extensibility/ExtensionManager\"),\r\n        ExtensionManagerDialog  = require(\"extensibility/ExtensionManagerDialog\"),\r\n        FileUtils               = require(\"file/FileUtils\"),\r\n        FileSystem              = require(\"filesystem/FileSystem\"),\r\n        FileSystemError         = require(\"filesystem/FileSystemError\"),\r\n        CommandManager          = require(\"command/CommandManager\"),\r\n        Commands                = require(\"command/Commands\"),\r\n        KeyEvent                = require(\"utils/KeyEvent\"),\r\n        NavigatorView           = require(\"explorer/NavigatorView\"),\r\n        ModelExplorerView       = require(\"explorer/ModelExplorerView\"),\r\n        EditorsHolder           = require(\"editors/EditorsHolder\"),\r\n        StyleEditorView         = require(\"editors/StyleEditorView\"),\r\n        PropertyEditorView      = require(\"editors/PropertyEditorView\"),\r\n        DocumentationEditorView = require(\"editors/DocumentationEditorView\"),\r\n        DiagramManager          = require(\"diagrams/DiagramManager\"),\r\n        SidebarView             = require(\"diagrams/SidebarView\"),\r\n        WorkingDiagramsView     = require(\"diagrams/WorkingDiagramsView\"),\r\n        ToolboxView             = require(\"diagrams/ToolboxView\"),\r\n        Toolbar                 = require(\"ui/Toolbar\"),\r\n        StatusBar               = require(\"ui/StatusBar\"),\r\n        Dialogs                 = require(\"dialogs/Dialogs\"),\r\n        AboutDialog             = require(\"dialogs/AboutDialog\"),\r\n        QuickEdit               = require(\"ui/QuickEdit\"),\r\n        ElementPickerDialog     = require(\"dialogs/ElementPickerDialog\"),\r\n        CheckUpdates            = require(\"utils/CheckUpdates\"),\r\n        Analytics               = require(\"utils/Analytics\"),\r\n        LicenseManager          = require(\"license/LicenseManager\"),\r\n        Validator               = require(\"validation/Validator\"),\r\n        FontManager             = require(\"utils/FontManager\");\r\n\r\n    require(\"core/Core-meta\");\r\n    require(\"core/Core-rules\");\r\n\r\n    // for dependency\r\n    require(\"utils/ExtensionUtils\");\r\n    require(\"utils/NodeDomain\");\r\n    require(\"utils/Async\");\r\n\r\n    // for New Menu Testing\r\n    require(\"command/KeyBindingManager\");\r\n    require(\"menu/DefaultMenus\");\r\n    require(\"command/DefaultCommandHandlers\");\r\n    require(\"menu/RecentFiles\");\r\n    require(\"preference/DefaultPreferences\");\r\n\r\n    // load UML/main\r\n    require(\"uml/main\");\r\n\r\n    // load ERD/main\r\n    require(\"erd/main\");\r\n\r\n    // load Flowchart/main\r\n    require(\"flowchart/main\");\r\n\r\n    // load Common/main\r\n    require(\"common/main\");\r\n\r\n\r\n    var Model         = require(\"core/Core\").Model,\r\n        Diagram       = require(\"core/Core\").Diagram,\r\n        Editor        = require(\"diagrams/Editor\").Editor;\r\n\r\n    var APP_NAME = app.metadata.name;\r\n\r\n    var AUTO_BACKUP_INTERVAL = 1000 * 60 * 5; // 5 minutes.\r\n\r\n\r\n    // Preferences\r\n    var PREF_GENERAL   = 'staruml-general',\r\n        PREF_VIEWSTYLE = 'view-style',\r\n        PREF_FONT      = \"font\",\r\n        PREF_FONTSIZE  = \"font-size\",\r\n        PREF_FILLCOLOR = \"fill-color\",\r\n        PREF_LINECOLOR = \"line-color\",\r\n        PREF_FONTCOLOR = \"font-color\",\r\n        PREF_LINESTYLE = \"line-style\";\r\n\r\n    // Icons\r\n    var ICON_FILL_COLOR  = \"tool-icon-fill-color\",\r\n        ICON_LINE_COLOR  = \"tool-icon-line-color\",\r\n        ICON_FONT_COLOR  = \"tool-icon-font-color\",\r\n        ICON_AUTO_RESIZE = \"tool-icon-auto-resize\";\r\n\r\n    // Toolbar Items\r\n    var TB_FILL_COLOR     = 'toolbar-fill-color',\r\n        TB_LINE_COLOR     = 'toolbar-line-color',\r\n        TB_FONT_COLOR     = 'toolbar-font-color',\r\n        TB_FONT_FACE      = 'toolbar-font-face',\r\n        TB_FONT_SIZE      = 'toolbar-font-size',\r\n        TB_LINE_STYLE     = 'toolbar-line-style',\r\n        TB_AUTO_RESIZE    = 'toolbar-auto-resize';\r\n\r\n\r\n    function updateTitlebar() {\r\n        var filename = ProjectManager.getFilename(),\r\n            title = \"\";\r\n\r\n        if (Repository.isModified()) {\r\n            title += \"• \";\r\n        }\r\n\r\n        if (filename && filename.length > 0) {\r\n            filename = FileUtils.getBaseName(filename);\r\n            title += filename + \" — \";\r\n        }\r\n\r\n        title += APP_NAME;\r\n\r\n        var license = LicenseManager.getStatus();\r\n        if (LicenseManager.STAT_REGISTERED !== license && license) {\r\n            title += \" (\" + license + \")\";\r\n        }\r\n\r\n        $(\"title\").html(title);\r\n    }\r\n\r\n\r\n    /**\r\n     * Repository Setup\r\n     */\r\n    function setupRepository() {\r\n        $(Repository).on('created', function (event, elems) {\r\n            try {\r\n                _.forEach(elems, function (elem) {\r\n                    if (elem instanceof Core.Model) {\r\n                        ModelExplorerView.add(elem, true);\r\n                        ModelExplorerView.select(elem, true);\r\n                    }\r\n                });\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(Repository).on('updated', function (event, elems) {\r\n            try {\r\n                _.forEach(elems, function (elem) {\r\n                    if (elem instanceof Diagram) {\r\n                        DiagramManager.updateDiagram(elem);\r\n                    }\r\n                    if (SelectionManager.getSelected() === elem) {\r\n                        PropertyEditorView.show(SelectionManager.getSelectedModels());\r\n                        DocumentationEditorView.show(elem);\r\n                    }\r\n                    // update ModelExplorer\r\n                    ModelExplorerView.update(elem);\r\n                    // update Relations of elem in ModelExplorer\r\n                    var relations = Repository.getRelationshipsOf(elem);\r\n                    if (relations.length > 0) {\r\n                        _.each(relations, function (rel) {\r\n                            ModelExplorerView.update(rel);\r\n                        });\r\n                    }\r\n                });\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(Repository).on('deleted', function (event, elems) {\r\n            try {\r\n                _.forEach(elems, function (elem) {\r\n                    if (elem instanceof _global.type.Model) {\r\n                        ModelExplorerView.remove(elem);\r\n                    }\r\n                });\r\n                // Close deleted diagrams\r\n                _.forEach(DiagramManager.getWorkingDiagrams(), function (dgm) {\r\n                    if (!Repository.get(dgm._id)) {\r\n                        DiagramManager.closeDiagram(dgm);\r\n                    }\r\n                });\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(Repository).on('reordered', function (event, elem) {\r\n            try {\r\n                if (elem instanceof _global.type.Model) {\r\n                    ModelExplorerView.remove(elem);\r\n                    ModelExplorerView.add(elem, true);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(Repository).on('relocated', function (event, elem, field, oldParent, newParent) {\r\n            try {\r\n                if (elem instanceof _global.type.Model) {\r\n                    ModelExplorerView.remove(elem);\r\n                    ModelExplorerView.add(elem, true);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(Repository).on('operationExecuted', function (event, operation) {\r\n            try {\r\n                var elems = Repository.extractChanged(operation);\r\n                if (DiagramManager.needRepaint(elems)) {\r\n                    DiagramManager.repaint();\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(Repository).on('modified', function (event) {\r\n            try {\r\n                updateTitlebar();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Factory Setup\r\n     */\r\n    function setupFactory() {\r\n        $(Factory).on('diagramCreated', function (event, diagram) {\r\n            DiagramManager.setCurrentDiagram(diagram);\r\n            ModelExplorerView.select(diagram, true);\r\n        });\r\n        $(Factory).on('elementCreated', function (event, model, view) {\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * ProjectManager Setup\r\n     */\r\n    function setupProjectManager() {\r\n        $(ProjectManager).on('projectCreated', function (event, project) {\r\n            try {\r\n                DiagramManager.closeAll();\r\n                ModelExplorerView.rebuild();\r\n                updateTitlebar();\r\n                ToolboxView.setDiagram(null);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(ProjectManager).on('projectLoaded', function (event, filename, project) {\r\n            try {\r\n                ModelExplorerView.rebuild();\r\n                ModelExplorerView.expand(project);\r\n                updateTitlebar();\r\n\r\n                // Remember working file so as to open the working file when app is launched.\r\n                if (filename) {\r\n                    localStorage.setItem(\"__working_filename\", filename);\r\n                }\r\n\r\n                // Open default diagrams\r\n                var defaultDiagrams = Repository.findAll(function (elem) {\r\n                    return (elem instanceof _global.type.Diagram && elem.defaultDiagram === true);\r\n                });\r\n                _.each(defaultDiagrams, function (diagram) {\r\n                    DiagramManager.openDiagram(diagram);\r\n                });\r\n\r\n                if (defaultDiagrams.length > 0) {\r\n                    DiagramManager.setCurrentDiagram(defaultDiagrams[0]);\r\n                }\r\n                DiagramManager.restoreWorkingDiagrams();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(ProjectManager).on('projectSaved', function (event, filename, project) {\r\n            try {\r\n                updateTitlebar();\r\n                DiagramManager.saveWorkingDiagrams();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(ProjectManager).on('beforeProjectClose', function (event, filename, project) {\r\n            try {\r\n                DiagramManager.saveWorkingDiagrams();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(ProjectManager).on('projectClosed', function (event) {\r\n            try {\r\n                DiagramManager.closeAll();\r\n                ModelExplorerView.rebuild();\r\n                ToolboxView.setDiagram(null);\r\n                PropertyEditorView.show(null);\r\n                DocumentationEditorView.show(null);\r\n                updateTitlebar();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        $(ProjectManager).on('exported', function (event, filename, elem) {\r\n        });\r\n\r\n        $(ProjectManager).on('imported', function (event, filename, elem) {\r\n            try {\r\n                ModelExplorerView.add(elem, true);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * SelectionManager Setup\r\n     */\r\n    function setupSelectionManager() {\r\n        $(SelectionManager).on('selectionChanged', function (event, models, views) {\r\n            try {\r\n                if (views.length > 0) {\r\n                    console.log(views[0]); // for TEST\r\n                    ModelExplorerView.deselect();\r\n                } else {\r\n                    DiagramManager.deselectAll();\r\n                }\r\n\r\n                // Update Property/Documentation/Tag Editor\r\n                if (models.length === 1) {\r\n                    DocumentationEditorView.show(models[0]);\r\n                    StatusBar.setElement(models[0]);\r\n                } else {\r\n                    DocumentationEditorView.show(null);\r\n                    StatusBar.setElement(null);\r\n                }\r\n\r\n                // Update StyleEditor\r\n                StyleEditorView.show(views);\r\n\r\n                // Update PropertyEditor\r\n                PropertyEditorView.show(models);\r\n\r\n                // Update DiagramManager\r\n\r\n                if (DiagramManager.needRepaint(_.union(models, views))) {\r\n                    DiagramManager.repaint();\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupModelExplorer() {\r\n        $(ModelExplorerView).on('selected', function (event, elem) {\r\n            try {\r\n                SelectionManager.select([elem], null);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(ModelExplorerView).on('doubleClicked', function (event, elem) {\r\n            try {\r\n                if (elem instanceof Diagram) {\r\n                    DiagramManager.setCurrentDiagram(elem);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        // 모델 요소를 ModelExplorer 내에서 Drag 할때, Accept 여부 판단.\r\n        $(ModelExplorerView).on('dragOver', function (event, dragEvent) {\r\n            try {\r\n                var source = dragEvent.source,\r\n                    target = dragEvent.target,\r\n                    field  = dragEvent.source.getParentField();\r\n                if (target[field] && target.canContain(source)) {\r\n                    dragEvent.accept = true;\r\n                } else {\r\n                    dragEvent.accept = false;\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        // 모델 요소를 ModelExplorer 내에서 Drop 할때.\r\n        $(ModelExplorerView).on('drop', function (event, dropEvent) {\r\n            try {\r\n                var source = dropEvent.source,\r\n                    target = dropEvent.target,\r\n                    field  = dropEvent.source.getParentField();\r\n                if (target.canContain(source) && target[field]) {\r\n                    Engine.relocate(source, target, field);\r\n                    ModelExplorerView.select(source, true);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        // 모델 요소를 ModelExplorer에서 Diagram영역으로 Drag 할때, Accept 여부 판단.\r\n        $(ModelExplorerView).on('dragOverDiagram', function (event, dragEvent) {\r\n            try {\r\n                dragEvent.accept = dragEvent.diagram.canAcceptModel(dragEvent.source);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        // 모델 요소를 ModelExplorer에서 Diagram영역으로 Drop 할때.\r\n        $(ModelExplorerView).on('dropOnDiagram', function (event, dropEvent) {\r\n            try {\r\n                if (dropEvent.diagram.canAcceptModel(dropEvent.source)) {\r\n                    var editor        = DiagramManager.getEditor(),\r\n                        diagram       = editor.diagram,\r\n                        model         = dropEvent.source,\r\n                        p             = editor.convertPosition(dropEvent),\r\n                        containerView = diagram.getViewAt(editor.canvas, p.x, p.y, true);\r\n\r\n                    var options = {\r\n                            editor        : editor,\r\n                            x             : p.x,\r\n                            y             : p.y,\r\n                            containerView : containerView\r\n                        };\r\n                    Factory.createViewOf(model, diagram, options);\r\n                    DiagramManager.repaint();\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupStyleEditor() {\r\n        $(StyleEditorView).on('styleChanged', function (event, views, field, value) {\r\n            try {\r\n                if (field === \"font.face\") {\r\n                    Engine.setFontFace(DiagramManager.getEditor(), views, value);\r\n                } else if (field === \"font.size\") {\r\n                    if (!_.isNumber(value)) {\r\n                        value = parseInt(value, 10);\r\n                    }\r\n                    Engine.setFontSize(DiagramManager.getEditor(), views, value);\r\n                } else if (field === \"fillColor\") {\r\n                    Engine.setFillColor(DiagramManager.getEditor(), views, value);\r\n                } else if (field === \"lineColor\") {\r\n                    Engine.setLineColor(DiagramManager.getEditor(), views, value);\r\n                } else if (field === \"fontColor\") {\r\n                    Engine.setFontColor(DiagramManager.getEditor(), views, value);\r\n                } else if (field === \"lineStyle\") {\r\n                    Engine.setLineStyle(DiagramManager.getEditor(), views, value);\r\n                } else if (field === \"autoResize\") {\r\n                    Engine.setAutoResize(DiagramManager.getEditor(), views, value);\r\n                } else {\r\n                    Engine.setElemsProperty(views, field, value);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupPropertyEditor() {\r\n        $(PropertyEditorView).on('propertyChanged', function (event, elems, field, value) {\r\n            try {\r\n                Engine.setElemsProperty(elems, field, value);\r\n                DiagramManager.repaint();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupDocumentationEditor() {\r\n        $(DocumentationEditorView).on('documentationChanged', function (event, elem, value) {\r\n            try {\r\n                Engine.setProperty(elem, 'documentation', value);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupQuickEdit() {\r\n        $(QuickEdit).on('open', function (event, editor, view, x, y) {\r\n            try {\r\n                CommandManager.get(Commands.EDIT_DELETE_FROM_MODEL).setEnabled(false);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(QuickEdit).on('close', function (event, editor, view, x, y) {\r\n            try {\r\n                CommandManager.get(Commands.EDIT_DELETE_FROM_MODEL).setEnabled(true);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupDiagramManager() {\r\n        $(DiagramManager).on('currentDiagramChanged', function (event, diagram, editor) {\r\n            try {\r\n                if (diagram) {\r\n                    ToolboxView.setDiagram(diagram);\r\n                } else {\r\n                    ToolboxView.setDiagram(null);\r\n                }\r\n                QuickEdit.close();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(DiagramManager).on('workingDiagramRemove', function (event, diagram) {\r\n            try {\r\n                SelectionManager.selectViews([]);\r\n                QuickEdit.close();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(DiagramManager).on('mouseDown', function (event, mouseEvent) {\r\n            try {\r\n                QuickEdit.close();\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(DiagramManager).on('selectionChanged', function (event, views) {\r\n            try {\r\n                if (views && views.length > 0) {\r\n                    SelectionManager.selectViews(views);\r\n                    ModelExplorerView.select(null);\r\n                } else {\r\n                    SelectionManager.select([], []);\r\n                    ModelExplorerView.select(null);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(DiagramManager).on('viewDoubleClicked', function (event, view, x, y) {\r\n            try {\r\n                if (view instanceof type.HyperlinkView && view.model instanceof type.Hyperlink) {\r\n                    if (view.model.reference instanceof type.Model) {\r\n                        if (view.model.reference instanceof type.Diagram) {\r\n                            DiagramManager.setCurrentDiagram(view.model.reference);\r\n                        } else {\r\n                            ModelExplorerView.select(view.model.reference);\r\n                        }\r\n                    } else if (view.model.url && view.model.url.length > 0) {\r\n                        appshell.app.openURLInDefaultBrowser(view.model.url);\r\n                    }\r\n                } else {\r\n                    QuickEdit.open(DiagramManager.getEditor(), view, x, y);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(DiagramManager).on('viewMoved', function (event, views, dx, dy) {\r\n            try {\r\n                Engine.moveViews(DiagramManager.getEditor(), views, dx, dy);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(DiagramManager).on('parasiticViewMoved', function (event, view, alpha, distance) {\r\n            try {\r\n                Engine.moveParasiticView(DiagramManager.getEditor(), view, alpha, distance);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(DiagramManager).on('nodeResized', function (event, node, left, top, right, bottom) {\r\n            try {\r\n                Engine.resizeNode(DiagramManager.getEditor(), node, left, top, right, bottom);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n        $(DiagramManager).on('edgeModified', function (event, edge, points) {\r\n            try {\r\n                Engine.modifyEdge(DiagramManager.getEditor(), edge, points);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n        // -- Move to uml/main.js (to treat UMLSeqMessageView's reconnect specially)\r\n        // $(DiagramManager).on('edgeReconnected', function (event, edge, points, newParticipant, isTailSide) {\r\n        //     Engine.reconnectEdge(DiagramManager.getEditor(), edge, points, newParticipant, isTailSide);\r\n        // });\r\n    }\r\n\r\n    function setupKeyBindings() {\r\n        $(\"body\").keydown(function (e) {\r\n            switch (e.which) {\r\n            case KeyEvent.DOM_VK_PLUS:\r\n            case 187: // '=' Key\r\n                if (e.ctrlKey || e.metaKey) {\r\n                    CommandManager.execute(Commands.VIEW_ZOOM_IN);\r\n                }\r\n                break;\r\n            case KeyEvent.DOM_VK_MINUS:\r\n            case 189: // '-' Key\r\n                if (e.ctrlKey || e.metaKey) {\r\n                    CommandManager.execute(Commands.VIEW_ZOOM_OUT);\r\n                }\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    function setupLicenseManager() {\r\n        $(LicenseManager).on(\"statusChanged\", function (event, status) {\r\n            updateTitlebar();\r\n        });\r\n    }\r\n\r\n    function setupAutoBackup() {\r\n        setInterval(function () {\r\n            var fullPath = appshell.app.getApplicationSupportDirectory() + \"/__backup.mdj\",\r\n                file = FileSystem.getFileForPath(fullPath),\r\n                project = ProjectManager.getProject();\r\n            if (file && project) {\r\n                var data = Repository.writeObject(project);\r\n                FileUtils.writeText(file, data, true)\r\n                    .done(function () {\r\n                        localStorage.setItem(\"__backup_filename\", fullPath);\r\n                        console.log(\"[AutoBackup] File was backed up: \" + fullPath);\r\n                    })\r\n                    .fail(function (err) {\r\n                        console.error(\"[AutoBackup] Failed to backup file: \", err);\r\n                    });\r\n            }\r\n        }, AUTO_BACKUP_INTERVAL);\r\n    }\r\n\r\n\r\n    function startAnalytics() {\r\n        Analytics.sendExecution();\r\n        $(CommandManager).on(\"beforeExecuteCommand\", function (event, commandId) {\r\n\r\n            // for Debugging\r\n            localStorage.setItem(\"__recent_command__\", commandId);\r\n\r\n            // Analytics.sendCommand(commandId);\r\n        });\r\n    }\r\n\r\n    function start() {\r\n        // Load Web Fonts\r\n        // loadFonts();\r\n\r\n        // Prevent Default Context Menu\r\n        document.oncontextmenu = function () { return false; };\r\n    }\r\n\r\n    AppInit.htmlReady(function () {\r\n        setupRepository();\r\n        setupProjectManager();\r\n        setupFactory();\r\n        setupSelectionManager();\r\n        setupModelExplorer();\r\n        setupStyleEditor();\r\n        setupPropertyEditor();\r\n        setupDocumentationEditor();\r\n        setupQuickEdit();\r\n        setupDiagramManager();\r\n        setupKeyBindings();\r\n        setupLicenseManager();\r\n        setupAutoBackup();\r\n        start();\r\n    });\r\n\r\n    AppInit.appReady(function () {\r\n        // startup\r\n        SelectionManager.deselectAll();\r\n        StatusBar.setZoomLevel(DiagramManager.getZoomLevel());\r\n        ModelExplorerView.select(ProjectManager.getProject());\r\n        ToolboxView.setDiagram(null);\r\n\r\n        // To compute correct initial size of diagram-editor.\r\n        PanelManager._notifyLayoutChange();\r\n\r\n        startAnalytics();\r\n        CheckUpdates.checkForUpdates().done(function (newRelease) {\r\n            if (PreferenceManager.get(\"checkUpdate.showUpdateDialog\") === true) {\r\n                CheckUpdates.showUpdateDialog(newRelease);\r\n            }\r\n        });\r\n        CheckUpdates.checkExtensionUpdates();\r\n    });\r\n\r\n});\r\n\n//# sourceURL=/Application.js"),eval('/*\r\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the "Software"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\r\n/*global define, app */\r\n\r\ndefine(\'utils/DebugUtils\',[\'require\',\'exports\',\'module\',\'core/Global\',\'utils/Initializer\',\'file/FileUtils\',\'filesystem/FileSystem\',\'utils/Analytics\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var _global     = require("core/Global").global,\r\n        Initializer = require("utils/Initializer"),\r\n        FileUtils   = require("file/FileUtils"),\r\n        FileSystem  = require("filesystem/FileSystem"),\r\n        Analytics   = require("utils/Analytics");\r\n\r\n    var _originalConsoleErrorFun = console.error;\r\n\r\n    // Check Development Mode\r\n    _global.app.devMode = false;\r\n    var testPath = FileUtils.getApplicationDirectoryPath() + "/test",\r\n        dir = FileSystem.getDirectoryForPath(testPath);\r\n    dir.exists(function (err, exists) {\r\n        if (!err && exists) {\r\n            app.devMode = true;\r\n        }\r\n    });\r\n\r\n\r\n    /*\r\n\r\n    // Hijack console.error functions to collect error messages\r\n    console.error = function (err) {\r\n        _originalConsoleErrorFun.apply(console, arguments);\r\n        if (!app.devMode) {\r\n            var op  = localStorage.getItem("__staruml_recent_operation__"),\r\n                cmd = localStorage.getItem("__staruml_recent_command__");\r\n            Analytics.sendError(op, cmd, err.stack);\r\n        }\r\n    }\r\n\r\n    // Collect all errors which were not caught\r\n    window.onerror = function (message, url, lineNumber) {\r\n        if (!app.devMode) {\r\n            var op  = localStorage.getItem("__staruml_recent_operation__"),\r\n                cmd = localStorage.getItem("__staruml_recent_command__");\r\n            Analytics.sendError(op, cmd, null, message, url, lineNumber);\r\n        }\r\n    }\r\n\r\n    */\r\n\r\n});\r\n\n//# sourceURL=/utils/DebugUtils.js'),eval('/*\r\n * Copyright (c) 2013-2014 Minkyu Lee. All rights reserved.\r\n *\r\n * NOTICE:  All information contained herein is, and remains the\r\n * property of Minkyu Lee. The intellectual and technical concepts\r\n * contained herein are proprietary to Minkyu Lee and may be covered\r\n * by Republic of Korea and Foreign Patents, patents in process,\r\n * and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Minkyu Lee (niklaus.lee@gmail.com).\r\n *\r\n */\r\n\r\n// TODO: KendoUI를 써서도 동적인 UI 개발이 가능하도록 할 수 있을듯. (아래 참고)\r\n/*\r\n * (플러그인 개발자는 KendoUI를 몰라도 가능해야 한다. HTML/CSS 수준으로 UI 확장 가능하도록 해야 함.)\r\n *\r\n * 1. 플러그인은 직접 HTML 코드를 삽입한다. CSS class를 지정한다.\r\n * 2. htmlReady 시에, jQuery selector를 사용해서 특정 CSS class를 모두 선택하여 kendoUI 위젯화 시킨다.\r\n *      e.g.) $(".ui-dropdown").kendoDropdown(..)\r\n * 3. 코드에서 이벤트를 받거나 하고 싶으면 id 값을 이용하도록 한다.\r\n */\r\n\r\n\r\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\r\n/*global require, define, $, _, document, window, navigator, app, appshell, localStorage, Mustache */\r\n\r\nrequire.config({\r\n    paths: {\r\n        "text"           : "thirdparty/text/text",\r\n        "fileSystemImpl" : "filesystem/impls/appshell/AppshellFileSystem"\r\n    }\r\n});\r\n\r\ndefine(\'main\',[\'require\',\'exports\',\'module\',\'utils/AppInit\',\'core/Global\',\'utils/Initializer\',\'core/Core\',\'core/Repository\',\'engine/ProjectManager\',\'engine/Engine\',\'engine/SelectionManager\',\'command/CommandManager\',\'command/Commands\',\'file/FileUtils\',\'filesystem/FileSystem\',\'dialogs/Dialogs\',\'dialogs/ElementPickerDialog\',\'ui/Toast\',\'utils/ExtensionLoader\',\'utils/UrlParams\',\'utils/DragAndDrop\',\'utils/Constants\',\'utils/FontManager\',\'text!htmlContent/main-view.html\',\'text!htmlContent/windows-stylesheet.html\',\'Application\',\'utils/DebugUtils\',\'uml/UMLCommands\'],function (require, exports, module) {\r\n    "use strict";\r\n\r\n    var AppInit             = require("utils/AppInit"),\r\n        _global             = require("core/Global").global,\r\n        Initializer         = require("utils/Initializer"),\r\n        Core                = require("core/Core"),\r\n        Repository          = require("core/Repository"),\r\n        ProjectManager      = require("engine/ProjectManager"),\r\n        Engine              = require("engine/Engine"),\r\n        SelectionManager    = require("engine/SelectionManager"),\r\n        CommandManager      = require("command/CommandManager"),\r\n        Commands            = require("command/Commands"),\r\n        FileUtils           = require("file/FileUtils"),\r\n        FileSystem          = require("filesystem/FileSystem"),\r\n        Dialogs             = require("dialogs/Dialogs"),\r\n        ElementPickerDialog = require("dialogs/ElementPickerDialog"),\r\n        Toast               = require("ui/Toast"),\r\n        ExtensionLoader     = require("utils/ExtensionLoader"),\r\n        UrlParams           = require("utils/UrlParams").UrlParams,\r\n        DragAndDrop         = require("utils/DragAndDrop"),\r\n        Constants           = require("utils/Constants"),        \r\n        FontManager         = require("utils/FontManager"),\r\n        MainViewHTML        = require("text!htmlContent/main-view.html"),\r\n        WindowsStylesheet   = require("text!htmlContent/windows-stylesheet.html");\r\n\r\n    // Load modules that self-register and just need to get included in the main project\r\n    require("Application");\r\n    require("utils/DebugUtils");\r\n\r\n\r\n    // Local variables\r\n    var params = new UrlParams();\r\n\r\n    // read URL params\r\n    params.parse();\r\n\r\n\r\n    function _initTest() {\r\n        _global.app.test = {\r\n            Repository       : Repository,\r\n            ProjectManager   : ProjectManager,\r\n            Engine           : Engine,\r\n            SelectionManager : SelectionManager,\r\n            CommandManager   : CommandManager,\r\n            Commands         : Commands,\r\n            FileUtils        : FileUtils,\r\n            FileSystem       : FileSystem,\r\n            Dialogs          : Dialogs,\r\n            ElementPicker    : ElementPickerDialog,\r\n            UMLCommands      : require("uml/UMLCommands"),\r\n            doneLoading      : false\r\n        };\r\n\r\n        AppInit.appReady(function () {\r\n            _global.app.test.doneLoading = true;\r\n        });\r\n    }\r\n\r\n    \r\n    \r\n    /**\r\n     * Setup before HTML ready.\r\n     */\r\n    function _beforeHTMLReady() {\r\n        // Use quiet scrollbars if we are on Mac OS X\r\n        var macMatch = (navigator.userAgent.indexOf("Mac") > -1);\r\n        if (!macMatch) {\r\n            $("head").append(WindowsStylesheet);\r\n        }\r\n\r\n        // Inject main.html into <BODY> tag\r\n        $("body").html(Mustache.render(MainViewHTML, {}));\r\n\r\n        // Prevent clicks on any link from navigating to a different page (which could lose unsaved\r\n        // changes). We can\'t use a simple .on("click", "a") because of http://bugs.jquery.com/ticket/3861:\r\n        // jQuery hides non-left clicks from such event handlers, yet middle-clicks still cause CEF to\r\n        // navigate. Also, a capture handler is more reliable than bubble.\r\n        window.document.body.addEventListener("click", function (e) {\r\n            // Check parents too, in case link has inline formatting tags\r\n            var node = e.target, url;\r\n            while (node) {\r\n                if (node.tagName === "A") {\r\n                    url = node.getAttribute("href");\r\n                    if (url && !url.match(/^#/)) {\r\n                         appshell.app.openURLInDefaultBrowser(url);\r\n                    }\r\n                    e.preventDefault();\r\n                    break;\r\n                }\r\n                node = node.parentElement;\r\n            }\r\n        }, true);\r\n\r\n\r\n        // Prevent unhandled drag and drop of files into the browser from replacing\r\n        // the entire Brackets app. This doesn\'t prevent children from choosing to\r\n        // handle drops.\r\n        $(window.document.body)\r\n            .on("dragover", function (event) {\r\n                var dropEffect = "none";\r\n                if (event.originalEvent.dataTransfer.files) {\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                    // Don\'t allow drag-and-drop of files/folders when a modal dialog is showing.\r\n                    if ($(".modal.instance").length === 0 && DragAndDrop.isValidDrop(event.originalEvent.dataTransfer.items)) {\r\n                        dropEffect = "copy";\r\n                    }\r\n                    event.originalEvent.dataTransfer.dropEffect = dropEffect;\r\n                }\r\n            })\r\n            .on("drop", function (event) {\r\n                if (event.originalEvent.dataTransfer.files) {\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                    appshell.app.getDroppedFiles(function (err, files) {\r\n                        if (!err) {\r\n                            if (files.length > 0 && FileUtils.getFileExtension(files[0]).toLowerCase() === Constants.APP_EXT) {\r\n                                CommandManager.execute(Commands.FILE_OPEN, files[0]);\r\n                            } else {\r\n                                Toast.info("Can open only a model file (*." + Constants.APP_EXT + ")");\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    function _appReady() {\r\n        // Signal that App is loaded\r\n        AppInit._dispatchReady(AppInit.APP_READY);\r\n\r\n        // Remove splash screen\r\n        $(".splash-screen").remove();\r\n    }\r\n\r\n\r\n    /**\r\n     * Setup when HTML ready.\r\n     */\r\n    function _onReady() {\r\n\r\n        // Load all extensions. This promise will complete even if one or more\r\n        // extensions fail to load.\r\n        var extensionPathOverride = params.get("extensions");  // used by unit tests\r\n        var extensionLoaderPromise = ExtensionLoader.init(extensionPathOverride ? extensionPathOverride.split(",") : null);\r\n\r\n        // Load the initial project after extensions have loaded\r\n        extensionLoaderPromise.always(function () {\r\n            _initTest();\r\n\r\n            // Signal application is ready\r\n            _appReady();\r\n\r\n            // Load Initial Project\r\n            if (!params.get("skipInitialProjectLoad")) {\r\n\r\n                // When application is launched by double-clicking an associated file (e.g. ".mdj")\r\n                appshell.app.getPendingFilesToOpen(function (err, files) {\r\n                    if (!err) {\r\n                        if (files.length > 0) {\r\n                            CommandManager.execute(Commands.FILE_OPEN, files[0]);\r\n                        } else {\r\n                            // if backup file exists, it means app was terminated unexpectedly, then load the backup file.\r\n                            var backupFilePath = localStorage.getItem("__backup_filename");\r\n                            if (!app.devMode && backupFilePath) {\r\n                                Dialogs.showConfirmDialog("App was unexpectedly terminated. Load auto backup file?")\r\n                                    .done(function (buttonId) {\r\n                                        if (buttonId === Dialogs.DIALOG_BTN_OK) {\r\n                                            var backupFile = FileSystem.getFileForPath(backupFilePath);\r\n                                            backupFile.exists(function (err, exists) {\r\n                                                if (!err && exists) {\r\n                                                    ProjectManager.loadAsTemplate(backupFilePath);\r\n                                                } else {\r\n                                                    Dialogs.showAlertDialog("Backup file not found!");\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                            } else {\r\n                                // if there is working file, then load working file.\r\n                                var filePath = localStorage.getItem("__working_filename");\r\n                                if (filePath) {\r\n                                    var file = FileSystem.getFileForPath(filePath);\r\n                                    file.exists(function (err, exists) {\r\n                                        if (!err && exists) {\r\n                                            CommandManager.execute(Commands.FILE_OPEN, filePath);\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    CommandManager.execute(Commands.FILE_NEW);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n    \r\n    \r\n    _beforeHTMLReady();\r\n    \r\n    // Load fonts\r\n    FontManager.loadDefaultFonts().done(function () {\r\n        var ctx = document.getElementById(\'diagram-canvas\').getContext(\'2d\');\r\n        // prevent font lazyloading\r\n        app.config.defaultFonts.forEach(function (font) {\r\n            ctx.font = "12px " + font.value;\r\n            ctx.fillText("A", 0, 0);\r\n            ctx.font = "bold 12px " + font.value;\r\n            ctx.fillText("A", 0, 0);\r\n            ctx.font = "italic 12px " + font.value;\r\n            ctx.fillText("A", 0, 0);\r\n            ctx.font = "italic bold 12px " + font.value;\r\n            ctx.fillText("A", 0, 0);\r\n        });\r\n    });\r\n        \r\n    // Dispatch htmlReady event\r\n    AppInit._dispatchReady(AppInit.HTML_READY);\r\n    AppInit._dispatchReady(AppInit.DOM_READY);\r\n\r\n    $(window.document).ready(_onReady);\r\n\r\n});\r\n\n//# sourceURL=/main.js');

//# sourceMappingURL=main.js
//# sourceMappingURL=main.js.map